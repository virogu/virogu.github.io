<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ADB 其他常用命令</title>
    <link href="/2023/08/31/docs/adb/adb-qi-ta-ming-ling/"/>
    <url>/2023/08/31/docs/adb/adb-qi-ta-ming-ling/</url>
    
    <content type="html"><![CDATA[<p>CPU温度</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell <span class="hljs-built_in">cat</span> /sys/class/thermal/thermal_zone7/temp<br></code></pre></td></tr></tbody></table></figure><p>强制停止程序</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell am force-stop com.xxxx.android.mirror<br></code></pre></td></tr></tbody></table></figure><p>启动程序</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell am start com.xxxx.xxxx/com.xxxx.PreviewActivity<br></code></pre></td></tr></tbody></table></figure><p>卸载程序</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb uninstall com.xxx.xx<br></code></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb forward tcp:10101 tcp:10101<br>adb reverse tcp:9537 tcp:9537<br></code></pre></td></tr></tbody></table></figure><p>查看CPU</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell getprop ro.board.platform<br>top -m 20 -s cpu -d 5<br></code></pre></td></tr></tbody></table></figure><p>获取处理器信息</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell getprop ro.board.platform<br></code></pre></td></tr></tbody></table></figure><p>查看相机参数<br>执行这个adb命令会打印所有默认参数和当前使用参数</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell dumpsys media.camera<br></code></pre></td></tr></tbody></table></figure><p>查看某一项参数,使用过滤命令grep(linux), windows下可使用findstr来过滤</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell dumpsys media.camera |grep picture-size<br></code></pre></td></tr></tbody></table></figure><p>将结果保存到文件中</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell dumpsys media.camera &gt; F:\Data\桌面\camera.txt<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>ADB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ADB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ADB 执行可执行文件</title>
    <link href="/2023/08/31/docs/adb/adb-zhi-xing-ke-zhi-xing-wen-jian/"/>
    <url>/2023/08/31/docs/adb/adb-zhi-xing-ke-zhi-xing-wen-jian/</url>
    
    <content type="html"><![CDATA[<h3 id="1-推送文件到-data-local-tmp"><a href="#1-推送文件到-data-local-tmp" class="headerlink" title="1. 推送文件到 /data/local/tmp"></a>1. 推送文件到 /data/local/tmp</h3><p>例：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb push E:/Test/libXXX.out.so /data/local/tmp<br></code></pre></td></tr></tbody></table></figure><h3 id="2-设置文件权限"><a href="#2-设置文件权限" class="headerlink" title="2. 设置文件权限"></a>2. 设置文件权限</h3><p>例：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell<br><span class="hljs-built_in">cd</span> /data/local/tmp<br><span class="hljs-built_in">chmod</span> 777 libXXX.out.so<br></code></pre></td></tr></tbody></table></figure><h3 id="3-设置工作目录为当前目录："><a href="#3-设置工作目录为当前目录：" class="headerlink" title="3. 设置工作目录为当前目录："></a>3. 设置工作目录为当前目录：</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=.<br></code></pre></td></tr></tbody></table></figure><h3 id="4-执行可执行文件"><a href="#4-执行可执行文件" class="headerlink" title="4. 执行可执行文件"></a>4. 执行可执行文件</h3><p>例：执行 <code>libXXX.out.so</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./libXXX.out.so<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>ADB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ADB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ADB 文件操作</title>
    <link href="/2023/08/31/docs/adb/adb-wen-jian-cao-zuo/"/>
    <url>/2023/08/31/docs/adb/adb-wen-jian-cao-zuo/</url>
    
    <content type="html"><![CDATA[<p>删除文件</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell <span class="hljs-built_in">rm</span> -rf /dir1/test1/test<br></code></pre></td></tr></tbody></table></figure><p>批量删除符合条件的文件</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell <span class="hljs-built_in">rm</span> -rf /dir1/test1/test*<br></code></pre></td></tr></tbody></table></figure><p>批量删除符合条件的文件（不区分大小写）</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell <span class="hljs-string">'find /dir1/test1 -maxdepth 1 -iname "TesT*" -exec rm -rf {} \;'</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>ADB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ADB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ADB 打开设置界面</title>
    <link href="/2023/08/31/docs/adb/adb-da-kai-she-zhi-jie-mian/"/>
    <url>/2023/08/31/docs/adb/adb-da-kai-she-zhi-jie-mian/</url>
    
    <content type="html"><![CDATA[<h3 id="adb命令打开手机设置页面"><a href="#adb命令打开手机设置页面" class="headerlink" title="adb命令打开手机设置页面"></a>adb命令打开手机设置页面</h3><p>关闭设置界面</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell am force-stop com.android.settings<br></code></pre></td></tr></tbody></table></figure><p>//打开设置主页面</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell am start com.android.settings/com.android.settings.Settings<br></code></pre></td></tr></tbody></table></figure><p>安全</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell am start com.android.settings/com.android.settings.SecuritySettings<br></code></pre></td></tr></tbody></table></figure><p>手机无线信息</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell am start com.android.settings/com.android.settings.RadioInfo<br></code></pre></td></tr></tbody></table></figure><p>有些界面需要这样打开</p><p>APN界面</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell am start -n <span class="hljs-string">'com.android.settings/.Settings\$ApnSettingsActivity'</span><br></code></pre></td></tr></tbody></table></figure><p>更多页面</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.AccessibilitySettings</span> 辅助功能设置<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.ActivityPicker</span> 选择活动<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.ApnSettings</span> APN设置<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.ApplicationSettings</span> 应用程序设置<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.BandMode</span> 设置GSM/UMTS波段<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.BatteryInfo</span> 电池信息<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.DateTimeSettings</span> 日期和坝上旅游网时间设置<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.DateTimeSettingsSetupWizard</span> 日期和时间设置<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.DevelopmentSettings</span> 开发者设置<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.DeviceAdminSettings</span> 设备管理器<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.DeviceInfoSettings</span> 关于手机<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.Display</span> 显示——设置显示字体大小及预览<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.DisplaySettings</span> 显示设置<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.DockSettings</span> 底座设置<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.IccLockSettings</span> SIM卡锁定设置<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.InstalledAppDetails</span> 语言和键盘设置<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.LanguageSettings</span> 语言和键盘设置<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.LocalePicker</span> 选择手机语言<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.LocalePickerInSetupWizard</span> 选择手机语言<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.ManageApplications</span> 已下载（安装）软件列表<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.MasterClear</span> 恢复出厂设置<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.MediaFormat</span> 格式化手机闪存<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.PhysicalKeyboardSettings</span> 设置键盘<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.PrivacySettings</span> 隐私设置<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.ProxySelector</span> 代理设置<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.RadioInfo</span> 手机信息<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.RunningServices</span> 正在运行的程序（服务）<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.SecuritySettings</span> 位置和安全设置<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.Settings</span> 系统设置<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.SettingsSafetyLegalActivity</span> 安全信息<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.SoundSettings</span> 声音设置<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.TestingSettings</span> 测试——显示手机信息、电池信息、使用情况统计、Wifi information、服务信息<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.TetherSettings</span> 绑定与便携式热点<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.TextToSpeechSettings</span> 文字转语音设置<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.UsageStats</span> 使用情况统计<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.UserDictionarySettings</span> 用户词典<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.VoiceInputOutputSettings</span> 语音输入与输出设置<br>com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span><span class="hljs-selector-class">.WirelessSettings</span> 无线和网络设置<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>ADB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ADB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ADB 查看电池记录</title>
    <link href="/2023/08/31/docs/adb/adb-cha-kan-dian-chi-ji-lu/"/>
    <url>/2023/08/31/docs/adb/adb-cha-kan-dian-chi-ji-lu/</url>
    
    <content type="html"><![CDATA[<p>重置电池记录</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell dumpsys batterystats --reset<br></code></pre></td></tr></tbody></table></figure><p>保存电池记录导致文档</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell dumpsys batterystats &gt; E:\<span class="hljs-built_in">test</span>\batterystats.txt<br>adb bugreport &gt; E:\<span class="hljs-built_in">test</span>\bugreport.txt<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>ADB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ADB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ADB 音量操作</title>
    <link href="/2023/08/31/docs/adb/adb-cha-kan-yin-liang/"/>
    <url>/2023/08/31/docs/adb/adb-cha-kan-yin-liang/</url>
    
    <content type="html"><![CDATA[<h2 id="获取设备音频流信息"><a href="#获取设备音频流信息" class="headerlink" title="获取设备音频流信息"></a>获取设备音频流信息</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell dumpsys audio<br></code></pre></td></tr></tbody></table></figure><h2 id="获取当前设备各类音量大小"><a href="#获取当前设备各类音量大小" class="headerlink" title="获取当前设备各类音量大小"></a>获取当前设备各类音量大小</h2><h3 id="获取设备的电话音量-STREAM-VOICE-CALL"><a href="#获取设备的电话音量-STREAM-VOICE-CALL" class="headerlink" title="获取设备的电话音量 - STREAM_VOICE_CALL"></a>获取设备的电话音量 - STREAM_VOICE_CALL</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell media volume --show --stream 0 --get<br></code></pre></td></tr></tbody></table></figure><h3 id="获取设备的系统音量-STREAM-SYSTEM"><a href="#获取设备的系统音量-STREAM-SYSTEM" class="headerlink" title="获取设备的系统音量 - STREAM_SYSTEM"></a>获取设备的系统音量 - STREAM_SYSTEM</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell media volume --show --stream 1 --get<br></code></pre></td></tr></tbody></table></figure><h3 id="获取设备的铃音音量-STREAM-RING"><a href="#获取设备的铃音音量-STREAM-RING" class="headerlink" title="获取设备的铃音音量 - STREAM_RING"></a>获取设备的铃音音量 - STREAM_RING</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell media volume --show --stream 2 --get<br></code></pre></td></tr></tbody></table></figure><h3 id="获取设备的音乐音量（多媒体音量-）-STREAM-MUSIC"><a href="#获取设备的音乐音量（多媒体音量-）-STREAM-MUSIC" class="headerlink" title="获取设备的音乐音量（多媒体音量 ）- STREAM_MUSIC"></a>获取设备的音乐音量（多媒体音量 ）- STREAM_MUSIC</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell media volume --show --stream 3 --get<br></code></pre></td></tr></tbody></table></figure><h3 id="获取设备的闹钟音量-STREAM-ALARM"><a href="#获取设备的闹钟音量-STREAM-ALARM" class="headerlink" title="获取设备的闹钟音量- STREAM_ALARM"></a>获取设备的闹钟音量- STREAM_ALARM</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell media volume --show --stream 4 --get<br></code></pre></td></tr></tbody></table></figure><h2 id="设置音量大小"><a href="#设置音量大小" class="headerlink" title="设置音量大小"></a>设置音量大小</h2><p>示例：设置多媒体音量大小</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell media volume --show --stream 3 --<span class="hljs-built_in">set</span> 10<br></code></pre></td></tr></tbody></table></figure><p>输出：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[v] will control <span class="hljs-attribute">stream</span>=3 (STREAM_MUSIC)<br>[v] will <span class="hljs-built_in">set</span> volume <span class="hljs-keyword">to</span> <span class="hljs-attribute">index</span>=10<br>[v] Connecting <span class="hljs-keyword">to</span> AudioService<br></code></pre></td></tr></tbody></table></figure><blockquote><p>注：设置系统音量为0（stream=1）后，设备会进入静音模式，之后再修改其他模式音量会失败</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>ADB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ADB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ADB 模拟命令</title>
    <link href="/2023/08/31/docs/adb/adb-mo-ni-ming-ling/"/>
    <url>/2023/08/31/docs/adb/adb-mo-ni-ming-ling/</url>
    
    <content type="html"><![CDATA[<p>模拟开关机广播</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell am broadcast -a android.intent.action.BOOT_COMPLETED<br></code></pre></td></tr></tbody></table></figure><p>设置桌面</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell <span class="hljs-string">"cmd package set-home-activity com.xxxx/com.xxx.MainActivity"</span> <br></code></pre></td></tr></tbody></table></figure><p>模拟输入文字</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell <span class="hljs-string">"input keyboard text 'a text'"</span><br></code></pre></td></tr></tbody></table></figure><p>模拟点击屏幕</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell <span class="hljs-string">"input keyevent 3"</span><br></code></pre></td></tr></tbody></table></figure><p>在屏幕上做划屏操作，前四个数为坐标点，后面是滑动的时间（单位毫秒）</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell input swipe 50 250 250 250 500<br></code></pre></td></tr></tbody></table></figure><p>在 100 100 位置长按 1000毫秒</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell input swipe 100 100 100 100 1000<br></code></pre></td></tr></tbody></table></figure><p>模拟点击屏幕<br>在屏幕上点击坐标点x=50 y=250的位置。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell input tap 50 250<br></code></pre></td></tr></tbody></table></figure><p>设置默认输入法</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell settings put secure default_input_method com.sohu.inputmethod.sogou/.SougouIME<br><br>adb shell settings put secure default_input_method com.android.inputmethod.latin/.LatinIME<br></code></pre></td></tr></tbody></table></figure><p>模拟点击HOME键</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell <span class="hljs-string">"input keyevent 3"</span><br></code></pre></td></tr></tbody></table></figure><p>模拟点击按键时每个数字与keycode对应表如下</p><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span>--&gt; <span class="hljs-string">"KEYCODE_UNKNOWN"</span><br><span class="hljs-symbol">1 </span>--&gt; <span class="hljs-string">"KEYCODE_MENU"</span><br><span class="hljs-symbol">2 </span>--&gt; <span class="hljs-string">"KEYCODE_SOFT_RIGHT"</span><br><span class="hljs-symbol">3 </span>--&gt; <span class="hljs-string">"KEYCODE_HOME"</span><br><span class="hljs-symbol">4 </span>--&gt; <span class="hljs-string">"KEYCODE_BACK"</span><br><span class="hljs-symbol">5 </span>--&gt; <span class="hljs-string">"KEYCODE_CALL"</span><br><span class="hljs-symbol">6 </span>--&gt; <span class="hljs-string">"KEYCODE_ENDCALL"</span><br><span class="hljs-symbol">7 </span>--&gt; <span class="hljs-string">"KEYCODE_0"</span><br><span class="hljs-symbol">8 </span>--&gt; <span class="hljs-string">"KEYCODE_1"</span><br><span class="hljs-symbol">9 </span>--&gt; <span class="hljs-string">"KEYCODE_2"</span><br><span class="hljs-symbol">10 </span>--&gt; <span class="hljs-string">"KEYCODE_3"</span><br><span class="hljs-symbol">11 </span>--&gt; <span class="hljs-string">"KEYCODE_4"</span><br><span class="hljs-symbol">12 </span>--&gt; <span class="hljs-string">"KEYCODE_5"</span><br><span class="hljs-symbol">13 </span>--&gt; <span class="hljs-string">"KEYCODE_6"</span><br><span class="hljs-symbol">14 </span>--&gt; <span class="hljs-string">"KEYCODE_7"</span><br><span class="hljs-symbol">15 </span>--&gt; <span class="hljs-string">"KEYCODE_8"</span><br><span class="hljs-symbol">16 </span>--&gt; <span class="hljs-string">"KEYCODE_9"</span><br><span class="hljs-symbol">17 </span>--&gt; <span class="hljs-string">"KEYCODE_STAR"</span><br><span class="hljs-symbol">18 </span>--&gt; <span class="hljs-string">"KEYCODE_POUND"</span><br><span class="hljs-symbol">19 </span>--&gt; <span class="hljs-string">"KEYCODE_DPAD_UP"</span><br><span class="hljs-symbol">20 </span>--&gt; <span class="hljs-string">"KEYCODE_DPAD_DOWN"</span><br><span class="hljs-symbol">21 </span>--&gt; <span class="hljs-string">"KEYCODE_DPAD_LEFT"</span><br><span class="hljs-symbol">22 </span>--&gt; <span class="hljs-string">"KEYCODE_DPAD_RIGHT"</span><br><span class="hljs-symbol">23 </span>--&gt; <span class="hljs-string">"KEYCODE_DPAD_CENTER"</span><br><span class="hljs-symbol">24 </span>--&gt; <span class="hljs-string">"KEYCODE_VOLUME_UP"</span><br><span class="hljs-symbol">25 </span>--&gt; <span class="hljs-string">"KEYCODE_VOLUME_DOWN"</span><br><span class="hljs-symbol">26 </span>--&gt; <span class="hljs-string">"KEYCODE_POWER"</span><br><span class="hljs-symbol">27 </span>--&gt; <span class="hljs-string">"KEYCODE_CAMERA"</span><br><span class="hljs-symbol">28 </span>--&gt; <span class="hljs-string">"KEYCODE_CLEAR"</span><br><span class="hljs-symbol">29 </span>--&gt; <span class="hljs-string">"KEYCODE_A"</span><br><span class="hljs-symbol">30 </span>--&gt; <span class="hljs-string">"KEYCODE_B"</span><br><span class="hljs-symbol">31 </span>--&gt; <span class="hljs-string">"KEYCODE_C"</span><br><span class="hljs-symbol">32 </span>--&gt; <span class="hljs-string">"KEYCODE_D"</span><br><span class="hljs-symbol">33 </span>--&gt; <span class="hljs-string">"KEYCODE_E"</span><br><span class="hljs-symbol">34 </span>--&gt; <span class="hljs-string">"KEYCODE_F"</span><br><span class="hljs-symbol">35 </span>--&gt; <span class="hljs-string">"KEYCODE_G"</span><br><span class="hljs-symbol">36 </span>--&gt; <span class="hljs-string">"KEYCODE_H"</span><br><span class="hljs-symbol">37 </span>--&gt; <span class="hljs-string">"KEYCODE_I"</span><br><span class="hljs-symbol">38 </span>--&gt; <span class="hljs-string">"KEYCODE_J"</span><br><span class="hljs-symbol">39 </span>--&gt; <span class="hljs-string">"KEYCODE_K"</span><br><span class="hljs-symbol">40 </span>--&gt; <span class="hljs-string">"KEYCODE_L"</span><br><span class="hljs-symbol">41 </span>--&gt; <span class="hljs-string">"KEYCODE_M"</span><br><span class="hljs-symbol">42 </span>--&gt; <span class="hljs-string">"KEYCODE_N"</span><br><span class="hljs-symbol">43 </span>--&gt; <span class="hljs-string">"KEYCODE_O"</span><br><span class="hljs-symbol">44 </span>--&gt; <span class="hljs-string">"KEYCODE_P"</span><br><span class="hljs-symbol">45 </span>--&gt; <span class="hljs-string">"KEYCODE_Q"</span><br><span class="hljs-symbol">46 </span>--&gt; <span class="hljs-string">"KEYCODE_R"</span><br><span class="hljs-symbol">47 </span>--&gt; <span class="hljs-string">"KEYCODE_S"</span><br><span class="hljs-symbol">48 </span>--&gt; <span class="hljs-string">"KEYCODE_T"</span><br><span class="hljs-symbol">49 </span>--&gt; <span class="hljs-string">"KEYCODE_U"</span><br><span class="hljs-symbol">50 </span>--&gt; <span class="hljs-string">"KEYCODE_V"</span><br><span class="hljs-symbol">51 </span>--&gt; <span class="hljs-string">"KEYCODE_W"</span><br><span class="hljs-symbol">52 </span>--&gt; <span class="hljs-string">"KEYCODE_X"</span><br><span class="hljs-symbol">53 </span>--&gt; <span class="hljs-string">"KEYCODE_Y"</span><br><span class="hljs-symbol">54 </span>--&gt; <span class="hljs-string">"KEYCODE_Z"</span><br><span class="hljs-symbol">55 </span>--&gt; <span class="hljs-string">"KEYCODE_COMMA"</span><br><span class="hljs-symbol">56 </span>--&gt; <span class="hljs-string">"KEYCODE_PERIOD"</span><br><span class="hljs-symbol">57 </span>--&gt; <span class="hljs-string">"KEYCODE_ALT_LEFT"</span><br><span class="hljs-symbol">58 </span>--&gt; <span class="hljs-string">"KEYCODE_ALT_RIGHT"</span><br><span class="hljs-symbol">59 </span>--&gt; <span class="hljs-string">"KEYCODE_SHIFT_LEFT"</span><br><span class="hljs-symbol">60 </span>--&gt; <span class="hljs-string">"KEYCODE_SHIFT_RIGHT"</span><br><span class="hljs-symbol">61 </span>--&gt; <span class="hljs-string">"KEYCODE_TAB"</span><br><span class="hljs-symbol">62 </span>--&gt; <span class="hljs-string">"KEYCODE_SPACE"</span><br><span class="hljs-symbol">63 </span>--&gt; <span class="hljs-string">"KEYCODE_SYM"</span><br><span class="hljs-symbol">64 </span>--&gt; <span class="hljs-string">"KEYCODE_EXPLORER"</span><br><span class="hljs-symbol">65 </span>--&gt; <span class="hljs-string">"KEYCODE_ENVELOPE"</span><br><span class="hljs-symbol">66 </span>--&gt; <span class="hljs-string">"KEYCODE_ENTER"</span><br><span class="hljs-symbol">67 </span>--&gt; <span class="hljs-string">"KEYCODE_DEL"</span><br><span class="hljs-symbol">68 </span>--&gt; <span class="hljs-string">"KEYCODE_GRAVE"</span><br><span class="hljs-symbol">69 </span>--&gt; <span class="hljs-string">"KEYCODE_MINUS"</span><br><span class="hljs-symbol">70 </span>--&gt; <span class="hljs-string">"KEYCODE_EQUALS"</span><br><span class="hljs-symbol">71 </span>--&gt; <span class="hljs-string">"KEYCODE_LEFT_BRACKET"</span><br><span class="hljs-symbol">72 </span>--&gt; <span class="hljs-string">"KEYCODE_RIGHT_BRACKET"</span><br><span class="hljs-symbol">73 </span>--&gt; <span class="hljs-string">"KEYCODE_BACKSLASH"</span><br><span class="hljs-symbol">74 </span>--&gt; <span class="hljs-string">"KEYCODE_SEMICOLON"</span><br><span class="hljs-symbol">75 </span>--&gt; <span class="hljs-string">"KEYCODE_APOSTROPHE"</span><br><span class="hljs-symbol">76 </span>--&gt; <span class="hljs-string">"KEYCODE_SLASH"</span><br><span class="hljs-symbol">77 </span>--&gt; <span class="hljs-string">"KEYCODE_AT"</span><br><span class="hljs-symbol">78 </span>--&gt; <span class="hljs-string">"KEYCODE_NUM"</span><br><span class="hljs-symbol">79 </span>--&gt; <span class="hljs-string">"KEYCODE_HEADSETHOOK"</span><br><span class="hljs-symbol">80 </span>--&gt; <span class="hljs-string">"KEYCODE_FOCUS"</span><br><span class="hljs-symbol">81 </span>--&gt; <span class="hljs-string">"KEYCODE_PLUS"</span><br><span class="hljs-symbol">82 </span>--&gt; <span class="hljs-string">"KEYCODE_MENU"</span><br><span class="hljs-symbol">83 </span>--&gt; <span class="hljs-string">"KEYCODE_NOTIFICATION"</span><br><span class="hljs-symbol">84 </span>--&gt; <span class="hljs-string">"KEYCODE_SEARCH"</span><br><span class="hljs-symbol">85 </span>--&gt; <span class="hljs-string">"TAG_LAST_KEYCODE"</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>ADB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ADB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ADB 开启远程调试</title>
    <link href="/2023/08/31/docs/adb/adb-yuan-cheng-diao-shi/"/>
    <url>/2023/08/31/docs/adb/adb-yuan-cheng-diao-shi/</url>
    
    <content type="html"><![CDATA[<h2 id="开启无线调试"><a href="#开启无线调试" class="headerlink" title="开启无线调试"></a>开启无线调试</h2><h3 id="Root模式"><a href="#Root模式" class="headerlink" title="Root模式"></a>Root模式</h3><p>方式一</p><p>手动修改 <code>/system/build.prop</code> 文件，后面添加下面这行，然后保存</p><figure class="highlight elm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">service</span>.adb.tcp.<span class="hljs-keyword">port</span>=5555<br></code></pre></td></tr></tbody></table></figure><p>可以这样操作</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb root<br>adb remount<br>adb pull /system/build.prop<br></code></pre></td></tr></tbody></table></figure><p>手动修改 <code>build.prop</code> 文件，添加 <code>service.adb.tcp.port=5555</code>，保存，然后推送到设备中</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb push build.prop /system/build.prop<br>adb shell <span class="hljs-built_in">chmod</span> 0644 /system/build.prop<br></code></pre></td></tr></tbody></table></figure><p>方式二</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell su -c setprop service.adb.tcp.port 5555<br></code></pre></td></tr></tbody></table></figure><h3 id="非Root模式"><a href="#非Root模式" class="headerlink" title="非Root模式"></a>非Root模式</h3><p>需要先用数据线连接到设备，然后执行下面的命令打开无线调试</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb tcpip 5555<br></code></pre></td></tr></tbody></table></figure><p>然后就可以断开数据线，通过无线连接到设备了</p><blockquote><p>注：这种方式设备重启后需要重新打开无线调试</p></blockquote><h2 id="无线连接"><a href="#无线连接" class="headerlink" title="无线连接"></a>无线连接</h2><p>连接设备，<code>adb connect ip:port</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb connect 192.168.x.x:5555<br></code></pre></td></tr></tbody></table></figure><p>默认端口是 <code>5555</code>，如果没有修改端口的话可以省略端口</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb connect 192.168.x.x<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>ADB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ADB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GIT</title>
    <link href="/2023/08/31/docs/git/git/"/>
    <url>/2023/08/31/docs/git/git/</url>
    
    <content type="html"><![CDATA[<h4 id="版本控制的作用">          <a href="#版本控制的作用" class="heading-link"><i class="fas fa-link"></i></a><a href="#版本控制的作用" class="headerlink" title="版本控制的作用"></a>版本控制的作用</h4>      <ul><li>备份<ul><li>避免万一机器挂了,磁盘坏了等原因导致代码丢失.</li></ul></li><li>多人协作<ul><li>提交 (push/commit),拉取 (pull/update)</li><li>分支 (branch)</li><li>重置 (revert)</li><li>日志 (log)</li><li>…</li></ul></li></ul>        <h4 id="Git-简史">          <a href="#Git-简史" class="heading-link"><i class="fas fa-link"></i></a><a href="#Git-简史" class="headerlink" title="Git 简史"></a>Git 简史</h4>      <p>  <span class="exturl"><a class="exturl__link" href="https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-Git-%E7%AE%80%E5%8F%B2">https://git-scm.com/book/zh/v1/起步-Git-简史</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>  同生活中的许多伟大事件一样，Git 诞生于一个极富纷争大举创新的年代。Linux 内核开源项目有着为数众广的参与者。绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（1991－2002年间）。到 2002 年，整个项目组开始启用分布式版本控制系统 BitKeeper 来管理和维护代码。</p><p>  到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了免费使用 BitKeeper 的权力。这就迫使 Linux 开源社区（特别是 Linux 的缔造者 Linus Torvalds ）不得不吸取教训，只有开发一套属于自己的版本控制系统才不至于重蹈覆辙。他们对新的系统制订了若干目标：</p><ul><li>速度</li><li>简单的设计</li><li>对非线性开发模式的强力支持（允许上千个并行开发的分支）</li><li>完全分布式</li><li>有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）</li></ul><p>  自诞生于 2005 年以来，Git 日臻成熟完善，在高度易用的同时，仍然保留着初期设定的目标。它的速度飞快，极其适合管理大项目，它还有着令人难以置信的非线性分支管理系统（见第三章），可以应付各种复杂的项目开发需求。</p>        <h4 id="GIT-基本">          <a href="#GIT-基本" class="heading-link"><i class="fas fa-link"></i></a><a href="#GIT-基本" class="headerlink" title="GIT 基本"></a>GIT 基本</h4>      <ul><li><p>git 是分布式去中心化的 ,意味着”服务器端”的文档结构,管理方法跟客户端完全一致(其实并没有服务器这一说)</p></li><li><p>git init  <code>初始化一个 git 仓库(创建.git 目录)</code></p></li><li><p>.gitignore  <code>类似svn ignore.更灵活,不同的工程有不同的配置</code></p><pre class="line-numbers language-none"><code class="language-none"># 此为注释 – 将被 Git 忽略# 忽略所有 .a 结尾的文件*.a# 但 lib.a 除外!lib.a# 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO/TODO# 忽略 build/ 目录下的所有文件build/# 会忽略 doc/notes.txt 但不包括 doc/server/arch.txtdoc/*.txt# 忽略 doc/ 目录下所有扩展名为 txt 的文件doc/**/*.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>git add   <code>跟踪文件,并将其放到暂存</code></p><ul><li>git add *   <code>暂存当前目录下所有文件</code></li><li>git add *.c <code>暂存所有.c 文件</code></li><li>git add README  <code>暂存README 文件</code></li></ul></li><li><p>git commit    <code>提交暂存</code></p><ul><li>git commit -a   <code>提交所有,包括未暂存但是已跟踪的.</code></li></ul></li><li><p>git clone   <code>类似 svn checkout,用来 clone 一个仓库</code></p></li><li><p>git status    <code>类似svn status 查看当前工作目录的状态</code></p></li><li><pre><code>On branch dev_ftd_ftrChanges not staged for commit:  (use "git add &lt;file&gt;..." to update what will be committed)  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)        modified:   app/build.gradle        modified:   app/src/main/java/com/tsinglink/android/mpu/fragment/VideoSettingFragment.java        modified:   app/src/main/res/layout/fragment_video_setting.xml        modified:   app/src/main/res/values-en/strings.xml        modified:   app/src/main/res/values/strings.xmlUntracked files:  (use "git add &lt;file&gt;..." to include in what will be committed)        app/TSP210_D_LA1_1H/no changes added to commit (use "git add" and/or "git commit -a")<pre class="line-numbers language-none"><code class="language-none">#### git分支- git 项目结构        如下图所示,当前项目有两个分支:`master`分支和 `v1.0`分支        有个 `HEAD` 指针始终指着当前工作目录所在的分支.        Git 的 “master” 分支并不是一个特殊分支。 它就跟其它分支完全没有区别。 之所以几乎每一个仓库都有 master 分支，是因为 git init 命令默认创建它，并且大多数人都懒得去改动它。        ![image](https://git-scm.com/book/en/v2/images/branch-and-history.png)- git branch `branch_name`   `创建一个分支`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  git branch testing  <pre class="line-numbers language-none"><code class="language-none">    ![image](https://git-scm.com/book/en/v2/images/head-to-master.png)        创建分支后,从当前最新的 HEAD 分支处两条支流,但是 HEAD还是指向 master.- git checkout testing    `切换到某个分支`        ![image](https://git-scm.com/book/en/v2/images/head-to-testing.png)- 分支前移    再做一次提交后,HEAD 随着 testing 都向前移动了.        ![image](https://git-scm.com/book/en/v2/images/advance-testing.png)    - 再切到 master  `git checkout master`    ![image](https://git-scm.com/book/en/v2/images/checkout-master.png)    - 再做修改并commit    ![image](https://git-scm.com/book/en/v2/images/advance-master.png)- 合并分支      `git merge`    - 快进合并(fast-forward)        ![image](https://git-scm.com/book/en/v2/images/basic-branching-4.png)        ![image](https://git-scm.com/book/en/v2/images/basic-branching-5.png)        - git branch -d `branch_name`  [删除分支]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  git branch -d hotfix  Deleted branch hotfix (3a0874c).  <pre class="line-numbers language-none"><code class="language-none">![image](https://git-scm.com/book/en/v2/images/basic-branching-6.png)- 找到共同祖先再合并![image](https://git-scm.com/book/en/v2/images/basic-merging-2.png)- 遇到冲突<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  git merge iss53  Auto-merging index.html  CONFLICT (content): Merge conflict in index.html  Automatic merge failed; fix conflicts and then commit the result.  <pre class="line-numbers language-none"><code class="language-none">- 冲突<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD  first file change from master  =======  first file change from dev_fix_bug1  &gt;&gt;&gt;&gt;&gt;&gt;&gt; dev_fix_bug1  <pre class="line-numbers language-none"><code class="language-none">    这表示 HEAD 所指示的版本（也就是你的 master 分支所在的位置）在这个区段的上半部分（======= 的上半部分），而 dev_fix_bug1 分支所指示的版本在 ======= 的下半部分。     这里可以选择使用上半部分还是下半部分,或者重新来写这一行,只要 &lt;&lt;&lt;&lt;&lt;&lt;&lt; , ======= , 和 &gt;&gt;&gt;&gt;&gt;&gt;&gt; 这些行被完全删除后,就没有冲突了。         - git branch `查看所有分支`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  // 查看所有分支的最后一次提交记录  git branch -v    iss53   93b412c fix javascript issue  * master  7a98805 Merge branch 'iss53'    testing 782fd34 add scott to the author list in the readmes  <pre class="line-numbers language-none"><code class="language-none">#### 远程分支和本地分支    多个人同时开发时,会产生不同的分支.本地的称为本地分支,其他人提交过的分支,成为远程分支.远程分支以**指针** `origin/[分支名]`来表示.`f4265`是本地从服务器 clone 时的提交点.![image](https://git-scm.com/book/en/v2/images/remote-branches-1.png)在此之后,本地和远程各提交了两次,形成如下情况:![image](https://git-scm.com/book/en/v2/images/remote-branches-3.png)拉取远程仓库git fetch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ul><p>见上图</p><pre class="line-numbers language-none"><code class="language-none">拉取远程仓库并与本地合并<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>                 A---B---C master on origin                /           D---E---F---G master               ^               origin/master in your repository                                              A---B---C origin/master                /         \           D---E---F---G---H master</code></pre><pre class="line-numbers language-none"><code class="language-none">推送本地分支到远程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>$ git push origin serverfix<br>Counting objects: 24, done.<br>Delta compression using up to 8 threads.<br>Compressing objects: 100% (15/15), done.<br>Writing objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.<br>Total 24 (delta 2), reused 0 (delta 0)<br>To <span class="exturl"><a class="exturl__link" href="https://github.com/schacon/simplegit">https://github.com/schacon/simplegit</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><ul><li>[new branch]      serverfix -&gt; serverfix<pre class="line-numbers language-none"><code class="language-none">删除远程分支<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>$ git push origin –delete serverfix<br>To <span class="exturl"><a class="exturl__link" href="https://github.com/schacon/simplegit">https://github.com/schacon/simplegit</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul><ul><li>[deleted]         serverfix<pre class="line-numbers language-none"><code class="language-none"> #### 标签Git 可以给历史中的某一个提交打上标签，以示重要。 比较有代表性的是人们会使用这个功能来标记发布结点（v1.0 等等）。 1. 列出所有标签<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>git tag<pre class="line-numbers language-none"><code class="language-none">2. 给当前提交打上轻量级标签<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>git tag v1.0<pre class="line-numbers language-none"><code class="language-none">3. 附注标签<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>git tag -a v1.4 -m “提交 v1.4版本.修改记录如下:xxxxx”<pre class="line-numbers language-none"><code class="language-none">4. 给历史提交打标签<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>git tag -a v1.2 9fceb02<pre class="line-numbers language-none"><code class="language-none">    #### 分支应用    &gt; 由于 Git 的分支实质上仅是包含所指对象校验和（长度为 40 的 SHA-1 值字符串）的文件，所以它的创建和销毁都异常高效。 创建一个新分支就相当于往一个文件中写入 41 个字节（40 个字符和 1 个换行符），如此的简单能不快吗？&gt; 这与过去大多数版本控制系统形成了鲜明的对比，它们在创建分支时，将所有的项目文件都复制一遍，并保存到一个特定的目录。 完成这样繁琐的过程通常需要好几秒钟，有时甚至需要好几分钟。所需时间的长短，完全取决于项目的规模。而在 Git 中，任何规模的项目都能在瞬间创建新分支。 同时，由于每次提交都会记录父对象，所以寻找恰当的合并基础（译注：即共同祖先）也是同样的简单和高效。 这些高效的特性使得 Git 鼓励开发人员频繁地创建和使用分支。比如我们安卓开发过程中,使用SVN 分支的时候,要拷贝一份工作副本到本地,首先拷贝的过程就很慢,还浪费磁盘空间,拖累电脑速度.Android studio 在打开一个新的工程时,需要建立文件索引,会很慢,还会生成大量临时文件,这些临时文件都上 G的.由于每个分支都是不同的副本,加起来体积就很大了,磁盘很快被塞满.另外很多的分支还会导致工程目录太多,不好管理.另外svn 的分支合并也不太友好.涉及到多个文件夹之间切来切去的.第三方工程 GIT 分支参考        - ffmpeg    29 个分支    https://github.com/FFmpeg/FFmpeg- 微软的vscode 366 个分支    https://github.com/microsoft/vscode        分支开发模式    1. 根据开发进度分支    一个模块开发之前,先创建一个分支.开发,测试完成后,合并到主分支.        每一次发布,都打上一个标签, 当线上项目有 bug 需要紧急修复,在标签基础上创建临时分支来修补这个 bug.修补完成再合并到当前分支和主分支.最后若有必要,删除临时分支2. 根据产品分支        主分支是公共项目,或者第一个产品项目;其他分支是在主分支基础上后来衍生出来的其他产品项目<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> git branch<br>   210b<br>   210c<br>   210d<br>   210e<ul><li>master <pre class="line-numbers language-none"><code class="language-none">    每个产品分支都可以使用第一条开发进度来衍生分支  #### 服务器上的 Git - 协议远程仓库跟本地仓库没有本质区别.服务器上的 git 结构与本地也没有什么不同.服务器的架设要考虑的实际上是用何种协议来将 git 仓库 与本地仓库保持同步,以及对应的用户权限.git 支持 4 中种协议来实现同步.- 本地协议 **本地用**<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>// 从一个已有仓库 clone<br>git clone ../gittest<br>Cloning into ‘gittest’…<br>done.</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>// 将本地仓库推送到 git 项目<br>git remote add local_proj /opt/git/project.git</p><pre class="line-numbers language-none"><code class="language-none">- HTTP 协议 **配置 HTTP 服务**<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>$ git clone <span class="exturl"><a class="exturl__link" href="https://example.com/gitproject.git">https://example.com/gitproject.git</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><pre class="line-numbers language-none"><code class="language-none">- SSH 协议  **服务器端最简单了**<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>git clone ssh://user@server/project.git</p><pre class="line-numbers language-none"><code class="language-none">- GIT 协议<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一般不用,略…</p><pre><code>搭建方式:https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E5%8D%8F%E8%AE%AE建议:大型项目使用 ssh 协议;小型项目使用第三方托管.托管服务:github  oschina     国内的 github阿里云      腾讯云      https://blog.csdn.net/lrcoop/article/details/88599487#### GIT CUIhttps://git-scm.com/downloads/guis</code></pre>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git免密拉取(包括ssh,http方式)</title>
    <link href="/2023/08/31/docs/git/git-mian-mi-la-qu-bao-gua-ssh-http-fang-shi/"/>
    <url>/2023/08/31/docs/git/git-mian-mi-la-qu-bao-gua-ssh-http-fang-shi/</url>
    
    <content type="html"><![CDATA[<h2 id="配置Git免密拉取">          <a href="#配置Git免密拉取" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置Git免密拉取" class="headerlink" title="配置Git免密拉取"></a>配置Git免密拉取</h2>              <h3 id="基础安装配置">          <a href="#基础安装配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#基础安装配置" class="headerlink" title="基础安装配置"></a>基础安装配置</h3>      <p>已安装配置好的可以略过</p><ol><li>先配置一下用户名和邮箱<pre class="line-numbers language-none"><code class="language-none">git config --global user.name 'username'git config --global user.email 'xxx@xxx.com'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>生成ssh公钥：<pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa -C "xxx@xxx.com"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>        <h3 id="ssh免密拉取配置">          <a href="#ssh免密拉取配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#ssh免密拉取配置" class="headerlink" title="ssh免密拉取配置"></a>ssh免密拉取配置</h3>      <ol><li><p>将  <code>~/.ssh/id_rsa.pub</code> 公钥文件内容粘贴到GitLab的ssh公钥管理处</p></li><li><p>使用</p><pre class="line-numbers language-none"><code class="language-none">git clone git@xxx:xxx.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试一下，一般可以直接拉取成功。</p><p>但是有些私有云上部署的GitLab不支持使用ssh方式拉取仓库，所以只能用http方式拉取，类似这样</p><pre class="line-numbers language-none"><code class="language-none">git clone http://XXX/XXX.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用http拉取的话默认又需要每次都输入用户名，密码。</p></li></ol>        <h3 id="http免密拉取配置">          <a href="#http免密拉取配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#http免密拉取配置" class="headerlink" title="http免密拉取配置"></a>http免密拉取配置</h3>      <ol><li><p>执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> credential.helper store<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行后再查看一下<code>~/.gitconfig</code>文件，会发现多了这样的内容</p><pre class="line-numbers language-none"><code class="language-none">[credential] helper = store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以不执行命令，手动将上面的内容加到 <code>~/.gitconfig</code> 文件中</p><p>注意：这一步必须要做，下面步骤其实也可以省略。这一步执行完成之后下次首次使用http拉取时会提示输入账号名密码，输入后会自动将相关信息保存到<code>.git-credentials</code>文件中，再次拉取时就不需要账号密码了，也可以手动修改<code>.git-credentials</code>文件中的内容，首次使用http拉取时也可以直接免密拉取</p></li><li><p>cd到用户根目录 <code>~/</code> 下，查看有没有 <code>.git-credentials</code> 文件，没有的话则创建一个</p><pre class="line-numbers language-none"><code class="language-none">touch .git-credentials<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开<code>.git-credentials</code>文件，在里面根据自己的配置添加以下内容</p><pre class="line-numbers language-none"><code class="language-none">https://{username}:{password}@{git地址}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>{username}</code> 指的是git的账号名</p><p><code>{password}</code> 指的是git账号名的密码</p><p><code>{git地址}</code> 指的是git仓库的域名或IP和端口号</p><p>类似下面这样</p><pre class="line-numbers language-none"><code class="language-none">http://name:pw12345@git.gitxx.comhttp://name:pw12345@123.456.789:1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>这时候再用http的方式拉取仓库就不需要输入用户名和密码了</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git删除某个文件的所有提交记录</title>
    <link href="/2023/08/31/docs/git/git-shan-chu-mou-ge-wen-jian-de-suo-you-ti-jiao-ji-lu/"/>
    <url>/2023/08/31/docs/git/git-shan-chu-mou-ge-wen-jian-de-suo-you-ti-jiao-ji-lu/</url>
    
    <content type="html"><![CDATA[<p>Git删除某个文件的所有提交记录</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git filter-branch --index-filter <span class="hljs-string">'git rm --cached --ignore-unmatch 文件路径'</span> -- --all<br><br>git filter-branch --index-filter <span class="hljs-string">'git rm --cached --ignore-unmatch 文件路径1 文件路径2 文件路径3'</span> -- --all<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git批量修改提交记录中的作者邮箱</title>
    <link href="/2023/08/31/docs/git/git-pi-liang-xiu-gai-ti-jiao-ji-lu-zhong-de-zuo-zhe-you-xiang/"/>
    <url>/2023/08/31/docs/git/git-pi-liang-xiu-gai-ti-jiao-ji-lu-zhong-de-zuo-zhe-you-xiang/</url>
    
    <content type="html"><![CDATA[<p>批量修改Git仓库已提交的记录中的提交作者邮箱信息</p><p>执行 git log 命令，查看提交历史记录，并记住需要修改作者邮箱的提交 ID。</p><p>执行以下命令，将需要修改的提交 ID 替换为实际的值：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">git filter-branch --env-filter <span class="hljs-string">'</span><br><span class="hljs-string">OLD_EMAIL="原作者邮箱"</span><br><span class="hljs-string">CORRECT_NAME="新作者名字"</span><br><span class="hljs-string">CORRECT_EMAIL="新作者邮箱"</span><br><span class="hljs-string">if [ "$GIT_COMMITTER_EMAIL" = "$OLD_EMAIL" ]</span><br><span class="hljs-string">then</span><br><span class="hljs-string">    export GIT_COMMITTER_NAME="$CORRECT_NAME"</span><br><span class="hljs-string">    export GIT_COMMITTER_EMAIL="$CORRECT_EMAIL"</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">if [ "$GIT_AUTHOR_EMAIL" = "$OLD_EMAIL" ]</span><br><span class="hljs-string">then</span><br><span class="hljs-string">    export GIT_AUTHOR_NAME="$CORRECT_NAME"</span><br><span class="hljs-string">    export GIT_AUTHOR_EMAIL="$CORRECT_EMAIL"</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">'</span> --tag-name-filter <span class="hljs-built_in">cat</span> -- --branches --tags<br></code></pre></td></tr></tbody></table></figure><p>该命令会将 Git 仓库中所有分支和标签下的提交历史记录中的指定作者邮箱信息修改为新的作者名字和邮箱信息。</p><p>执行命令，强制推送修改后的提交历史记录到远程仓库上。</p><figure class="highlight dsconfig"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">push</span> <span class="hljs-built_in">--force</span> <span class="hljs-built_in">--tags</span> <span class="hljs-string">origin</span> <span class="hljs-string">'refs/heads/*'</span> <br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git生成多个秘钥</title>
    <link href="/2023/08/31/docs/git/git-sheng-cheng-duo-ge-mi-yao/"/>
    <url>/2023/08/31/docs/git/git-sheng-cheng-duo-ge-mi-yao/</url>
    
    <content type="html"><![CDATA[<h2 id="Git配置多个SSH-Key">          <a href="#Git配置多个SSH-Key" class="heading-link"><i class="fas fa-link"></i></a><a href="#Git配置多个SSH-Key" class="headerlink" title="Git配置多个SSH-Key"></a>Git配置多个SSH-Key</h2>      <p><span class="exturl"><a class="exturl__link" href="https://gitee.com/help/labels/19">SSH Key</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="背景">          <a href="#背景" class="heading-link"><i class="fas fa-link"></i></a><a href="#背景" class="headerlink" title="背景"></a>背景</h3>      <p>当有多个git账号时，比如：</p><p>a. 一个gitee，用于公司内部的工作开发；<br>b. 一个github，用于自己进行一些开发活动；</p>        <h3 id="解决方法">          <a href="#解决方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3>      <ol><li>生成一个公司用的SSH-Key</li></ol><pre class="line-numbers language-none"><code class="language-none">$ ssh-keygen -t rsa -C 'xxxxx@company.com' -f ~/.ssh/gitee_id_rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>生成一个github用的SSH-Key</li></ol><pre class="line-numbers language-none"><code class="language-none">$ ssh-keygen -t rsa -C 'xxxxx@qq.com' -f ~/.ssh/github_id_rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>在 ~/.ssh 目录下新建一个config文件，添加如下内容（其中Host和HostName填写git服务器的域名，IdentityFile指定私钥的路径）</li></ol><pre class="line-numbers language-none"><code class="language-none"># giteeHost gitee.comHostName gitee.comPreferredAuthentications publickeyIdentityFile ~/.ssh/gitee_id_rsa# githubHost github.comHostName github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/github_id_rsa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.用ssh命令分别测试</p><pre class="line-numbers language-none"><code class="language-none">$ ssh -T git@gitee.com$ ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里以gitee为例，成功的话会返回下图内容</p><p><img src="https://images.gitee.com/uploads/images/2018/0921/161137_b71ef6be_967230.png" alt="输入图片说明"></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git基础</title>
    <link href="/2023/08/31/docs/git/git-ji-chu/"/>
    <url>/2023/08/31/docs/git/git-ji-chu/</url>
    
    <content type="html"><![CDATA[<h1 id="Git-基础">          <a href="#Git-基础" class="heading-link"><i class="fas fa-link"></i></a><a href="#Git-基础" class="headerlink" title="Git 基础"></a>Git 基础</h1>      <p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><p>Git 采用了分布式版本库的方式，不必服务器端软件支持，最终可以使得任何代码的提交者都可以成为“中央代码库”。Git的根本思想和基本工作原理主要是在本地复制一个“代码库”，每次提交的代码均是推送到本地代码库中，节约了由于网络带宽所带来的限制，不至于出现提交一次代码要等待很久的情况。另一方面，一旦中央代码库的服务器出现“崩溃”，那么任何“本地库”均可以还原中央代码库。</p>        <h1 id="Git-安装配置">          <a href="#Git-安装配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#Git-安装配置" class="headerlink" title="Git 安装配置"></a>Git 安装配置</h1>      <p>在使用Git前我们需要先安装 Git。Git 目前支持 Linux/Unix、Solaris、Mac和 Windows 平台上运行。</p><p>Git 各平台安装包下载地址为：<span class="exturl"><a class="exturl__link" href="http://git-scm.com/downloads">http://git-scm.com/downloads</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h2 id="Windows-平台上安装">          <a href="#Windows-平台上安装" class="heading-link"><i class="fas fa-link"></i></a><a href="#Windows-平台上安装" class="headerlink" title="Windows 平台上安装."></a>Windows 平台上安装.</h2>      <p>安装包下载地址：<span class="exturl"><a class="exturl__link" href="http://git-scm.com/download/win">http://git-scm.com/download/win</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>下载完成根据引导安装即可，安装选项根据需求选择，大部分安装选项保持默认的即可</p>        <h1 id="Git-配置">          <a href="#Git-配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h1>      <p>Git 仓库中有个 config 文件，专门用来配置或读取相应的工作环境变量，目录是当前仓库下 .git\config 文件。</p><p>在 Windows 一般都是C:\Users\userName\ .gitconfig</p>        <h2 id="用户信息">          <a href="#用户信息" class="heading-link"><i class="fas fa-link"></i></a><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h2>      <p>配置个人的用户名称和电子邮件地址：</p><pre class="line-numbers language-none"><code class="language-none">$ git config --global user.name "name"$ git config --global user.email test@mail.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果用了 <strong>–global</strong> 选项，那么更改的配置文件就是全局文件，以后你所有的项目都会默认使用这里配置的用户信息。</p><p>如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 –global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。</p>        <h2 id="查看配置信息">          <a href="#查看配置信息" class="heading-link"><i class="fas fa-link"></i></a><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h2>      <p>要检查已有的配置信息，可以使用 git config –list 命令：</p><pre class="line-numbers language-none"><code class="language-none">$ git config --list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h1 id="Git-工作流程">          <a href="#Git-工作流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#Git-工作流程" class="headerlink" title="Git 工作流程"></a>Git 工作流程</h1>      <p>一般工作流程如下：</p><ul><li>克隆 Git 资源作为工作目录。</li><li>在克隆的资源上添加或修改文件。</li><li>如果其他人修改了，你可以更新资源。</li><li>在提交前查看修改。</li><li>提交修改。</li><li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li></ul><p>下图展示了 Git 的工作流程：</p><p><img src="https://www.runoob.com/wp-content/uploads/2015/02/git-process.png" alt="img"></p>        <h1 id="Git-创建仓库">          <a href="#Git-创建仓库" class="heading-link"><i class="fas fa-link"></i></a><a href="#Git-创建仓库" class="headerlink" title="Git 创建仓库"></a>Git 创建仓库</h1>              <h2 id="git-init">          <a href="#git-init" class="heading-link"><i class="fas fa-link"></i></a><a href="#git-init" class="headerlink" title="git init"></a>git init</h2>      <p>Git 使用 <strong>git init</strong> 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 <strong>git init</strong> 是使用 Git 的第一个命令。</p><p>在执行完成 <strong>git init</strong> 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变。</p><p>使用当前目录作为Git仓库，我们只需使它初始化。</p><pre class="line-numbers language-none"><code class="language-none">git init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该命令执行完后会在当前目录生成一个 .git 目录。</p><p>使用我们指定目录作为Git仓库。</p><pre class="line-numbers language-none"><code class="language-none">git init newrepo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：</p><pre class="line-numbers language-none"><code class="language-none">$ git add *.java$ git add README$ git commit -m '初始化项目版本'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以上命令将目录下以 .java结尾及 README 文件提交到仓库中。</p>        <h2 id="git-clone">          <a href="#git-clone" class="heading-link"><i class="fas fa-link"></i></a><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2>      <p>我们使用 <strong>git clone</strong> 从现有 Git 仓库中拷贝项目。</p><p>克隆仓库的命令格式为：</p><pre class="line-numbers language-none"><code class="language-none">git clone &lt;repo&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果我们需要克隆到指定的目录，可以使用以下命令格式：</p><pre class="line-numbers language-none"><code class="language-none">git clone &lt;repo&gt; &lt;directory&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比如，要克隆 MPU_MVS_25A1 项目：</p><pre class="line-numbers language-none"><code class="language-none">$ git clone git@codeup.aliyun.com:5ee35787f0e06f96cfd22c79/MVS/MPU_MVS_25A1.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行该命令后，会在当前目录下创建一个名为 MPU_MVS_25A1 的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录。</p><p>如果要自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：</p><pre class="line-numbers language-none"><code class="language-none">$ git clone git@codeup.aliyun.com:5ee35787f0e06f96cfd22c79/MVS/MPU_MVS_25A1.git MPU_MVS_25A1_RENAME<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h1 id="Git-基本操作">          <a href="#Git-基本操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#Git-基本操作" class="headerlink" title="Git 基本操作"></a>Git 基本操作</h1>      <p>Git 常用的是以下 6 个命令：<strong>git clone</strong>、<strong>git push</strong>、<strong>git add</strong> 、<strong>git commit</strong>、<strong>git checkout</strong>、<strong>git pull</strong>。</p><p><img src="https://www.runoob.com/wp-content/uploads/2015/02/git-command.jpg" alt="img"></p><p><strong>说明：</strong></p><ul><li>workspace：工作区</li><li>staging area：暂存区/缓存区</li><li>local repository：版本库或本地仓库</li><li>remote repository：远程仓库</li></ul><p>一个简单的操作步骤：</p><pre class="line-numbers language-none"><code class="language-none">$ git init    $ git add .    $ git commit  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>git init - 初始化仓库。</li><li>git add . - 添加文件到暂存区。</li><li>git commit - 将暂存区内容添加到仓库中</li></ul>        <h2 id="提交与修改">          <a href="#提交与修改" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交与修改" class="headerlink" title="提交与修改"></a>提交与修改</h2>      <p>Git 的工作就是创建和保存你的项目的快照及与之后的快照进行对比。</p><p>下表列出了有关创建与提交你的项目的快照的命令：</p><div class="table-container"><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>git add</code></td><td align="left">添加文件到仓库</td></tr><tr><td align="left"><code>git status</code></td><td align="left">查看仓库当前的状态，显示有变更的文件。</td></tr><tr><td align="left"><code>git diff</code></td><td align="left">比较文件的不同，即暂存区和工作区的差异。</td></tr><tr><td align="left"><code>git commit</code></td><td align="left">提交暂存区到本地仓库。</td></tr><tr><td align="left"><code>git reset</code></td><td align="left">回退版本。</td></tr><tr><td align="left"><code>git rm</code></td><td align="left">删除工作区文件。</td></tr><tr><td align="left"><code>git mv</code></td><td align="left">移动或重命名工作区文件。</td></tr></tbody></table></div>        <h2 id="提交日志">          <a href="#提交日志" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交日志" class="headerlink" title="提交日志"></a>提交日志</h2>      <div class="table-container"><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>git log</code></td><td align="left">查看历史提交记录</td></tr><tr><td align="left"><code>git blame &lt;file&gt;</code></td><td align="left">以列表形式查看指定文件的历史修改记录</td></tr></tbody></table></div>        <h2 id="远程操作">          <a href="#远程操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h2>      <div class="table-container"><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>git remote</code></td><td align="left">远程仓库操作</td></tr><tr><td align="left"><code>git fetch</code></td><td align="left">从远程获取代码库</td></tr><tr><td align="left"><code>git pull</code></td><td align="left">下载远程代码并合并</td></tr><tr><td align="left"><code>git push</code></td><td align="left">上传远程代码并合并</td></tr></tbody></table></div>        <h1 id="Git-分支管理">          <a href="#Git-分支管理" class="heading-link"><i class="fas fa-link"></i></a><a href="#Git-分支管理" class="headerlink" title="Git 分支管理"></a>Git 分支管理</h1>      <p>几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。</p><p>创建分支命令：</p><pre class="line-numbers language-none"><code class="language-none">git branch (branchname)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换分支命令:</p><pre class="line-numbers language-none"><code class="language-none">git checkout (branchname)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。</p><p>合并分支命令:</p><pre class="line-numbers language-none"><code class="language-none">git merge <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你可以多次合并到统一分支， 也可以选择在合并之后直接删除被并入的分支。</p><p>开始前我们先创建一个测试目录：</p><pre class="line-numbers language-none"><code class="language-none">$ mkdir gitdemo$ cd gitdemo/$ git initInitialized empty Git repository...$ touch README$ git add README$ git commit -m '第一次版本提交'[master (root-commit) 3b58100] 第一次版本提交 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 README<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>        <h2 id="Git-分支管理-1">          <a href="#Git-分支管理-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Git-分支管理-1" class="headerlink" title="Git 分支管理"></a>Git 分支管理</h2>              <h3 id="列出分支">          <a href="#列出分支" class="heading-link"><i class="fas fa-link"></i></a><a href="#列出分支" class="headerlink" title="列出分支"></a>列出分支</h3>      <p>列出分支基本命令：</p><pre class="line-numbers language-none"><code class="language-none">git branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没有参数时，<strong>git branch</strong> 会列出你在本地的分支。</p><pre class="line-numbers language-none"><code class="language-none">$ git branch* master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此例的意思就是，我们有一个叫做 <strong>master</strong> 的分支，并且该分支是当前分支。</p><p>当你执行 <strong>git init</strong> 的时候，默认情况下 Git 就会为你创建 <strong>master</strong> 分支。</p><p>如果我们要手动创建一个分支。执行 <strong>git branch (branchname)</strong> 即可。</p><pre class="line-numbers language-none"><code class="language-none">$ git branch testing$ git branch* master  testing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们可以看到，有了一个新分支 <strong>testing</strong>。</p><p>当你以此方式在上次提交更新之后创建了新分支，如果后来又有更新提交， 然后又切换到了 <strong>testing</strong> 分支，Git 将还原你的工作目录到你创建分支时候的样子。</p><p>接下来演示如何切换分支，我们用 git checkout (branch) 切换到我们要修改的分支。</p><pre class="line-numbers language-none"><code class="language-none">$ lsREADME$ echo 'runoob.com' &gt; test.txt$ git add .$ git commit -m 'add test.txt'[master 3e92c19] add test.txt 1 file changed, 1 insertion(+) create mode 100644 test.txt$ lsREADME        test.txt$ git checkout testingSwitched to branch 'testing'$ lsREADME<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们切换到 <strong>testing</strong> 分支的时候，我们添加的新文件 test.txt 被移除了。切换回 <strong>master</strong> 分支的时候，它们又重新出现了。</p><pre class="line-numbers language-none"><code class="language-none">$ git checkout masterSwitched to branch 'master'$ lsREADME        test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们也可以使用 git checkout -b (branchname) 命令来创建新分支并立即切换到该分支下，从而在该分支中操作。</p><pre class="line-numbers language-none"><code class="language-none">$ git checkout -b newtestSwitched to a new branch 'newtest'$ git rm test.txt rm 'test.txt'$ lsREADME$ touch newText.txt$ git add .$ git commit -am 'removed test.txt、add newText.txt'[newtest c1501a2] removed test.txt、add newText.txt 2 files changed, 1 deletion(-) create mode 100644 newText.txt delete mode 100644 test.txt$ lsREADME        newText.txt$ git checkout masterSwitched to branch 'master'$ lsREADME        test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如你所见，我们创建了一个分支，在该分支的上移除了一些文件 test.txt，并添加了 newText.txt 文件，然后切换回我们的主分支，删除的 test.txt 文件又回来了，且新增加的 newText.txt不存在主分支中。</p><p>使用分支将工作切分开来，从而让我们能够在不同开发环境中做事，并来回切换。</p>        <h3 id="删除分支">          <a href="#删除分支" class="heading-link"><i class="fas fa-link"></i></a><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3>      <p>删除分支命令：</p><pre class="line-numbers language-none"><code class="language-none">git branch -d (branchname)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如我们要删除 testing 分支：</p><pre class="line-numbers language-none"><code class="language-none">$ git branch* master  testing$ git branch -d testingDeleted branch testing (was 85fc7e7).$ git branch* master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="分支合并">          <a href="#分支合并" class="heading-link"><i class="fas fa-link"></i></a><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3>      <p>某分支的独立内容，你希望将它合并回到你的主分支。 你可以使用以 <code>git merge </code>命令将任何分支合并到当前分支中去：</p><pre class="line-numbers language-none"><code class="language-none">$ git branch* master  newtest$ lsREADME        test.txt$ git merge newtestUpdating 3e92c19..c1501a2Fast-forward newText.txt  | 0 test.txt   | 1 - 2 files changed, 1 deletion(-) create mode 100644 newText.txt  delete mode 100644 test.txt$ lsREADME        newText.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上实例中我们将 newtest 分支合并到主分支去，test.txt 文件被删除。</p><p>合并完后就可以删除分支:</p><pre class="line-numbers language-none"><code class="language-none">$ git branch -d newtestDeleted branch newtest (was c1501a2).<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>删除后， 就只剩下 master 分支了：</p><pre class="line-numbers language-none"><code class="language-none">$ git branch* master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>        <h3 id="合并冲突">          <a href="#合并冲突" class="heading-link"><i class="fas fa-link"></i></a><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h3>      <p>合并并不仅仅是简单的文件添加、移除的操作，Git 也会合并文件的修改。</p><p>执行合并操作时，两个分支中的文件都有修改时，git合并时也会将文件合并，但是如果两个分支都修改了同一个文件的同一部分，那么合并时就很有可能会发生冲突，因为它无法判断哪一个修改是需要的。</p><p>比如master分支中 test.txt 文件第一行文本是“11111”，test分支中test.txt 文件第一行文本是“test”，这时在test分支上将master分支合并过来便会冲突。</p><pre class="line-numbers language-none"><code class="language-none">$ git merge masterCONFLICT (add/add): Merge conflict in test.txtAuto-merging test.txtAutomatic merge failed; fix conflicts and then commit the result.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这时候我们就需要自己合并冲突的文件了，打开冲突的文件：</p><pre class="line-numbers language-none"><code class="language-none">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEADtest=======11111&gt;&gt;&gt;&gt;&gt;&gt;&gt; master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&lt;&lt;&lt;&lt;&lt;&lt;&lt;  到 ======= 之间的部分是当前的修改，=======  到 &gt;&gt;&gt;&gt;&gt;&gt;&gt;之间的部分是传入的修改，此时就需要我们自己判断需要哪一个修改，修改完成，删除这三段标记，然后保存文件。</p><p>比如我们只保留master分支传进来的修改，则把文件内容改成这样:</p><pre class="line-numbers language-none"><code class="language-none">11111<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>保存文件后，可以用 <code>git add</code> 来告诉Git文件冲突已经解决，然后再提交：</p><pre class="line-numbers language-none"><code class="language-none">git add test.textgit commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以使用其他工具来处理合并冲突，比如电脑里如果装了VisualStudioCode的话，则可以用该程序打开冲突的文件，冲突的地方会高亮显示，而且可以快速选择合并修改的方式（使用当前修改、使用传入的修改、保留双方修改）</p>        <h1 id="Git-查看提交历史">          <a href="#Git-查看提交历史" class="heading-link"><i class="fas fa-link"></i></a><a href="#Git-查看提交历史" class="headerlink" title="Git 查看提交历史"></a>Git 查看提交历史</h1>      <p>Git 提交历史一般常用两个命令：</p><ul><li><p><strong>git log</strong> - 查看历史提交记录。</p></li><li><p><strong>git blame <file></file></strong> - 以列表形式查看指定文件的历史修改记录。</p></li><li>        <h3 id="git-log">          <a href="#git-log" class="heading-link"><i class="fas fa-link"></i></a><a href="#git-log" class="headerlink" title="git log"></a>git log</h3>      </li><li><p>在使用 Git 提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，我们可以使用 <strong>git log</strong> 命令查看。</p></li><li><p>针对我们前一章节的操作，使用 <strong>git log</strong> 命令列出历史提交记录如下：</p></li><li><pre><code>$ git log<pre class="line-numbers language-none"><code class="language-none">- 我们可以用 --oneline 选项来查看历史记录的简洁的版本。- ```  $ git log --oneline  $ git log --oneline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><p>你也可以用 <strong>–reverse</strong> 参数来逆向显示所有日志。</p></li><li><pre><code>$ git log --reverse --oneline<pre class="line-numbers language-none"><code class="language-none">- ### git blame- 如果要查看指定文件的修改记录可以使用 git blame 命令，格式如下：- ```  git blame &lt;file&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><p>git blame 命令是以列表形式显示修改记录，如下实例：</p></li><li><pre><code>$ git blame README<pre class="line-numbers language-none"><code class="language-none"># Git 标签如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。比如说，我们想为我们的 项目发布一个"1.0"版本。 我们可以用 git tag -a v1.0 命令给最新一次提交打上 "v1.0"的标签。-a 选项意为"创建一个带注解的标签"。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>$ git tag -a v1.0 -m '发布1.0版本'<pre class="line-numbers language-none"><code class="language-none">如果我们忘了给某个提交打标签，又将它发布了，我们可以给它追加标签。例如，假设我们之前发布了提交 0456798，但是那时候忘了给它打标签。 我们现在也可以：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>$ git tag -a v0.9 0456798 -m '发布0.9版本'<pre class="line-numbers language-none"><code class="language-none">如果我们要查看所有标签可以使用以下命令：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>$ git tag</code></pre></li></ul><pre><code># Git GUIGit安装时会自带一个GUI管理软件，但是使用不是很方便，可以使用其他Git管理软件来代替，能够很大的提升工作效率SourceTree 是一个免费的Git图形化管理软件，有Windows和Mac OS的版本，下载地址：[sourcetree ](https://www.sourcetreeapp.com/)</code></pre>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git换行符设置</title>
    <link href="/2023/08/31/docs/git/git-huan-xing-fu-she-zhi/"/>
    <url>/2023/08/31/docs/git/git-huan-xing-fu-she-zhi/</url>
    
    <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">#在vim下面查看当前文本的模式类型，一般为dos,unix:set ff#提交时转换为LF，检出时转换为CRLFgit config --global core.autocrlf true   #提交时转换为LF，检出时不转换（以上问题使用此命令可解决）git config --global core.autocrlf input   #提交检出均不转换git config --global core.autocrlf false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C  知识点汇总</title>
    <link href="/2023/08/31/docs/c/c-zhi-shi-dian-hui-zong/"/>
    <url>/2023/08/31/docs/c/c-zhi-shi-dian-hui-zong/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E5%A4%B4%E6%96%87%E4%BB%B6">头文件</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">数据类型</a></li><li><a href="#typedef">typedef</a></li><li><a href="#%E7%B1%BB%E5%9E%8B%E9%99%90%E5%AE%9A%E7%AC%A6">类型限定符</a></li><li><a href="#%E5%AE%9A%E4%B9%89%E5%B8%B8%E9%87%8F">定义常量</a></li><li><a href="#%E5%AD%98%E5%82%A8%E7%B1%BB">存储类</a></li><li><a href="#%E5%BC%95%E7%94%A8-vs-%E6%8C%87%E9%92%88">引用 vs 指针</a></li><li><a href="#struct-vs-class">struct vs class</a></li><li><a href="#%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0">成员函数</a></li><li><a href="#%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0">析构函数</a></li><li><a href="#%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">拷贝构造函数</a></li><li><a href="#friend-%E5%8F%8B%E5%85%83">friend 友元</a></li><li><a href="#inline-%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0">inline 内联函数</a></li><li><a href="#%E7%BB%A7%E6%89%BF%E7%B1%BB%E5%9E%8B">继承类型</a></li><li><a href="#%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD">运算符重载</a></li><li><a href="#%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98">动态内存</a></li><li><a href="#%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4">命名空间</a></li><li><a href="#%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8">预处理器</a><ul><li><a href="#include">#include</a></li><li><a href="#define">#define</a></li><li><a href="#%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91">条件编译</a></li><li><a href="#%E9%A2%84%E5%AE%9A%E4%B9%89%E5%AE%8F">预定义宏</a></li></ul></li><li><a href="#%E4%BF%A1%E5%8F%B7">信号</a></li><li><a href="#%E7%BA%BF%E7%A8%8B">线程</a></li><li><a href="#%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">强制类型转换</a><ul><li><a href="#const_cast">const_cast</a></li><li><a href="#static_cast">static_cast</a></li><li><a href="#dynamic_cast">dynamic_cast</a></li><li><a href="#reinterupt_cast">reinterupt_cast</a></li></ul></li><li><a href="#%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88">智能指针</a><ul><li><a href="#unique_ptr">unique_ptr</a></li><li><a href="#shared_ptr">shared_ptr</a></li><li><a href="#weak_ptr">weak_ptr</a></li></ul></li><li><a href="#%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4">内存空间</a></li></ul>        <h1 id="头文件">          <a href="#头文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h1>      <p><strong>.h</strong> 文件中能包含：</p><ul><li>类成员数据的声明，但不能赋值</li><li>类静态数据成员的定义和赋值，但不建议</li><li>类的成员函数的声明</li><li>非类成员函数的声明</li><li>常数的定义：如：constint a=5;</li><li>静态函数的定义</li><li>类的内联函数的定义</li></ul><p>不能包含：</p><ul><li>所有非静态变量（不是类的数据成员）的声明</li><li>默认命名空间声明不要放在头文件，using namespace std; 等应放在 .cpp 中，在 .h 文件中使用 std::string</li></ul>        <h1 id="数据类型">          <a href="#数据类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1>      <div class="table-container"><table><thead><tr><th>类型</th><th>位</th></tr></thead><tbody><tr><td>char</td><td>1 个字节</td></tr><tr><td>int</td><td>4 个字节</td></tr><tr><td>short int</td><td>2 个字节</td></tr><tr><td>long int</td><td>8 个字节</td></tr><tr><td>float</td><td>4 个字节</td></tr><tr><td>double</td><td>8 个字节</td></tr><tr><td>long double</td><td>16 个字节</td></tr><tr><td>wchar_t</td><td>2 或 4 个字节</td></tr></tbody></table></div>        <h1 id="typedef">          <a href="#typedef" class="heading-link"><i class="fas fa-link"></i></a><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h1>      <p>使用 typedef 为一个已有的类型取一个新的名字</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> type newname<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h1 id="类型限定符">          <a href="#类型限定符" class="heading-link"><i class="fas fa-link"></i></a><a href="#类型限定符" class="headerlink" title="类型限定符"></a>类型限定符</h1>      <div class="table-container"><table><thead><tr><th>限定符</th><th>含义</th></tr></thead><tbody><tr><td>const</td><td>const 类型的对象在程序执行期间不能被修改改变。</td></tr><tr><td>volatile</td><td>修饰符 volatile 告诉编译器不需要优化volatile声明的变量，让程序可以直接从内存中读取变量。对于一般的变量编译器会对变量进行优化，将内存中的变量值放在寄存器中以加快读写效率。</td></tr><tr><td>restrict</td><td>由 restrict 修饰的指针是唯一一种访问它所指向的对象的方式。只有 C99 增加了新的类型限定符 restrict。</td></tr></tbody></table></div>        <h1 id="定义常量">          <a href="#定义常量" class="heading-link"><i class="fas fa-link"></i></a><a href="#定义常量" class="headerlink" title="定义常量"></a>定义常量</h1>      <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 使用 #define 预处理器</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LENGTH</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token comment">// const 关键字</span><span class="token keyword">const</span> <span class="token keyword">int</span> WIDTH  <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="存储类">          <a href="#存储类" class="heading-link"><i class="fas fa-link"></i></a><a href="#存储类" class="headerlink" title="存储类"></a>存储类</h1>      <div class="table-container"><table><thead><tr><th>存储类</th><th>含义</th></tr></thead><tbody><tr><td>auto</td><td>声明变量时根据初始化表达式自动推断该变量的类型</td></tr><tr><td>register</td><td>用于定义存储在寄存器中而不是 RAM 中的局部变量，用于需要快速访问的变量，不能对它应用一元的 ‘&amp;’ 运算符（因为它没有内存位置）</td></tr><tr><td>static</td><td>用在类数据成员上时，会导致仅有一个该成员的副本被类的所有对象共享；修饰全局变量时，会使变量的作用域限制在声明它的文件内</td></tr><tr><td>extern</td><td>全局变量的引用，全局变量对所有的程序文件都是可见</td></tr><tr><td>mutable</td><td></td></tr><tr><td>thread_local</td><td>仅可在它在其上创建的线程上访问，变量在创建线程时创建，并在销毁线程时销毁，每个线程都有其自己的变量副本</td></tr></tbody></table></div>        <h1 id="引用-vs-指针">          <a href="#引用-vs-指针" class="heading-link"><i class="fas fa-link"></i></a><a href="#引用-vs-指针" class="headerlink" title="引用 vs 指针"></a>引用 vs 指针</h1>      <ul><li>不存在空引用。引用必须连接到一块合法的内存。</li><li>一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象。</li><li>引用必须在创建时被初始化。指针可以在任何时间被初始化。</li></ul>        <h1 id="struct-vs-class">          <a href="#struct-vs-class" class="heading-link"><i class="fas fa-link"></i></a><a href="#struct-vs-class" class="headerlink" title="struct vs class"></a>struct vs class</h1>      <p>class 和 struct 定义类的唯一区别是默认的反问权限，struct 默认是 public，class 默认是 private。</p>        <h1 id="成员函数">          <a href="#成员函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#成员函数" class="headerlink" title="成员函数"></a>成员函数</h1>      <p>成员函数可以在类的外部使用范围解析运算符 :: 定义该函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> <span class="token class-name">Box</span><span class="token double-colon punctuation">::</span><span class="token function">getVolume</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> length <span class="token operator">*</span> breadth <span class="token operator">*</span> height<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="析构函数">          <a href="#析构函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h1>      <p>析构函数是类的一种特殊的成员函数，它会在每次删除所创建的对象时执行</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Line</span><span class="token punctuation">{</span>   <span class="token keyword">public</span><span class="token operator">:</span>      <span class="token operator">~</span><span class="token function">Line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 这是析构函数声明</span>    <span class="token keyword">private</span><span class="token operator">:</span>      <span class="token keyword">double</span> length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token class-name">Line</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">Line</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Object is being deleted"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="拷贝构造函数">          <a href="#拷贝构造函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h1>      <p>拷贝构造函数是一种特殊的构造函数，它在创建对象时，是使用同一类中之前创建的对象来初始化新创建的对象。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Line</span><span class="token punctuation">{</span>   <span class="token keyword">public</span><span class="token operator">:</span>      <span class="token function">Line</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 简单的构造函数</span>      <span class="token function">Line</span><span class="token punctuation">(</span><span class="token keyword">const</span> Line <span class="token operator">&amp;</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 拷贝构造函数</span>    <span class="token keyword">private</span><span class="token operator">:</span>      <span class="token keyword">int</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Line</span><span class="token double-colon punctuation">::</span><span class="token function">Line</span><span class="token punctuation">(</span><span class="token keyword">const</span> Line <span class="token operator">&amp;</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"调用拷贝构造函数并为指针 ptr 分配内存"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    ptr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">;</span>    <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token operator">*</span>obj<span class="token punctuation">.</span>ptr<span class="token punctuation">;</span> <span class="token comment">// 拷贝值</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="friend-友元">          <a href="#friend-友元" class="heading-link"><i class="fas fa-link"></i></a><a href="#friend-友元" class="headerlink" title="friend 友元"></a>friend 友元</h1>      <p>类的友元函数是定义在类外部，但有权访问类的所有私有（private）成员和保护（protected）成员。尽管友元函数的原型有在类的定义中出现过，但是友元函数并不是成员函数。</p><p>友元也可以是一个类，该类被称为友元类类。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Box</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>   <span class="token keyword">double</span> width<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>   <span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token function">printWidth</span><span class="token punctuation">(</span>Box box<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">void</span> <span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token keyword">double</span> wid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 请注意：printWidth() 不是任何类的成员函数</span><span class="token keyword">void</span> <span class="token function">printWidth</span><span class="token punctuation">(</span>Box box<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">/* 因为 printWidth() 是 Box 的友元，它可以直接访问该类的任何成员 */</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Width of box : "</span> <span class="token operator">&lt;&lt;</span> box<span class="token punctuation">.</span>width <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="inline-内联函数">          <a href="#inline-内联函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#inline-内联函数" class="headerlink" title="inline 内联函数"></a>inline 内联函数</h1>      <p>如果一个函数是内联的，那么在编译时，编译器会把该函数的代码副本放置在每个调用该函数的地方。对内联函数进行任何修改，都需要重新编译函数的所有客户端，因为编译器需要重新更换一次所有的代码，否则将会继续使用旧的函数。</p>        <h1 id="继承类型">          <a href="#继承类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#继承类型" class="headerlink" title="继承类型"></a>继承类型</h1>      <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Rectangle</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Shape</span></span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th>继承类型</th><th>说明</th></tr></thead><tbody><tr><td>public</td><td>基类的公有成员也是派生类的公有成员，基类的保护成员也是派生类的保护成员，基类的私有成员不能直接被派生类访问</td></tr><tr><td>protected</td><td>基类的公有和保护成员将成为派生类的保护成员。</td></tr><tr><td>private</td><td>基类的公有和保护成员将成为派生类的私有成员。</td></tr></tbody></table></div>        <h1 id="运算符重载">          <a href="#运算符重载" class="heading-link"><i class="fas fa-link"></i></a><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h1>      <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Box</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>   <span class="token keyword">double</span> length<span class="token punctuation">;</span>      <span class="token comment">// 长度</span>   <span class="token keyword">double</span> breadth<span class="token punctuation">;</span>     <span class="token comment">// 宽度</span>      <span class="token comment">// 重载 + 运算符，用于把两个 Box 对象相加</span>   Box <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Box<span class="token operator">&amp;</span> b<span class="token punctuation">)</span>   <span class="token punctuation">{</span>      Box box<span class="token punctuation">;</span>      box<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>length <span class="token operator">+</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      box<span class="token punctuation">.</span>breadth <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>breadth <span class="token operator">+</span> b<span class="token punctuation">.</span>breadth<span class="token punctuation">;</span>      <span class="token keyword">return</span> box<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="动态内存">          <a href="#动态内存" class="heading-link"><i class="fas fa-link"></i></a><a href="#动态内存" class="headerlink" title="动态内存"></a>动态内存</h1>      <p>new 运算符为给定类型的变量在运行时分配堆内的内存，这会返回所分配的空间地址。如果不再需要动态分配的内存空间，可以使用 delete 运算符，删除之前由 new 运算符分配的内存。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span><span class="token operator">*</span> pvalue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span>···<span class="token keyword">delete</span> pvalue<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>        <h1 id="命名空间">          <a href="#命名空间" class="heading-link"><i class="fas fa-link"></i></a><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h1>      <p>命名空间的定义使用关键字 namespace，后跟命名空间的名称：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span> namespace_name <span class="token punctuation">{</span>   <span class="token comment">// 代码声明</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>为了调用带有命名空间的函数或变量，需要在前面加上命名空间的名称：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">name<span class="token double-colon punctuation">::</span>code<span class="token punctuation">;</span>  <span class="token comment">// code 可以是变量或函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 using namespace 指令，这样在使用命名空间时就可以不用在前面加上命名空间的名称。这个指令会告诉编译器，后续的代码将使用指定的命名空间中的名称：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h1 id="预处理器">          <a href="#预处理器" class="heading-link"><i class="fas fa-link"></i></a><a href="#预处理器" class="headerlink" title="预处理器"></a>预处理器</h1>              <h2 id="include">          <a href="#include" class="heading-link"><i class="fas fa-link"></i></a><a href="#include" class="headerlink" title="#include"></a>#include</h2>      <p><strong>include</strong> 是一个来自 C 语言的宏命令，它在编译器进行编译之前，即在预编译的时候就会起作用。#include 的作用是把它后面所写的那个文件的内容一字不改地包含到当前的文件中来。值得一提的是，它本身是没有其它任何作用与副功能的，它的作用就是把每一个它出现的地方，替换成它后面所写的那个文件的内容。</p><ul><li>系统自带的头文件用尖括号括起来，这样编译器会在系统文件目录下查找。</li><li>用户自定义的文件用双引号括起来，编译器首先会在用户目录下查找，然后在到 C++ 安装目录（比如 VC 中可以指定和修改库文件查找路径，Unix 和 Linux 中可以通过环境变量来设定）中查找，最后在系统文件中查找。</li></ul>        <h2 id="define">          <a href="#define" class="heading-link"><i class="fas fa-link"></i></a><a href="#define" class="headerlink" title="#define"></a>#define</h2>      <p>#define 预处理指令用于创建符号常量。该符号常量通常称为宏，指令的一般形式是：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">macro</span><span class="token expression"><span class="token operator">-</span>name replacement<span class="token operator">-</span>text </span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>示例<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span> <span class="token expression"><span class="token number">3.14159</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MIN</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul>        <h2 id="条件编译">          <a href="#条件编译" class="heading-link"><i class="fas fa-link"></i></a><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h2>      <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEBUG</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>   cerr <span class="token operator">&lt;&lt;</span><span class="token string">"Trace: Inside main function"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="预定义宏">          <a href="#预定义宏" class="heading-link"><i class="fas fa-link"></i></a><a href="#预定义宏" class="headerlink" title="预定义宏"></a>预定义宏</h2>      <div class="table-container"><table><thead><tr><th>宏</th><th>描述</th></tr></thead><tbody><tr><td>__LINE__</td><td>程序编译时包含当前行号</td></tr><tr><td>__FILE__</td><td>程序编译时包含当前文件名</td></tr><tr><td>__DATE__</td><td>包含一个形式为 month/day/year 的字符串，它表示把源文件转换为目标代码的日期</td></tr><tr><td>__TIME__</td><td>包含一个形式为 hour:minute:second 的字符串，它表示程序被编译的时</td></tr></tbody></table></div>        <h1 id="信号">          <a href="#信号" class="heading-link"><i class="fas fa-link"></i></a><a href="#信号" class="headerlink" title="信号"></a>信号</h1>      <div class="table-container"><table><thead><tr><th>信号</th><th>描述</th></tr></thead><tbody><tr><td>SIGABRT</td><td>程序的异常终止，如调用 abort</td></tr><tr><td>SIGFPE</td><td>错误的算术运算，比如除以零或导致溢出的操作</td></tr><tr><td>SIGILL</td><td>检测非法指令</td></tr><tr><td>SIGINT</td><td>程序终止(interrupt)信号</td></tr><tr><td>SIGSEGV</td><td>非法访问内存</td></tr><tr><td>SIGTERM</td><td>发送到程序的终止请求</td></tr></tbody></table></div><p>C++ 信号处理库提供了 signal 函数，用来捕获突发事件，raise 函数来生成信号：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;csignal&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">signalHandler</span><span class="token punctuation">(</span> <span class="token keyword">int</span> signum <span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Interrupt signal ("</span> <span class="token operator">&lt;&lt;</span> signum <span class="token operator">&lt;&lt;</span> <span class="token string">") received.\n"</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>signum<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 注册信号 SIGINT 和信号处理程序</span>    <span class="token function">signal</span><span class="token punctuation">(</span>SIGINT<span class="token punctuation">,</span> signalHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">raise</span><span class="token punctuation">(</span>SIGINT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="线程">          <a href="#线程" class="heading-link"><i class="fas fa-link"></i></a><a href="#线程" class="headerlink" title="线程"></a>线程</h1>      <p>c++ 11 之后有了标准的线程库</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread&gt;</span></span>std<span class="token double-colon punctuation">::</span>thread<span class="token double-colon punctuation">::</span>id main_thread_id <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello Concurrent World\n"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>main_thread_id <span class="token operator">==</span> std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"This is the main thread.\n"</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"This is not the main thread.\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">pause_thread</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token function">seconds</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"pause of "</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">" seconds ended\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>thread <span class="token function">t</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">.</span><span class="token function">hardware_concurrency</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token comment">//可以并发执行多少个(不准确)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"native_handle "</span> <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">.</span><span class="token function">native_handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token comment">//可以并发执行多少个(不准确)</span>    t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>thread <span class="token function">a</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>thread threads<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                         <span class="token comment">// 默认构造线程</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Spawning 5 threads...\n"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">thread</span><span class="token punctuation">(</span>pause_thread<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// move-assign threads</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Done spawning threads. Now waiting for them to join:\n"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>thread <span class="token operator">:</span> threads<span class="token punctuation">)</span>        thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"All threads joined!\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="强制类型转换">          <a href="#强制类型转换" class="heading-link"><i class="fas fa-link"></i></a><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h1>              <h2 id="const-cast">          <a href="#const-cast" class="heading-link"><i class="fas fa-link"></i></a><a href="#const-cast" class="headerlink" title="const_cast"></a>const_cast</h2>      <p>const_cast 用于去除对象的 const 或 volatile 属性</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">Func</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token operator">&amp;</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">ConstCast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token keyword">const</span> <span class="token keyword">double</span> pi <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>     <span class="token function">Func</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">const_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&amp;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// No error.  </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="static-cast">          <a href="#static-cast" class="heading-link"><i class="fas fa-link"></i></a><a href="#static-cast" class="headerlink" title="static_cast"></a>static_cast</h2>      <p>static_cast 强制转换只会在编译时检查，但没有运行时类型检查来保证转换的安全性。同时，static_cast 也不能去掉 expression 的 const、volitale、或者 __unaligned 属性。</p><p>其主要应用场景有：</p><ul><li>用于类层次结构中基类（父类）和派生类（子类）之间指针或引用的转换。进行上行转换（把派生类的指针或引用转换成基类表示）是安全的；进行下行转换（把基类指针或引用转换成派生类表示）时，由于没有动态类型检查，所以是不安全的。</li><li>用于基本数据类型之间的转换，如把 int 转换成char，把 int 转换成enum。这种转换的安全性也要开发人员来保证。</li><li>把 void 转换成目标类型的空指针.</li><li>把任何类型的表达式转换成 void 类型。<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Sub sub<span class="token punctuation">;</span>Base <span class="token operator">*</span>base_ptr <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Base<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul>        <h2 id="dynamic-cast">          <a href="#dynamic-cast" class="heading-link"><i class="fas fa-link"></i></a><a href="#dynamic-cast" class="headerlink" title="dynamic_cast"></a>dynamic_cast</h2>      <p>dynamic_cast 运算符的主要用途：将基类的指针或引用安全地转换成派生类的指针或引用。并用派生类的指针或引用调用非虚函数。</p><p>如果是基类指针或引用调用的是虚函数无需转换就能在运行时调用派生类的虚函数。</p><p>前提条件：当我们将 dynamic_cast 用于某种类型的指针或引用时，只有该类型至少含有虚函数时(最简单是基类析构函数为虚函数)，才能进行这种转换。否则，编译器会报错。</p><p>在指针类型中，基类指针所指对象为基类类型，在这种情况下 dynamic_cast 在运行时做检查，转换失败，返回结果为 0；</p><p>在引用类型中，并不存在空引用，所以引用的 dynamic_cast 检测失败时会抛出一个 bad_cast 异常。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Base <span class="token operator">*</span> base <span class="token operator">=</span> <span class="token keyword">new</span> Base<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Derived <span class="token operator">*</span>der <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Derived<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"转换成功"</span> <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    der<span class="token operator">-&gt;</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"转换失败"</span> <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="reinterupt-cast">          <a href="#reinterupt-cast" class="heading-link"><i class="fas fa-link"></i></a><a href="#reinterupt-cast" class="headerlink" title="reinterupt_cast"></a>reinterupt_cast</h2>      <p>reinterpret_cast 用来处理无关类型转换，通常为操作数的位模式提供较低层次的重新解释。</p><p>推荐使用在：</p><ul><li>从指针类型到一个足够大的整数类型</li><li>从整数类型或者枚举类型到指针类型</li><li>从一个指向函数的指针到另一个不同类型的指向函数的指针</li><li>从一个指向对象的指针到另一个不同类型的指向对象的指针</li><li>从一个指向类函数成员的指针到另一个指向不同类型的函数成员的指针</li><li>从一个指向类数据成员的指针到另一个指向不同类型的数据成员的指针</li></ul><p>错误的使用 reinterpret_cast 很容易导致程序的不安全，只有将转换后的类型值转换回到其原始类型，这样才是正确使用 reinterpret_cast 方式。</p>        <h1 id="智能指针">          <a href="#智能指针" class="heading-link"><i class="fas fa-link"></i></a><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h1>              <h2 id="unique-ptr">          <a href="#unique-ptr" class="heading-link"><i class="fas fa-link"></i></a><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h2>      <p>由 unique_ptr 管理的内存，只能被一个对象持有，所以，unique_ptr不支持复制和赋值。想要把一个 unique_ptr 的内存交给另外一个 unique_ptr 对象管理。只能使用 std::move 转移当前对象的所有权。转移之后，当前对象不再持有此内存，新的对象将获得专属所有权。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> w <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_unique</span><span class="token generic class-name"><span class="token operator">&lt;</span>Widget<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> w2 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// w2 获得内存所有权，w 此时等于 nullptr</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>unique_ptr在默认情况下和裸指针的大小是一样的，所以内存上没有任何的额外消耗，性能是最优的。</p>        <h2 id="shared-ptr">          <a href="#shared-ptr" class="heading-link"><i class="fas fa-link"></i></a><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h2>      <p>多个智能指针可以共享同一个对象。shared_ptr 内部是利用引用计数来实现内存的自动管理，每当复制一个 shared_ptr，引用计数会 +1。当一个 shared_ptr 离开作用域时，引用计数会 -1。当引用计数为0的时候，则 delete 内存。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> w <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>Widget<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>shared_ptr的内存占用是裸指针的两倍。因为除了要管理一个裸指针外，还要维护一个引用计数。</p>        <h2 id="weak-ptr">          <a href="#weak-ptr" class="heading-link"><i class="fas fa-link"></i></a><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h2>      <p>允许你共享但不拥有某对象，一旦最末一个拥有该对象的智能指针失去了所有权，任何 weak_ptr 都会自动成空。</p>        <h1 id="内存空间">          <a href="#内存空间" class="heading-link"><i class="fas fa-link"></i></a><a href="#内存空间" class="headerlink" title="内存空间"></a>内存空间</h1>      <div class="table-container"><table><thead><tr><th>区</th><th>秒速</th></tr></thead><tbody><tr><td>堆</td><td>操作系统维护的一块动态分配内存，malloc 在堆上分配的内存块，使用 free 释放内存</td></tr><tr><td>栈</td><td>由编译器自动分配释放，存放函数的参数值，局部变量的值等</td></tr><tr><td>自由存储区</td><td>C++ 中通过 new 与 delete 动态分配和释放对象的抽象概念</td></tr><tr><td>全局区（静态区）</td><td>全局变量和静态变量分配在此一块内存中</td></tr><tr><td>常量存储区</td><td>存储常量字符串, 程序结束后由系统释放</td></tr></tbody></table></div>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kotlin 标准函数</title>
    <link href="/2023/08/31/docs/kotlin/kotlin-biao-zhun-han-shu/"/>
    <url>/2023/08/31/docs/kotlin/kotlin-biao-zhun-han-shu/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p>        <h2 id="Kotlin标准函数">          <a href="#Kotlin标准函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#Kotlin标准函数" class="headerlink" title="Kotlin标准函数"></a><strong>Kotlin标准函数</strong></h2>              <h3 id="let函数">          <a href="#let函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#let函数" class="headerlink" title="let函数"></a><strong>let函数</strong></h3>      <p>let函数会将调用它的对象作为参数传递到Lambda表达式中。</p><p>例如有如下方法</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">doStudy</span><span class="token punctuation">(</span>study<span class="token operator">:</span> Study<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//Study接口中只有readBooks()和doHomeWork()两个方法</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>study <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        study<span class="token punctuation">.</span><span class="token function">readBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>study <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        study<span class="token punctuation">.</span><span class="token function">doHomeWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候结合?.操作符合let函数就可以对代码进行优化了，如下所示</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"> <span class="token keyword">fun</span> <span class="token function">doStudy</span><span class="token punctuation">(</span>study<span class="token operator">:</span> Study<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//?.操作符表示对象不为空时正常调用相应的方法，对象为空时就什么都不做</span>    study<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>stu <span class="token operator">-&gt;</span>        stu<span class="token punctuation">.</span><span class="token function">readBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//因为let函数可以正常调用，所以对象一定不为空</span>        stu<span class="token punctuation">.</span><span class="token function">doHomeWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>          <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后利用Lambda语言的特性：当Lambda表达式的参数列表中只有一个参数时，可以不用声明参数名，直接用it关键字代替即可。那么代码就可以进一步简化</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">doStudy</span><span class="token punctuation">(</span>study<span class="token operator">:</span> Study<span class="token punctuation">)</span><span class="token punctuation">{</span>    study<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>        it<span class="token punctuation">.</span><span class="token function">readBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        it<span class="token punctuation">.</span><span class="token function">doHomeWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意： let函数是可以处理全局变量判空的问题的，而if判断语句则无法做到这一点，比如我们将doStudy()函数中的参数变成一个全局变量，使用let函数仍然可以正常工作，但使用if判空语句就会提示错误，代码如下所示：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">var</span> study<span class="token operator">:</span> Study<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">fun</span> <span class="token function">doStudy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>study <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        study<span class="token punctuation">.</span><span class="token function">doHomeWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//这里会报错，下面一行也是</span>        study<span class="token punctuation">.</span><span class="token function">readBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">//</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用study的方法会报错是因为全局变量的值随时都可能被其他线程所修改，即使做了判空处理仍然无法保证if语句中的study对象没有空指针的风险。</p>        <h3 id="with函数">          <a href="#with函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#with函数" class="headerlink" title="with函数"></a><strong>with函数</strong></h3>      <p>with函数 接收两个参数：第一个参数可以是一个任意类型的对象，第二个参数是一个Lambda表达式。with函数会在Lambda表达式中提供第一个参数对象的上下文，并使用Lambda表达式的最后一行作为返回值返回。它可以在连续调用同一个对象的多个方法时让代码变得更加精简。</p><p>举个例子： 比如有一个水果列表，现在我们想吃完所有水果，并将结果答应出来，就可以这样写</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Apple"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Banana"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Orange"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Pear"</span></span><span class="token punctuation">)</span><span class="token keyword">val</span> builder <span class="token operator">=</span> <span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Start eating fruits.\n"</span></span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>fruit <span class="token keyword">in</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>     builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"\n"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span>builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Ate all fruits"</span></span><span class="token punctuation">)</span><span class="token keyword">val</span> result <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码，连续调用了多次builder对象的方法，这时候就可以考虑使用with函数了来让代码变得更加精简了。如下所示</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Apple"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Banana"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Orange"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Pear"</span></span><span class="token punctuation">)</span><span class="token keyword">val</span> builder <span class="token operator">=</span> <span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">with</span><span class="token punctuation">(</span><span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Start eating fruits.\n"</span></span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>fruit <span class="token keyword">in</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">append</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"\n"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Ate all fruits."</span></span><span class="token punctuation">)</span>    <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码其实也不难理解，首先我们给with函数第一个参数传入一个StringBuilder对象，那么接下来第二个参数也就是Lambda表达式的上下文就会是这个StringBuilder对象，于是我们在Lambda表达式中就不用使用builder.append()的方式，而是直接使用append()的方式来调用，Lambda的最后一行会作为with函数的返回值返回，最终将结果打印出来，两段代码运行结果是一样的</p>        <h3 id="run函数">          <a href="#run函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#run函数" class="headerlink" title="run函数"></a><strong>run函数</strong></h3>      <p>run函数的用法和使用场景其实和with函数斯非常类似的，只是稍微做了些语法改动而已。首先run函数是不能直接调用的，而是一定要调用某个对象的run函数才行；其次run函数只接收一个Lambda参数，并且会在Lambda表达式中提供调用对象的上下文。其他方面和with函数是一样的，也会使用Lambda表达式中的最后一行代码作为返回值返回。</p><p>现在可以用run函数来改一下吃水果的这段代码，如下所示：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Apple"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Banana"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Orange"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Pear"</span></span><span class="token punctuation">)</span><span class="token keyword">val</span> builder <span class="token operator">=</span> <span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> result <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">{</span>    <span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Start eating fruits.\n"</span></span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>fruit <span class="token keyword">in</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">append</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"\n"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Ate all fruits."</span></span><span class="token punctuation">)</span>    <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总体来说变化非常小，只是将调用with函数并传入StringBuilder对象改成了调用StringBuilder对象的run方法，其他没有任何区别。两段代码运行结果都一样。</p>        <h3 id="apply函数">          <a href="#apply函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#apply函数" class="headerlink" title="apply函数"></a><strong>apply函数</strong></h3>      <p>apply函数和run函数也是极其类似的。都要在某个对象上调用，并且只接收一个Lambda参数，也会在Lambda表达式中提供调用对象的上下文，但是apply函数无法指定返回值，而是会返回调用对象本身。</p><p>那么现在用apply函数来改写吃水果这段代码，如下所示：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Apple"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Banana"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Orange"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Pear"</span></span><span class="token punctuation">)</span><span class="token keyword">val</span> builder <span class="token operator">=</span> <span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> result <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">{</span>    <span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Start eating fruits.\n"</span></span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>fruit <span class="token keyword">in</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">append</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"\n"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Ate all fruits."</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意这里的代码变化，因为apply函数无法指定返回值，只能返回调用对象本身，因此这里的result实际上是一个StringBuilder对象。所以我们在最后打印的时候还要调用它的toString()方法才行。这段代码运行结果和前面两段仍然完全相同。</p>        <h3 id="also函数">          <a href="#also函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#also函数" class="headerlink" title="also函数"></a><strong>also函数</strong></h3>      <p>also函数和apply函数用法基本一致的。要在某个对象上调用，并且返回调用对象本身。只不过also函数在lambda中要用一个名称（默认为 it），在 apply中，不必添加其他前缀来访问其成员，或者使用 this引用 .</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">am<span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span><span class="token comment">//使用 it 来调用对象</span>it<span class="token punctuation">.</span><span class="token function">xxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>am<span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span><span class="token comment">//使用 this 来调用对象 或者 直接调用对象</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">xxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">xxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小总结：</p><pre class="line-numbers language-none"><code class="language-none">let、run返回函数体最后一行apply、also返回调用对象本身let、also函数体调用时默认用 itrun、apply函数体调用时默认用 thiswith调用时需要传一个对象，返回函数体最后一行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="use函数">          <a href="#use函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#use函数" class="headerlink" title="use函数"></a><strong>use函数</strong></h3>      <p>使用<code>use</code>函数的对象要实现<code>Closeable</code>方法，并且无论接下来的操作是否引发异常都会自动正确关闭它，比如<code>InputStream</code>就可以使用<code>use</code>函数</p><p>常规写法</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">var</span> input<span class="token operator">:</span>InputStream<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">try</span><span class="token punctuation">{</span>input<span class="token operator">=</span> <span class="token function">FileInputStream</span><span class="token punctuation">(</span><span class="token function">File</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"aaaaa"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//对 input 进行操作</span><span class="token comment">// ......</span><span class="token punctuation">}</span>finall<span class="token punctuation">{</span><span class="token comment">//最后需要调用close（）</span>input<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用use函数写法</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> input <span class="token operator">=</span> <span class="token function">FileInputStream</span><span class="token punctuation">(</span><span class="token function">File</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"aaaaa"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>input<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">{</span><span class="token comment">//对 input 进行操作</span><span class="token comment">//不需要手动close</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>use</code> 函数可以极大地简化文件操作的代码</p>        <h3 id="repeat">          <a href="#repeat" class="heading-link"><i class="fas fa-link"></i></a><a href="#repeat" class="headerlink" title="repeat"></a><strong>repeat</strong></h3>      <p>重复执行指定次数</p><pre class="line-numbers language-none"><code class="language-none">repeat(5){ println("count:$it") }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>等价于</p><pre class="line-numbers language-none"><code class="language-none">for (i in 0..4) { println("count:$i") }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-none"><code class="language-none">for (i in 0 until 5) { println("count:$i") }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-none"><code class="language-none">(0..4).forEach {  println("count:$i") }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>        <h3 id="takeIf-和-takeUnless">          <a href="#takeIf-和-takeUnless" class="heading-link"><i class="fas fa-link"></i></a><a href="#takeIf-和-takeUnless" class="headerlink" title="**takeIf  和 takeUnless **"></a>**takeIf  和 takeUnless **</h3>      <p><code>takeIf</code> 传递一个函数参数，如果函数结果为true，返回T对象，否则返回null<br>例如，判断文件是否存在，不存在则返回</p><pre class="line-numbers language-none"><code class="language-none">var file = File("filePath")if (file.exists()) { //do something} else { return}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>takeIf</code>:</p><pre class="line-numbers language-none"><code class="language-none">var file = File("filePath").takeIf { it.exists() }?:return false//do something<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>takeUnless</code> 传递一个函数参数，如果函数结果为false，返回T对象，否则返回null</p>]]></content>
    
    
    <categories>
      
      <category>Kotlin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kotlin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kotlin 扩展函数</title>
    <link href="/2023/08/31/docs/kotlin/kotlin-kuo-zhan-han-shu/"/>
    <url>/2023/08/31/docs/kotlin/kotlin-kuo-zhan-han-shu/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p>        <h3 id="内置扩展函数">          <a href="#内置扩展函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#内置扩展函数" class="headerlink" title="内置扩展函数"></a><strong>内置扩展函数</strong></h3>              <h4 id="IO操作扩展函数">          <a href="#IO操作扩展函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#IO操作扩展函数" class="headerlink" title="IO操作扩展函数"></a>IO操作扩展函数</h4>              <h5 id="复制文件">          <a href="#复制文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h5>      <p>复制文件A到文件B</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> originFile <span class="token operator">=</span> <span class="token function">File</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">TEST_PATH</span></span><span class="token string">\\copytest1.txt"</span></span><span class="token punctuation">)</span><span class="token keyword">val</span> dstFile <span class="token operator">=</span> <span class="token function">File</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">TEST_PATH</span></span><span class="token string">\\copytest2.txt"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>常规写法</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> inputStream <span class="token operator">=</span> <span class="token function">FileInputStream</span><span class="token punctuation">(</span>originFile<span class="token punctuation">)</span><span class="token keyword">val</span> os <span class="token operator">=</span> <span class="token function">FileOutputStream</span><span class="token punctuation">(</span>dstFile<span class="token punctuation">)</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> buffer <span class="token operator">=</span> <span class="token function">ByteArray</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> len <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>len <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span>        len <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    os<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>use</code> 结合扩展函数<code>InputStream.copyTo()</code>写法</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> inputStream <span class="token operator">=</span> <span class="token function">FileInputStream</span><span class="token punctuation">(</span>originFile<span class="token punctuation">)</span><span class="token keyword">val</span> os <span class="token operator">=</span> <span class="token function">FileOutputStream</span><span class="token punctuation">(</span>dstFile<span class="token punctuation">)</span>inputStream<span class="token punctuation">.</span><span class="token function">use</span> <span class="token punctuation">{</span>    os<span class="token punctuation">.</span><span class="token function">use</span> <span class="token punctuation">{</span> output <span class="token operator">-&gt;</span>        it<span class="token punctuation">.</span><span class="token function">copyTo</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 <code>File.copyTo()</code>扩展函数直接复制</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">try</span> <span class="token punctuation">{</span>    originFile<span class="token punctuation">.</span><span class="token function">copyTo</span><span class="token punctuation">(</span>dstFile<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h5 id="遍历文件">          <a href="#遍历文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#遍历文件" class="headerlink" title="遍历文件"></a>遍历文件</h5>      <p>遍历文件夹下所有文件包括子目录，子文件等</p><p><code>File.walkBottomUp()</code><br>获取从下到上的顺序访问此目录及其所有内容的顺序。使用深度优先搜索，并在访问所有文件之前访问目录</p><p><code>File.walkTopDown()</code><br>获取从上到下的顺序访问此目录及其所有内容的顺序。使用深度优先搜索，并在访问所有文件之前访问目录</p><pre class="line-numbers language-none"><code class="language-none">val path = File("E:\\Note\\MarkDown")val files = path.walkBottomUp()println("walkBottomUp")files.forEach {    println(it.path)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h5 id="删除文件">          <a href="#删除文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h5>      <p><code>File.deleteRecursively()</code></p><p>删除文件夹下所有文件，包括子目录、子文件</p><pre class="line-numbers language-none"><code class="language-none">val path = File("$TEST_PATH\\testDelete - 副本\\")val result = path.deleteRecursively()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>函数返回 true 表示全部删除完成，返回 false 表示至少有一个文件没有删除成功</p>        <h3 id="自定义扩展函数">          <a href="#自定义扩展函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#自定义扩展函数" class="headerlink" title="自定义扩展函数"></a><strong>自定义扩展函数</strong></h3>      <p>自定义一个List交换两个元素位置的函数</p><pre class="line-numbers language-none"><code class="language-none">fun &lt;T&gt; MutableList&lt;T&gt;.swap(index1: Int, index2: Int) {    if (index1 &gt; this.size - 1 || index2 &gt; this.size - 1) {        throw IllegalArgumentException("index is more than list's size")    }    val temp = this[index1]    this[index1] = this[index2]    this[index2] = temp}@org.junit.jupiter.api.Testfun listSwap() {    val list = mutableListOf(1, 2, 3, 4, 5)    println("origin: $list")    list.swap(2, 3)    println("after swap: ${list}")}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试执行结果：</p><pre class="line-numbers language-none"><code class="language-none">origin: [1, 2, 3, 4, 5]after swap: [1, 2, 4, 3, 5]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>扩展函数在不修改某个类源码的情况下,动态地添加新的函数.className.<br>扩展函数不能访问原有类的私有属性</p>        <h3 id="运算符重载">          <a href="#运算符重载" class="heading-link"><i class="fas fa-link"></i></a><a href="#运算符重载" class="headerlink" title="运算符重载"></a><strong>运算符重载</strong></h3>      <p>同一运算符在不同的环境所表现的效果不同，如 ”+“ 在两个 Int 值之间表示两者的数值相加，在两个字符串之间表示，将字符串拼接，同时kotlin允许我们将任意两个类型的对象进行”+“运算，或者其他运算符操作。</p><p>语法结构：如下，其中<code>operator</code> 为运算符重载的关键字</p><pre class="line-numbers language-none"><code class="language-none">operator fun plus(a: A): A {    //相关逻辑}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>常见的语法糖表达式和实际调用函数对照表：</p><div class="table-container"><table><thead><tr><th>表达式</th><th>函数名</th></tr></thead><tbody><tr><td>a * b</td><td>a.times(b)</td></tr><tr><td>a / b</td><td>a.div(b)</td></tr><tr><td>a % b</td><td>a.rem(b)</td></tr><tr><td>a + b</td><td>a.plus(b)</td></tr><tr><td>a - b</td><td>a.minus(b)</td></tr><tr><td>a++</td><td>a.inc()</td></tr><tr><td>a–</td><td>a.dec()</td></tr><tr><td>!a</td><td>a.not()</td></tr><tr><td>a == b</td><td>a.equals(b)</td></tr><tr><td>”a &gt; b“、”a &lt; b“、”a &gt;= b“、”a &gt;= b“</td><td>a.compareTo(b)</td></tr><tr><td>a..b</td><td>a.rangeTo(b)</td></tr><tr><td>a[b]</td><td>a.get(b)</td></tr><tr><td>a[b] = c</td><td>a.set(b, c)</td></tr><tr><td>a in b</td><td>b.contains(a)</td></tr></tbody></table></div>        <h4 id="扩展函数和运算符重载结合">          <a href="#扩展函数和运算符重载结合" class="heading-link"><i class="fas fa-link"></i></a><a href="#扩展函数和运算符重载结合" class="headerlink" title="扩展函数和运算符重载结合"></a>扩展函数和运算符重载结合</h4>      <p>例：重写 String 的  * （即 times) 操作</p><pre class="line-numbers language-none"><code class="language-none">operator fun String.times(int: Int): String {    return StringBuilder().also { s -&gt;        repeat(int) {            s.append(this)        }    }.toString()}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用</p><pre class="line-numbers language-none"><code class="language-none">val s = "hello " * 5println(s)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-none"><code class="language-none">hello hello hello hello hello <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Kotlin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kotlin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kotlin 协程篇</title>
    <link href="/2023/08/31/docs/kotlin/kotlin-xie-cheng-pian/"/>
    <url>/2023/08/31/docs/kotlin/kotlin-xie-cheng-pian/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p>        <h2 id="CoroutineScope-作用域">          <a href="#CoroutineScope-作用域" class="heading-link"><i class="fas fa-link"></i></a><a href="#CoroutineScope-作用域" class="headerlink" title="CoroutineScope 作用域"></a>CoroutineScope 作用域</h2>      <p>指定协程执行的范围</p><p><code>CoroutineScope</code> 应该在生命周期明确的实体上实现（或用作字段），这些实体负责启动子协程。例如在Activity中使用协程：</p><pre class="line-numbers language-Kotlin" data-language="Kotlin"><code class="language-Kotlin">class MyActivity : AppCompatActivity(), CoroutineScope by MainScope() {override fun onDestroy() {       cancel() // destroy的时候cancel()   }fun showSomeData() = launch { // &lt;- extension on current activity, // 主线程// 也可以切换到其他线程draw(data) // draw in the main thread}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Lifecycle的扩展中已经定义了一个协程作用域，这个作用范围是默认在主线程执行的，生命周期结束会执行<code>cancel()</code>，所以我们可以直接使用这个作用域就行了:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> LifecycleOwner<span class="token punctuation">.</span>lifecycleScope<span class="token operator">:</span> LifecycleCoroutineScope    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> lifecycle<span class="token punctuation">.</span>coroutineScope<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在Activity中使用协程时就可以用 <code>lifecycleScope</code> 了</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">lifecycleScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span><span class="token comment">// do something in main thread</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// do something in io thread</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>Fragment </code>中也是使用 <code>lifecycleScope</code> 作用域，在 <code>ViewModel </code>中用 <code>viewModelScope </code></p>        <h3 id="GlobalScope">          <a href="#GlobalScope" class="heading-link"><i class="fas fa-link"></i></a><a href="#GlobalScope" class="headerlink" title="GlobalScope"></a>GlobalScope</h3>      <p>全局的 <code>CoroutineScope</code>，没有绑定到任何Job。<br><code>GlobalScope</code> 用于启动在整个应用程序生命周期内运行且不会过早取消的顶级协程.<br>应用程序代码通常应使用应用程序定义的<code>[CoroutineScope]</code>。不建议在<code>[GlobalScope]</code>实例上使用<code>[async][CoroutineScope.async]</code>或<code>[launch] [CoroutineScope.launch]</code>。</p>        <h2 id="suspendCoroutine">          <a href="#suspendCoroutine" class="heading-link"><i class="fas fa-link"></i></a><a href="#suspendCoroutine" class="headerlink" title="suspendCoroutine"></a>suspendCoroutine</h2>      <p>挂起函数</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">suspend</span> <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">suspendCoroutine</span><span class="token punctuation">(</span><span class="token keyword">crossinline</span> block<span class="token operator">:</span> <span class="token punctuation">(</span>Continuation<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span><span class="token operator">:</span> T<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取暂停函数中的当前继续实例，并暂停当前正在运行的协程。也就是阻塞的等待函数返回结果，这个函数类似<code>RxJava</code> 中 <code>Single&lt;T&gt; </code>的<code>blockGet()</code>操作。</p><p>例：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">lifecycleScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"start"</span></span><span class="token punctuation">)</span>    <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">suspendCoroutineGetTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"result: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">result</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"end:"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">suspendCoroutineGetTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> suspendCoroutine <span class="token punctuation">{</span>    <span class="token function">runBlocking</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000L</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    it<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"hhhhh"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">15:53:43.858 I/MainActivity$onCreate: start15:53:46.865 I/MainActivity$onCreate: result: hhhhh15:53:46.865 I/MainActivity$onCreate: end:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用<code>resumeWithException</code>可以让它抛出异常，调用该方法的地方就可以捕获到该异常，例：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">lifecycleScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"start"</span></span><span class="token punctuation">)</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">suspendCoroutineGetTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"result: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">result</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Timber<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"end:"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">suspendCoroutineGetTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> suspendCoroutine <span class="token punctuation">{</span>    <span class="token function">runBlocking</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000L</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    it<span class="token punctuation">.</span><span class="token function">resumeWithException</span><span class="token punctuation">(</span><span class="token function">IllegalStateException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"test"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-none"><code class="language-none">2021-02-03 16:01:50.964 I/MainActivity$onCreate: start2021-02-03 16:01:53.971 E/MainActivity$onCreate: java.lang.IllegalStateException: test        ......2021-02-03 16:01:53.971 I/MainActivity$onCreate: end:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用这个函数我们就可以将异步的一些操作改能同步的，或者将一些回调特别多的操作改成同步的。<br>比如进行相机拍照操作就可以这样处理：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 点击拍照按钮</span>bt_snap<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">{</span>bt_snap<span class="token punctuation">.</span>isEnabled <span class="token operator">=</span> <span class="token boolean">false</span>    lifecycleScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> byteArray <span class="token operator">=</span> <span class="token function">doTakePicture</span><span class="token punctuation">(</span>mCamera<span class="token punctuation">)</span>        <span class="token comment">// ....</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Main<span class="token punctuation">)</span> <span class="token punctuation">{</span>bt_snap<span class="token punctuation">.</span>isEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">doTakePicture</span><span class="token punctuation">(</span>camera<span class="token operator">:</span> Camera<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> ByteArray<span class="token operator">?</span> <span class="token operator">=</span> suspendCoroutine <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>camera <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        it<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token label symbol">@suspendCoroutine</span>    <span class="token punctuation">}</span>    camera<span class="token punctuation">.</span><span class="token function">autoFocus</span> <span class="token punctuation">{</span> _<span class="token punctuation">,</span> c <span class="token operator">-&gt;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            it<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token label symbol">@autoFocus</span>        <span class="token punctuation">}</span>        c<span class="token punctuation">.</span><span class="token function">takePicture</span> <span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">data</span><span class="token punctuation">,</span> c1 <span class="token operator">-&gt;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                it<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token keyword">return</span><span class="token label symbol">@takePicture</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                c1<span class="token punctuation">.</span><span class="token function">startPreview</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                it<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span>                <span class="token keyword">return</span><span class="token label symbol">@takePicture</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在此函数中，<code>resume</code>和<code>resumeWithException</code>可以在运行暂停功能的同一堆栈中同步使用，也可以稍后在同一线程或不同执行线程中异步使用。随后调用任何恢复函数将产生一个<code>java.lang.IllegalStateException: Already resumed</code>的异常。另外，如果此函数中使用了<code>resumeWithException</code>，在调用它的地方也要进行异常捕获处理。</p>        <h2 id="suspendCancellableCoroutine">          <a href="#suspendCancellableCoroutine" class="heading-link"><i class="fas fa-link"></i></a><a href="#suspendCancellableCoroutine" class="headerlink" title="suspendCancellableCoroutine"></a>suspendCancellableCoroutine</h2>      <p>可取消的挂起函数</p><p>上面讲的<code>suspendCoroutine </code>挂起函数执行开始之后是不可取消的，比如：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">lifecycleScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Main<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> job <span class="token operator">=</span> <span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"start"</span></span><span class="token punctuation">)</span>   <span class="token comment">//这里三秒后才会返回结果</span>        <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">suspendCoroutineGetTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"result: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">result</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"end:"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 1秒后取消</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span>    Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"cancel job"</span></span><span class="token punctuation">)</span>    job<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">suspendCoroutineGetTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> suspendCoroutine <span class="token punctuation">{</span>    <span class="token function">runBlocking</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000L</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"suspendCoroutine return "</span></span><span class="token punctuation">)</span>    it<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"hhhhh"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>预期结果是1秒后 job 被取消，suspendCoroutineGetTest 将不再返回结果，而实际结果是：</p><pre class="line-numbers language-none"><code class="language-none">00.789 I/MainActivity$onCreate$1$job: start01.796 I/MainActivity$onCreate: cancel job03.804 I/MainActivity: suspendCoroutine return 03.804 I/MainActivity$onCreate$1$job: result: hhhhh03.804 I/MainActivity$onCreate$1$job: end:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>job 调用了cancel方法之后，挂起函数还在执行，并且整个job还在正常运行，这显然不符合我们预期要求。<br>如果要让job能够取消就需要使用<code>suspendCancellableCoroutine</code></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">private</span> <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">suspendCoroutineGetTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> suspendCancellableCoroutine <span class="token punctuation">{</span>    <span class="token function">runBlocking</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000L</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"suspendCoroutine return "</span></span><span class="token punctuation">)</span>    it<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"hhhhh"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时候再运行：</p><pre class="line-numbers language-none"><code class="language-none">52.797 I/MainActivity$onCreate$1$job: start53.806 I/MainActivity$onCreate: cancel job55.806 I/MainActivity: suspendCoroutine return 55.810 E/MainActivity$onCreate$1$job: kotlinx.coroutines.JobCancellationException: Job was cancelled;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>三秒后挂起函数返回结果时便抛出了异常，job也不会继续执行。</p><p>上面讲到挂起函数调用<code>resume</code>之后再次<code>resume</code>就会抛出异常，但是如果是使用 <code>suspendCancellableCoroutine</code> 就可以通过 <code>isActive</code> 来判断是否需要再 <code>resume</code> 了:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"suspendCoroutine return "</span></span><span class="token punctuation">)</span>it<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"hhhhh"</span></span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>isActive<span class="token punctuation">)</span> <span class="token punctuation">{</span>    it<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"hhhhh"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>isActive<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//这里再次调用resume也不会再执行了，因为上面已经resume了，isActive也已经变成了false</span>    it<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"hhhhh"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以我们在使用挂起函数时最好使用 <code>suspendCancellableCoroutine </code>而不是 <code>suspendCoroutine </code>。<br>另外，这个挂起函数中有三个标志：<br><code>isActive</code>函数如果没有完成或取消则返回 true<br><code>isCompleted</code>由于任何原因完成此继续操作时，都返回 true 。被取消的继续也被视为完成。<br><code>isCancelled</code>如果调用了job的<code>cancel()</code>方法，之后则返回 true</p><p>一般情况下使用<code>isActive</code>就可以满足需求了。</p>        <h2 id="Flow">          <a href="#Flow" class="heading-link"><i class="fas fa-link"></i></a><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h2>              <h3 id="什么是Flow">          <a href="#什么是Flow" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是Flow" class="headerlink" title="什么是Flow"></a>什么是Flow</h3>      <p>Flow 库是在 Kotlin Coroutines 1.3.2 发布之后新增的库，也叫做异步流</p><p>类似 RxJava 的 Observable 、 Flowable 等。用生产者和消费者来做对比，简单来讲就可以一边生产一边消费的作用。</p>        <h3 id="使用Flow">          <a href="#使用Flow" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用Flow" class="headerlink" title="使用Flow"></a>使用Flow</h3>      <p>先看一个简单的使用例子</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">lifecycleScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>    launch <span class="token punctuation">{</span>    <span class="token comment">//验证Flow没有阻塞线程</span>        <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>            Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"I'm not blocked: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    flow<span class="token punctuation">{</span>    <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token function">emit</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">collect</span> <span class="token punctuation">{</span>        Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"collect: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-none"><code class="language-none">00.480 I: collect : 000.481 I: I'm not blocked : 001.484 I: collect : 101.484 I: I'm not blocked : 102.486 I: collect : 202.487 I: I'm not blocked : 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中Flow的接口，只有一个<code>collect</code>函数。和RXjava相比的话，可以理解为 <code>collect()</code> 对应<code>subscribe()</code>，而 <code>emit()</code> 对应<code>onNext()</code>。</p>        <h3 id="切换线程">          <a href="#切换线程" class="heading-link"><i class="fas fa-link"></i></a><a href="#切换线程" class="headerlink" title="切换线程"></a>切换线程</h3>      <p>默认情况没有切换线程的话flow的生产者和消费者是同步非阻塞的：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">lifecycleScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>    flow<span class="token punctuation">{</span>        <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>            Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"emit on: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token function">emit</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">collect</span> <span class="token punctuation">{</span>        Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"collect on </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">I: emit on: mainI: collect on main : 0I: emit on: mainI: collect on main : 1I: emit on: mainI: collect on main : 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>切换线程，相比Rxjava中使用 observeOn、subscribeOn 来切换线程，flow 会更加简单。只需使用 flowOn，如下：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">lifecycleScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>    flow<span class="token punctuation">{</span>        <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>            Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"emit on: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token function">emit</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">flowOn</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span> <span class="token punctuation">{</span>        Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"collect on </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">I: emit on: DefaultDispatcher-worker-1I: collect on main : 0I: emit on: DefaultDispatcher-worker-2I: collect on main : 1I: emit on: DefaultDispatcher-worker-1I: collect on main : 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>flow builder是运行在 <code>flowOn()</code> 指定的线程中， <code>clollect() </code> 所在线程则取决于整个 flow 处于哪个</p><p>CoroutineScope 下。</p>        <h3 id="Flow-什么时候开始执行">          <a href="#Flow-什么时候开始执行" class="heading-link"><i class="fas fa-link"></i></a><a href="#Flow-什么时候开始执行" class="headerlink" title="Flow 什么时候开始执行"></a>Flow 什么时候开始执行</h3>      <p>Flow 是一种类似于序列的冷流 ， flow 构建器中的代码直到流被收集的时候才运行。</p><p>例：先初始化一个flow，三秒后再collect</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"start"</span></span><span class="token punctuation">)</span><span class="token keyword">val</span> f <span class="token operator">=</span> flow<span class="token punctuation">{</span>    <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>        Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"emit on: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token function">emit</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">flowOn</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span><span class="token function">collect</span> <span class="token punctuation">{</span>    Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"collect on </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-none"><code class="language-none">46.180 I: start50.211 I: emit on: DefaultDispatcher-worker-150.212 I: collect on main : 0......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="Flow-怎么取消">          <a href="#Flow-怎么取消" class="heading-link"><i class="fas fa-link"></i></a><a href="#Flow-怎么取消" class="headerlink" title="Flow 怎么取消"></a>Flow 怎么取消</h3>      <p>Flow是需要写在 <code>lanuch</code> 中的，所以取消的话只需要调用<code>launch</code>的<code>cancel()</code>把<code>launch</code>取消就行了</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> d <span class="token operator">=</span> launch <span class="token punctuation">{</span>    flow<span class="token punctuation">{</span>        <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>            Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"emit on: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token function">emit</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">flowOn</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span> <span class="token punctuation">{</span>        Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"collect on </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>d<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样一秒后这个flow操作就会被取消</p>        <h3 id="Flow-可以用在哪里">          <a href="#Flow-可以用在哪里" class="heading-link"><i class="fas fa-link"></i></a><a href="#Flow-可以用在哪里" class="headerlink" title="Flow 可以用在哪里"></a>Flow 可以用在哪里</h3>      <p>用处一：后台进行下载操作，主线程更新下载进度：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">doDownload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flowOn</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span> <span class="token punctuation">{</span>    Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"下载进度：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">doDownload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> flow <span class="token punctuation">{</span>    <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token function">emit</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">I: 下载进度：0I: 下载进度：1I: 下载进度：2I: 下载进度：3......I: 下载进度：98I: 下载进度：99<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用法二：后台耗时获取数据，后台一边获取，主线程一边处理。比如获取大量设备列表，后台可以分批进行获取，获取一批便emit一批。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">lifecycleScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>    Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"start"</span></span><span class="token punctuation">)</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token function">getDevices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flowOn</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span> <span class="token punctuation">{</span>        count<span class="token operator">++</span>        Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"获取到 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">it<span class="token punctuation">.</span>size</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 个设备，开始更新列表"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"end, count: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">count</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">getDevices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> flow <span class="token punctuation">{</span>    <span class="token keyword">val</span> list<span class="token operator">:</span> MutableList<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token operator">-&gt;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>        <span class="token comment">//Timber.i("emit: $it")</span>        <span class="token function">emit</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面是模拟一次获取1000个设备，获取100次</p><pre class="line-numbers language-none"><code class="language-none">I: startI: 获取到 1000 个设备，开始更新列表I: 获取到 1000 个设备，开始更新列表......I: end, count: 100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="Flow-其他操作符">          <a href="#Flow-其他操作符" class="heading-link"><i class="fas fa-link"></i></a><a href="#Flow-其他操作符" class="headerlink" title="Flow 其他操作符"></a>Flow 其他操作符</h3>      <p>例子：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token function">emit</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">01...9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        <h4 id="map">          <a href="#map" class="heading-link"><i class="fas fa-link"></i></a><a href="#map" class="headerlink" title="map"></a>map</h4>      <p>使用map我们可以将最终结果映射为其他类型，融合了Rxjava的map与flatMap的功能<br>代码如下所示：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span>     <span class="token string-literal singleline"><span class="token string">"转换成了String : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">"</span></span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">collect</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">转换成了String : 0转换成了String : 1...转换成了String : 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        <h4 id="filter">          <a href="#filter" class="heading-link"><i class="fas fa-link"></i></a><a href="#filter" class="headerlink" title="filter"></a>filter</h4>      <p>通过 filter 可以对结果添加过滤条件，如下所示，仅打印出大于7的值</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span>     it <span class="token operator">&gt;</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">collect</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">89<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>        <h4 id="transform">          <a href="#transform" class="heading-link"><i class="fas fa-link"></i></a><a href="#transform" class="headerlink" title="transform"></a>transform</h4>      <p>transform可以自定义转换逻辑，除了可以实现filter和map的功能，还可以实现其他功能</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>it <span class="token operator">&gt;</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"transform to string :</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"emit second :</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">collect</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">transform to string :8emit second :8transform to string :9emit second :9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        <h4 id="末端操作符">          <a href="#末端操作符" class="heading-link"><i class="fas fa-link"></i></a><a href="#末端操作符" class="headerlink" title="末端操作符"></a>末端操作符</h4>      <p>上面常用的<code>collect</code>就是一个末端操作符，除此之外还有<code>toList</code>、<code>reduce</code>、<code>fold</code>、<code>asLiveData</code>等操作符<br><code>toList</code> 就如字面意思，把所有结果转成List数组<br><code>reduce</code> 可以把所有结果累加起来：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> d <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span> <span class="token punctuation">{</span> accumulator<span class="token punctuation">,</span> value <span class="token operator">-&gt;</span>    accumulator <span class="token operator">+</span> value<span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>结果:</p><pre class="line-numbers language-none"><code class="language-none">45<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>asLiveData</code> 将Flow转成LiveData，通过LiveData来监听 emit 的数据：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> liveData <span class="token operator">=</span> <span class="token function">getDevices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flowOn</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asLiveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>liveData<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token label symbol">@MainActivity</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    count<span class="token operator">++</span>    Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"count: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">count</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">I: startI: count: 1I: count: 2I: count: 3... ...I: count: 100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="协程背压">          <a href="#协程背压" class="heading-link"><i class="fas fa-link"></i></a><a href="#协程背压" class="headerlink" title="协程背压"></a>协程背压</h3>      <p>Kotlin流程设计中的所有函数都标有suspend修饰符，具有在不阻塞线程的情况下挂起调用程序执行的强大功能。因此，当流的收集器不堪重负时，它可以简单地挂起发射器，并在准备好接受更多元素时稍后将其恢复。</p>        <h4 id="buffer-操作符">          <a href="#buffer-操作符" class="heading-link"><i class="fas fa-link"></i></a><a href="#buffer-操作符" class="headerlink" title="buffer 操作符"></a>buffer 操作符</h4>      <p>例如，发射者需要100毫秒处理并产生一个数据，而收集者需要200毫秒来处理这个数据，这时候发射者发就需要等收集者处理完上个数据再去花费100毫秒处理产生一个新数据，这样一个周期就是300毫秒，而使用<code> buffer</code>操作符就可以并发运行流中发射元素的代码以及收集的代码， 当发射者发射数据时，收集者还没处理完，会将这个数据先缓存下来，收集者处理完上一个数据之后立马就可以处理下一个数据。这样除了第一个周期是300毫秒，接下来的每个周期都是200毫秒，会节省很多时间。<br>默认可以无限制添加数据，但是超出默认缓存区域大小时，会 <code>suspend</code> 暂停。<br><code>buffer()</code>  函数体可以传两个参数来自行定义缓存机制</p><pre class="line-numbers language-none"><code class="language-none">buffer(capacity: Int = BUFFERED, onBufferOverflow: BufferOverflow = BufferOverflow.SUSPEND)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>前面的获取设备列表的演示就加上了buffer。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"start"</span></span><span class="token punctuation">)</span><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token function">getDevices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flowOn</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">conflate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span> <span class="token punctuation">{</span>    count<span class="token operator">++</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"获取到 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">it<span class="token punctuation">.</span>size</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 个设备，开始更新列表"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"end, count: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">count</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h4 id="conflate-操作符">          <a href="#conflate-操作符" class="heading-link"><i class="fas fa-link"></i></a><a href="#conflate-操作符" class="headerlink" title="conflate 操作符"></a>conflate 操作符</h4>      <p>用了 <code>conflate</code> 操作符，当发射者发射数据时，收集者还在处理上一个数据时则会跳过这个值，上面例子中<code>buffer()</code> 改成 <code>conflate()</code> 接口如下：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"start"</span></span><span class="token punctuation">)</span><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token function">getDevices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flowOn</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">conflate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span> <span class="token punctuation">{</span>    count<span class="token operator">++</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"获取到 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">it<span class="token punctuation">.</span>size</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 个设备，开始更新列表"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"end, count: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">count</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">... ...获取到 1000 个设备，开始更新列表end, count: 11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>只处理了11个</p>        <h4 id="collectLatest-操作符">          <a href="#collectLatest-操作符" class="heading-link"><i class="fas fa-link"></i></a><a href="#collectLatest-操作符" class="headerlink" title="collectLatest()操作符"></a>collectLatest()操作符</h4>      <p>只处理最新的数据，这看上去似乎与 conflate 没有区别，其实区别大了：它并不会直接用新数据覆盖老数据，而是每一个都会被处理，只不过如果前一个还没被处理完后一个就来了的话，处理前一个数据的逻辑就会被取消。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token function">getDevices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flowOn</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collectLatest</span> <span class="token punctuation">{</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>    count<span class="token operator">++</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"获取到 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">it<span class="token punctuation">.</span>size</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 个设备，开始更新列表"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"end, count: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">count</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>处理的时候延时500毫秒，而发送间隔只有100毫秒，所以每次发送时都会把前面的处理取消掉，因此只有最后一个结果能被处理</p><pre class="line-numbers language-none"><code class="language-none">start获取到 1000 个设备，开始更新列表end, count: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>        <h3 id="组合多个流">          <a href="#组合多个流" class="heading-link"><i class="fas fa-link"></i></a><a href="#组合多个流" class="headerlink" title="组合多个流"></a>组合多个流</h3>              <h4 id="Zip">          <a href="#Zip" class="heading-link"><i class="fas fa-link"></i></a><a href="#Zip" class="headerlink" title="Zip"></a>Zip</h4>      <p><code>zip</code> 操作符可以组合两个流中的相关值：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> nums <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">..</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onEach</span> <span class="token punctuation">{</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">asFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 数字 1..3</span><span class="token keyword">val</span> strs <span class="token operator">=</span> <span class="token function">flowOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"one"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"two"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"three"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onEach</span> <span class="token punctuation">{</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment">// 字符串</span>nums<span class="token punctuation">.</span><span class="token function">zip</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token operator">-&gt;</span>    <span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">a</span></span><span class="token string"> -&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">b</span></span><span class="token string">"</span></span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">collect</span> <span class="token punctuation">{</span>     <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果</p><pre class="line-numbers language-none"><code class="language-none">1 -&gt; one2 -&gt; two3 -&gt; three<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>        <h4 id="Combine">          <a href="#Combine" class="heading-link"><i class="fas fa-link"></i></a><a href="#Combine" class="headerlink" title="Combine"></a>Combine</h4>      <p>当流表示一个变量或操作的最新值时，可能需要执行计算，这依赖于相应流的最新值，并且每当上游流产生值的时候都需要重新计算。<br>也就是说当两个流中任何一个流产生了新的流的时候，并且这两个流都已经有值发射了，就将这两个流当前最新的值组合在一起。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> nums <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">..</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onEach</span> <span class="token punctuation">{</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">val</span> strs <span class="token operator">=</span> <span class="token function">flowOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"one"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"two"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"three"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onEach</span> <span class="token punctuation">{</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">}</span>nums<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token operator">-&gt;</span>    <span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">a</span></span><span class="token string"> -&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">b</span></span><span class="token string">"</span></span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">collect</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果</p><pre class="line-numbers language-none"><code class="language-none">4 -&gt; one5 -&gt; one6 -&gt; one6 -&gt; two6 -&gt; three<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Kotlin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kotlin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Emoji表情</title>
    <link href="/2023/08/31/docs/markdown/emoji-biao-qing/"/>
    <url>/2023/08/31/docs/markdown/emoji-biao-qing/</url>
    
    <content type="html"><![CDATA[<h1 id="Emoji表情"><a href="#Emoji表情" class="headerlink" title="Emoji表情"></a>Emoji表情</h1><p>将对应emoji表情的符号码复制后输入你的markdown文本即可显示emoji表情。<br>如<code>:blush:</code>，显示为<span class="github-emoji"><span>😊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><strong>注：有些编辑器可能不支持显示表情</strong></p><h2 id="人物"><a href="#人物" class="headerlink" title="人物"></a>人物</h2><table><thead><tr><th align="center">syntax</th><th align="center">preview</th><th align="center">syntax</th><th align="center">preview</th><th align="center">syntax</th><th align="center">preview</th></tr></thead><tbody><tr><td align="center"><code>:bowtie:</code></td><td align="center"><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/bowtie.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:smile:</code></td><td align="center"><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:laughing:</code></td><td align="center"><span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:blush:</code></td><td align="center"><span class="github-emoji"><span>😊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:smiley:</code></td><td align="center"><span class="github-emoji"><span>😃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:relaxed:</code></td><td align="center"><span class="github-emoji"><span>☺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/263a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:smirk:</code></td><td align="center"><span class="github-emoji"><span>😏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:heart_eyes:</code></td><td align="center"><span class="github-emoji"><span>😍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:kissing_heart:</code></td><td align="center"><span class="github-emoji"><span>😘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f618.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:kissing_closed_eyes:</code></td><td align="center"><span class="github-emoji"><span>😚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:flushed:</code></td><td align="center"><span class="github-emoji"><span>😳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f633.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:relieved:</code></td><td align="center"><span class="github-emoji"><span>😌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:satisfied:</code></td><td align="center"><span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:grin:</code></td><td align="center"><span class="github-emoji"><span>😁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f601.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:wink:</code></td><td align="center"><span class="github-emoji"><span>😉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:stuck_out_tongue_winking_eye:</code></td><td align="center"><span class="github-emoji"><span>😜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:stuck_out_tongue_closed_eyes:</code></td><td align="center"><span class="github-emoji"><span>😝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:grinning:</code></td><td align="center"><span class="github-emoji"><span>😀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f600.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:kissing:</code></td><td align="center"><span class="github-emoji"><span>😗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f617.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:kissing_smiling_eyes:</code></td><td align="center"><span class="github-emoji"><span>😙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f619.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:stuck_out_tongue:</code></td><td align="center"><span class="github-emoji"><span>😛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:sleeping:</code></td><td align="center"><span class="github-emoji"><span>😴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f634.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:worried:</code></td><td align="center"><span class="github-emoji"><span>😟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:frowning:</code></td><td align="center"><span class="github-emoji"><span>😦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f626.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:anguished:</code></td><td align="center"><span class="github-emoji"><span>😧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f627.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:open_mouth:</code></td><td align="center"><span class="github-emoji"><span>😮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:grimacing:</code></td><td align="center"><span class="github-emoji"><span>😬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:confused:</code></td><td align="center"><span class="github-emoji"><span>😕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f615.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:hushed:</code></td><td align="center"><span class="github-emoji"><span>😯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:expressionless:</code></td><td align="center"><span class="github-emoji"><span>😑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f611.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:unamused:</code></td><td align="center"><span class="github-emoji"><span>😒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f612.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:sweat_smile:</code></td><td align="center"><span class="github-emoji"><span>😅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:sweat:</code></td><td align="center"><span class="github-emoji"><span>😓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f613.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:disappointed_relieved:</code></td><td align="center"><span class="github-emoji"><span>😥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f625.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:weary:</code></td><td align="center"><span class="github-emoji"><span>😩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f629.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:pensive:</code></td><td align="center"><span class="github-emoji"><span>😔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f614.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:disappointed:</code></td><td align="center"><span class="github-emoji"><span>😞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:confounded:</code></td><td align="center"><span class="github-emoji"><span>😖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f616.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:fearful:</code></td><td align="center"><span class="github-emoji"><span>😨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f628.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:cold_sweat:</code></td><td align="center"><span class="github-emoji"><span>😰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f630.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:persevere:</code></td><td align="center"><span class="github-emoji"><span>😣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f623.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:cry:</code></td><td align="center"><span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:sob:</code></td><td align="center"><span class="github-emoji"><span>😭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:joy:</code></td><td align="center"><span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:astonished:</code></td><td align="center"><span class="github-emoji"><span>😲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f632.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:scream:</code></td><td align="center"><span class="github-emoji"><span>😱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f631.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:neckbeard:</code></td><td align="center"><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/neckbeard.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:tired_face:</code></td><td align="center"><span class="github-emoji"><span>😫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:angry:</code></td><td align="center"><span class="github-emoji"><span>😠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f620.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:rage:</code></td><td align="center"><span class="github-emoji"><span>😡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f621.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:triumph:</code></td><td align="center"><span class="github-emoji"><span>😤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f624.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:sleepy:</code></td><td align="center"><span class="github-emoji"><span>😪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:yum:</code></td><td align="center"><span class="github-emoji"><span>😋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:mask:</code></td><td align="center"><span class="github-emoji"><span>😷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f637.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:sunglasses:</code></td><td align="center"><span class="github-emoji"><span>😎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:dizzy_face:</code></td><td align="center"><span class="github-emoji"><span>😵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f635.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:imp:</code></td><td align="center"><span class="github-emoji"><span>👿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f47f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:smiling_imp:</code></td><td align="center"><span class="github-emoji"><span>😈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f608.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:neutral_face:</code></td><td align="center"><span class="github-emoji"><span>😐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f610.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:no_mouth:</code></td><td align="center"><span class="github-emoji"><span>😶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f636.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:innocent:</code></td><td align="center"><span class="github-emoji"><span>😇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f607.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:alien:</code></td><td align="center"><span class="github-emoji"><span>👽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f47d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:yellow_heart:</code></td><td align="center"><span class="github-emoji"><span>💛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f49b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:blue_heart:</code></td><td align="center"><span class="github-emoji"><span>💙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f499.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:purple_heart:</code></td><td align="center"><span class="github-emoji"><span>💜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f49c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:heart:</code></td><td align="center"><span class="github-emoji"><span>❤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:green_heart:</code></td><td align="center"><span class="github-emoji"><span>💚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f49a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:broken_heart:</code></td><td align="center"><span class="github-emoji"><span>💔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f494.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:heartbeat:</code></td><td align="center"><span class="github-emoji"><span>💓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:heartpulse:</code></td><td align="center"><span class="github-emoji"><span>💗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f497.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:two_hearts:</code></td><td align="center"><span class="github-emoji"><span>💕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f495.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:revolving_hearts:</code></td><td align="center"><span class="github-emoji"><span>💞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f49e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:cupid:</code></td><td align="center"><span class="github-emoji"><span>💘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f498.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:sparkling_heart:</code></td><td align="center"><span class="github-emoji"><span>💖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f496.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:sparkles:</code></td><td align="center"><span class="github-emoji"><span>✨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2728.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:star:</code></td><td align="center"><span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:star2:</code></td><td align="center"><span class="github-emoji"><span>🌟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:dizzy:</code></td><td align="center"><span class="github-emoji"><span>💫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ab.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:boom:</code></td><td align="center"><span class="github-emoji"><span>💥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:collision:</code></td><td align="center"><span class="github-emoji"><span>💥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:anger:</code></td><td align="center"><span class="github-emoji"><span>💢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:exclamation:</code></td><td align="center"><span class="github-emoji"><span>❗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:question:</code></td><td align="center"><span class="github-emoji"><span>❓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:grey_exclamation:</code></td><td align="center"><span class="github-emoji"><span>❕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2755.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:grey_question:</code></td><td align="center"><span class="github-emoji"><span>❔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2754.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:zzz:</code></td><td align="center"><span class="github-emoji"><span>💤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:dash:</code></td><td align="center"><span class="github-emoji"><span>💨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:sweat_drops:</code></td><td align="center"><span class="github-emoji"><span>💦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:notes:</code></td><td align="center"><span class="github-emoji"><span>🎶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:musical_note:</code></td><td align="center"><span class="github-emoji"><span>🎵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:fire:</code></td><td align="center"><span class="github-emoji"><span>🔥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:hankey:</code></td><td align="center"><span class="github-emoji"><span>💩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:poop:</code></td><td align="center"><span class="github-emoji"><span>💩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>::</code></td><td align="center"><span class="github-emoji"><span>💩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:+1:</code></td><td align="center">:+1:</td><td align="center"><code>:thumbsup:</code></td><td align="center"><span class="github-emoji"><span>👍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:-1:</code></td><td align="center">:-1:</td><td align="center"><code>:thumbsdown:</code></td><td align="center"><span class="github-emoji"><span>👎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:ok_hand:</code></td><td align="center"><span class="github-emoji"><span>👌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:punch:</code></td><td align="center"><span class="github-emoji"><span>👊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:facepunch:</code></td><td align="center"><span class="github-emoji"><span>👊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:fist:</code></td><td align="center"><span class="github-emoji"><span>✊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:v:</code></td><td align="center"><span class="github-emoji"><span>✌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:wave:</code></td><td align="center"><span class="github-emoji"><span>👋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:hand:</code></td><td align="center"><span class="github-emoji"><span>✋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:raised_hand:</code></td><td align="center"><span class="github-emoji"><span>✋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:open_hands:</code></td><td align="center"><span class="github-emoji"><span>👐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f450.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:point_up:</code></td><td align="center"><span class="github-emoji"><span>☝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:point_down:</code></td><td align="center"><span class="github-emoji"><span>👇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f447.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:point_left:</code></td><td align="center"><span class="github-emoji"><span>👈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f448.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:point_right:</code></td><td align="center"><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:raised_hands:</code></td><td align="center"><span class="github-emoji"><span>🙌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:pray:</code></td><td align="center"><span class="github-emoji"><span>🙏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f64f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:point_up_2:</code></td><td align="center"><span class="github-emoji"><span>👆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f446.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:clap:</code></td><td align="center"><span class="github-emoji"><span>👏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:muscle:</code></td><td align="center"><span class="github-emoji"><span>💪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4aa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:metal:</code></td><td align="center"><span class="github-emoji"><span>🤘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f918.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:fu:</code></td><td align="center"><span class="github-emoji"><span>🖕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f595.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:walking:</code></td><td align="center"><span class="github-emoji"><span>🚶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:runner:</code></td><td align="center"><span class="github-emoji"><span>🏃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:running:</code></td><td align="center"><span class="github-emoji"><span>🏃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:couple:</code></td><td align="center"><span class="github-emoji"><span>👫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f46b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:family:</code></td><td align="center"><span class="github-emoji"><span>👪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f46a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:two_men_holding_hands:</code></td><td align="center"><span class="github-emoji"><span>👬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f46c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:two_women_holding_hands:</code></td><td align="center"><span class="github-emoji"><span>👭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f46d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:dancer:</code></td><td align="center"><span class="github-emoji"><span>💃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f483.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:dancers:</code></td><td align="center"><span class="github-emoji"><span>👯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f46f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:ok_woman:</code></td><td align="center"><span class="github-emoji"><span>🙆♀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f646-2640.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:no_good:</code></td><td align="center"><span class="github-emoji"><span>🙅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f645.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:information_desk_person:</code></td><td align="center"><span class="github-emoji"><span>💁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f481.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:raising_hand:</code></td><td align="center"><span class="github-emoji"><span>🙋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f64b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:bride_with_veil:</code></td><td align="center"><span class="github-emoji"><span>👰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f470.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:person_with_pouting_face:</code></td><td align="center">:person_with_pouting_face:</td><td align="center"><code>:person_frowning:</code></td><td align="center">:person_frowning:</td><td align="center"><code>:bow:</code></td><td align="center"><span class="github-emoji"><span>🙇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f647.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:couplekiss:</code></td><td align="center"><span class="github-emoji"><span>💏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f48f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:couple_with_heart:</code></td><td align="center"><span class="github-emoji"><span>💑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f491.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:massage:</code></td><td align="center"><span class="github-emoji"><span>💆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f486.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:haircut:</code></td><td align="center"><span class="github-emoji"><span>💇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f487.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:nail_care:</code></td><td align="center"><span class="github-emoji"><span>💅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f485.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:boy:</code></td><td align="center"><span class="github-emoji"><span>👦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f466.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:girl:</code></td><td align="center"><span class="github-emoji"><span>👧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f467.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:woman:</code></td><td align="center"><span class="github-emoji"><span>👩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f469.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:man:</code></td><td align="center"><span class="github-emoji"><span>👨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f468.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:baby:</code></td><td align="center"><span class="github-emoji"><span>👶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f476.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:older_woman:</code></td><td align="center"><span class="github-emoji"><span>👵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f475.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:older_man:</code></td><td align="center"><span class="github-emoji"><span>👴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f474.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:person_with_blond_hair:</code></td><td align="center">:person_with_blond_hair:</td><td align="center"><code>:man_with_gua_pi_mao:</code></td><td align="center"><span class="github-emoji"><span>👲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f472.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:man_with_turban:</code></td><td align="center"><span class="github-emoji"><span>👳♂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f473-2642.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:construction_worker:</code></td><td align="center"><span class="github-emoji"><span>👷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f477.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:cop:</code></td><td align="center"><span class="github-emoji"><span>👮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f46e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:angel:</code></td><td align="center"><span class="github-emoji"><span>👼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f47c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:princess:</code></td><td align="center"><span class="github-emoji"><span>👸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f478.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:smiley_cat:</code></td><td align="center"><span class="github-emoji"><span>😺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f63a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:smile_cat:</code></td><td align="center"><span class="github-emoji"><span>😸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f638.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:heart_eyes_cat:</code></td><td align="center"><span class="github-emoji"><span>😻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f63b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:kissing_cat:</code></td><td align="center"><span class="github-emoji"><span>😽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f63d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:smirk_cat:</code></td><td align="center"><span class="github-emoji"><span>😼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f63c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:scream_cat:</code></td><td align="center"><span class="github-emoji"><span>🙀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f640.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:crying_cat_face:</code></td><td align="center"><span class="github-emoji"><span>😿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f63f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:joy_cat:</code></td><td align="center"><span class="github-emoji"><span>😹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f639.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:pouting_cat:</code></td><td align="center"><span class="github-emoji"><span>😾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f63e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:japanese_ogre:</code></td><td align="center"><span class="github-emoji"><span>👹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f479.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:japanese_goblin:</code></td><td align="center"><span class="github-emoji"><span>👺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f47a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:see_no_evil:</code></td><td align="center"><span class="github-emoji"><span>🙈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f648.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:hear_no_evil:</code></td><td align="center"><span class="github-emoji"><span>🙉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f649.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:speak_no_evil:</code></td><td align="center"><span class="github-emoji"><span>🙊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f64a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:guardsman:</code></td><td align="center"><span class="github-emoji"><span>💂♂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f482-2642.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:skull:</code></td><td align="center"><span class="github-emoji"><span>💀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f480.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:feet:</code></td><td align="center"><span class="github-emoji"><span>🐾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f43e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:lips:</code></td><td align="center"><span class="github-emoji"><span>👄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f444.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:kiss:</code></td><td align="center"><span class="github-emoji"><span>💋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f48b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:droplet:</code></td><td align="center"><span class="github-emoji"><span>💧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:ear:</code></td><td align="center"><span class="github-emoji"><span>👂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f442.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:eyes:</code></td><td align="center"><span class="github-emoji"><span>👀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f440.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:nose:</code></td><td align="center"><span class="github-emoji"><span>👃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f443.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:tongue:</code></td><td align="center"><span class="github-emoji"><span>👅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f445.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:love_letter:</code></td><td align="center"><span class="github-emoji"><span>💌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f48c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:bust_in_silhouette:</code></td><td align="center"><span class="github-emoji"><span>👤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f464.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:busts_in_silhouette:</code></td><td align="center"><span class="github-emoji"><span>👥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f465.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:speech_balloon:</code></td><td align="center"><span class="github-emoji"><span>💬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ac.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:thought_balloon:</code></td><td align="center"><span class="github-emoji"><span>💭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ad.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:feelsgood:</code></td><td align="center"><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/feelsgood.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:finnadie:</code></td><td align="center"><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/finnadie.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:goberserk:</code></td><td align="center"><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/goberserk.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:godmode:</code></td><td align="center"><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/godmode.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:hurtrealbad:</code></td><td align="center"><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/hurtrealbad.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:rage1:</code></td><td align="center"><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/rage1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:rage2:</code></td><td align="center"><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/rage2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:rage3:</code></td><td align="center"><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/rage3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:rage4:</code></td><td align="center"><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/rage4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:suspect:</code></td><td align="center"><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/suspect.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:trollface:</code></td><td align="center"><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/trollface.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="自然"><a href="#自然" class="headerlink" title="自然"></a>自然</h2><table><thead><tr><th align="center">syntax</th><th align="center">preview</th><th align="center">syntax</th><th align="center">preview</th><th align="center">syntax</th><th align="center">preview</th></tr></thead><tbody><tr><td align="center"><code>:sunny:</code></td><td align="center"><span class="github-emoji"><span>☀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2600.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:umbrella:</code></td><td align="center"><span class="github-emoji"><span>☔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2614.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:cloud:</code></td><td align="center"><span class="github-emoji"><span>☁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2601.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:snowflake:</code></td><td align="center"><span class="github-emoji"><span>❄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2744.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:snowman:</code></td><td align="center"><span class="github-emoji"><span>⛄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26c4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:zap:</code></td><td align="center"><span class="github-emoji"><span>⚡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:cyclone:</code></td><td align="center"><span class="github-emoji"><span>🌀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f300.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:foggy:</code></td><td align="center"><span class="github-emoji"><span>🌁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f301.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:ocean:</code></td><td align="center"><span class="github-emoji"><span>🌊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f30a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:cat:</code></td><td align="center"><span class="github-emoji"><span>🐱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f431.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:dog:</code></td><td align="center"><span class="github-emoji"><span>🐶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f436.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:mouse:</code></td><td align="center"><span class="github-emoji"><span>🐭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:hamster:</code></td><td align="center"><span class="github-emoji"><span>🐹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f439.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:rabbit:</code></td><td align="center"><span class="github-emoji"><span>🐰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f430.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:wolf:</code></td><td align="center"><span class="github-emoji"><span>🐺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f43a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:frog:</code></td><td align="center"><span class="github-emoji"><span>🐸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f438.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:tiger:</code></td><td align="center"><span class="github-emoji"><span>🐯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:koala:</code></td><td align="center"><span class="github-emoji"><span>🐨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f428.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:bear:</code></td><td align="center"><span class="github-emoji"><span>🐻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f43b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:pig:</code></td><td align="center"><span class="github-emoji"><span>🐷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f437.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:pig_nose:</code></td><td align="center"><span class="github-emoji"><span>🐽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f43d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:cow:</code></td><td align="center"><span class="github-emoji"><span>🐮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:boar:</code></td><td align="center"><span class="github-emoji"><span>🐗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f417.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:monkey_face:</code></td><td align="center"><span class="github-emoji"><span>🐵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f435.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:monkey:</code></td><td align="center"><span class="github-emoji"><span>🐒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f412.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:horse:</code></td><td align="center"><span class="github-emoji"><span>🐴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f434.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:racehorse:</code></td><td align="center"><span class="github-emoji"><span>🐎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f40e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:camel:</code></td><td align="center"><span class="github-emoji"><span>🐫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:sheep:</code></td><td align="center"><span class="github-emoji"><span>🐑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f411.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:elephant:</code></td><td align="center"><span class="github-emoji"><span>🐘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f418.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:panda_face:</code></td><td align="center"><span class="github-emoji"><span>🐼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f43c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:snake:</code></td><td align="center"><span class="github-emoji"><span>🐍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f40d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:bird:</code></td><td align="center"><span class="github-emoji"><span>🐦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f426.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:baby_chick:</code></td><td align="center"><span class="github-emoji"><span>🐤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f424.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:hatched_chick:</code></td><td align="center"><span class="github-emoji"><span>🐥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f425.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:hatching_chick:</code></td><td align="center"><span class="github-emoji"><span>🐣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f423.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:chicken:</code></td><td align="center"><span class="github-emoji"><span>🐔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f414.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:penguin:</code></td><td align="center"><span class="github-emoji"><span>🐧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f427.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:turtle:</code></td><td align="center"><span class="github-emoji"><span>🐢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f422.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:bug:</code></td><td align="center"><span class="github-emoji"><span>🐛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:honeybee:</code></td><td align="center"><span class="github-emoji"><span>🐝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:ant:</code></td><td align="center"><span class="github-emoji"><span>🐜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:beetle:</code></td><td align="center"><span class="github-emoji"><span>🐞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:snail:</code></td><td align="center"><span class="github-emoji"><span>🐌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f40c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:octopus:</code></td><td align="center"><span class="github-emoji"><span>🐙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f419.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:tropical_fish:</code></td><td align="center"><span class="github-emoji"><span>🐠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f420.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:fish:</code></td><td align="center"><span class="github-emoji"><span>🐟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:whale:</code></td><td align="center"><span class="github-emoji"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:whale2:</code></td><td align="center"><span class="github-emoji"><span>🐋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f40b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:dolphin:</code></td><td align="center"><span class="github-emoji"><span>🐬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:cow2:</code></td><td align="center"><span class="github-emoji"><span>🐄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f404.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:ram:</code></td><td align="center"><span class="github-emoji"><span>🐏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f40f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:rat:</code></td><td align="center"><span class="github-emoji"><span>🐀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f400.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:water_buffalo:</code></td><td align="center"><span class="github-emoji"><span>🐃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f403.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:tiger2:</code></td><td align="center"><span class="github-emoji"><span>🐅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f405.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:rabbit2:</code></td><td align="center"><span class="github-emoji"><span>🐇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f407.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:dragon:</code></td><td align="center"><span class="github-emoji"><span>🐉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f409.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:goat:</code></td><td align="center"><span class="github-emoji"><span>🐐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f410.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:rooster:</code></td><td align="center"><span class="github-emoji"><span>🐓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f413.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:dog2:</code></td><td align="center"><span class="github-emoji"><span>🐕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f415.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:pig2:</code></td><td align="center"><span class="github-emoji"><span>🐖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f416.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:mouse2:</code></td><td align="center"><span class="github-emoji"><span>🐁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f401.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:ox:</code></td><td align="center"><span class="github-emoji"><span>🐂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f402.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:dragon_face:</code></td><td align="center"><span class="github-emoji"><span>🐲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f432.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:blowfish:</code></td><td align="center"><span class="github-emoji"><span>🐡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f421.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:crocodile:</code></td><td align="center"><span class="github-emoji"><span>🐊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f40a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:dromedary_camel:</code></td><td align="center"><span class="github-emoji"><span>🐪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:leopard:</code></td><td align="center"><span class="github-emoji"><span>🐆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f406.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:cat2:</code></td><td align="center"><span class="github-emoji"><span>🐈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f408.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:poodle:</code></td><td align="center"><span class="github-emoji"><span>🐩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f429.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:paw_prints:</code></td><td align="center"><span class="github-emoji"><span>🐾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f43e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:bouquet:</code></td><td align="center"><span class="github-emoji"><span>💐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f490.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:cherry_blossom:</code></td><td align="center"><span class="github-emoji"><span>🌸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f338.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:tulip:</code></td><td align="center"><span class="github-emoji"><span>🌷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f337.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:four_leaf_clover:</code></td><td align="center"><span class="github-emoji"><span>🍀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f340.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:rose:</code></td><td align="center"><span class="github-emoji"><span>🌹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f339.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:sunflower:</code></td><td align="center"><span class="github-emoji"><span>🌻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:hibiscus:</code></td><td align="center"><span class="github-emoji"><span>🌺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:maple_leaf:</code></td><td align="center"><span class="github-emoji"><span>🍁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f341.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:leaves:</code></td><td align="center"><span class="github-emoji"><span>🍃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f343.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:fallen_leaf:</code></td><td align="center"><span class="github-emoji"><span>🍂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f342.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:herb:</code></td><td align="center"><span class="github-emoji"><span>🌿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:mushroom:</code></td><td align="center"><span class="github-emoji"><span>🍄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f344.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:cactus:</code></td><td align="center"><span class="github-emoji"><span>🌵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f335.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:palm_tree:</code></td><td align="center"><span class="github-emoji"><span>🌴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f334.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:evergreen_tree:</code></td><td align="center"><span class="github-emoji"><span>🌲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f332.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:deciduous_tree:</code></td><td align="center"><span class="github-emoji"><span>🌳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f333.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:chestnut:</code></td><td align="center"><span class="github-emoji"><span>🌰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f330.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:seedling:</code></td><td align="center"><span class="github-emoji"><span>🌱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f331.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:blossom:</code></td><td align="center"><span class="github-emoji"><span>🌼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:ear_of_rice:</code></td><td align="center"><span class="github-emoji"><span>🌾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:shell:</code></td><td align="center"><span class="github-emoji"><span>🐚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:globe_with_meridians:</code></td><td align="center"><span class="github-emoji"><span>🌐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f310.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:sun_with_face:</code></td><td align="center"><span class="github-emoji"><span>🌞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:full_moon_with_face:</code></td><td align="center"><span class="github-emoji"><span>🌝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:new_moon_with_face:</code></td><td align="center"><span class="github-emoji"><span>🌚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:new_moon:</code></td><td align="center"><span class="github-emoji"><span>🌑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f311.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:waxing_crescent_moon:</code></td><td align="center"><span class="github-emoji"><span>🌒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f312.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:first_quarter_moon:</code></td><td align="center"><span class="github-emoji"><span>🌓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f313.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:full_moon:</code></td><td align="center"><span class="github-emoji"><span>🌕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f315.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:waning_gibbous_moon:</code></td><td align="center"><span class="github-emoji"><span>🌖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f316.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:last_quarter_moon:</code></td><td align="center"><span class="github-emoji"><span>🌗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f317.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:waning_crescent_moon:</code></td><td align="center"><span class="github-emoji"><span>🌘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f318.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:last_quarter_moon_with_face:</code></td><td align="center"><span class="github-emoji"><span>🌜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:first_quarter_moon_with_face:</code></td><td align="center"><span class="github-emoji"><span>🌛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:moon:</code></td><td align="center"><span class="github-emoji"><span>🌔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f314.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:earth_africa:</code></td><td align="center"><span class="github-emoji"><span>🌍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f30d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:earth_americas:</code></td><td align="center"><span class="github-emoji"><span>🌎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f30e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:earth_asia:</code></td><td align="center"><span class="github-emoji"><span>🌏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f30f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:volcano:</code></td><td align="center"><span class="github-emoji"><span>🌋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f30b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:milky_way:</code></td><td align="center"><span class="github-emoji"><span>🌌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f30c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:partly_sunny:</code></td><td align="center"><span class="github-emoji"><span>⛅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26c5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:octocat:</code></td><td align="center"><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/octocat.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:squirrel:</code></td><td align="center">:squirrel:</td></tr><tr><td align="center"><code>:waxing_gibbous_moon:</code></td><td align="center"><span class="github-emoji"><span>🌔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f314.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="物体"><a href="#物体" class="headerlink" title="物体"></a>物体</h2><table><thead><tr><th align="center">syntax</th><th align="center">preview</th><th align="center">syntax</th><th align="center">preview</th><th align="center">syntax</th><th align="center">preview</th></tr></thead><tbody><tr><td align="center"><code>:bamboo:</code></td><td align="center"><span class="github-emoji"><span>🎍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f38d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:gift_heart:</code></td><td align="center"><span class="github-emoji"><span>💝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f49d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:dolls:</code></td><td align="center"><span class="github-emoji"><span>🎎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f38e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:school_satchel:</code></td><td align="center"><span class="github-emoji"><span>🎒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f392.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:mortar_board:</code></td><td align="center"><span class="github-emoji"><span>🎓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f393.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:flags:</code></td><td align="center"><span class="github-emoji"><span>🎏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f38f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:fireworks:</code></td><td align="center"><span class="github-emoji"><span>🎆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f386.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:sparkler:</code></td><td align="center"><span class="github-emoji"><span>🎇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f387.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:wind_chime:</code></td><td align="center"><span class="github-emoji"><span>🎐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f390.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:rice_scene:</code></td><td align="center"><span class="github-emoji"><span>🎑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f391.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:jack_o_lantern:</code></td><td align="center"><span class="github-emoji"><span>🎃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f383.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:ghost:</code></td><td align="center"><span class="github-emoji"><span>👻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f47b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:santa:</code></td><td align="center"><span class="github-emoji"><span>🎅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f385.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:christmas_tree:</code></td><td align="center"><span class="github-emoji"><span>🎄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f384.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:gift:</code></td><td align="center"><span class="github-emoji"><span>🎁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f381.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:bell:</code></td><td align="center"><span class="github-emoji"><span>🔔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f514.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:no_bell:</code></td><td align="center"><span class="github-emoji"><span>🔕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f515.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:tanabata_tree:</code></td><td align="center"><span class="github-emoji"><span>🎋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f38b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:tada:</code></td><td align="center"><span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:confetti_ball:</code></td><td align="center"><span class="github-emoji"><span>🎊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f38a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:balloon:</code></td><td align="center"><span class="github-emoji"><span>🎈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f388.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:crystal_ball:</code></td><td align="center"><span class="github-emoji"><span>🔮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f52e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:cd:</code></td><td align="center"><span class="github-emoji"><span>💿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4bf.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:dvd:</code></td><td align="center"><span class="github-emoji"><span>📀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:floppy_disk:</code></td><td align="center"><span class="github-emoji"><span>💾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4be.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:camera:</code></td><td align="center"><span class="github-emoji"><span>📷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:video_camera:</code></td><td align="center"><span class="github-emoji"><span>📹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:movie_camera:</code></td><td align="center"><span class="github-emoji"><span>🎥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:computer:</code></td><td align="center"><span class="github-emoji"><span>💻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4bb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:tv:</code></td><td align="center"><span class="github-emoji"><span>📺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4fa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:iphone:</code></td><td align="center"><span class="github-emoji"><span>📱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:phone:</code></td><td align="center"><span class="github-emoji"><span>☎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/260e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:telephone:</code></td><td align="center"><span class="github-emoji"><span>☎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/260e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:telephone_receiver:</code></td><td align="center"><span class="github-emoji"><span>📞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4de.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:pager:</code></td><td align="center"><span class="github-emoji"><span>📟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4df.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:fax:</code></td><td align="center"><span class="github-emoji"><span>📠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:minidisc:</code></td><td align="center"><span class="github-emoji"><span>💽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4bd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:vhs:</code></td><td align="center"><span class="github-emoji"><span>📼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4fc.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:sound:</code></td><td align="center"><span class="github-emoji"><span>🔉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f509.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:speaker:</code></td><td align="center"><span class="github-emoji"><span>🔈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f508.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:mute:</code></td><td align="center"><span class="github-emoji"><span>🔇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f507.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:loudspeaker:</code></td><td align="center"><span class="github-emoji"><span>📢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:mega:</code></td><td align="center"><span class="github-emoji"><span>📣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:hourglass:</code></td><td align="center"><span class="github-emoji"><span>⌛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/231b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:hourglass_flowing_sand:</code></td><td align="center"><span class="github-emoji"><span>⏳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/23f3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:alarm_clock:</code></td><td align="center"><span class="github-emoji"><span>⏰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/23f0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:watch:</code></td><td align="center"><span class="github-emoji"><span>⌚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/231a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:radio:</code></td><td align="center"><span class="github-emoji"><span>📻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4fb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:satellite:</code></td><td align="center"><span class="github-emoji"><span>📡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:loop:</code></td><td align="center"><span class="github-emoji"><span>➿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/27bf.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:mag:</code></td><td align="center"><span class="github-emoji"><span>🔍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:mag_right:</code></td><td align="center"><span class="github-emoji"><span>🔎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f50e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:unlock:</code></td><td align="center"><span class="github-emoji"><span>🔓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f513.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:lock:</code></td><td align="center"><span class="github-emoji"><span>🔒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f512.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:lock_with_ink_pen:</code></td><td align="center"><span class="github-emoji"><span>🔏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f50f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:closed_lock_with_key:</code></td><td align="center"><span class="github-emoji"><span>🔐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f510.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:key:</code></td><td align="center"><span class="github-emoji"><span>🔑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f511.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:bulb:</code></td><td align="center"><span class="github-emoji"><span>💡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:flashlight:</code></td><td align="center"><span class="github-emoji"><span>🔦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f526.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:high_brightness:</code></td><td align="center"><span class="github-emoji"><span>🔆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f506.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:low_brightness:</code></td><td align="center"><span class="github-emoji"><span>🔅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f505.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:electric_plug:</code></td><td align="center"><span class="github-emoji"><span>🔌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f50c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:battery:</code></td><td align="center"><span class="github-emoji"><span>🔋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f50b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:calling:</code></td><td align="center"><span class="github-emoji"><span>📲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:email:</code></td><td align="center"><span class="github-emoji"><span>✉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2709.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:mailbox:</code></td><td align="center"><span class="github-emoji"><span>📫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4eb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:postbox:</code></td><td align="center"><span class="github-emoji"><span>📮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ee.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:bath:</code></td><td align="center"><span class="github-emoji"><span>🛀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6c0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:bathtub:</code></td><td align="center"><span class="github-emoji"><span>🛁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6c1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:shower:</code></td><td align="center"><span class="github-emoji"><span>🚿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6bf.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:toilet:</code></td><td align="center"><span class="github-emoji"><span>🚽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6bd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:wrench:</code></td><td align="center"><span class="github-emoji"><span>🔧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f527.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:nut_and_bolt:</code></td><td align="center"><span class="github-emoji"><span>🔩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f529.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:hammer:</code></td><td align="center"><span class="github-emoji"><span>🔨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f528.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:seat:</code></td><td align="center"><span class="github-emoji"><span>💺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ba.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:moneybag:</code></td><td align="center"><span class="github-emoji"><span>💰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:yen:</code></td><td align="center"><span class="github-emoji"><span>💴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:dollar:</code></td><td align="center"><span class="github-emoji"><span>💵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:pound:</code></td><td align="center"><span class="github-emoji"><span>💷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:euro:</code></td><td align="center"><span class="github-emoji"><span>💶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:credit_card:</code></td><td align="center"><span class="github-emoji"><span>💳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:money_with_wings:</code></td><td align="center"><span class="github-emoji"><span>💸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:e-mail:</code></td><td align="center">:e-mail:</td><td align="center"><code>:inbox_tray:</code></td><td align="center"><span class="github-emoji"><span>📥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:outbox_tray:</code></td><td align="center"><span class="github-emoji"><span>📤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:envelope:</code></td><td align="center"><span class="github-emoji"><span>✉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2709.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:incoming_envelope:</code></td><td align="center"><span class="github-emoji"><span>📨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:postal_horn:</code></td><td align="center"><span class="github-emoji"><span>📯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ef.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:mailbox_closed:</code></td><td align="center"><span class="github-emoji"><span>📪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ea.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:mailbox_with_mail:</code></td><td align="center"><span class="github-emoji"><span>📬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ec.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:mailbox_with_no_mail:</code></td><td align="center"><span class="github-emoji"><span>📭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ed.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:door:</code></td><td align="center"><span class="github-emoji"><span>🚪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6aa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:smoking:</code></td><td align="center"><span class="github-emoji"><span>🚬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6ac.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:bomb:</code></td><td align="center"><span class="github-emoji"><span>💣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:gun:</code></td><td align="center"><span class="github-emoji"><span>🔫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f52b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:hocho:</code></td><td align="center"><span class="github-emoji"><span>🔪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f52a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:pill:</code></td><td align="center"><span class="github-emoji"><span>💊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f48a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:syringe:</code></td><td align="center"><span class="github-emoji"><span>💉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f489.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:page_facing_up:</code></td><td align="center"><span class="github-emoji"><span>📄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:page_with_curl:</code></td><td align="center"><span class="github-emoji"><span>📃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:bookmark_tabs:</code></td><td align="center"><span class="github-emoji"><span>📑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:bar_chart:</code></td><td align="center"><span class="github-emoji"><span>📊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ca.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:chart_with_upwards_trend:</code></td><td align="center"><span class="github-emoji"><span>📈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:chart_with_downwards_trend:</code></td><td align="center"><span class="github-emoji"><span>📉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:scroll:</code></td><td align="center"><span class="github-emoji"><span>📜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4dc.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:clipboard:</code></td><td align="center"><span class="github-emoji"><span>📋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:calendar:</code></td><td align="center"><span class="github-emoji"><span>📆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:date:</code></td><td align="center"><span class="github-emoji"><span>📅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:card_index:</code></td><td align="center"><span class="github-emoji"><span>📇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:file_folder:</code></td><td align="center"><span class="github-emoji"><span>📁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:open_file_folder:</code></td><td align="center"><span class="github-emoji"><span>📂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:scissors:</code></td><td align="center"><span class="github-emoji"><span>✂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2702.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:pushpin:</code></td><td align="center"><span class="github-emoji"><span>📌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cc.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:paperclip:</code></td><td align="center"><span class="github-emoji"><span>📎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ce.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:black_nib:</code></td><td align="center"><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:pencil2:</code></td><td align="center"><span class="github-emoji"><span>✏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:straight_ruler:</code></td><td align="center"><span class="github-emoji"><span>📏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cf.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:triangular_ruler:</code></td><td align="center"><span class="github-emoji"><span>📐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:closed_book:</code></td><td align="center"><span class="github-emoji"><span>📕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:green_book:</code></td><td align="center"><span class="github-emoji"><span>📗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:blue_book:</code></td><td align="center"><span class="github-emoji"><span>📘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:orange_book:</code></td><td align="center"><span class="github-emoji"><span>📙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:notebook:</code></td><td align="center"><span class="github-emoji"><span>📓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:notebook_with_decorative_cover:</code></td><td align="center"><span class="github-emoji"><span>📔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:ledger:</code></td><td align="center"><span class="github-emoji"><span>📒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:books:</code></td><td align="center"><span class="github-emoji"><span>📚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:bookmark:</code></td><td align="center"><span class="github-emoji"><span>🔖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f516.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:microscope:</code></td><td align="center"><span class="github-emoji"><span>🔬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f52c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:telescope:</code></td><td align="center"><span class="github-emoji"><span>🔭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f52d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:name_badge:</code></td><td align="center"><span class="github-emoji"><span>📛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4db.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:newspaper:</code></td><td align="center"><span class="github-emoji"><span>📰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:football:</code></td><td align="center"><span class="github-emoji"><span>🏈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:basketball:</code></td><td align="center"><span class="github-emoji"><span>🏀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:soccer:</code></td><td align="center"><span class="github-emoji"><span>⚽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26bd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:baseball:</code></td><td align="center"><span class="github-emoji"><span>⚾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26be.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:tennis:</code></td><td align="center"><span class="github-emoji"><span>🎾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3be.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:8ball:</code></td><td align="center"><span class="github-emoji"><span>🎱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:rugby_football:</code></td><td align="center"><span class="github-emoji"><span>🏉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:bowling:</code></td><td align="center"><span class="github-emoji"><span>🎳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:golf:</code></td><td align="center"><span class="github-emoji"><span>⛳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26f3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:mountain_bicyclist:</code></td><td align="center"><span class="github-emoji"><span>🚵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:bicyclist:</code></td><td align="center"><span class="github-emoji"><span>🚴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:horse_racing:</code></td><td align="center"><span class="github-emoji"><span>🏇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:snowboarder:</code></td><td align="center"><span class="github-emoji"><span>🏂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:swimmer:</code></td><td align="center"><span class="github-emoji"><span>🏊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ca.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:surfer:</code></td><td align="center"><span class="github-emoji"><span>🏄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:ski:</code></td><td align="center"><span class="github-emoji"><span>🎿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3bf.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:spades:</code></td><td align="center"><span class="github-emoji"><span>♠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2660.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:hearts:</code></td><td align="center"><span class="github-emoji"><span>♥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2665.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:clubs:</code></td><td align="center"><span class="github-emoji"><span>♣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2663.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:diamonds:</code></td><td align="center"><span class="github-emoji"><span>♦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2666.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:gem:</code></td><td align="center"><span class="github-emoji"><span>💎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f48e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:ring:</code></td><td align="center"><span class="github-emoji"><span>💍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f48d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:trophy:</code></td><td align="center"><span class="github-emoji"><span>🏆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:musical_score:</code></td><td align="center"><span class="github-emoji"><span>🎼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3bc.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:musical_keyboard:</code></td><td align="center"><span class="github-emoji"><span>🎹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:violin:</code></td><td align="center"><span class="github-emoji"><span>🎻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3bb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:space_invader:</code></td><td align="center"><span class="github-emoji"><span>👾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f47e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:video_game:</code></td><td align="center"><span class="github-emoji"><span>🎮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ae.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:black_joker:</code></td><td align="center"><span class="github-emoji"><span>🃏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f0cf.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:flower_playing_cards:</code></td><td align="center"><span class="github-emoji"><span>🎴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:game_die:</code></td><td align="center"><span class="github-emoji"><span>🎲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:dart:</code></td><td align="center"><span class="github-emoji"><span>🎯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3af.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:mahjong:</code></td><td align="center"><span class="github-emoji"><span>🀄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f004.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:clapper:</code></td><td align="center"><span class="github-emoji"><span>🎬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ac.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:memo:</code></td><td align="center"><span class="github-emoji"><span>📝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4dd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:pencil:</code></td><td align="center"><span class="github-emoji"><span>📝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4dd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:book:</code></td><td align="center"><span class="github-emoji"><span>📖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:art:</code></td><td align="center"><span class="github-emoji"><span>🎨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:microphone:</code></td><td align="center"><span class="github-emoji"><span>🎤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:headphones:</code></td><td align="center"><span class="github-emoji"><span>🎧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:trumpet:</code></td><td align="center"><span class="github-emoji"><span>🎺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ba.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:saxophone:</code></td><td align="center"><span class="github-emoji"><span>🎷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:guitar:</code></td><td align="center"><span class="github-emoji"><span>🎸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:shoe:</code></td><td align="center"><span class="github-emoji"><span>👞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f45e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:sandal:</code></td><td align="center"><span class="github-emoji"><span>👡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f461.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:high_heel:</code></td><td align="center"><span class="github-emoji"><span>👠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f460.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:lipstick:</code></td><td align="center"><span class="github-emoji"><span>💄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f484.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:boot:</code></td><td align="center"><span class="github-emoji"><span>👢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f462.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:shirt:</code></td><td align="center"><span class="github-emoji"><span>👕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f455.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:tshirt:</code></td><td align="center"><span class="github-emoji"><span>👕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f455.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:necktie:</code></td><td align="center"><span class="github-emoji"><span>👔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f454.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:womans_clothes:</code></td><td align="center"><span class="github-emoji"><span>👚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f45a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:dress:</code></td><td align="center"><span class="github-emoji"><span>👗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f457.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:running_shirt_with_sash:</code></td><td align="center"><span class="github-emoji"><span>🎽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3bd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:jeans:</code></td><td align="center"><span class="github-emoji"><span>👖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f456.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:kimono:</code></td><td align="center"><span class="github-emoji"><span>👘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f458.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:bikini:</code></td><td align="center"><span class="github-emoji"><span>👙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f459.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:ribbon:</code></td><td align="center"><span class="github-emoji"><span>🎀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f380.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:tophat:</code></td><td align="center"><span class="github-emoji"><span>🎩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:crown:</code></td><td align="center"><span class="github-emoji"><span>👑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f451.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:womans_hat:</code></td><td align="center"><span class="github-emoji"><span>👒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f452.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:mans_shoe:</code></td><td align="center"><span class="github-emoji"><span>👞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f45e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:closed_umbrella:</code></td><td align="center"><span class="github-emoji"><span>🌂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f302.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:briefcase:</code></td><td align="center"><span class="github-emoji"><span>💼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4bc.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:handbag:</code></td><td align="center"><span class="github-emoji"><span>👜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f45c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:pouch:</code></td><td align="center"><span class="github-emoji"><span>👝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f45d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:purse:</code></td><td align="center"><span class="github-emoji"><span>👛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f45b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:eyeglasses:</code></td><td align="center"><span class="github-emoji"><span>👓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f453.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:fishing_pole_and_fish:</code></td><td align="center"><span class="github-emoji"><span>🎣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:coffee:</code></td><td align="center"><span class="github-emoji"><span>☕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2615.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:tea:</code></td><td align="center"><span class="github-emoji"><span>🍵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f375.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:sake:</code></td><td align="center"><span class="github-emoji"><span>🍶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f376.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:baby_bottle:</code></td><td align="center"><span class="github-emoji"><span>🍼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f37c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:beer:</code></td><td align="center"><span class="github-emoji"><span>🍺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f37a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:beers:</code></td><td align="center"><span class="github-emoji"><span>🍻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f37b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:cocktail:</code></td><td align="center"><span class="github-emoji"><span>🍸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f378.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:tropical_drink:</code></td><td align="center"><span class="github-emoji"><span>🍹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f379.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:wine_glass:</code></td><td align="center"><span class="github-emoji"><span>🍷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f377.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:fork_and_knife:</code></td><td align="center"><span class="github-emoji"><span>🍴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f374.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:pizza:</code></td><td align="center"><span class="github-emoji"><span>🍕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f355.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:hamburger:</code></td><td align="center"><span class="github-emoji"><span>🍔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f354.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:fries:</code></td><td align="center"><span class="github-emoji"><span>🍟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f35f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:poultry_leg:</code></td><td align="center"><span class="github-emoji"><span>🍗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f357.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:meat_on_bone:</code></td><td align="center"><span class="github-emoji"><span>🍖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f356.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:spaghetti:</code></td><td align="center"><span class="github-emoji"><span>🍝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f35d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:curry:</code></td><td align="center"><span class="github-emoji"><span>🍛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f35b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:fried_shrimp:</code></td><td align="center"><span class="github-emoji"><span>🍤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f364.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:bento:</code></td><td align="center"><span class="github-emoji"><span>🍱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f371.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:sushi:</code></td><td align="center"><span class="github-emoji"><span>🍣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f363.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:fish_cake:</code></td><td align="center"><span class="github-emoji"><span>🍥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f365.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:rice_ball:</code></td><td align="center"><span class="github-emoji"><span>🍙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f359.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:rice_cracker:</code></td><td align="center"><span class="github-emoji"><span>🍘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f358.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:rice:</code></td><td align="center"><span class="github-emoji"><span>🍚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f35a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:ramen:</code></td><td align="center"><span class="github-emoji"><span>🍜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f35c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:stew:</code></td><td align="center"><span class="github-emoji"><span>🍲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f372.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:oden:</code></td><td align="center"><span class="github-emoji"><span>🍢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f362.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:dango:</code></td><td align="center"><span class="github-emoji"><span>🍡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f361.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:egg:</code></td><td align="center"><span class="github-emoji"><span>🥚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f95a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:bread:</code></td><td align="center"><span class="github-emoji"><span>🍞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f35e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:doughnut:</code></td><td align="center"><span class="github-emoji"><span>🍩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f369.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:custard:</code></td><td align="center"><span class="github-emoji"><span>🍮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:icecream:</code></td><td align="center"><span class="github-emoji"><span>🍦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f366.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:ice_cream:</code></td><td align="center"><span class="github-emoji"><span>🍨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f368.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:shaved_ice:</code></td><td align="center"><span class="github-emoji"><span>🍧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f367.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:birthday:</code></td><td align="center"><span class="github-emoji"><span>🎂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f382.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:cake:</code></td><td align="center"><span class="github-emoji"><span>🍰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f370.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:cookie:</code></td><td align="center"><span class="github-emoji"><span>🍪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:chocolate_bar:</code></td><td align="center"><span class="github-emoji"><span>🍫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:candy:</code></td><td align="center"><span class="github-emoji"><span>🍬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:lollipop:</code></td><td align="center"><span class="github-emoji"><span>🍭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:honey_pot:</code></td><td align="center"><span class="github-emoji"><span>🍯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:apple:</code></td><td align="center"><span class="github-emoji"><span>🍎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f34e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:green_apple:</code></td><td align="center"><span class="github-emoji"><span>🍏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f34f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:tangerine:</code></td><td align="center"><span class="github-emoji"><span>🍊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f34a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:lemon:</code></td><td align="center"><span class="github-emoji"><span>🍋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f34b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:cherries:</code></td><td align="center"><span class="github-emoji"><span>🍒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f352.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:grapes:</code></td><td align="center"><span class="github-emoji"><span>🍇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f347.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:watermelon:</code></td><td align="center"><span class="github-emoji"><span>🍉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f349.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:strawberry:</code></td><td align="center"><span class="github-emoji"><span>🍓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f353.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:peach:</code></td><td align="center"><span class="github-emoji"><span>🍑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f351.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:melon:</code></td><td align="center"><span class="github-emoji"><span>🍈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f348.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:banana:</code></td><td align="center"><span class="github-emoji"><span>🍌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f34c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:pear:</code></td><td align="center"><span class="github-emoji"><span>🍐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f350.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:pineapple:</code></td><td align="center"><span class="github-emoji"><span>🍍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f34d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:sweet_potato:</code></td><td align="center"><span class="github-emoji"><span>🍠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f360.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:eggplant:</code></td><td align="center"><span class="github-emoji"><span>🍆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f346.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:tomato:</code></td><td align="center"><span class="github-emoji"><span>🍅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f345.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:corn:</code></td><td align="center"><span class="github-emoji"><span>🌽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="地点"><a href="#地点" class="headerlink" title="地点"></a>地点</h2><table><thead><tr><th align="center">syntax</th><th align="center">preview</th><th align="center">syntax</th><th align="center">preview</th><th align="center">syntax</th><th align="center">preview</th></tr></thead><tbody><tr><td align="center"><code>:house:</code></td><td align="center"><span class="github-emoji"><span>🏠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:house_with_garden:</code></td><td align="center"><span class="github-emoji"><span>🏡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:school:</code></td><td align="center"><span class="github-emoji"><span>🏫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3eb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:office:</code></td><td align="center"><span class="github-emoji"><span>🏢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:post_office:</code></td><td align="center"><span class="github-emoji"><span>🏣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:hospital:</code></td><td align="center"><span class="github-emoji"><span>🏥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:bank:</code></td><td align="center"><span class="github-emoji"><span>🏦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:convenience_store:</code></td><td align="center"><span class="github-emoji"><span>🏪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ea.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:love_hotel:</code></td><td align="center"><span class="github-emoji"><span>🏩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:hotel:</code></td><td align="center"><span class="github-emoji"><span>🏨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:wedding:</code></td><td align="center"><span class="github-emoji"><span>💒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f492.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:church:</code></td><td align="center"><span class="github-emoji"><span>⛪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26ea.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:department_store:</code></td><td align="center"><span class="github-emoji"><span>🏬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ec.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:european_post_office:</code></td><td align="center"><span class="github-emoji"><span>🏤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:city_sunrise:</code></td><td align="center"><span class="github-emoji"><span>🌇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f307.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:city_sunset:</code></td><td align="center"><span class="github-emoji"><span>🌆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f306.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:japanese_castle:</code></td><td align="center"><span class="github-emoji"><span>🏯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ef.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:european_castle:</code></td><td align="center"><span class="github-emoji"><span>🏰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3f0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:tent:</code></td><td align="center"><span class="github-emoji"><span>⛺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26fa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :factory:</code></td><td align="center"><span class="github-emoji"><span>🏭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ed.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:tokyo_tower:</code></td><td align="center"><span class="github-emoji"><span>🗼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f5fc.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:japan:</code></td><td align="center"><span class="github-emoji"><span>🗾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f5fe.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:mount_fuji:</code></td><td align="center"><span class="github-emoji"><span>🗻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f5fb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:sunrise_over_mountains:</code></td><td align="center"><span class="github-emoji"><span>🌄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f304.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:sunrise:</code></td><td align="center"><span class="github-emoji"><span>🌅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f305.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:stars:</code></td><td align="center"><span class="github-emoji"><span>🌠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f320.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:statue_of_liberty:</code></td><td align="center"><span class="github-emoji"><span>🗽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f5fd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:bridge_at_night:</code></td><td align="center"><span class="github-emoji"><span>🌉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f309.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:carousel_horse:</code></td><td align="center"><span class="github-emoji"><span>🎠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:rainbow:</code></td><td align="center"><span class="github-emoji"><span>🌈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:ferris_wheel:</code></td><td align="center"><span class="github-emoji"><span>🎡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:fountain:</code></td><td align="center"><span class="github-emoji"><span>⛲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26f2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:roller_coaster:</code></td><td align="center"><span class="github-emoji"><span>🎢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:ship:</code></td><td align="center"><span class="github-emoji"><span>🚢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :speedboat:</code></td><td align="center"><span class="github-emoji"><span>🚤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :boat:</code></td><td align="center"><span class="github-emoji"><span>⛵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26f5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:sailboat:</code></td><td align="center"><span class="github-emoji"><span>⛵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26f5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:rowboat:</code></td><td align="center"><span class="github-emoji"><span>🚣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:anchor:</code></td><td align="center"><span class="github-emoji"><span>⚓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2693.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:rocket:</code></td><td align="center"><span class="github-emoji"><span>🚀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:airplane:</code></td><td align="center"><span class="github-emoji"><span>✈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2708.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:helicopter:</code></td><td align="center"><span class="github-emoji"><span>🚁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f681.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:steam_locomotive:</code></td><td align="center"><span class="github-emoji"><span>🚂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f682.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:tram:</code></td><td align="center"><span class="github-emoji"><span>🚊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f68a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:mountain_railway:</code></td><td align="center"><span class="github-emoji"><span>🚞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f69e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:bike:</code></td><td align="center"><span class="github-emoji"><span>🚲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:aerial_tramway:</code></td><td align="center"><span class="github-emoji"><span>🚡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:suspension_railway:</code></td><td align="center"><span class="github-emoji"><span>🚟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f69f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:mountain_cableway:</code></td><td align="center"><span class="github-emoji"><span>🚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:tractor:</code></td><td align="center"><span class="github-emoji"><span>🚜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f69c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:blue_car:</code></td><td align="center"><span class="github-emoji"><span>🚙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f699.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:oncoming_automobile:</code></td><td align="center"><span class="github-emoji"><span>🚘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f698.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:car:</code></td><td align="center"><span class="github-emoji"><span>🚗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f697.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :red_car:</code></td><td align="center"><span class="github-emoji"><span>🚗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f697.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:taxi:</code></td><td align="center"><span class="github-emoji"><span>🚕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f695.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:oncoming_taxi:</code></td><td align="center"><span class="github-emoji"><span>🚖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f696.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:articulated_lorry:</code></td><td align="center"><span class="github-emoji"><span>🚛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f69b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:bus:</code></td><td align="center"><span class="github-emoji"><span>🚌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f68c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:oncoming_bus:</code></td><td align="center"><span class="github-emoji"><span>🚍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f68d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:rotating_light:</code></td><td align="center"><span class="github-emoji"><span>🚨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:police_car:</code></td><td align="center"><span class="github-emoji"><span>🚓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f693.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:oncoming_police_car:</code></td><td align="center"><span class="github-emoji"><span>🚔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f694.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:fire_engine:</code></td><td align="center"><span class="github-emoji"><span>🚒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f692.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:ambulance:</code></td><td align="center"><span class="github-emoji"><span>🚑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f691.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:minibus:</code></td><td align="center"><span class="github-emoji"><span>🚐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f690.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :truck:</code></td><td align="center"><span class="github-emoji"><span>🚚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f69a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :train:</code></td><td align="center"><span class="github-emoji"><span>🚋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f68b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :station:</code></td><td align="center"><span class="github-emoji"><span>🚉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f689.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :train2:</code></td><td align="center"><span class="github-emoji"><span>🚆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f686.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:bullettrain_front:</code></td><td align="center"><span class="github-emoji"><span>🚅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f685.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :bullettrain_side:</code></td><td align="center"><span class="github-emoji"><span>🚄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f684.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :light_rail:</code></td><td align="center"><span class="github-emoji"><span>🚈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f688.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :monorail:</code></td><td align="center"><span class="github-emoji"><span>🚝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f69d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :railway_car:</code></td><td align="center"><span class="github-emoji"><span>🚃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f683.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :trolleybus:</code></td><td align="center"><span class="github-emoji"><span>🚎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f68e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:ticket:</code></td><td align="center"><span class="github-emoji"><span>🎫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ab.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :fuelpump:</code></td><td align="center"><span class="github-emoji"><span>⛽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26fd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :vertical_traffic_light:</code></td><td align="center"><span class="github-emoji"><span>🚦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :traffic_light:</code></td><td align="center"><span class="github-emoji"><span>🚥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :warning:</code></td><td align="center"><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :construction:</code></td><td align="center"><span class="github-emoji"><span>🚧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:beginner:</code></td><td align="center"><span class="github-emoji"><span>🔰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f530.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :atm:</code></td><td align="center"><span class="github-emoji"><span>🏧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :slot_machine:</code></td><td align="center"><span class="github-emoji"><span>🎰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :busstop:</code></td><td align="center"><span class="github-emoji"><span>🚏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f68f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :barber:</code></td><td align="center"><span class="github-emoji"><span>💈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f488.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :hotsprings:</code></td><td align="center"><span class="github-emoji"><span>♨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2668.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :checkered_flag:</code></td><td align="center"><span class="github-emoji"><span>🏁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :crossed_flags:</code></td><td align="center"><span class="github-emoji"><span>🎌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f38c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :izakaya_lantern:</code></td><td align="center"><span class="github-emoji"><span>🏮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ee.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:moyai:</code></td><td align="center"><span class="github-emoji"><span>🗿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f5ff.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :circus_tent:</code></td><td align="center"><span class="github-emoji"><span>🎪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3aa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :performing_arts:</code></td><td align="center"><span class="github-emoji"><span>🎭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ad.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :round_pushpin:</code></td><td align="center"><span class="github-emoji"><span>📍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :triangular_flag_on_post:</code></td><td align="center"><span class="github-emoji"><span>🚩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :jp:</code></td><td align="center"><span class="github-emoji"><span>🇯🇵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1ef-1f1f5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:kr:</code></td><td align="center"><span class="github-emoji"><span>🇰🇷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1f0-1f1f7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :cn:</code></td><td align="center"><span class="github-emoji"><span>🇨🇳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :us:</code></td><td align="center"><span class="github-emoji"><span>🇺🇸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :fr:</code></td><td align="center"><span class="github-emoji"><span>🇫🇷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1eb-1f1f7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:es:</code></td><td align="center"><span class="github-emoji"><span>🇪🇸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1ea-1f1f8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :it:</code></td><td align="center"><span class="github-emoji"><span>🇮🇹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1ee-1f1f9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:ru:</code></td><td align="center"><span class="github-emoji"><span>🇷🇺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1f7-1f1fa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :gb:</code></td><td align="center"><span class="github-emoji"><span>🇬🇧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1e7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :uk:</code></td><td align="center"><span class="github-emoji"><span>🇬🇧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1e7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:de:</code></td><td align="center"><span class="github-emoji"><span>🇩🇪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1e9-1f1ea.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h2><table><thead><tr><th align="center">syntax</th><th align="center">preview</th><th align="center">syntax</th><th align="center">preview</th><th align="center">syntax</th><th align="center">preview</th></tr></thead><tbody><tr><td align="center"><code>:one:</code></td><td align="center"><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:two:</code></td><td align="center"><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:three:</code></td><td align="center"><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:four:</code></td><td align="center"><span class="github-emoji"><span>4⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0034-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:five:</code></td><td align="center"><span class="github-emoji"><span>5⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0035-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :six:</code></td><td align="center"><span class="github-emoji"><span>6⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0036-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :seven:</code></td><td align="center"><span class="github-emoji"><span>7⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0037-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :eight:</code></td><td align="center"><span class="github-emoji"><span>8⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0038-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :nine:</code></td><td align="center"><span class="github-emoji"><span>9⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0039-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :keycap_ten:</code></td><td align="center"><span class="github-emoji"><span>🔟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f51f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :1234:</code></td><td align="center"><span class="github-emoji"><span>🔢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f522.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :zero:</code></td><td align="center"><span class="github-emoji"><span>0⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0030-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:hash:</code></td><td align="center"><span class="github-emoji"><span>#⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0023-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :symbols:</code></td><td align="center"><span class="github-emoji"><span>🔣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f523.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :arrow_backward:</code></td><td align="center"><span class="github-emoji"><span>◀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/25c0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :arrow_down:</code></td><td align="center"><span class="github-emoji"><span>⬇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b07.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :arrow_forward:</code></td><td align="center"><span class="github-emoji"><span>▶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/25b6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :arrow_left:</code></td><td align="center"><span class="github-emoji"><span>⬅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b05.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :capital_abcd:</code></td><td align="center"><span class="github-emoji"><span>🔠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f520.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :abcd:</code></td><td align="center"><span class="github-emoji"><span>🔡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f521.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :abc:</code></td><td align="center"><span class="github-emoji"><span>🔤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f524.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:arrow_lower_left:</code></td><td align="center"><span class="github-emoji"><span>↙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2199.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :arrow_lower_right:</code></td><td align="center"><span class="github-emoji"><span>↘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2198.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :arrow_right:</code></td><td align="center"><span class="github-emoji"><span>➡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/27a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :arrow_up:</code></td><td align="center"><span class="github-emoji"><span>⬆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b06.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :arrow_upper_left:</code></td><td align="center"><span class="github-emoji"><span>↖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2196.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :arrow_upper_right:</code></td><td align="center"><span class="github-emoji"><span>↗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2197.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:arrow_double_down:</code></td><td align="center"><span class="github-emoji"><span>⏬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/23ec.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :arrow_double_up:</code></td><td align="center"><span class="github-emoji"><span>⏫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/23eb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :arrow_down_small:</code></td><td align="center"><span class="github-emoji"><span>🔽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f53d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :arrow_heading_down:</code></td><td align="center"><span class="github-emoji"><span>⤵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2935.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :arrow_heading_up:</code></td><td align="center"><span class="github-emoji"><span>⤴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2934.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :leftwards_arrow_with_hook:</code></td><td align="center"><span class="github-emoji"><span>↩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/21a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:arrow_right_hook:</code></td><td align="center"><span class="github-emoji"><span>↪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/21aa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :left_right_arrow:</code></td><td align="center"><span class="github-emoji"><span>↔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2194.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :arrow_up_down:</code></td><td align="center"><span class="github-emoji"><span>↕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2195.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :arrow_up_small:</code></td><td align="center"><span class="github-emoji"><span>🔼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f53c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :arrows_clockwise:</code></td><td align="center"><span class="github-emoji"><span>🔃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f503.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :arrows_counterclockwise:</code></td><td align="center"><span class="github-emoji"><span>🔄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f504.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :rewind:</code></td><td align="center"><span class="github-emoji"><span>⏪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/23ea.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :fast_forward:</code></td><td align="center"><span class="github-emoji"><span>⏩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/23e9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :information_source:</code></td><td align="center"><span class="github-emoji"><span>ℹ</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2139.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:ok:</code></td><td align="center"><span class="github-emoji"><span>🆗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f197.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :twisted_rightwards_arrows:</code></td><td align="center"><span class="github-emoji"><span>🔀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f500.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :repeat:</code></td><td align="center"><span class="github-emoji"><span>🔁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f501.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :repeat_one:</code></td><td align="center"><span class="github-emoji"><span>🔂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f502.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :new:</code></td><td align="center"><span class="github-emoji"><span>🆕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f195.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :top:</code></td><td align="center"><span class="github-emoji"><span>🔝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:up:</code></td><td align="center"><span class="github-emoji"><span>🆙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f199.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:cool:</code></td><td align="center"><span class="github-emoji"><span>🆒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f192.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :free:</code></td><td align="center"><span class="github-emoji"><span>🆓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f193.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:ng:</code></td><td align="center"><span class="github-emoji"><span>🆖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f196.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:cinema:</code></td><td align="center"><span class="github-emoji"><span>🎦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :koko:</code></td><td align="center"><span class="github-emoji"><span>🈁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f201.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :signal_strength:</code></td><td align="center"><span class="github-emoji"><span>📶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :u5272:</code></td><td align="center"><span class="github-emoji"><span>🈹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f239.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :u5408:</code></td><td align="center"><span class="github-emoji"><span>🈴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f234.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :u55b6:</code></td><td align="center"><span class="github-emoji"><span>🈺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f23a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :u6307:</code></td><td align="center"><span class="github-emoji"><span>🈯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f22f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :u6708:</code></td><td align="center"><span class="github-emoji"><span>🈷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f237.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :u6709:</code></td><td align="center"><span class="github-emoji"><span>🈶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f236.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :u6e80:</code></td><td align="center"><span class="github-emoji"><span>🈵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f235.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :u7121:</code></td><td align="center"><span class="github-emoji"><span>🈚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f21a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :u7533:</code></td><td align="center"><span class="github-emoji"><span>🈸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f238.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :u7a7a:</code></td><td align="center"><span class="github-emoji"><span>🈳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f233.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :u7981:</code></td><td align="center"><span class="github-emoji"><span>🈲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f232.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:sa:</code></td><td align="center"><span class="github-emoji"><span>🈂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f202.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :restroom:</code></td><td align="center"><span class="github-emoji"><span>🚻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6bb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :mens:</code></td><td align="center"><span class="github-emoji"><span>🚹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :womens:</code></td><td align="center"><span class="github-emoji"><span>🚺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6ba.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :baby_symbol:</code></td><td align="center"><span class="github-emoji"><span>🚼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6bc.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :no_smoking:</code></td><td align="center"><span class="github-emoji"><span>🚭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6ad.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:parking:</code></td><td align="center"><span class="github-emoji"><span>🅿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f17f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :wheelchair:</code></td><td align="center"><span class="github-emoji"><span>♿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/267f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :metro:</code></td><td align="center"><span class="github-emoji"><span>🚇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f687.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :baggage_claim:</code></td><td align="center"><span class="github-emoji"><span>🛄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6c4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :accept:</code></td><td align="center"><span class="github-emoji"><span>🉑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f251.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :wc:</code></td><td align="center"><span class="github-emoji"><span>🚾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6be.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:potable_water:</code></td><td align="center"><span class="github-emoji"><span>🚰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :put_litter_in_its_place:</code></td><td align="center"><span class="github-emoji"><span>🚮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6ae.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :secret:</code></td><td align="center"><span class="github-emoji"><span>㊙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/3299.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :congratulations:</code></td><td align="center"><span class="github-emoji"><span>㊗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/3297.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :m:</code></td><td align="center"><span class="github-emoji"><span>Ⓜ</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/24c2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :passport_control:</code></td><td align="center"><span class="github-emoji"><span>🛂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6c2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:left_luggage:</code></td><td align="center"><span class="github-emoji"><span>🛅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6c5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :customs:</code></td><td align="center"><span class="github-emoji"><span>🛃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6c3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :ideograph_advantage:</code></td><td align="center"><span class="github-emoji"><span>🉐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f250.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :cl:</code></td><td align="center"><span class="github-emoji"><span>🆑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f191.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :sos:</code></td><td align="center"><span class="github-emoji"><span>🆘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f198.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :id:</code></td><td align="center"><span class="github-emoji"><span>🆔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f194.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :no_entry_sign:</code></td><td align="center"><span class="github-emoji"><span>🚫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6ab.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :underage:</code></td><td align="center"><span class="github-emoji"><span>🔞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f51e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :no_mobile_phones:</code></td><td align="center"><span class="github-emoji"><span>📵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :do_not_litter:</code></td><td align="center"><span class="github-emoji"><span>🚯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6af.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :non-potable_water:</code></td><td align="center">:non-potable_water:</td><td align="center"><code> :no_bicycles:</code></td><td align="center"><span class="github-emoji"><span>🚳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:no_pedestrians:</code></td><td align="center"><span class="github-emoji"><span>🚷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :children_crossing:</code></td><td align="center"><span class="github-emoji"><span>🚸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :no_entry:</code></td><td align="center"><span class="github-emoji"><span>⛔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26d4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :eight_spoked_asterisk:</code></td><td align="center"><span class="github-emoji"><span>✳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2733.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :eight_pointed_black_star:</code></td><td align="center"><span class="github-emoji"><span>✴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2734.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :heart_decoration:</code></td><td align="center"><span class="github-emoji"><span>💟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f49f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :vs:</code></td><td align="center"><span class="github-emoji"><span>🆚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f19a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :vibration_mode:</code></td><td align="center"><span class="github-emoji"><span>📳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :mobile_phone_off:</code></td><td align="center"><span class="github-emoji"><span>📴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :chart:</code></td><td align="center"><span class="github-emoji"><span>💹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :currency_exchange:</code></td><td align="center"><span class="github-emoji"><span>💱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :aries:</code></td><td align="center"><span class="github-emoji"><span>♈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2648.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :taurus:</code></td><td align="center"><span class="github-emoji"><span>♉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2649.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:gemini:</code></td><td align="center"><span class="github-emoji"><span>♊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/264a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :cancer:</code></td><td align="center"><span class="github-emoji"><span>♋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/264b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:leo:</code></td><td align="center"><span class="github-emoji"><span>♌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/264c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :virgo:</code></td><td align="center"><span class="github-emoji"><span>♍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/264d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :libra:</code></td><td align="center"><span class="github-emoji"><span>♎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/264e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :scorpius:</code></td><td align="center"><span class="github-emoji"><span>♏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/264f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :sagittarius:</code></td><td align="center"><span class="github-emoji"><span>♐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2650.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :capricorn:</code></td><td align="center"><span class="github-emoji"><span>♑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2651.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :aquarius:</code></td><td align="center"><span class="github-emoji"><span>♒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2652.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :pisces:</code></td><td align="center"><span class="github-emoji"><span>♓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2653.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :ophiuchus:</code></td><td align="center"><span class="github-emoji"><span>⛎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26ce.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :six_pointed_star:</code></td><td align="center"><span class="github-emoji"><span>🔯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f52f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :negative_squared_cross_mark:</code></td><td align="center"><span class="github-emoji"><span>❎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :a:</code></td><td align="center"><span class="github-emoji"><span>🅰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f170.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:b:</code></td><td align="center"><span class="github-emoji"><span>🅱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f171.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :ab:</code></td><td align="center"><span class="github-emoji"><span>🆎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f18e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :o2:</code></td><td align="center"><span class="github-emoji"><span>🅾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f17e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :diamond_shape_with_a_dot_inside:</code></td><td align="center"><span class="github-emoji"><span>💠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :recycle:</code></td><td align="center"><span class="github-emoji"><span>♻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/267b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :end:</code></td><td align="center"><span class="github-emoji"><span>🔚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f51a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :on:</code></td><td align="center"><span class="github-emoji"><span>🔛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f51b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :soon:</code></td><td align="center"><span class="github-emoji"><span>🔜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f51c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :clock1:</code></td><td align="center"><span class="github-emoji"><span>🕐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f550.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:clock130:</code></td><td align="center"><span class="github-emoji"><span>🕜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f55c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :clock10:</code></td><td align="center"><span class="github-emoji"><span>🕙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f559.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :clock1030:</code></td><td align="center"><span class="github-emoji"><span>🕥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f565.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :clock11:</code></td><td align="center"><span class="github-emoji"><span>🕚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f55a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :clock1130:</code></td><td align="center"><span class="github-emoji"><span>🕦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f566.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :clock12:</code></td><td align="center"><span class="github-emoji"><span>🕛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f55b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :clock1230:</code></td><td align="center"><span class="github-emoji"><span>🕧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f567.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :clock2:</code></td><td align="center"><span class="github-emoji"><span>🕑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f551.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:clock230:</code></td><td align="center"><span class="github-emoji"><span>🕝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f55d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :clock3:</code></td><td align="center"><span class="github-emoji"><span>🕒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f552.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :clock330:</code></td><td align="center"><span class="github-emoji"><span>🕞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f55e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :clock4:</code></td><td align="center"><span class="github-emoji"><span>🕓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f553.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:clock430:</code></td><td align="center"><span class="github-emoji"><span>🕟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f55f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :clock5:</code></td><td align="center"><span class="github-emoji"><span>🕔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f554.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :clock530:</code></td><td align="center"><span class="github-emoji"><span>🕠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f560.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:clock6:</code></td><td align="center"><span class="github-emoji"><span>🕕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f555.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :clock630:</code></td><td align="center"><span class="github-emoji"><span>🕡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f561.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :clock7:</code></td><td align="center"><span class="github-emoji"><span>🕖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f556.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:clock730:</code></td><td align="center"><span class="github-emoji"><span>🕢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f562.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :clock8:</code></td><td align="center"><span class="github-emoji"><span>🕗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f557.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :clock830:</code></td><td align="center"><span class="github-emoji"><span>🕣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f563.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :clock9:</code></td><td align="center"><span class="github-emoji"><span>🕘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f558.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:clock930:</code></td><td align="center"><span class="github-emoji"><span>🕤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f564.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :heavy_dollar_sign:</code></td><td align="center"><span class="github-emoji"><span>💲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :copyright:</code></td><td align="center"><span class="github-emoji"><span>©</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/00a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :registered:</code></td><td align="center"><span class="github-emoji"><span>®</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/00ae.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :tm:</code></td><td align="center"><span class="github-emoji"><span>™</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2122.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:x:</code></td><td align="center"><span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:heavy_exclamation_mark:</code></td><td align="center"><span class="github-emoji"><span>❗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:bangbang:</code></td><td align="center"><span class="github-emoji"><span>‼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/203c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:interrobang:</code></td><td align="center"><span class="github-emoji"><span>⁉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2049.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :o:</code></td><td align="center"><span class="github-emoji"><span>⭕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b55.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :heavy_multiplication_x:</code></td><td align="center"><span class="github-emoji"><span>✖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2716.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :heavy_plus_sign:</code></td><td align="center"><span class="github-emoji"><span>➕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2795.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :heavy_minus_sign:</code></td><td align="center"><span class="github-emoji"><span>➖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2796.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:heavy_division_sign:</code></td><td align="center"><span class="github-emoji"><span>➗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2797.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :white_flower:</code></td><td align="center"><span class="github-emoji"><span>💮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ae.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :100:</code></td><td align="center"><span class="github-emoji"><span>💯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:heavy_check_mark:</code></td><td align="center"><span class="github-emoji"><span>✔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:ballot_box_with_check:</code></td><td align="center"><span class="github-emoji"><span>☑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2611.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :radio_button:</code></td><td align="center"><span class="github-emoji"><span>🔘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f518.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :link:</code></td><td align="center"><span class="github-emoji"><span>🔗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f517.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:curly_loop:</code></td><td align="center"><span class="github-emoji"><span>➰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/27b0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :wavy_dash:</code></td><td align="center"><span class="github-emoji"><span>〰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/3030.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :part_alternation_mark:</code></td><td align="center"><span class="github-emoji"><span>〽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/303d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:trident:</code></td><td align="center"><span class="github-emoji"><span>🔱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f531.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code>:black_large_square:</code></td><td align="center"><span class="github-emoji"><span>⬛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b1b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :white_large_square:</code></td><td align="center"><span class="github-emoji"><span>⬜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b1c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:white_check_mark:</code></td><td align="center"><span class="github-emoji"><span>✅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :white_square_button:</code></td><td align="center"><span class="github-emoji"><span>🔳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f533.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :black_square_button:</code></td><td align="center"><span class="github-emoji"><span>🔲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f532.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :black_circle:</code></td><td align="center"><span class="github-emoji"><span>⚫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26ab.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :white_circle:</code></td><td align="center"><span class="github-emoji"><span>⚪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26aa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :red_circle:</code></td><td align="center"><span class="github-emoji"><span>🔴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f534.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :large_blue_circle:</code></td><td align="center"><span class="github-emoji"><span>🔵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f535.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :large_blue_diamond:</code></td><td align="center"><span class="github-emoji"><span>🔷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f537.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :large_orange_diamond:</code></td><td align="center"><span class="github-emoji"><span>🔶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f536.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code> :small_blue_diamond:</code></td><td align="center"><span class="github-emoji"><span>🔹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f539.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :small_orange_diamond:</code></td><td align="center"><span class="github-emoji"><span>🔸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f538.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :small_red_triangle:</code></td><td align="center"><span class="github-emoji"><span>🔺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f53a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td align="center"><code>:small_red_triangle_down:</code></td><td align="center"><span class="github-emoji"><span>🔻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f53b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"><code> :shipit:</code></td><td align="center"><span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/shipit.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>MarkDown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MarkDown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kotlin知识点汇总</title>
    <link href="/2023/08/31/docs/kotlin/kotlin-zhi-shi-dian-hui-zong/"/>
    <url>/2023/08/31/docs/kotlin/kotlin-zhi-shi-dian-hui-zong/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E5%AF%B9%E8%B1%A1">对象</a></li><li><a href="#%E7%B1%BB">类</a></li><li><a href="#%E7%BB%A7%E6%89%BF">继承</a></li><li><a href="#%E5%8F%98%E9%87%8F">变量</a></li><li><a href="#%E5%B8%B8%E9%87%8F">常量</a></li><li><a href="#%E9%9D%99%E6%80%81%E5%B8%B8%E9%87%8F">静态常量</a></li><li><a href="#%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95">定义方法</a></li><li><a href="#%E9%87%8D%E8%BD%BD%E6%96%B9%E6%B3%95">重载方法</a></li><li><a href="#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">基本数据类型</a></li><li><a href="#%E6%AF%94%E8%BE%83%E7%B1%BB%E5%9E%8B">比较类型</a></li><li><a href="#%E8%BD%AC%E6%8D%A2%E7%AC%A6">转换符</a></li><li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83">字符串比较</a></li><li><a href="#%E6%95%B0%E7%BB%84">数组</a></li><li><a href="#%E5%BE%AA%E7%8E%AF">循环</a></li><li><a href="#%E8%A7%92%E6%A0%87%E5%BE%AA%E7%8E%AF">角标循环</a></li><li><a href="#%E9%AB%98%E7%BA%A7%E5%BE%AA%E7%8E%AF">高级循环</a></li><li><a href="#%E5%88%A4%E6%96%AD%E5%99%A8">判断器</a></li><li><a href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">构造函数</a></li><li><a href="#%E7%B1%BB%E5%88%9B%E5%BB%BA">类创建</a></li><li><a href="#%E7%A7%81%E6%9C%89%E5%8C%96-set-%E6%96%B9%E6%B3%95">私有化 set 方法</a></li><li><a href="#%E7%A7%81%E6%9C%89%E5%8C%96-get-%E6%96%B9%E6%B3%95">私有化 get 方法</a></li><li><a href="#%E6%9E%9A%E4%B8%BE">枚举</a></li><li><a href="#%E6%8E%A5%E5%8F%A3">接口</a></li><li><a href="#%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB">匿名内部类</a></li><li><a href="#%E5%86%85%E9%83%A8%E7%B1%BB">内部类</a></li><li><a href="#%E5%86%85%E9%83%A8%E7%B1%BB%E8%AE%BF%E9%97%AE%E5%A4%96%E9%83%A8%E7%B1%BB%E5%90%8C%E5%90%8D%E5%8F%98%E9%87%8F">内部类访问外部类同名变量</a></li><li><a href="#%E6%8A%BD%E8%B1%A1%E7%B1%BB">抽象类</a></li><li><a href="#%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%96%B9%E6%B3%95">静态变量和方法</a></li><li><a href="#%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0">可变参数</a></li><li><a href="#%E6%B3%9B%E5%9E%8B">泛型</a></li><li><a href="#%E6%9E%84%E9%80%A0%E4%BB%A3%E7%A0%81%E5%9D%97">构造代码块</a></li><li><a href="#%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%9D%97">静态代码块</a></li><li><a href="#%E6%96%B9%E6%B3%95%E4%BB%A3%E7%A0%81%E5%9D%97">方法代码块</a></li><li><a href="#%E5%8F%AF%E8%A7%81%E4%BF%AE%E9%A5%B0%E7%AC%A6">可见修饰符</a></li><li><a href="#%E6%97%A0%E9%9C%80-findViewById">无需 findViewById</a></li><li><a href="#Lambda">Lambda</a></li><li><a href="#%E5%87%BD%E6%95%B0%E5%8F%98%E9%87%8F">函数变量</a></li><li><a href="#%E7%A9%BA%E5%AE%89%E5%85%A8">空安全</a></li><li><a href="#%E6%96%B9%E6%B3%95%E6%94%AF%E6%8C%81%E6%B7%BB%E5%8A%A0%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0">方法支持添加默认参数</a></li><li><a href="#%E7%B1%BB%E6%96%B9%E6%B3%95%E6%89%A9%E5%B1%95">类方法扩展</a></li><li><a href="#%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD">运算符重载</a></li><li><a href="#%E6%89%A9%E5%B1%95%E5%87%BD%E6%95%B0">扩展函数</a><ul><li><a href="#let-%E5%87%BD%E6%95%B0">let 函数</a></li><li><a href="#with-%E5%87%BD%E6%95%B0">with 函数</a></li><li><a href="#run-%E5%87%BD%E6%95%B0">run 函数</a></li><li><a href="#apply-%E5%87%BD%E6%95%B0">apply 函数</a></li><li><a href="#also-%E5%87%BD%E6%95%B0">also 函数</a></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul></li><li><a href="#%E5%8D%8F%E7%A8%8B">协程</a></li></ul>        <h1 id="对象">          <a href="#对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#对象" class="headerlink" title="对象"></a>对象</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Kotlin 的写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">this</span><span class="token label symbol">@MainActivity</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h1 id="类">          <a href="#类" class="heading-link"><i class="fas fa-link"></i></a><a href="#类" class="headerlink" title="类"></a>类</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Kotlin 的写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">MainActivity<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h1 id="继承">          <a href="#继承" class="heading-link"><i class="fas fa-link"></i></a><a href="#继承" class="headerlink" title="继承"></a>继承</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法（在 Kotlin 中被继承类必须被 open 关键字修饰）</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>        <h1 id="变量">          <a href="#变量" class="heading-link"><i class="fas fa-link"></i></a><a href="#变量" class="headerlink" title="变量"></a>变量</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Kotlin 的写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">var</span> intent <span class="token operator">=</span> <span class="token function">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h1 id="常量">          <a href="#常量" class="heading-link"><i class="fas fa-link"></i></a><a href="#常量" class="headerlink" title="常量"></a>常量</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Kotlin 的写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">""</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h1 id="静态常量">          <a href="#静态常量" class="heading-link"><i class="fas fa-link"></i></a><a href="#静态常量" class="headerlink" title="静态常量"></a>静态常量</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法（需要注意的是要把静态变量定义在类上方）</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">const</span> <span class="token keyword">val</span> text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">""</span></span><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="定义方法">          <a href="#定义方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法（Unit 跟 void 一样效果）</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">test</span><span class="token punctuation">(</span>message <span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">:</span> Unit <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 在 Kotlin 可以省略 Unit 这种返回值</span><span class="token keyword">fun</span> <span class="token function">test</span><span class="token punctuation">(</span>message <span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="重载方法">          <a href="#重载方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#重载方法" class="headerlink" title="重载方法"></a>重载方法</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="基本数据类型">          <a href="#基本数据类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">;</span><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"text"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">var</span> i <span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">var</span> l <span class="token operator">:</span> Long <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">var</span> b <span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">var</span> f <span class="token operator">:</span> Float <span class="token operator">=</span> <span class="token number">0F</span><span class="token keyword">var</span> d <span class="token operator">:</span> Double <span class="token operator">=</span> <span class="token number">0.0</span><span class="token keyword">var</span> c <span class="token operator">:</span> Char <span class="token operator">=</span> <span class="token char">'A'</span><span class="token keyword">var</span> s <span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"text"</span></span><span class="token comment">// 更简洁点可以这样，自动推倒类型</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">var</span> l <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token number">0F</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">0.0</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token char">'A'</span><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"text"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="比较类型">          <a href="#比较类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#比较类型" class="headerlink" title="比较类型"></a>比较类型</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">""</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">""</span></span> <span class="token keyword">is</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>        <h1 id="转换符">          <a href="#转换符" class="heading-link"><i class="fas fa-link"></i></a><a href="#转换符" class="headerlink" title="转换符"></a>转换符</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"商品数量有%d"</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token number">100</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"商品数量有</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">number</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment">// 换种简洁的写法</span><span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token number">100</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"商品数量有</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">number</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment">// 如果不想字符串被转义可以使用\$</span><span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token number">100</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"商品数量有\$number"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="字符串比较">          <a href="#字符串比较" class="heading-link"><i class="fas fa-link"></i></a><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"text"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"text"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法（Kotlin 对字符串比较的写法进行优化了，其他类型对象对比还是要用 equals 方法）</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"text"</span></span><span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"text"</span></span><span class="token keyword">if</span> <span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="数组">          <a href="#数组" class="heading-link"><i class="fas fa-link"></i></a><a href="#数组" class="headerlink" title="数组"></a>数组</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1f</span><span class="token punctuation">,</span> <span class="token number">2f</span><span class="token punctuation">,</span> <span class="token number">3f</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> array1 <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">val</span> array2 <span class="token operator">=</span> <span class="token function">floatArrayOf</span><span class="token punctuation">(</span><span class="token number">1f</span><span class="token punctuation">,</span> <span class="token number">2f</span><span class="token punctuation">,</span> <span class="token number">3f</span><span class="token punctuation">)</span><span class="token keyword">val</span> array3 <span class="token operator">=</span> <span class="token function">arrayListOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"1"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"2"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"3"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>        <h1 id="循环">          <a href="#循环" class="heading-link"><i class="fas fa-link"></i></a><a href="#循环" class="headerlink" title="循环"></a>循环</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> array <span class="token operator">=</span> <span class="token function">arrayListOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"1"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"2"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"3"</span></span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> array<span class="token punctuation">.</span>indices<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="角标循环">          <a href="#角标循环" class="heading-link"><i class="fas fa-link"></i></a><a href="#角标循环" class="headerlink" title="角标循环"></a>角标循环</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法（这种写法在 Kotlin 中称之为区间）</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> array <span class="token operator">=</span> <span class="token function">arrayListOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"1"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"2"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"3"</span></span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token function">IntRange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 换种更简洁的写法</span><span class="token keyword">val</span> array <span class="token operator">=</span> <span class="token function">arrayListOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"1"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"2"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"3"</span></span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span>array<span class="token punctuation">.</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 编译器提示要我们换种写法</span><span class="token keyword">val</span> array <span class="token operator">=</span> <span class="token function">arrayListOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"1"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"2"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"3"</span></span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span> until array<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="高级循环">          <a href="#高级循环" class="heading-link"><i class="fas fa-link"></i></a><a href="#高级循环" class="headerlink" title="高级循环"></a>高级循环</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> text <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> array <span class="token operator">=</span> <span class="token function">arrayListOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"1"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"2"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"3"</span></span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>text <span class="token keyword">in</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="判断器">          <a href="#判断器" class="heading-link"><i class="fas fa-link"></i></a><a href="#判断器" class="headerlink" title="判断器"></a>判断器</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">when</span> <span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token number">0</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">2</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">// 换种更简洁的写法</span><span class="token keyword">when</span> <span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token number">0</span> <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>    <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">2</span> <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>    <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="构造函数">          <a href="#构造函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyView</span> <span class="token keyword">extends</span> <span class="token class-name">View</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">MyView</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">MyView</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">AttributeSet</span> attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">MyView</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">AttributeSet</span> attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MyView <span class="token operator">:</span> View <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>context <span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>context <span class="token operator">:</span> Context<span class="token punctuation">,</span> attrs <span class="token operator">:</span> AttributeSet<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>context <span class="token operator">:</span> Context<span class="token punctuation">,</span> attrs <span class="token operator">:</span> AttributeSet<span class="token operator">?</span><span class="token punctuation">,</span> defStyleAttr <span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 换种更简洁的写法</span><span class="token keyword">class</span> MyView <span class="token operator">:</span> View <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>context <span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>context <span class="token operator">:</span> Context<span class="token punctuation">,</span> attrs <span class="token operator">:</span> AttributeSet<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>context <span class="token operator">:</span> Context<span class="token punctuation">,</span> attrs <span class="token operator">:</span> AttributeSet<span class="token operator">?</span><span class="token punctuation">,</span> defStyleAttr <span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 只有一种构造函数的还可以这样写</span><span class="token keyword">class</span> <span class="token function">MyView</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">View</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="类创建">          <a href="#类创建" class="heading-link"><i class="fas fa-link"></i></a><a href="#类创建" class="headerlink" title="类创建"></a>类创建</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"CurvedBowZhang"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"ZJX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name: "</span> <span class="token operator">+</span> person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", age: "</span> <span class="token operator">+</span> person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法（如果不想暴露成员变量的set方法，可以将 var 改成 val )</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Person <span class="token punctuation">{</span>    <span class="token keyword">var</span> name <span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> field    <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>field <span class="token operator">=</span> value<span class="token punctuation">}</span>    <span class="token keyword">var</span> age <span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> field    <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>field <span class="token operator">=</span> value<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 换种更简洁的写法</span><span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">var</span> name <span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">var</span> age <span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"CurvedBowZhang"</span></span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"ZJX"</span></span>person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">50</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"name: {</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">person</span></span><span class="token string">.name}, age: {</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">person</span></span><span class="token string">.age}"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="私有化-set-方法">          <a href="#私有化-set-方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#私有化-set-方法" class="headerlink" title="私有化 set 方法"></a>私有化 set 方法</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Person <span class="token punctuation">{</span>    <span class="token keyword">var</span> name <span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">private</span> <span class="token keyword">set</span>    <span class="token keyword">var</span> age <span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="私有化-get-方法">          <a href="#私有化-get-方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#私有化-get-方法" class="headerlink" title="私有化 get 方法"></a>私有化 get 方法</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Person <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> name <span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> age <span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="枚举">          <a href="#枚举" class="heading-link"><i class="fas fa-link"></i></a><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">Sex</span> <span class="token punctuation">{</span>    <span class="token function">MAN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">WOMAN</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Sex</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isMan<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token function">Sex</span> <span class="token punctuation">(</span><span class="token keyword">var</span> isMan<span class="token operator">:</span> Boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">MAN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">WOMAN</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="接口">          <a href="#接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#接口" class="headerlink" title="接口"></a>接口</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Callback</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">onFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法（Kotlin接口方法里面是可以自己实现，这里就不再演示了）</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">interface</span> Callback <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="匿名内部类">          <a href="#匿名内部类" class="heading-link"><i class="fas fa-link"></i></a><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">object</span><span class="token operator">:</span>Callback <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="内部类">          <a href="#内部类" class="heading-link"><i class="fas fa-link"></i></a><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTask</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">inner</span> <span class="token keyword">class</span> MyTask <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="内部类访问外部类同名变量">          <a href="#内部类访问外部类同名变量" class="heading-link"><i class="fas fa-link"></i></a><a href="#内部类访问外部类同名变量" class="headerlink" title="内部类访问外部类同名变量"></a>内部类访问外部类同名变量</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"CurvedBowZhang"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTask</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"ZJX"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> <span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"CurvedBowZhang"</span></span><span class="token keyword">inner</span> <span class="token keyword">class</span> MyTask <span class="token punctuation">{</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"ZJX"</span></span>    <span class="token keyword">fun</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string-literal singleline"><span class="token string">"---"</span></span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token label symbol">@MainActivity</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="抽象类">          <a href="#抽象类" class="heading-link"><i class="fas fa-link"></i></a><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">abstract</span> <span class="token keyword">class</span> BaseActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Runnable <span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="静态变量和方法">          <a href="#静态变量和方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#静态变量和方法" class="headerlink" title="静态变量和方法"></a>静态变量和方法</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-none"><code class="language-none">public class ToastUtils {    public static Toast sToast;    public static void show() {        sToast.show();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法（在 Kotlin 将这种方式称之为伴生对象）</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">companion</span> <span class="token keyword">object</span> ToastUtils <span class="token punctuation">{</span>    <span class="token keyword">var</span> sToast <span class="token operator">:</span> Toast<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">fun</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sToast<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="可变参数">          <a href="#可变参数" class="heading-link"><i class="fas fa-link"></i></a><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        count <span class="token operator">+=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">vararg</span> array<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> Int <span class="token punctuation">{</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment">//for (i in array) {</span>    <span class="token comment">//    count += i</span>    <span class="token comment">//}</span>    array<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>        count <span class="token operator">+=</span> it    <span class="token punctuation">}</span>    <span class="token keyword">return</span> count<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="泛型">          <a href="#泛型" class="heading-link"><i class="fas fa-link"></i></a><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token class-name">T</span> data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Bean</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">Bean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"666666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Bean<span class="token operator">&lt;</span>T <span class="token operator">:</span> Comparable<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>t<span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token keyword">data</span> <span class="token operator">=</span> t<span class="token punctuation">}</span><span class="token keyword">var</span> bean <span class="token operator">=</span> Bean<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"666666"</span></span><span class="token punctuation">)</span><span class="token comment">// 换种更简洁的写法</span><span class="token keyword">var</span> bean <span class="token operator">=</span> <span class="token function">Bean</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"666666"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="构造代码块">          <a href="#构造代码块" class="heading-link"><i class="fas fa-link"></i></a><a href="#构造代码块" class="headerlink" title="构造代码块"></a>构造代码块</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> number<span class="token punctuation">;</span>    <span class="token punctuation">{</span>        number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">init</span> <span class="token punctuation">{</span>        number <span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="静态代码块">          <a href="#静态代码块" class="heading-link"><i class="fas fa-link"></i></a><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> number<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">init</span> <span class="token punctuation">{</span>            number <span class="token operator">=</span> <span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="方法代码块">          <a href="#方法代码块" class="heading-link"><i class="fas fa-link"></i></a><a href="#方法代码块" class="headerlink" title="方法代码块"></a>方法代码块</h1>      <blockquote><p>Java 的写法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Kotlin 的写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    run <span class="token punctuation">{</span>        <span class="token keyword">var</span> a <span class="token operator">=</span><span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="可见修饰符">          <a href="#可见修饰符" class="heading-link"><i class="fas fa-link"></i></a><a href="#可见修饰符" class="headerlink" title="可见修饰符"></a>可见修饰符</h1>      <blockquote><p>Java 的写法（默认为 default）</p></blockquote><div class="table-container"><table><thead><tr><th align="center">修饰符</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">所有类可见</td></tr><tr><td align="center">protected</td><td align="center">子类可见</td></tr><tr><td align="center">default</td><td align="center">同一包下的类可见</td></tr><tr><td align="center">private</td><td align="center">仅对自己类可见</td></tr></tbody></table></div><blockquote><p>Kotlin 的写法（默认为 public）</p></blockquote><div class="table-container"><table><thead><tr><th align="center">修饰符</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">所有类可见</td></tr><tr><td align="center">internal</td><td align="center">同 Module 下的类可见</td></tr><tr><td align="center">protected</td><td align="center">子类可见</td></tr><tr><td align="center">private</td><td align="center">仅对自己类可见</td></tr></tbody></table></div>        <h1 id="无需-findViewById">          <a href="#无需-findViewById" class="heading-link"><i class="fas fa-link"></i></a><a href="#无需-findViewById" class="headerlink" title="无需 findViewById"></a>无需 findViewById</h1>      <blockquote><p>在布局中定义</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token operator">&lt;</span>TextView    android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">"@+id/tv_content"</span></span>    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">"wrap_content"</span></span>    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">"wrap_content"</span></span>    android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">"Hello World!"</span></span> <span class="token operator">/</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>直接设置 TextView 的文本</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">tv_content<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"改变文本"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h1 id="Lambda">          <a href="#Lambda" class="heading-link"><i class="fas fa-link"></i></a><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h1>      <blockquote><p>Lambda 表达式虽然在 Java JDK 已经加上了，但是没有普及开来，现在搭配 Kotlin 是一个不错的选择</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">tv_content<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span><span class="token function">OnClickListener</span><span class="token punctuation">(</span>    <span class="token keyword">fun</span><span class="token punctuation">(</span>v <span class="token operator">:</span> View<span class="token punctuation">)</span> <span class="token punctuation">{</span>        v<span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>GONE    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>现在可以用 Lambda 表达式进行简化</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">tv_content<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">{</span> v <span class="token operator">-&gt;</span> v<span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>GONE <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h1 id="函数变量">          <a href="#函数变量" class="heading-link"><i class="fas fa-link"></i></a><a href="#函数变量" class="headerlink" title="函数变量"></a>函数变量</h1>      <blockquote><p>在 Kotlin 语法中函数是可以作为变量进行传递的</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">fun</span><span class="token punctuation">(</span>number1 <span class="token operator">:</span> Int<span class="token punctuation">,</span> number2 <span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> Int <span class="token punctuation">{</span>    <span class="token keyword">return</span> number1 <span class="token operator">+</span> number2<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>使用这个函数变量</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h1 id="空安全">          <a href="#空安全" class="heading-link"><i class="fas fa-link"></i></a><a href="#空安全" class="headerlink" title="空安全"></a>空安全</h1>      <blockquote><p>在 Java 不用强制我们处理空对象，所以常常会导致 NullPointerException 空指针出现，现在 Kotlin 对空对象进行了限定，必须在编译时处理对象是否为空的情况，不然会编译不通过</p></blockquote><blockquote><p>在对象不可空的情况下，可以直接使用这个对象</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> String <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">"text"</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> text <span class="token operator">=</span> <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>在对象可空的情况下，必须要判断对象是否为空</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> String<span class="token operator">?</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> text <span class="token operator">=</span> <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>text <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 如果不想判断是否为空，可以直接这样，如果 text 对象为空，则会报空指针异常，一般情况下不推荐这样使用</span><span class="token keyword">val</span> text <span class="token operator">=</span> <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>text<span class="token operator">!!</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 还有一种更好的处理方式，如果 text 对象为空则不会报错，但是 text.length 的结果会等于 null</span><span class="token keyword">val</span> text <span class="token operator">=</span> <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>text<span class="token operator">?</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>        <h1 id="方法支持添加默认参数">          <a href="#方法支持添加默认参数" class="heading-link"><i class="fas fa-link"></i></a><a href="#方法支持添加默认参数" class="headerlink" title="方法支持添加默认参数"></a>方法支持添加默认参数</h1>      <blockquote><p>在 Java 上，我们可能会为了扩展某个方法而进行多次重载</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toast</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> text<span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token constant">LENGTH_SHORT</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toast</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">toast</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> text<span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token constant">LENGTH_SHORT</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toast</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> text<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">"弹个吐司"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">toast</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"弹个吐司"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">toast</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"弹个吐司"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token constant">LENGTH_LONG</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>但是在 Kotlin 上面，我们无需进行重载，可以直接在方法上面直接定义参数的默认值</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">toast</span><span class="token punctuation">(</span>context <span class="token operator">:</span> Context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span> text <span class="token operator">:</span> String<span class="token punctuation">,</span> time <span class="token operator">:</span> Int <span class="token operator">=</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> text<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">toast</span><span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"弹个吐司"</span></span><span class="token punctuation">)</span><span class="token function">toast</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"弹个吐司"</span></span><span class="token punctuation">)</span><span class="token function">toast</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"弹个吐司"</span></span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_LONG<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>        <h1 id="类方法扩展">          <a href="#类方法扩展" class="heading-link"><i class="fas fa-link"></i></a><a href="#类方法扩展" class="headerlink" title="类方法扩展"></a>类方法扩展</h1>      <blockquote><p>可以在不用继承的情况下对扩展原有类的方法，例如对 String 类进行扩展方法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> String<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> String <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token operator">+</span> <span class="token string-literal singleline"><span class="token string">"CurvedBowZhang"</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 需要注意，handle 方法在哪个类中被定义，这种扩展只能在那个类里面才能使用</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"ZJX = "</span></span><span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">ZJX <span class="token operator">=</span> CurvedBowZhang<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h1 id="运算符重载">          <a href="#运算符重载" class="heading-link"><i class="fas fa-link"></i></a><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h1>      <blockquote><p>在 Kotlin 中使用运算符最终也会调用对象对应的方法，我们可以通过重写这些方法使得这个对象支持运算符，这里不再演示代码</p></blockquote><div class="table-container"><table><thead><tr><th align="center">运算符</th><th align="center">调用方法</th></tr></thead><tbody><tr><td align="center">+a</td><td align="center">a.unaryPlus()</td></tr><tr><td align="center">-a</td><td align="center">a.unaryMinus()</td></tr><tr><td align="center">!a</td><td align="center">a.not()</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th align="center">运算符</th><th align="center">调用方法</th></tr></thead><tbody><tr><td align="center">a++</td><td align="center">a.inc()</td></tr><tr><td align="center">a–</td><td align="center">a.dec()</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th align="center">运算符</th><th align="center">调用方法</th></tr></thead><tbody><tr><td align="center">a + b</td><td align="center">a.plus(b)</td></tr><tr><td align="center">a - b</td><td align="center">a.minus(b)</td></tr><tr><td align="center">a * b</td><td align="center">a.times(b)</td></tr><tr><td align="center">a / b</td><td align="center">a.div(b)</td></tr><tr><td align="center">a % b</td><td align="center">a.rem(b), a.mod(b) (deprecated)</td></tr><tr><td align="center">a..b</td><td align="center">a.rangeTo(b)</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th align="center">运算符</th><th align="center">调用方法</th></tr></thead><tbody><tr><td align="center">a in b</td><td align="center">b.contains(a)</td></tr><tr><td align="center">a !in b</td><td align="center">!b.contains(a)</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th align="center">运算符</th><th align="center">调用方法</th></tr></thead><tbody><tr><td align="center">a[i]</td><td align="center">a.get(i)</td></tr><tr><td align="center">a[i, j]</td><td align="center">a.get(i, j)</td></tr><tr><td align="center">a[i_1, …, i_n]</td><td align="center">a.get(i_1, …, i_n)</td></tr><tr><td align="center">a[i] = b</td><td align="center">a.set(i, b)</td></tr><tr><td align="center">a[i, j] = b</td><td align="center">a.set(i, j, b)</td></tr><tr><td align="center">a[i_1, …, i_n] = b</td><td align="center">a.set(i_1, …, i_n, b)</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th align="center">运算符</th><th align="center">调用方法</th></tr></thead><tbody><tr><td align="center">a()</td><td align="center">a.invoke()</td></tr><tr><td align="center">a(i)</td><td align="center">a.invoke(i)</td></tr><tr><td align="center">a(i, j)</td><td align="center">a.invoke(i, j)</td></tr><tr><td align="center">a(i_1, …, i_n)</td><td align="center">a.invoke(i_1, …, i_n)</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th align="center">运算符</th><th align="center">调用方法</th></tr></thead><tbody><tr><td align="center">a += b</td><td align="center">a.plusAssign(b)</td></tr><tr><td align="center">a -= b</td><td align="center">a.minusAssign(b)</td></tr><tr><td align="center">a *= b</td><td align="center">a.timesAssign(b)</td></tr><tr><td align="center">a /= b</td><td align="center">a.divAssign(b)</td></tr><tr><td align="center">a %= b</td><td align="center">a.remAssign(b), a.modAssign(b) (deprecated)</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th align="center">运算符</th><th align="center">调用方法</th></tr></thead><tbody><tr><td align="center">a == b</td><td align="center">a?.equals(b) ?: (b === null)</td></tr><tr><td align="center">a != b</td><td align="center">!(a?.equals(b) ?: (b === null))</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th align="center">运算符</th><th align="center">调用方法</th></tr></thead><tbody><tr><td align="center">a &gt; b</td><td align="center">a.compareTo(b) &gt; 0</td></tr><tr><td align="center">a &lt; b</td><td align="center">a.compareTo(b) &lt; 0</td></tr><tr><td align="center">a &gt;= b</td><td align="center">a.compareTo(b) &gt;= 0</td></tr><tr><td align="center">a &lt;= b</td><td align="center">a.compareTo(b) &lt;= 0</td></tr></tbody></table></div>        <h1 id="扩展函数">          <a href="#扩展函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#扩展函数" class="headerlink" title="扩展函数"></a>扩展函数</h1>      <blockquote><p>扩展函数是 Kotlin 用于简化一些代码的书写产生的，其中有 let、with、run、apply、also 五个函数</p></blockquote>        <h2 id="let-函数">          <a href="#let-函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#let-函数" class="headerlink" title="let 函数"></a>let 函数</h2>      <blockquote><p>在函数块内可以通过 it 指代该对象。返回值为函数块的最后一行或指定return表达式</p></blockquote><blockquote><p>一般写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"CurvedBowZhang"</span></span>    <span class="token function">println</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token number">1000</span>    <span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>let 写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"CurvedBowZhang"</span></span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        <span class="token number">1000</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>最常用的场景就是使用let函数处理需要针对一个可null的对象统一做判空处理</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">mVideoPlayer<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">setVideoView</span><span class="token punctuation">(</span>activity<span class="token punctuation">.</span>course_video_view<span class="token punctuation">)</span>mVideoPlayer<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">setControllerView</span><span class="token punctuation">(</span>activity<span class="token punctuation">.</span>course_video_controller_view<span class="token punctuation">)</span>mVideoPlayer<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">setCurtainView</span><span class="token punctuation">(</span>activity<span class="token punctuation">.</span>course_video_curtain_view<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">mVideoPlayer<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>   it<span class="token punctuation">.</span><span class="token function">setVideoView</span><span class="token punctuation">(</span>activity<span class="token punctuation">.</span>course_video_view<span class="token punctuation">)</span>   it<span class="token punctuation">.</span><span class="token function">setControllerView</span><span class="token punctuation">(</span>activity<span class="token punctuation">.</span>course_video_controller_view<span class="token punctuation">)</span>   it<span class="token punctuation">.</span><span class="token function">setCurtainView</span><span class="token punctuation">(</span>activity<span class="token punctuation">.</span>course_video_curtain_view<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>又或者是需要去明确一个变量所处特定的作用域范围内可以使用</p></blockquote>        <h2 id="with-函数">          <a href="#with-函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#with-函数" class="headerlink" title="with 函数"></a>with 函数</h2>      <blockquote><p>前面的几个函数使用方式略有不同，因为它不是以扩展的形式存在的。它是将某对象作为函数的参数，在函数块内可以通过 this 指代该对象。返回值为函数块的最后一行或指定return表达式</p></blockquote><blockquote><p>定义 Person 类</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">var</span> name <span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">var</span> age <span class="token operator">:</span> Int<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>一般写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"CurvedBowZhang"</span></span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name <span class="token operator">+</span> person<span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">1000</span>    <span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>with 写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">with</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"CurvedBowZhang"</span></span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> age<span class="token punctuation">)</span>        <span class="token number">1000</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>适用于调用同一个类的多个方法时，可以省去类名重复，直接调用类的方法即可，经常用于Android中RecyclerView中onBinderViewHolder中，数据model的属性映射到UI上</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onBindViewHolder</span><span class="token punctuation">(</span>holder<span class="token operator">:</span> ViewHolder<span class="token punctuation">,</span> position<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">val</span> item <span class="token operator">=</span> <span class="token function">getItem</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token operator">?:</span> <span class="token keyword">return</span>    holder<span class="token punctuation">.</span>nameView<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"姓名：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">item<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"</span></span>    holder<span class="token punctuation">.</span>ageView<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"年龄：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">item<span class="token punctuation">.</span>age</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onBindViewHolder</span><span class="token punctuation">(</span>holder<span class="token operator">:</span> ViewHolder<span class="token punctuation">,</span> position<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">val</span> item <span class="token operator">=</span> <span class="token function">getItem</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token operator">?:</span> <span class="token keyword">return</span>    <span class="token function">with</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>        holder<span class="token punctuation">.</span>nameView<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"姓名：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">"</span></span>        holder<span class="token punctuation">.</span>ageView<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"年龄：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">age</span></span><span class="token string">"</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="run-函数">          <a href="#run-函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#run-函数" class="headerlink" title="run 函数"></a>run 函数</h2>      <blockquote><p>实际上可以说是let和with两个函数的结合体，run函数只接收一个lambda函数为参数，以闭包形式返回，返回值为最后一行的值或者指定的return的表达式</p></blockquote><blockquote><p>一般写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"CurvedBowZhang"</span></span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string-literal singleline"><span class="token string">"+"</span></span> <span class="token operator">+</span> person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">1000</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>run 写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"CurvedBowZhang"</span></span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">var</span> result <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">run</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string"> + </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">age</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token number">1000</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>适用于let,with函数任何场景。因为run函数是let,with两个函数结合体，准确来说它弥补了let函数在函数体内必须使用it参数替代对象，在run函数中可以像with函数一样可以省略，直接访问实例的公有属性和方法，另一方面它弥补了with函数传入对象判空问题，在run函数中可以像let函数一样做判空处理，这里还是借助 onBindViewHolder 案例进行简化</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onBindViewHolder</span><span class="token punctuation">(</span>holder<span class="token operator">:</span> ViewHolder<span class="token punctuation">,</span> position<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">val</span> item <span class="token operator">=</span> <span class="token function">getItem</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token operator">?:</span> <span class="token keyword">return</span>    holder<span class="token punctuation">.</span>nameView<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"姓名：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">item<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"</span></span>    holder<span class="token punctuation">.</span>ageView<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"年龄：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">item<span class="token punctuation">.</span>age</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onBindViewHolder</span><span class="token punctuation">(</span>holder<span class="token operator">:</span> ViewHolder<span class="token punctuation">,</span> position<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">val</span> item <span class="token operator">=</span> <span class="token function">getItem</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token operator">?:</span> <span class="token keyword">return</span>    item<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">run</span> <span class="token punctuation">{</span>        holder<span class="token punctuation">.</span>nameView<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"姓名：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">"</span></span>        holder<span class="token punctuation">.</span>ageView<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"年龄：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">age</span></span><span class="token string">"</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="apply-函数">          <a href="#apply-函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#apply-函数" class="headerlink" title="apply 函数"></a>apply 函数</h2>      <blockquote><p>从结构上来看apply函数和run函数很像，唯一不同点就是它们各自返回的值不一样，run函数是以闭包形式返回最后一行代码的值，而apply函数的返回的是传入对象的本身</p></blockquote><blockquote><p>一般写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"CurvedBowZhang"</span></span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"ZJX"</span></span>person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>apply 写法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"CurvedBowZhang"</span></span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>    name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"ZJX"</span></span>    age <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>整体作用功能和run函数很像，唯一不同点就是它返回的值是对象本身，而run函数是一个闭包形式返回，返回的是最后一行的值。正是基于这一点差异它的适用场景稍微与run函数有点不一样。apply一般用于一个对象实例初始化的时候，需要对对象中的属性进行赋值。或者动态inflate出一个XML的View的时候需要给View绑定数据也会用到，这种情景非常常见。特别是在我们开发中会有一些数据model向View model转化实例化的过程中需要用到</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">mRootView <span class="token operator">=</span> View<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>example_view<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>mRootView<span class="token punctuation">.</span>tv_cancel<span class="token punctuation">.</span>paint<span class="token punctuation">.</span>isFakeBoldText <span class="token operator">=</span> <span class="token boolean">true</span>mRootView<span class="token punctuation">.</span>tv_confirm<span class="token punctuation">.</span>paint<span class="token punctuation">.</span>isFakeBoldText <span class="token operator">=</span> <span class="token boolean">true</span>mRootView<span class="token punctuation">.</span>seek_bar<span class="token punctuation">.</span>max <span class="token operator">=</span> <span class="token number">10</span>mRootView<span class="token punctuation">.</span>seek_bar<span class="token punctuation">.</span>progress <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用 apply 函数后的代码是这样的</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">mRootView <span class="token operator">=</span> View<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>example_view<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>   tv_cancel<span class="token punctuation">.</span>paint<span class="token punctuation">.</span>isFakeBoldText <span class="token operator">=</span> <span class="token boolean">true</span>   tv_confirm<span class="token punctuation">.</span>paint<span class="token punctuation">.</span>isFakeBoldText <span class="token operator">=</span> <span class="token boolean">true</span>   seek_bar<span class="token punctuation">.</span>max <span class="token operator">=</span> <span class="token number">10</span>   seek_bar<span class="token punctuation">.</span>progress <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>多层级判空问题</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">if</span> <span class="token punctuation">(</span>mSectionMetaData <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> mSectionMetaData<span class="token punctuation">.</span>questionnaire <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> mSectionMetaData<span class="token punctuation">.</span>section <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mSectionMetaData<span class="token punctuation">.</span>questionnaire<span class="token punctuation">.</span>userProject <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">renderAnalysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mSectionMetaData<span class="token punctuation">.</span>section <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mSectionMetaData<span class="token punctuation">.</span>section<span class="token punctuation">.</span>sectionArticles<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fetchQuestionData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>kotlin的apply函数优化</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">mSectionMetaData<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>    <span class="token comment">//mSectionMetaData不为空的时候操作mSectionMetaData</span><span class="token punctuation">}</span><span class="token operator">?</span><span class="token punctuation">.</span>questionnaire<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>    <span class="token comment">//questionnaire不为空的时候操作questionnaire</span><span class="token punctuation">}</span><span class="token operator">?</span><span class="token punctuation">.</span>section<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>    <span class="token comment">//section不为空的时候操作section</span><span class="token punctuation">}</span><span class="token operator">?</span><span class="token punctuation">.</span>sectionArticle<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>    <span class="token comment">//sectionArticle不为空的时候操作sectionArticle</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="also-函数">          <a href="#also-函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#also-函数" class="headerlink" title="also 函数"></a>also 函数</h2>      <blockquote><p>also函数的结构实际上和let很像唯一的区别就是返回值的不一样，let是以闭包的形式返回，返回函数体内最后一行的值，如果最后一行为空就返回一个Unit类型的默认值。而also函数返回的则是传入对象的本身</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"CurvedBowZhang"</span></span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        <span class="token number">1000</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">// 打印：1000</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"CurvedBowZhang"</span></span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">// 打印：CurvedBowZhang</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>适用于let函数的任何场景，also函数和let很像，只是唯一的不同点就是let函数最后的返回值是最后一行的返回值而also函数的返回值是返回当前的这个对象。一般可用于多个扩展函数链式调用</p></blockquote>        <h2 id="总结">          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h2>      <blockquote><p>通过以上几种函数的介绍，可以很方便优化kotlin中代码编写，整体看起来几个函数的作用很相似，但是各自又存在着不同。使用的场景有相同的地方比如run函数就是let和with的结合体</p></blockquote>        <h1 id="协程">          <a href="#协程" class="heading-link"><i class="fas fa-link"></i></a><a href="#协程" class="headerlink" title="协程"></a>协程</h1>      <blockquote><p>子任务协作运行，优雅的处理异步问题解决方案</p></blockquote><blockquote><p>协程实际上就是极大程度的复用线程，通过让线程满载运行，达到最大程度的利用CPU，进而提升应用性能</p></blockquote><blockquote><p>在当前 app module 中配置环境和依赖（因为现在协程在 Kotlin 中是实验性的）</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">kotlin <span class="token punctuation">{</span>    experimental <span class="token punctuation">{</span>        coroutines 'enable'    <span class="token punctuation">}</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>    implementation 'org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>kotlinx<span class="token operator">:</span>kotlinx<span class="token operator">-</span>coroutines<span class="token operator">-</span>core<span class="token operator">:</span><span class="token number">0.20</span>'    implementation 'org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>kotlinx<span class="token operator">:</span>kotlinx<span class="token operator">-</span>coroutines<span class="token operator">-</span>android<span class="token operator">:</span><span class="token number">0.20</span>'<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>协程的三种启动方式</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">runBlocking<span class="token operator">:</span>T     launch<span class="token operator">:</span>Jobasync<span class="token operator">/</span>await<span class="token operator">:</span>Deferred<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>runBlocking</li></ul><blockquote><p>runBlocking 的中文翻译：运行阻塞。说太多没用，直接用代码测试一下</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试是否为主线程"</span></span> <span class="token operator">+</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试开始"</span></span><span class="token punctuation">)</span>runBlocking <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试是否为主线程"</span></span> <span class="token operator">+</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试延迟开始"</span></span><span class="token punctuation">)</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">)</span> <span class="token comment">// 因为 Activity 最长响应时间为 15 秒</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试延迟结束"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试结束"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token number">17</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">08.686</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试是否为主线程 <span class="token boolean">true</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">08.686</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试开始<span class="token number">17</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">08.688</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试是否为主线程 <span class="token boolean">true</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">08.688</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试延迟开始<span class="token number">17</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">28.692</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试延迟结束<span class="token number">17</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">28.693</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>runBlocking 运行在主线程，过程中 App 出现过无响应提示，由此可见 runBlocking 和它的名称一样，真的会阻塞当前的线程，只有等 runBlocking 里面的代码执行完了才会执行 runBlocking 外面的代码</p></blockquote><ul><li>launch</li></ul><blockquote><p>launch 的中文翻译：启动。甭管这是啥，直接用代码测试</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试是否为主线程"</span></span> <span class="token operator">+</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试开始"</span></span><span class="token punctuation">)</span>launch <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试是否为主线程"</span></span> <span class="token operator">+</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试延迟开始"</span></span><span class="token punctuation">)</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试延迟结束"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试结束"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token number">17</span><span class="token operator">:</span><span class="token number">19</span><span class="token operator">:</span><span class="token number">17.190</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试是否为主线程 <span class="token boolean">true</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">19</span><span class="token operator">:</span><span class="token number">17.190</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试开始<span class="token number">17</span><span class="token operator">:</span><span class="token number">19</span><span class="token operator">:</span><span class="token number">17.202</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试结束<span class="token number">17</span><span class="token operator">:</span><span class="token number">19</span><span class="token operator">:</span><span class="token number">17.203</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试是否为主线程 <span class="token boolean">false</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">19</span><span class="token operator">:</span><span class="token number">17.203</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试延迟开始<span class="token number">17</span><span class="token operator">:</span><span class="token number">19</span><span class="token operator">:</span><span class="token number">37.223</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试延迟结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>async</li></ul><blockquote><p>async 的中文翻译：异步。还是老套路，直接上代码</p></blockquote><blockquote><p>测试的时候是主线程，但是到了 launch 中就会变成子线程，这种效果类似 new Thread()，有木有？和 runBlocking 最不同的是 launch 没有执行顺序这个概念</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试是否为主线程"</span></span> <span class="token operator">+</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试开始"</span></span><span class="token punctuation">)</span>async <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试是否为主线程"</span></span> <span class="token operator">+</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试延迟开始"</span></span><span class="token punctuation">)</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试延迟结束"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试结束"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token number">17</span><span class="token operator">:</span><span class="token number">29</span><span class="token operator">:</span><span class="token number">00.694</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试是否为主线程 <span class="token boolean">true</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">29</span><span class="token operator">:</span><span class="token number">00.694</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试开始<span class="token number">17</span><span class="token operator">:</span><span class="token number">29</span><span class="token operator">:</span><span class="token number">00.697</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试结束<span class="token number">17</span><span class="token operator">:</span><span class="token number">29</span><span class="token operator">:</span><span class="token number">00.697</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试是否为主线程 <span class="token boolean">false</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">29</span><span class="token operator">:</span><span class="token number">00.697</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试延迟开始<span class="token number">17</span><span class="token operator">:</span><span class="token number">29</span><span class="token operator">:</span><span class="token number">20.707</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试延迟结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这结果不是跟 launch 一样么？那么这两个到底有什么区别呢？，让我们先看一段测试代码</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试是否为主线程"</span></span> <span class="token operator">+</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试开始"</span></span><span class="token punctuation">)</span><span class="token keyword">val</span> async <span class="token operator">=</span> async <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试是否为主线程"</span></span> <span class="token operator">+</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试延迟开始"</span></span><span class="token punctuation">)</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试延迟结束"</span></span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token label symbol">@async</span> <span class="token string-literal singleline"><span class="token string">"666666"</span></span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试结束"</span></span><span class="token punctuation">)</span>runBlocking <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试返回值："</span></span> <span class="token operator">+</span> async<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token number">17</span><span class="token operator">:</span><span class="token number">50</span><span class="token operator">:</span><span class="token number">57.117</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试是否为主线程 <span class="token boolean">true</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">50</span><span class="token operator">:</span><span class="token number">57.117</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试开始<span class="token number">17</span><span class="token operator">:</span><span class="token number">50</span><span class="token operator">:</span><span class="token number">57.120</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试结束<span class="token number">17</span><span class="token operator">:</span><span class="token number">50</span><span class="token operator">:</span><span class="token number">57.120</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试是否为主线程 <span class="token boolean">false</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">50</span><span class="token operator">:</span><span class="token number">57.120</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试延迟开始<span class="token number">17</span><span class="token operator">:</span><span class="token number">51</span><span class="token operator">:</span><span class="token number">17.131</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试延迟结束<span class="token number">17</span><span class="token operator">:</span><span class="token number">51</span><span class="token operator">:</span><span class="token number">17.133</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试返回值：<span class="token number">666666</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>看到这里你是否懂了，async 和 launch 还是有区别的，async 可以有返回值，通过它的 await 方法进行获取，需要注意的是这个方法只能在协程的操作符中才能调用</p></blockquote><ul><li>线程调度</li></ul><blockquote><p>啥？协程有类似 RxJava 线程调度？先用 launch 试验一下</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试是否为主线程"</span></span> <span class="token operator">+</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试开始"</span></span><span class="token punctuation">)</span><span class="token function">launch</span><span class="token punctuation">(</span>CommonPool<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 同学们，敲重点</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试是否为主线程"</span></span> <span class="token operator">+</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试延迟开始"</span></span><span class="token punctuation">)</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试延迟结束"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试结束"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">23.243</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试是否为主线程 <span class="token boolean">true</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">23.244</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试开始<span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">23.246</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试结束<span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">23.246</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试是否为主线程 <span class="token boolean">false</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">23.247</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试延迟开始<span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">43.256</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试延迟结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Q：这个跟刚刚的代码有什么不一样吗？</p></blockquote><blockquote><p>A：当然不一样，假如一个网络请求框架维护了一个线程池，一个图片加载框架也维护了一个线程池…….，你会发现其实这样不好的地方在于，这些线程池里面的线程没有被重复利用，于是乎协程主动维护了一个公共的线程池 CommonPool，很好的解决了这个问题</p></blockquote><blockquote><p>Q：还有刚刚不是说能线程调度吗？为什么还是在子线程运行？</p></blockquote><blockquote><p>A：因为我刚刚只用了 CommonPool 这个关键字，我再介绍另一个关键字 UI，光听名字就知道是啥了</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试是否为主线程"</span></span> <span class="token operator">+</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试开始"</span></span><span class="token punctuation">)</span><span class="token function">launch</span><span class="token punctuation">(</span>UI<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试是否为主线程"</span></span> <span class="token operator">+</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试延迟开始"</span></span><span class="token punctuation">)</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试延迟结束"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"测试结束"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token number">18</span><span class="token operator">:</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">20.181</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试是否为主线程 <span class="token boolean">true</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">20.181</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试开始<span class="token number">18</span><span class="token operator">:</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">20.186</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试结束<span class="token number">18</span><span class="token operator">:</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">20.192</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试是否为主线程 <span class="token boolean">true</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">20.192</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试延迟开始<span class="token number">18</span><span class="token operator">:</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">40.214</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span> 测试延迟结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Kotlin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kotlin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java知识点汇总</title>
    <link href="/2023/08/31/docs/java/java-zhi-shi-dian-hui-zong/"/>
    <url>/2023/08/31/docs/java/java-zhi-shi-dian-hui-zong/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#jvm">JVM</a><ul><li><a href="#jvm-%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B">JVM 工作流程</a></li><li><a href="#%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BAruntime-data-area">运行时数据区（Runtime Data Area）</a><ul><li><a href="#%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8">程序计数器</a></li><li><a href="#java-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88">Java 虚拟机栈</a></li><li><a href="#%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88">本地方法栈</a></li><li><a href="#java-%E5%A0%86">Java 堆</a></li><li><a href="#%E6%96%B9%E6%B3%95%E5%8C%BA">方法区</a></li></ul></li><li><a href="#%E6%96%B9%E6%B3%95%E6%8C%87%E4%BB%A4">方法指令</a></li><li><a href="#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8">类加载器</a></li><li><a href="#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6-gc">垃圾回收 gc</a><ul><li><a href="#%E5%AF%B9%E8%B1%A1%E5%AD%98%E6%B4%BB%E5%88%A4%E6%96%AD">对象存活判断</a></li><li><a href="#%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95">垃圾收集算法</a></li><li><a href="#%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8">垃圾收集器</a></li><li><a href="#%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5">内存模型与回收策略</a></li></ul></li></ul></li><li><a href="#object">Object</a><ul><li><a href="#equals-%E6%96%B9%E6%B3%95">equals 方法</a></li><li><a href="#hashcode-%E6%96%B9%E6%B3%95">hashCode 方法</a></li></ul></li><li><a href="#static">static</a></li><li><a href="#final">final</a></li><li><a href="#stringstringbufferstringbuilder">String、StringBuffer、StringBuilder</a></li><li><a href="#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">异常处理</a></li><li><a href="#%E5%86%85%E9%83%A8%E7%B1%BB">内部类</a><ul><li><a href="#%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB">匿名内部类</a></li></ul></li><li><a href="#%E5%A4%9A%E6%80%81">多态</a></li><li><a href="#%E6%8A%BD%E8%B1%A1%E5%92%8C%E6%8E%A5%E5%8F%A3">抽象和接口</a></li><li><a href="#%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6">集合框架</a><ul><li><a href="#hashmap">HashMap</a><ul><li><a href="#%E7%BB%93%E6%9E%84%E5%9B%BE">结构图</a></li><li><a href="#hashmap-%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86">HashMap 的工作原理</a></li><li><a href="#hashmap-%E4%B8%8E-hashtable-%E5%AF%B9%E6%AF%94">HashMap 与 HashTable 对比</a></li></ul></li><li><a href="#concurrenthashmap">ConcurrentHashMap</a><ul><li><a href="#base-17">Base 1.7</a></li><li><a href="#base-18">Base 1.8</a></li></ul></li><li><a href="#arraylist">ArrayList</a></li><li><a href="#linkedlist">LinkedList</a></li><li><a href="#copyonwritearraylist">CopyOnWriteArrayList</a></li></ul></li><li><a href="#%E5%8F%8D%E5%B0%84">反射</a></li><li><a href="#%E5%8D%95%E4%BE%8B">单例</a><ul><li><a href="#%E9%A5%BF%E6%B1%89%E5%BC%8F">饿汉式</a></li><li><a href="#%E5%8F%8C%E9%87%8D%E6%A3%80%E6%9F%A5%E6%A8%A1%E5%BC%8F">双重检查模式</a></li><li><a href="#%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB%E6%A8%A1%E5%BC%8F">静态内部类模式</a></li></ul></li><li><a href="#%E7%BA%BF%E7%A8%8B">线程</a><ul><li><a href="#%E5%B1%9E%E6%80%A7">属性</a></li><li><a href="#%E7%8A%B6%E6%80%81">状态</a></li><li><a href="#%E7%8A%B6%E6%80%81%E6%8E%A7%E5%88%B6">状态控制</a></li></ul></li><li><a href="#volatile">volatile</a></li><li><a href="#synchronized">synchronized</a><ul><li><a href="#%E6%A0%B9%E6%8D%AE%E8%8E%B7%E5%8F%96%E7%9A%84%E9%94%81%E5%88%86%E7%B1%BB">根据获取的锁分类</a></li><li><a href="#%E5%8E%9F%E7%90%86">原理</a></li></ul></li><li><a href="#lock">Lock</a><ul><li><a href="#%E9%94%81%E7%9A%84%E5%88%86%E7%B1%BB">锁的分类</a><ul><li><a href="#%E6%82%B2%E8%A7%82%E9%94%81%E4%B9%90%E8%A7%82%E9%94%81">悲观锁、乐观锁</a></li><li><a href="#%E8%87%AA%E6%97%8B%E9%94%81%E9%80%82%E5%BA%94%E6%80%A7%E8%87%AA%E6%97%8B%E9%94%81">自旋锁、适应性自旋锁</a></li><li><a href="#%E6%AD%BB%E9%94%81">死锁</a></li></ul></li></ul></li><li><a href="#%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B">引用类型</a></li><li><a href="#%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86">动态代理</a></li><li><a href="#%E5%85%83%E6%B3%A8%E8%A7%A3">元注解</a></li></ul>        <h1 id="JVM">          <a href="#JVM" class="heading-link"><i class="fas fa-link"></i></a><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1>              <h2 id="JVM-工作流程">          <a href="#JVM-工作流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#JVM-工作流程" class="headerlink" title="JVM 工作流程"></a>JVM 工作流程</h2>      <p><img src="https://user-gold-cdn.xitu.io/2019/6/23/16b833f4a4906226?w=448&amp;h=592&amp;f=jpeg&amp;s=44057" style=""></p>        <h2 id="运行时数据区（Runtime-Data-Area）">          <a href="#运行时数据区（Runtime-Data-Area）" class="heading-link"><i class="fas fa-link"></i></a><a href="#运行时数据区（Runtime-Data-Area）" class="headerlink" title="运行时数据区（Runtime Data Area）"></a>运行时数据区（Runtime Data Area）</h2>      <p><img src="https://user-gold-cdn.xitu.io/2019/6/23/16b833f4a499f6fe?w=868&amp;h=497&amp;f=webp&amp;s=46378" style=""></p>        <h3 id="程序计数器">          <a href="#程序计数器" class="heading-link"><i class="fas fa-link"></i></a><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3>      <p><strong>程序计数器（Program Counter Register）</strong> 是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。</p><p>字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p><p>由于 Java 虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，<strong>在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）都只会执行一条线程中的指令</strong>。</p><p>因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。</p><ul><li>如果线程正在执行的是一个 Java 方法，这个计数器记录的是正在执行的<strong>虚拟机字节码指令的地址</strong>。</li><li>如果线程正在执行的是一个 Native 方法，这个计数器值则为空（Undefined）。</li></ul><p><strong>此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</strong></p>        <h3 id="Java-虚拟机栈">          <a href="#Java-虚拟机栈" class="heading-link"><i class="fas fa-link"></i></a><a href="#Java-虚拟机栈" class="headerlink" title="Java 虚拟机栈"></a>Java 虚拟机栈</h3>      <p><strong>Java 虚拟机栈（Java Virtual Machine Stacks</strong>）也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是 Java 方法执行的内存模型，每个方法在执行的同时都会创建一个<strong>栈帧（Stack Frame）</strong> 用于存储<strong>局部变量表、操作数栈、动态链接、方法出口</strong>等消息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p><p><strong>局部变量表</strong>存放了编译器可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）和 returnAddress 类型（指向了一条字节码指令的地址）。</p><p>其中 64 位长度的 long 和 double 类型的数据会占用两个局部变量空间（Slot），其余的数据类型只占用一个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</p><p>在 Java 虚拟机规范中，对这个区域规定了两种异常状态：</p><ul><li>如果线程请求的栈深度大于虚拟机所允许的的深度，将抛出 <strong>StackOverflowError</strong> 异常。</li><li>如果虚拟机栈可以动态扩展（当前大部分的Java虚拟机都可动态扩展，只不过Java虚拟机规范中也允许固定长度的虚拟机栈），如果扩展时无法申请到足够的内存，就会抛出 <strong>OutOfMemoryError</strong> 异常。</li></ul>        <h3 id="本地方法栈">          <a href="#本地方法栈" class="heading-link"><i class="fas fa-link"></i></a><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3>      <p><strong>本地方法栈（Native Method Stack）</strong> 与虚拟机栈所发挥的作用是非常相似的，它们之间的区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则为虚拟机使用到的Native方法服务。</p><p>在虚拟机规范中对本地方法栈中方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由实现它。甚至有的虚拟机（例如：Sun HotSpot虚拟机）直接就把虚拟机栈和本地方法栈合二为一。与虚拟机栈一样，本地方法栈区域也会抛出 StackOverflowError 和 OutOfMemoryError 异常。</p>        <h3 id="Java-堆">          <a href="#Java-堆" class="heading-link"><i class="fas fa-link"></i></a><a href="#Java-堆" class="headerlink" title="Java 堆"></a>Java 堆</h3>      <p>对于大多数应用来说，<strong>Java 堆（Java Heap）</strong> 是 Java 虚拟机所管理的的内存中最大的一块。Java 堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。</p><p>Java堆是垃圾收集器管理的主要区域，从内存回收的角度来看，由于现在收集器基本采用分代收集算法，所以Java堆中还可以细分为：新生代和老年代；再细致一点的有 Eden 空间、From Survivor 空间、To Survivor 空间等。</p><p>从内存分配的角度来看，线程共享的Java堆中可能划分出多个线程私有的分配缓冲区（Thread Local Allocation Buffer，TLAB）。不过无论如何划分，都与存放内容无关，无论哪个区域，存储的仍然是对象实例，进一步划分的目的是为了更好地回收内存，或者更快地分配内存。</p>        <h3 id="方法区">          <a href="#方法区" class="heading-link"><i class="fas fa-link"></i></a><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3>      <p><strong>方法区（Method Area</strong>）与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p><p><strong>运行时常量池（Runtime Constant Pool）</strong> 是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是<strong>常量池（Constant Pool Table）</strong>，用于存放编译器生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</p><p>既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时就会抛出 OutOfMemoryError 异常。</p>        <h2 id="方法指令">          <a href="#方法指令" class="heading-link"><i class="fas fa-link"></i></a><a href="#方法指令" class="headerlink" title="方法指令"></a>方法指令</h2>      <div class="table-container"><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>invokeinterface</td><td>用以调用接口方法</td></tr><tr><td>invokevirtual</td><td>指令用于调用对象的实例方法</td></tr><tr><td>invokestatic</td><td>用以调用类/静态方法</td></tr><tr><td>invokespecial</td><td>用于调用一些需要特殊处理的实例方法，包括实例初始化方法、私有方法和父类方法</td></tr></tbody></table></div>        <h2 id="类加载器">          <a href="#类加载器" class="heading-link"><i class="fas fa-link"></i></a><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2>      <div class="table-container"><table><thead><tr><th>类加载器</th><th>说明</th></tr></thead><tbody><tr><td>BootstrapClassLoader</td><td>Bootstrap 类加载器负责加载 rt.jar 中的 JDK 类文件，它是所有类加载器的父加载器。Bootstrap 类加载器没有任何父类加载器，如果你调用 String.class.getClassLoader()，会返回 null，任何基于此的代码会抛出 NUllPointerException 异常。Bootstrap 加载器被称为初始类加载器</td></tr><tr><td>ExtClassLoader</td><td>而 Extension 将加载类的请求先委托给它的父加载器，也就是Bootstrap，如果没有成功加载的话，再从 jre/lib/ext 目录下或者 java.ext.dirs 系统属性定义的目录下加载类。Extension 加载器由 sun.misc.Launcher$ExtClassLoader 实现</td></tr><tr><td>AppClassLoader</td><td>第三种默认的加载器就是 System 类加载器（又叫作 Application 类加载器）了。它负责从 classpath 环境变量中加载某些应用相关的类，classpath 环境变量通常由 -classpath 或 -cp 命令行选项来定义，或者是 JAR 中的 Manifest 的 classpath 属性。Application 类加载器是 Extension 类加载器的子加载器</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>工作原理</th><th>说明</th></tr></thead><tbody><tr><td>委托机制</td><td>加载任务委托交给父类加载器，如果不行就向下传递委托任务，由其子类加载器加载，保证 java 核心库的安全性</td></tr><tr><td>可见性机制</td><td>子类加载器可以看到父类加载器加载的类，而反之则不行</td></tr><tr><td>单一性机制</td><td>父加载器加载过的类不能被子加载器加载第二次</td></tr></tbody></table></div>        <h2 id="垃圾回收-gc">          <a href="#垃圾回收-gc" class="heading-link"><i class="fas fa-link"></i></a><a href="#垃圾回收-gc" class="headerlink" title="垃圾回收 gc"></a>垃圾回收 gc</h2>              <h3 id="对象存活判断">          <a href="#对象存活判断" class="heading-link"><i class="fas fa-link"></i></a><a href="#对象存活判断" class="headerlink" title="对象存活判断"></a>对象存活判断</h3>      <ul><li><strong>引用计数</strong></li></ul><p>每个对象有一个引用计数属性，新增一个引用时计数加1，引用释放时计数减1，计数为0时可以回收。此方法简单，无法解决对象相互循环引用的问题。 </p><ul><li><strong>可达性分析</strong></li></ul><p>从 GC Roots 开始向下搜索，搜索所走过的路径称为引用链。当一个对象到 GC Roots 没有任何引用链相连时，则证明此对象是不可用的。不可达对象。</p><blockquote><p>在Java语言中，GC Roots包括：</p><ul><li>虚拟机栈中引用的对象。</li><li>方法区中类静态属性实体引用的对象。</li><li>方法区中常量引用的对象。</li><li>本地方法栈中 JNI 引用的对象。</li></ul></blockquote>        <h3 id="垃圾收集算法">          <a href="#垃圾收集算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h3>      <ul><li><strong>标记 -清除算法</strong></li></ul><p>“标记-清除”（Mark-Sweep）算法，如它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收掉所有被标记的对象。之所以说它是最基础的收集算法，是因为后续的收集算法都是基于这种思路并对其缺点进行改进而得到的。</p><p>它的主要缺点有两个：一个是效率问题，标记和清除过程的效率都不高；另外一个是空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致，当程序在以后的运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</p><ul><li><strong>复制算法</strong></li></ul><p>“复制”（Copying）的收集算法，它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。</p><p>这样使得每次都是对其中的一块进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。只是这种算法的代价是将内存缩小为原来的一半，持续复制长生存期的对象则导致效率降低。</p><ul><li><strong>标记-整理算法</strong></li></ul><p>复制收集算法在对象存活率较高时就要执行较多的复制操作，效率将会变低。更关键的是，如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在老年代一般不能直接选用这种算法。</p><p>根据老年代的特点，有人提出了另外一种“标记-整理”（Mark-Compact）算法，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p><ul><li><strong>分代收集算法</strong></li></ul><p>GC 分代的基本假设：绝大部分对象的生命周期都非常短暂，存活时间短。</p><p>“分代收集”（Generational Collection）算法，把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记-清理”或“标记-整理”算法来进行回收。</p>        <h3 id="垃圾收集器">          <a href="#垃圾收集器" class="heading-link"><i class="fas fa-link"></i></a><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h3>      <ul><li><strong>CMS收集器</strong></li></ul><blockquote><p>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的 Java 应用都集中在互联网站或B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。</p></blockquote><p>从名字（包含“Mark Sweep”）上就可以看出CMS收集器是基于“标记-清除”算法实现的，它的运作过程相对于前面几种收集器来说要更复杂一些，整个过程分为4个步骤，包括：</p><ul><li>初始标记（CMS initial mark）</li><li>并发标记（CMS concurrent mark）</li><li>重新标记（CMS remark）</li><li>并发清除（CMS concurrent sweep）</li></ul><p>其中初始标记、重新标记这两个步骤仍然需要“Stop The World”。初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，并发标记阶段就是进行GC Roots Tracing的过程，而重新标记阶段则是为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短。</p><p>由于整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，所以总体上来说，CMS收集器的内存回收过程是与用户线程一起并发地执行。老年代收集器（新生代使用ParNew）</p><ul><li><strong>G1收集器</strong></li></ul><p>与CMS收集器相比G1收集器有以下特点：</p><p>1、空间整合，G1收集器采用标记整理算法，不会产生内存空间碎片。分配大对象时不会因为无法找到连续空间而提前触发下一次GC。</p><p>2、可预测停顿，这是G1的另一大优势，降低停顿时间是G1和CMS的共同关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为N毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒，这几乎已经是实时 Java（RTSJ）的垃圾收集器的特征了。</p><p>使用G1收集器时，Java堆的内存布局与其他收集器有很大差别，它将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔阂了，它们都是一部分（可以不连续）Region 的集合。</p><p>G1的新生代收集跟 ParNew 类似，当新生代占用达到一定比例的时候，开始出发收集。和 CMS 类似，G1 收集器收集老年代对象会有短暂停顿。</p>        <h3 id="内存模型与回收策略">          <a href="#内存模型与回收策略" class="heading-link"><i class="fas fa-link"></i></a><a href="#内存模型与回收策略" class="headerlink" title="内存模型与回收策略"></a>内存模型与回收策略</h3>      <p><img src="https://mmbiz.qpic.cn/mmbiz_png/qdzZBE73hWsbhfAng9ibqfcbjrqgyRWqAKiaJ2U75SGYwQhs2tuNbXtu8KIpaUsBOaHRKXf7esuuFoMjELFxibIVg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" style=""></p><p>Java 堆（Java Heap）是JVM所管理的内存中最大的一块，堆又是垃圾收集器管理的主要区域，Java 堆主要分为2个区域-年轻代与老年代，其中年轻代又分 Eden 区和 Survivor 区，其中 Survivor 区又分 From 和 To 2个区。</p><ul><li><strong>Eden 区</strong></li></ul><p>大多数情况下，对象会在新生代 Eden 区中进行分配，当 Eden 区没有足够空间进行分配时，虚拟机会发起一次 Minor GC，Minor GC 相比 Major GC 更频繁，回收速度也更快。<br>通过 Minor GC 之后，Eden 会被清空，Eden 区中绝大部分对象会被回收，而那些无需回收的存活对象，将会进到 Survivor 的 From 区（若 From 区不够，则直接进入 Old 区）。</p><ul><li><strong>Survivor 区</strong></li></ul><p>Survivor 区相当于是 Eden 区和 Old 区的一个缓冲，类似于我们交通灯中的黄灯。Survivor 又分为2个区，一个是 From 区，一个是 To 区。每次执行 Minor GC，会将 Eden 区和 From 存活的对象放到 Survivor 的 To 区（如果 To 区不够，则直接进入 Old 区）。Survivor 的存在意义就是减少被送到老年代的对象，进而减少 Major GC 的发生。Survivor 的预筛选保证，只有经历16次 Minor GC 还能在新生代中存活的对象，才会被送到老年代。</p><ul><li><strong>Old 区</strong></li></ul><p>老年代占据着2/3的堆内存空间，只有在 Major GC 的时候才会进行清理，每次 GC 都会触发“Stop-The-World”。内存越大，STW 的时间也越长，所以内存也不仅仅是越大就越好。由于复制算法在对象存活率较高的老年代会进行很多次的复制操作，效率很低，所以老年代这里采用的是标记——整理算法。</p>        <h1 id="Object">          <a href="#Object" class="heading-link"><i class="fas fa-link"></i></a><a href="#Object" class="headerlink" title="Object"></a>Object</h1>              <h2 id="equals-方法">          <a href="#equals-方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#equals-方法" class="headerlink" title="equals 方法"></a>equals 方法</h2>      <p>对两个对象的地址值进行的比较（即比较引用是否相同）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>        <h2 id="hashCode-方法">          <a href="#hashCode-方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#hashCode-方法" class="headerlink" title="hashCode 方法"></a>hashCode 方法</h2>      <p>hashCode() 方法给对象返回一个 hash code 值。这个方法被用于 hash tables，例如 HashMap。</p><p>它的性质是：</p><ul><li><p>在一个Java应用的执行期间，如果一个对象提供给 equals 做比较的信息没有被修改的话，该对象多次调用 hashCode() 方法，该方法必须始终如一返回同一个 integer。</p></li><li><p>如果两个对象根据 equals(Object) 方法是相等的，那么调用二者各自的 hashCode() 方法必须产生同一个 integer 结果。</p></li><li><p>并不要求根据 equals(Object) 方法不相等的两个对象，调用二者各自的 hashCode() 方法必须产生不同的 integer 结果。然而，程序员应该意识到对于不同的对象产生不同的 integer 结果，有可能会提高 hash table 的性能。</p></li></ul><p>在 JDK 中，Object 的 hashcode 方法是本地方法，也就是用 c 语言或 c++ 实现的，该方法直接返回对象的 内存地址。在 String 类，重写了 hashCode 方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> hash<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> val<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            h <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> h <span class="token operator">+</span> val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        hash <span class="token operator">=</span> h<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> h<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="static">          <a href="#static" class="heading-link"><i class="fas fa-link"></i></a><a href="#static" class="headerlink" title="static"></a>static</h1>      <ul><li>static关键字修饰的方法或者变量不需要依赖于对象来进行访问，只要类被加载了，就可以通过类名去进行访问。</li><li>静态变量被所有的对象所共享，在内存中只有一个副本，它当且仅当在类初次加载时会被初始化。</li><li>能通过 this 访问静态成员变量吗?<br>所有的静态方法和静态变量都可以通过对象访问（只要访问权限足够）。</li><li>static是不允许用来修饰局部变量</li></ul>        <h1 id="final">          <a href="#final" class="heading-link"><i class="fas fa-link"></i></a><a href="#final" class="headerlink" title="final"></a>final</h1>      <ul><li>可以声明成员变量、方法、类以及本地变量</li><li>final 成员变量必须在声明的时候初始化或者在构造器中初始化，否则就会报编译错误</li><li>final 变量是只读的</li><li>final 申明的方法不可以被子类的方法重写</li><li>final 类通常功能是完整的，不能被继承</li><li>final 变量可以安全的在多线程环境下进行共享，而不需要额外的同步开销</li><li>final 关键字提高了性能，JVM 和 Java 应用都会缓存 final 变量，会对方法、变量及类进行优化</li><li>方法的内部类访问方法中的局部变量，但必须用 final 修饰才能访问</li></ul>        <h1 id="String、StringBuffer、StringBuilder">          <a href="#String、StringBuffer、StringBuilder" class="heading-link"><i class="fas fa-link"></i></a><a href="#String、StringBuffer、StringBuilder" class="headerlink" title="String、StringBuffer、StringBuilder"></a>String、StringBuffer、StringBuilder</h1>      <ul><li>String 是 final 类，不能被继承。对于已经存在的 Stirng 对象，修改它的值，就是重新创建一个对象</li><li>StringBuffer 是一个类似于 String 的字符串缓冲区，使用 append() 方法修改 Stringbuffer 的值，使用 toString() 方法转换为字符串，是线程安全的</li><li>StringBuilder 用来替代于 StringBuffer，StringBuilder 是非线程安全的，速度更快</li></ul>        <h1 id="异常处理">          <a href="#异常处理" class="heading-link"><i class="fas fa-link"></i></a><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1>      <ul><li>Exception、Error 是 Throwable 类的子类</li><li>Error 类对象由 Java 虚拟机生成并抛出，不可捕捉  </li><li>不管有没有异常，finally 中的代码都会执行</li><li>当 try、catch 中有 return 时，finally 中的代码依然会继续执行</li></ul><div class="table-container"><table><thead><tr><th>常见的Error</th><th></th><th></th></tr></thead><tbody><tr><td>OutOfMemoryError</td><td>StackOverflowError</td><td>NoClassDeffoundError</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>常见的Exception</th><th></th><th></th></tr></thead><tbody><tr><td>常见的非检查性异常</td><td></td><td></td></tr><tr><td>ArithmeticException</td><td>ArrayIndexOutOfBoundsException</td><td>ClassCastException</td></tr><tr><td>IllegalArgumentException</td><td>IndexOutOfBoundsException</td><td>NullPointerException</td></tr><tr><td>NumberFormatException</td><td>SecurityException</td><td>UnsupportedOperationException</td></tr><tr><td>常见的检查性异常</td><td></td><td></td></tr><tr><td>IOException</td><td>CloneNotSupportedException</td><td>IllegalAccessException</td></tr><tr><td>NoSuchFieldException</td><td>NoSuchMethodException</td><td>FileNotFoundException</td></tr></tbody></table></div>        <h1 id="内部类">          <a href="#内部类" class="heading-link"><i class="fas fa-link"></i></a><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1>      <ul><li>非静态内部类没法在外部类的静态方法中实例化。</li><li>非静态内部类的方法可以直接访问外部类的所有数据，包括私有的数据。</li><li>在静态内部类中调用外部类成员，成员也要求用 static 修饰。</li><li>创建静态内部类的对象可以直接通过外部类调用静态内部类的构造器；创建非静态的内部类的对象必须先创建外部类的对象，通过外部类的对象调用内部类的构造器。</li></ul>        <h2 id="匿名内部类">          <a href="#匿名内部类" class="heading-link"><i class="fas fa-link"></i></a><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2>      <ul><li>匿名内部类不能定义任何静态成员、方法</li><li>匿名内部类中的方法不能是抽象的</li><li>匿名内部类必须实现接口或抽象父类的所有抽象方法</li><li>匿名内部类不能定义构造器</li><li>匿名内部类访问的外部类成员变量或成员方法必须用 final 修饰</li></ul>        <h1 id="多态">          <a href="#多态" class="heading-link"><i class="fas fa-link"></i></a><a href="#多态" class="headerlink" title="多态"></a>多态</h1>      <ul><li>父类的引用可以指向子类的对象</li><li>创建子类对象时，调用的方法为子类重写的方法或者继承的方法</li><li>如果我们在子类中编写一个独有的方法，此时就不能通过父类的引用创建的子类对象来调用该方法</li></ul>        <h1 id="抽象和接口">          <a href="#抽象和接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#抽象和接口" class="headerlink" title="抽象和接口"></a>抽象和接口</h1>      <ul><li>抽象类不能有对象（不能用 new 关键字来创建抽象类的对象）</li><li>抽象类中的抽象方法必须在子类中被重写</li><li>接口中的所有属性默认为：public static final ****；</li><li>接口中的所有方法默认为：public abstract ****；</li></ul>        <h1 id="集合框架">          <a href="#集合框架" class="heading-link"><i class="fas fa-link"></i></a><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h1>      <p><img src="https://user-gold-cdn.xitu.io/2019/6/23/16b833f4a86db5e6?w=643&amp;h=611&amp;f=gif&amp;s=22445" style=""></p><ul><li>List接口存储一组不唯一，有序（插入顺序）的对象, Set接口存储一组唯一，无序的对象。</li></ul>        <h2 id="HashMap">          <a href="#HashMap" class="heading-link"><i class="fas fa-link"></i></a><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2>              <h3 id="结构图">          <a href="#结构图" class="heading-link"><i class="fas fa-link"></i></a><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h3>      <ul><li><strong>JDK 1.7 HashMap 结构图</strong></li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/6/23/16b833f4ac8f44fd?w=1636&amp;h=742&amp;f=png&amp;s=88323" style=""></p><ul><li><strong>JDK 1.8 HashMap 结构图</strong></li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/7/23/164c47f32f9650ba?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" style=""></p>        <h3 id="HashMap-的工作原理">          <a href="#HashMap-的工作原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#HashMap-的工作原理" class="headerlink" title="HashMap 的工作原理"></a>HashMap 的工作原理</h3>      <p>HashMap 基于 hashing 原理，我们通过 put() 和 get() 方法储存和获取对象。当我们将键值对传递给 put() 方法时，它调用键对象的 hashCode() 方法来计算 hashcode，让后找到 bucket 位置来储存 Entry 对象。当两个对象的 hashcode 相同时，它们的 bucket 位置相同，‘碰撞’会发生。因为 HashMap 使用链表存储对象，这个 Entry 会存储在链表中，当获取对象时，通过键对象的 equals() 方法找到正确的键值对，然后返回值对象。</p><p><strong>如果 HashMap 的大小超过了负载因子(load factor)定义的容量，怎么办？</strong><br>默认的负载因子大小为 0.75，也就是说，当一个 map 填满了 75% 的 bucket 时候，和其它集合类(如 ArrayList 等)一样，将会创建原来 HashMap 大小的两倍的 bucket 数组，来重新调整 map 的大小，并将原来的对象放入新的 bucket 数组中。这个过程叫作 rehashing，因为它调用 hash 方法找到新的 bucket 位置。</p><p><strong>为什么 String, Interger 这样的 wrapper 类适合作为键?</strong><br>因为 String 是不可变的，也是 final 的，而且已经重写了 equals() 和 hashCode() 方法了。其他的 wrapper 类也有这个特点。不可变性是必要的，因为为了要计算 hashCode()，就要防止键值改变，如果键值在放入时和获取时返回不同的 hashcode 的话，那么就不能从 HashMap 中找到你想要的对象。不可变性还有其他的优点如线程安全。如果你可以仅仅通过将某个 field 声明成 final 就能保证 hashCode 是不变的，那么请这么做吧。因为获取对象的时候要用到 equals() 和 hashCode() 方法，那么键对象正确的重写这两个方法是非常重要的。如果两个不相等的对象返回不同的 hashcode 的话，那么碰撞的几率就会小些，这样就能提高 HashMap 的性能。</p>        <h3 id="HashMap-与-HashTable-对比">          <a href="#HashMap-与-HashTable-对比" class="heading-link"><i class="fas fa-link"></i></a><a href="#HashMap-与-HashTable-对比" class="headerlink" title="HashMap 与 HashTable 对比"></a>HashMap 与 HashTable 对比</h3>      <p>HashMap 是非 synchronized 的，性能更好，HashMap 可以接受为 null 的 key-value，而 Hashtable 是线程安全的，比 HashMap 要慢，不接受 null 的 key-value。</p><p><code>HashMap.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span>    <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    ···    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ···    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ···<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>HashTable.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span>    <span class="token keyword">extends</span> <span class="token class-name">Dictionary</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span>    <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">{</span>    ···    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Make sure the value is not null</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ···        <span class="token function">addEntry</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ···    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HashtableEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> tab<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> table<span class="token punctuation">;</span>        <span class="token keyword">int</span> hash <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">&amp;</span> <span class="token number">0x7FFFFFFF</span><span class="token punctuation">)</span> <span class="token operator">%</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HashtableEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">V</span><span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ···<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="ConcurrentHashMap">          <a href="#ConcurrentHashMap" class="heading-link"><i class="fas fa-link"></i></a><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2>              <h3 id="Base-1-7">          <a href="#Base-1-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#Base-1-7" class="headerlink" title="Base 1.7"></a>Base 1.7</h3>      <p>ConcurrentHashMap 最外层不是一个大的数组，而是一个 Segment 的数组。每个 Segment 包含一个与 HashMap 数据结构差不多的链表数组。</p><p><img src="http://www.jasongj.com/img/java/concurrenthashmap/concurrenthashmap_java7.png"></p><p>在读写某个 Key 时，先取该 Key 的哈希值。并将哈希值的高 N 位对 Segment 个数取模从而得到该 Key 应该属于哪个Segment，接着如同操作 HashMap 一样操作这个 Segment。</p><p>Segment 继承自 ReentrantLock，可以很方便的对每一个 Segmen 上锁。</p><p>对于读操作，获取 Key 所在的 Segment 时，需要保证可见性。具体实现上可以使用volatile关键字，也可使用锁。但使用锁开销太大，而使用volatile时每次写操作都会让所有CPU内缓存无效，也有一定开销。ConcurrentHashMap 使用如下方法保证可见性，取得最新的Segment：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token constant">UNSAFE</span><span class="token punctuation">.</span><span class="token function">getObjectVolatile</span><span class="token punctuation">(</span>segments<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取 Segment 中的 HashEntry 时也使用了类似方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token constant">UNSAFE</span><span class="token punctuation">.</span>getObjectVolatile  <span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tab<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">TSHIFT</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">TBASE</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对于写操作，并不要求同时获取所有 Segment 的锁，因为那样相当于锁住了整个Map。它会先获取该 Key-Value 对所在的 Segment 的锁，获取成功后就可以像操作一个普通的 HashMap 一样操作该 Segment，并保证该 Segment 的安全性。同时由于其它 Segment 的锁并未被获取，因此理论上可支持 concurrencyLevel（等于Segment的个数）个线程安全的并发读写。</p><p>获取锁时，并不直接使用 lock 来获取，因为该方法获取锁失败时会挂起。事实上，它使用了自旋锁，如果 tryLock 获取锁失败，说明锁被其它线程占用，此时通过循环再次以 tryLock 的方式申请锁。如果在循环过程中该 Key 所对应的链表头被修改，则重置 retry 次数。如果 retry 次数超过一定值，则使用 lock 方法申请锁。</p><p>这里使用自旋锁是因为自旋锁的效率比较高，但是它消耗 CPU 资源比较多，因此在自旋次数超过阈值时切换为互斥锁。</p>        <h3 id="Base-1-8">          <a href="#Base-1-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#Base-1-8" class="headerlink" title="Base 1.8"></a>Base 1.8</h3>      <p>1.7 已经解决了并发问题，并且能支持 N 个 Segment 这么多次数的并发，但依然存在 HashMap 在 1.7 版本中的问题：查询遍历链表效率太低。因此 1.8 做了一些数据结构上的调整。</p><p><img src="https://user-gold-cdn.xitu.io/2018/7/23/164c47f3756eb206?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" style=""></p><p>其中抛弃了原有的 Segment 分段锁，而采用了 CAS + synchronized 来保证并发安全性。</p><p><code>ConcurrentHashMap.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> f<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fh<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            tab <span class="token operator">=</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                            <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>                   <span class="token comment">// no lock when adding to empty bin</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fh <span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">MOVED</span><span class="token punctuation">)</span>            tab <span class="token operator">=</span> <span class="token function">helpTransfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">V</span> oldVal <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fh <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        binCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                        ···                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">TreeBin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                       ···                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">ReservationNode</span><span class="token punctuation">)</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Recursive update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            ···    <span class="token punctuation">}</span>    <span class="token function">addCount</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> binCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="ArrayList">          <a href="#ArrayList" class="heading-link"><i class="fas fa-link"></i></a><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2>      <p>ArrayList 本质上是一个动态数组，第一次添加元素时，数组大小将变化为 DEFAULT_CAPACITY 10，不断添加元素后，会进行扩容。删除元素时，会按照位置关系把数组元素整体（复制）移动一遍。</p><p><code>ArrayList.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>        <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">RandomAccess</span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span>    ···    <span class="token comment">// 增加元素</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Increments modCount!!</span>        elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ···    <span class="token comment">// 删除元素</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token class-name">E</span> oldValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span>                             numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// clear to let GC do its work</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ···    <span class="token comment">// 查找元素</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ···<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="LinkedList">          <a href="#LinkedList" class="heading-link"><i class="fas fa-link"></i></a><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2>      <p>LinkedList 本质上是一个双向链表的存储结构。</p><p><code>LinkedList.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>    <span class="token keyword">extends</span> <span class="token class-name">AbstractSequentialList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>    <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">{</span>    ····    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token class-name">E</span> item<span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    ···        <span class="token comment">// 增加元素</span>    <span class="token keyword">void</span> <span class="token function">linkLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">else</span>            l<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ···    <span class="token comment">// 删除元素</span>    <span class="token class-name">E</span> <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">E</span> element <span class="token operator">=</span> x<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            first <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            x<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            last <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            next<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>            x<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        x<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> element<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ···    <span class="token comment">// 查找元素</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// assert isElementIndex(index);</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">return</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> index<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>                x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>            <span class="token keyword">return</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    ···<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于元素查询来说，ArrayList 优于 LinkedList，因为 LinkedList 要移动指针。对于新增和删除操作，LinedList 比较占优势，因为 ArrayList 要移动数据。</p>        <h2 id="CopyOnWriteArrayList">          <a href="#CopyOnWriteArrayList" class="heading-link"><i class="fas fa-link"></i></a><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2>      <p>CopyOnWriteArrayList 是线程安全容器(相对于 ArrayList)，增加删除等写操作通过加锁的形式保证数据一致性，通过复制新集合的方式解决遍历迭代的问题。</p><p><code>CopyOnWriteArrayList.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>    <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">RandomAccess</span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">{</span>     <span class="token keyword">final</span> <span class="token keyword">transient</span> <span class="token class-name">Object</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ···    <span class="token comment">// 增加元素</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newElements <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            newElements<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token function">setArray</span><span class="token punctuation">(</span>newElements<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    ···    <span class="token comment">// 删除元素</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token class-name">E</span> oldValue <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> numMoved <span class="token operator">=</span> len <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">setArray</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newElements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> newElements<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> newElements<span class="token punctuation">,</span> index<span class="token punctuation">,</span>                                 numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setArray</span><span class="token punctuation">(</span>newElements<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    ···        <span class="token comment">// 查找元素</span>    <span class="token keyword">private</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="反射">          <a href="#反射" class="heading-link"><i class="fas fa-link"></i></a><a href="#反射" class="headerlink" title="反射"></a>反射</h1>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token class-name">Class</span> cls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.jasonwu.Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取构造方法</span>    <span class="token class-name">Constructor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> publicConstructors <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取全部构造方法</span>    <span class="token class-name">Constructor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredConstructors <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取公开方法</span>    <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取全部方法</span>    <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredMethods <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取公开属性</span>    <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> publicFields <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取全部属性</span>    <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> clsObject <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Method</span> method <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"getModule1Functionality"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> object <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="单例">          <a href="#单例" class="heading-link"><i class="fas fa-link"></i></a><a href="#单例" class="headerlink" title="单例"></a>单例</h1>              <h2 id="饿汉式">          <a href="#饿汉式" class="heading-link"><i class="fas fa-link"></i></a><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomManager</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Context</span> mContext<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> mLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">CustomManager</span> mInstance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CustomManager</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomManager</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> mInstance<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">CustomManager</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mContext <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="双重检查模式">          <a href="#双重检查模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#双重检查模式" class="headerlink" title="双重检查模式"></a>双重检查模式</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomManager</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Context</span> mContext<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">CustomManager</span> mInstance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CustomManager</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 避免非必要加锁</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">CustomManger</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mInstacne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomManager</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> mInstacne<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">CustomManager</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mContext <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="静态内部类模式">          <a href="#静态内部类模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#静态内部类模式" class="headerlink" title="静态内部类模式"></a>静态内部类模式</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomManager</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">CustomManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CustomManagerHolder</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">CustomManager</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CustomManager</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">CustomManagerHolder</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>静态内部类的原理是：</p><p>当 SingleTon 第一次被加载时，并不需要去加载 SingleTonHoler，只有当 getInstance() 方法第一次被调用时，才会去初始化 INSTANCE，这种方法不仅能确保线程安全，也能保证单例的唯一性，同时也延迟了单例的实例化。getInstance 方法并没有多次去 new 对象，取的都是同一个 INSTANCE 对象。</p><p>虚拟机会保证一个类的 <code>&lt;clinit&gt;()</code> 方法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的 <code>&lt;clinit&gt;()</code> 方法，其他线程都需要阻塞等待，直到活动线程执行 <code>&lt;clinit&gt;()</code> 方法完毕</p><p>缺点在于无法传递参数，如Context等</p>        <h1 id="线程">          <a href="#线程" class="heading-link"><i class="fas fa-link"></i></a><a href="#线程" class="headerlink" title="线程"></a>线程</h1>      <p>线程是进程中可独立执行的最小单位，也是 CPU 资源（时间片）分配的基本单位。同一个进程中的线程可以共享进程中的资源，如内存空间和文件句柄。</p>        <h2 id="属性">          <a href="#属性" class="heading-link"><i class="fas fa-link"></i></a><a href="#属性" class="headerlink" title="属性"></a>属性</h2>      <div class="table-container"><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>线程 id 用于标识不同的线程。编号可能被后续创建的线程使用。编号是只读属性，不能修改</td></tr><tr><td>name</td><td>名字的默认值是 Thread-(id)</td></tr><tr><td>daemon</td><td>分为守护线程和用户线程，我们可以通过 setDaemon(true) 把线程设置为守护线程。守护线程通常用于执行不重要的任务，比如监控其他线程的运行情况，GC 线程就是一个守护线程。setDaemon() 要在线程启动前设置，否则 JVM 会抛出非法线程状态异常，可被继承。</td></tr><tr><td>priority</td><td>线程调度器会根据这个值来决定优先运行哪个线程（不保证），优先级的取值范围为 1~10，默认值是 5，可被继承。Thread 中定义了下面三个优先级常量：<br>- 最低优先级：MIN_PRIORITY = 1<br>- 默认优先级：NORM_PRIORITY = 5<br>- 最高优先级：MAX_PRIORITY = 10</td></tr></tbody></table></div>        <h2 id="状态">          <a href="#状态" class="heading-link"><i class="fas fa-link"></i></a><a href="#状态" class="headerlink" title="状态"></a>状态</h2>      <p><img src="https://pic2.zhimg.com/80/v2-326a2be9b86b1446d75b6f52f54c98fb_hd.jpg"></p><div class="table-container"><table><thead><tr><th>状态</th><th>说明</th></tr></thead><tbody><tr><td>New</td><td>新创建了一个线程对象，但还没有调用start()方法。</td></tr><tr><td>Runnable</td><td>Ready 状态 线程对象创建后，其他线程(比如 main 线程）调用了该对象的 start() 方法。该状态的线程位于可运行线程池中，等待被线程调度选中 获取 cpu 的使用权。Running 绪状态的线程在获得 CPU 时间片后变为运行中状态（running）。</td></tr><tr><td>Blocked</td><td>线程因为某种原因放弃了cpu 使用权（等待锁），暂时停止运行</td></tr><tr><td>Waiting</td><td>线程进入等待状态因为以下几个方法：<br>- Object#wait()<br>- Thread#join()<br>- LockSupport#park()</td></tr><tr><td>Timed Waiting</td><td>有等待时间的等待状态。</td></tr><tr><td>Terminated</td><td>表示该线程已经执行完毕。</td></tr></tbody></table></div>        <h2 id="状态控制">          <a href="#状态控制" class="heading-link"><i class="fas fa-link"></i></a><a href="#状态控制" class="headerlink" title="状态控制"></a>状态控制</h2>      <ul><li>wait() / notify() / notifyAll()</li></ul><p><code>wait()</code>，<code>notify()</code>，<code>notifyAll()</code> 是定义在Object类的实例方法，用于控制线程状态，三个方法都必须在synchronized 同步关键字所限定的作用域中调用，否则会报错 <code>java.lang.IllegalMonitorStateException</code>。</p><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>wait()</code></td><td>线程状态由 的使用权。Running 变为 Waiting, 并将当前线程放入等待队列中</td></tr><tr><td><code>notify()</code></td><td>notify() 方法是将等待队列中一个等待线程从等待队列移动到同步队列中</td></tr><tr><td><code>notifyAll() </code></td><td>则是将所有等待队列中的线程移动到同步队列中</td></tr></tbody></table></div><p>被移动的线程状态由 Running 变为 Blocked，notifyAll 方法调用后，等待线程依旧不会从 wait() 返回,需要调用 notify() 或者 notifyAll() 的线程释放掉锁后，等待线程才有机会从 wait() 返回。</p><ul><li>join() / sleep() / yield()</li></ul><p>在很多情况，主线程创建并启动子线程，如果子线程中需要进行大量的耗时计算，主线程往往早于子线程结束。这时，如果主线程想等待子线程执行结束之后再结束，比如子线程处理一个数据，主线程要取得这个数据，就要用 <code>join()</code> 方法。</p><p><code>sleep(long)</code> 方法在睡眠时不释放对象锁，而 <code>join()</code> 方法在等待的过程中释放对象锁。</p><p><code>yield()</code> 方法会临时暂停当前正在执行的线程，来让有同样优先级的正在等待的线程有机会执行。如果没有正在等待的线程，或者所有正在等待的线程的优先级都比较低，那么该线程会继续运行。执行了yield方法的线程什么时候会继续运行由线程调度器来决定。</p>        <h1 id="volatile">          <a href="#volatile" class="heading-link"><i class="fas fa-link"></i></a><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h1>      <p>当把变量声明为 volatile 类型后，编译器与运行时都会注意到这个变量是共享的，因此不会将该变量上的操作与其他内存操作一起重排序。volatile 变量不会被缓存在寄存器或者对其他处理器不可见的地方，JVM 保证了每次读变量都从内存中读，跳过 CPU cache 这一步，因此在读取 volatile 类型的变量时总会返回最新写入的值。</p><p><img src="https://user-gold-cdn.xitu.io/2019/6/23/16b833f4a48b216e?w=550&amp;h=429&amp;f=png&amp;s=21448" style=""></p><p>当一个变量定义为 volatile 之后，将具备以下特性：</p><ul><li>保证此变量对所有的线程的可见性，不能保证它具有原子性（可见性，是指线程之间的可见性，一个线程修改的状态对另一个线程是可见的）</li><li>禁止指令重排序优化</li><li>volatile 的读性能消耗与普通变量几乎相同，但是写操作稍慢，因为它需要在本地代码中插入许多内存屏障指令来保证处理器不发生乱序执行</li></ul><p>AtomicInteger 中主要实现了整型的原子操作，防止并发情况下出现异常结果，其内部主要依靠 JDK 中的 unsafe 类操作内存中的数据来实现的。volatile 修饰符保证了 value 在内存中其他线程可以看到其值得改变。CAS（Compare and Swap）操作保证了 AtomicInteger 可以安全的修改value 的值。</p>        <h1 id="synchronized">          <a href="#synchronized" class="heading-link"><i class="fas fa-link"></i></a><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h1>      <p>当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。</p><p>在 Java 中，每个对象都会有一个 monitor 对象，这个对象其实就是 Java 对象的锁，通常会被称为“内置锁”或“对象锁”。类的对象可以有多个，所以每个对象有其独立的对象锁，互不干扰。针对每个类也有一个锁，可以称为“类锁”，类锁实际上是通过对象锁实现的，即类的 Class 对象锁。每个类只有一个 Class 对象，所以每个类只有一个类锁。</p><p>Monitor 是线程私有的数据结构，每一个线程都有一个可用 monitor record 列表，同时还有一个全局的可用列表。每一个被锁住的对象都会和一个 monitor 关联，同时 monitor 中有一个 Owner 字段存放拥有该锁的线程的唯一标识，表示该锁被这个线程占用。Monitor 是依赖于底层的操作系统的 Mutex Lock（互斥锁）来实现的线程同步。</p>        <h2 id="根据获取的锁分类">          <a href="#根据获取的锁分类" class="heading-link"><i class="fas fa-link"></i></a><a href="#根据获取的锁分类" class="headerlink" title="根据获取的锁分类"></a>根据获取的锁分类</h2>      <p><strong>获取对象锁</strong></p><ul><li>synchronized(this|object) {}  </li><li>修饰非静态方法</li></ul><p><strong>获取类锁</strong></p><ul><li>synchronized(类.class) {}  </li><li>修饰静态方法</li></ul>        <h2 id="原理">          <a href="#原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#原理" class="headerlink" title="原理"></a>原理</h2>      <p><strong>同步代码块：</strong></p><ul><li>monitorenter 和 monitorexit 指令实现的</li></ul><p><strong>同步方法</strong></p><ul><li>方法修饰符上的 ACC_SYNCHRONIZED 实现</li></ul>        <h1 id="Lock">          <a href="#Lock" class="heading-link"><i class="fas fa-link"></i></a><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h1>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Lock</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>      <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>      <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Condition</span> <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>lock()</code></td><td>用来获取锁，如果锁被其他线程获取，处于等待状态。如果采用 Lock，必须主动去释放锁，并且在发生异常时，不会自动释放锁。因此一般来说，使用Lock必须在 try{}catch{} 块中进行，并且将释放锁的操作放在finally块中进行，以保证锁一定被被释放，防止死锁的发生。</td></tr><tr><td><code>lockInterruptibly()</code></td><td>通过这个方法去获取锁时，如果线程正在等待获取锁，则这个线程能够响应中断，即中断线程的等待状态。</td></tr><tr><td><code>tryLock()</code></td><td>tryLock 方法是有返回值的，它表示用来尝试获取锁，如果获取成功，则返回 true，如果获取失败（即锁已被其他线程获取），则返回 false，也就说这个方法无论如何都会立即返回。在拿不到锁时不会一直在那等待。</td></tr><tr><td><code>tryLock(long，TimeUnit)</code></td><td>与 tryLock 类似，只不过是有等待时间，在等待时间内获取到锁返回 true，超时返回 false。</td></tr></tbody></table></div>        <h2 id="锁的分类">          <a href="#锁的分类" class="heading-link"><i class="fas fa-link"></i></a><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h2>      <p><img src="https://user-gold-cdn.xitu.io/2019/6/18/16b69b50c9d340a5?w=1372&amp;h=1206&amp;f=png&amp;s=142754" style=""></p>        <h3 id="悲观锁、乐观锁">          <a href="#悲观锁、乐观锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#悲观锁、乐观锁" class="headerlink" title="悲观锁、乐观锁"></a>悲观锁、乐观锁</h3>      <p>悲观锁认为自己在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。Java 中，synchronized 关键字和 Lock 的实现类都是悲观锁。悲观锁适合写操作多的场景，先加锁可以保证写操作时数据正确。</p><p>而乐观锁认为自己在使用数据时不会有别的线程修改数据，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据成功写入。如果数据已经被其他线程更新，则根据不同的实现方式执行不同的操作（例如报错或者自动重试）。乐观锁在 Java 中是通过使用无锁编程来实现，最常采用的是 CAS 算法，Java 原子类中的递增操作就通过 CAS 自旋实现。乐观锁适合读操作多的场景，不加锁的特点能够使其读操作的性能大幅提升。</p>        <h3 id="自旋锁、适应性自旋锁">          <a href="#自旋锁、适应性自旋锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#自旋锁、适应性自旋锁" class="headerlink" title="自旋锁、适应性自旋锁"></a>自旋锁、适应性自旋锁</h3>      <p>阻塞或唤醒一个 Java 线程需要操作系统切换 CPU 状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长。</p><p>在许多场景中，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。如果物理机器有多个处理器，能够让两个或以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃CPU的执行时间，看看持有锁的线程是否很快就会释放锁。</p><p>而为了让当前线程“稍等一下”，我们需让当前线程进行自旋，如果在自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以不必阻塞而是直接获取同步资源，从而避免切换线程的开销。这就是自旋锁。</p><p>自旋锁本身是有缺点的，它不能代替阻塞。自旋等待虽然避免了线程切换的开销，但它要占用处理器时间。如果锁被占用的时间很短，自旋等待的效果就会非常好。反之，如果锁被占用的时间很长，那么自旋的线程只会白浪费处理器资源。所以，自旋等待的时间必须要有一定的限度，如果自旋超过了限定次数（默认是 10 次，可以使用 -XX:PreBlockSpin 来更改）没有成功获得锁，就应当挂起线程。</p><p>自旋锁的实现原理同样也是 CAS，AtomicInteger 中调用 unsafe 进行自增操作的源码中的 do-while 循环就是一个自旋操作，如果修改数值失败则通过循环来执行自旋，直至修改成功。</p>        <h3 id="死锁">          <a href="#死锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3>      <p>当前线程拥有其他线程需要的资源，当前线程等待其他线程已拥有的资源，都不放弃自己拥有的资源。</p>        <h1 id="引用类型">          <a href="#引用类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h1>      <p>强引用 &gt; 软引用 &gt; 弱引用 </p><div class="table-container"><table><thead><tr><th>引用类型</th><th>说明</th></tr></thead><tbody><tr><td>StrongReferenc（强引用）</td><td>当一个对象具有强引用，那么垃圾回收器是绝对不会的回收和销毁它的，<strong>非静态内部类会在其整个生命周期中持有对它外部类的强引用</strong></td></tr><tr><td>WeakReference （弱引用）</td><td>在垃圾回收器运行的时候，如果对一个对象的所有引用都是弱引用的话，该对象会被回收</td></tr><tr><td>SoftReference（软引用）</td><td>如果一个对象只具有软引用，若内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，才会回收这些对象的内存</td></tr><tr><td>PhantomReference（虚引用）</td><td>一个只被虚引用持有的对象可能会在任何时候被 GC 回收。虚引用对对象的生存周期完全没有影响，也无法通过虚引用来获取对象实例，仅仅能在对象被回收时，得到一个系统通知（只能通过是否被加入到 ReferenceQueue 来判断是否被GC，这也是唯一判断对象是否被 GC 的途径）。</td></tr></tbody></table></div>        <h1 id="动态代理">          <a href="#动态代理" class="heading-link"><i class="fas fa-link"></i></a><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1>      <p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 定义相关接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BaseInterface</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 接口的相关实现类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BaseInterface</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doSomething"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">BaseImpl</span> base <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Proxy 动态代理实现</span>    <span class="token class-name">BaseInterface</span> proxyInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">BaseInterface</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> base<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"doSomething"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"do more"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    proxyInstance<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Proxy.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">{</span>    <span class="token comment">// 代理类的缓存</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">WeakCache</span><span class="token operator">&lt;</span><span class="token class-name">ClassLoader</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token operator">&gt;</span>        proxyClassCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ProxyClassFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ···    <span class="token comment">// 生成代理对象方法入口</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span>                                        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span>                                        <span class="token class-name">InvocationHandler</span> h<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">IllegalArgumentException</span>    <span class="token punctuation">{</span>        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> intfs <span class="token operator">=</span> interfaces<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 找到并生成相关的代理类</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cl <span class="token operator">=</span> <span class="token function">getProxyClass0</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> intfs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用代理类的构造方法生成代理类实例</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cons <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>constructorParams<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token class-name">InvocationHandler</span> ih <span class="token operator">=</span> h<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>cl<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                cons<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> cons<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>h<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         ···    <span class="token punctuation">}</span>    ···        <span class="token comment">// 定义和返回代理类的工厂类</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ProxyClassFactory</span>        <span class="token keyword">implements</span> <span class="token class-name">BiFunction</span><span class="token operator">&lt;</span><span class="token class-name">ClassLoader</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token operator">&gt;</span>    <span class="token punctuation">{</span>        <span class="token comment">// 所有代理类的前缀</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> proxyClassNamePrefix <span class="token operator">=</span> <span class="token string">"$Proxy"</span><span class="token punctuation">;</span>        <span class="token comment">//  用于生成唯一代理类名称的下一个数字</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AtomicLong</span> nextUniqueNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> interfaceSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IdentityHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>interfaces<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            ···            <span class="token class-name">String</span> proxyPkg <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token comment">// 用于定义代理类的包名</span>            <span class="token keyword">int</span> accessFlags <span class="token operator">=</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">PUBLIC</span> <span class="token operator">|</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">FINAL</span><span class="token punctuation">;</span>            <span class="token comment">// 确保所有 non-public 的代理接口在相同的包里</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> intf <span class="token operator">:</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> flags <span class="token operator">=</span> intf<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    accessFlags <span class="token operator">=</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">FINAL</span><span class="token punctuation">;</span>                    <span class="token class-name">String</span> name <span class="token operator">=</span> intf<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> n <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">String</span> pkg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>proxyPkg <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        proxyPkg <span class="token operator">=</span> pkg<span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pkg<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>proxyPkg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                            <span class="token string">"non-public interfaces from different packages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>proxyPkg <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 如果没有 non-public 的代理接口，使用默认的包名</span>                proxyPkg <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">{</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">&gt;</span></span> methods <span class="token operator">=</span> <span class="token function">getMethods</span><span class="token punctuation">(</span>interfaces<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>methods<span class="token punctuation">,</span> <span class="token constant">ORDER_BY_SIGNATURE_AND_SUBTYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">validateReturnTypes</span><span class="token punctuation">(</span>methods<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> exceptions <span class="token operator">=</span> <span class="token function">deduplicateAndGetExceptions</span><span class="token punctuation">(</span>methods<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methodsArray <span class="token operator">=</span> methods<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Method</span><span class="token punctuation">[</span>methods<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> exceptionsArray <span class="token operator">=</span> exceptions<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>exceptions<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 生成代理类的名称</span>                <span class="token keyword">long</span> num <span class="token operator">=</span> nextUniqueNumber<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> proxyName <span class="token operator">=</span> proxyPkg <span class="token operator">+</span> proxyClassNamePrefix <span class="token operator">+</span> num<span class="token punctuation">;</span>                <span class="token comment">// Android 特定修改：直接调用 native 方法生成代理类</span>                <span class="token keyword">return</span> <span class="token function">generateProxy</span><span class="token punctuation">(</span>proxyName<span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> loader<span class="token punctuation">,</span> methodsArray<span class="token punctuation">,</span>                                     exceptionsArray<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// JDK 使用的 ProxyGenerator.generateProxyClas 方法创建代理类</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> proxyClassFile <span class="token operator">=</span> <span class="token class-name">ProxyGenerator</span><span class="token punctuation">.</span><span class="token function">generateProxyClass</span><span class="token punctuation">(</span>                    proxyName<span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> accessFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token function">defineClass0</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> proxyName<span class="token punctuation">,</span>                                        proxyClassFile<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> proxyClassFile<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> ···        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    ···    <span class="token comment">// 最终调用 native 方法生成代理类</span>    <span class="token annotation punctuation">@FastNative</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">generateProxy</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span>                                                 <span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span> <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods<span class="token punctuation">,</span>                                                 <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> exceptions<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ProxyGenerator.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateProxyClass</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>                                        <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">ProxyGenerator</span> gen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyGenerator</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> interfaces<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classFile <span class="token operator">=</span> gen<span class="token punctuation">.</span><span class="token function">generateClassFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>saveGeneratedFiles<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span>AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span>PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token class-name">Void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">FileOutputStream</span> file <span class="token operator">=</span>                        <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token function">dotToSlash</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    file<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>classFile<span class="token punctuation">)</span><span class="token punctuation">;</span>                    file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalError</span><span class="token punctuation">(</span>                        <span class="token string">"I/O exception saving generated file: "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> classFile<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="元注解">          <a href="#元注解" class="heading-link"><i class="fas fa-link"></i></a><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h1>      <p>@Retention：保留的范围，可选值有三种。</p><div class="table-container"><table><thead><tr><th>RetentionPolicy</th><th>说明</th></tr></thead><tbody><tr><td>SOURCE</td><td>注解将被编译器丢弃（该类型的注解信息只会保留在源码里，源码经过编译后，注解信息会被丢弃，不会保留在编译好的class文件里），如 @Override</td></tr><tr><td>CLASS</td><td>注解在class文件中可用，但会被 VM 丢弃（该类型的注解信息会保留在源码里和 class 文件里，在执行的时候，不会加载到虚拟机中），请注意，当注解未定义 Retention 值时，默认值是 CLASS。</td></tr><tr><td>RUNTIME</td><td>注解信息将在运行期 (JVM) 也保留，因此可以通过反射机制读取注解的信息（源码、class 文件和执行的时候都有注解的信息），如 @Deprecated</td></tr></tbody></table></div><p>@Target：可以用来修饰哪些程序元素，如 TYPE, METHOD, CONSTRUCTOR, FIELD, PARAMETER等，未标注则表示可修饰所有</p><p>@Inherited：是否可以被继承，默认为false  </p><p>@Documented：是否会保存到 Javadoc 文档中</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MarkDown简明语法手册</title>
    <link href="/2023/08/31/docs/markdown/markdown-jian-ming-yu-fa-shou-ce/"/>
    <url>/2023/08/31/docs/markdown/markdown-jian-ming-yu-fa-shou-ce/</url>
    
    <content type="html"><![CDATA[<p>转存 <a href="https://github.com/heanxu/markdown-handbook">Markdown 简明语法手册</a></p><hr><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a><a name="index">目录</a></h2><ul><a name="index"></a><li><a name="index"></a><a href="#title">标题</a></li><li><a href="#text">文本</a><ul><li>普通文本</li><li>单行文本</li><li>多行文本</li><li>文字高亮</li></ul></li><li><a href="#line">横线</a></li><li><a href="#link">链接</a> <ul><li>文字超链接</li><li>锚点</li><li>图片超链接</li></ul></li><li><a href="#pic">图片</a></li><li><a href="#dot">列表</a><ul><li>圆点列表</li><li>数字列表</li><li>复选框列表</li></ul></li><li><a href="#blockquotes">块引用</a></li><li><a href="#code">代码</a></li><li><a href="#table">表格</a> </li><li><a href="#emoji">表情</a></li></ul><hr><h3 id="1-标题"><a href="#1-标题" class="headerlink" title=" 1.标题"></a><a name="title"> 1.标题</a></h3><p><a name="title">行首加井号表示不同级别的标题 (H1-H6),例如：# H1, ## H2, ### H3，#### H4.</a></p><a name="title"></a><h1 id="一级标题"><a name="title"></a><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><p> 也可以使用在文字下放加 === 表示一级标题,使用 — 表示二级标题. </p><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="2-文本"><a href="#2-文本" class="headerlink" title="2. 文本 "></a>2. 文本 <a name="text"></a></h3><ul><a name="text"><li>普通文本</li></a></ul><a name="text"><p> 直接输入的文字就是普通文本。需要注意的是要换行的时候不<br>能直接通过回车来换行，需要使用&lt;br&gt;.也就是html里面的标签. 注意第三行的<code>&lt;br&gt;</code>前加了反斜杠 \ .目的就是像其他语言那样实现转义，也就是 &lt;  的转义.</p><ul><li><p>单行文本</p><pre><code class="hljs">  使用两个Tab符实现单行文本.</code></pre></li><li><p>多行文本</p><pre><code class="hljs">  多行文本和  单行文本异曲同工，只要在  每行行首加两个Tab.</code></pre></li><li><p>文字高亮</p></li></ul><p>如果你想使一段话中部分文字高亮显示，来起到突出强调的作用，那么可以把它用 `  ` 包围起来.<code>注意</code>这不是单引号，而是<code>Tab</code>上方，<code>数字1</code>左边的按键（注意使用<code>英文</code>输入法).</p></a><h3 id="3-斜体和粗体"><a name="text"></a><a href="#3-斜体和粗体" class="headerlink" title="3. 斜体和粗体"></a>3. 斜体和粗体</h3><p>使用 * 和 ** 表示斜体和粗体.</p><p>这是 <em>斜体</em>,这是 <strong>粗体</strong>.</p><h3 id="4-删除线"><a href="#4-删除线" class="headerlink" title="4. 删除线"></a>4. 删除线</h3><p><del>使用~~表示删除线.</del></p><h3 id="5-外链接"><a href="#5-外链接" class="headerlink" title="5. 外链接"></a>5. 外链接<a name="link"></a></h3><p><a name="link">使用 [描述](链接地址) 为文字增加外链接。</a></p><a name="link"></a><p><a name="link">这是去往 </a><a href="https://gnipbao.github.io/h5-test/3dtag.html">有趣的HTML5和CSS3特效在线演示地址</a> 的链接。</p><h3 id="6-锚点"><a href="#6-锚点" class="headerlink" title="6.锚点"></a>6.锚点<a name=""></a></h3><p><a name="">我们可以使用HTML的锚点标签（<code>#</code>）来设置锚点：</a><a href="#index">回到目录</a><br>但其实呢，每一个标题都是一个锚点，不需要用标签来指定，比如我们 <a href="#TEST">回到顶部</a><br>不过不幸的是，由于对中文支持的不好，所以中文标题貌似是不能视作标签的。</p><h3 id="6-列表"><a href="#6-列表" class="headerlink" title=" 6. 列表"></a><a name="dot"> 6. 列表</a></h3><p><a name="dot">使用 *，+，- 表示无序列表。</a></p><a name="dot"><ul><li>无序列表项 一</li><li>无序列表项 二</li><li>无序列表项 三</li></ul><p>二级三级原点</p><ul><li>编程语言<ul><li>脚本语言<ul><li>Python</li></ul></li></ul></li></ul><p>使用数字和点表示有序列表。</p><ol><li>有序列表项 一</li><li>有序列表项 二</li><li>有序列表项 三</li></ol></a><h3 id="7-数字列表自动排序"><a name="dot"></a><a href="#7-数字列表自动排序" class="headerlink" title="7. 数字列表自动排序"></a>7. 数字列表自动排序</h3><p>也可以在第一行指定<code>1. </code>，而接下来的几行用星号<code>*</code>（或者继续用数字1. ）就可以了，它会自动显示成2、3、4……<br>面向对象的七大原则：</p><ol><li>开闭原则</li></ol><ul><li>里氏转换原则</li><li>依赖倒转原则</li></ul><ol><li>接口隔离原则</li><li>组合聚合复用原则</li><li>迪米特法则</li><li>单一直则原则</li></ol><h3 id="8-多级数字列表"><a href="#8-多级数字列表" class="headerlink" title="8. 多级数字列表"></a>8. 多级数字列表</h3><p>和圆点的列表一样，数字列表也有多级结构：  </p><ol><li>这是一级的数字列表，数字1还是1<ol><li>这是二级的数字列表，阿拉伯数字在显示的时候变成了罗马数字<ol><li>这是三级的数字列表，数字在显示的时候变成了英文字母</li><li>四级的数字列表显示效果，就不再变化了，依旧是英文字母</li></ol></li></ol></li></ol><h3 id="9-复选框列表"><a href="#9-复选框列表" class="headerlink" title="9. 复选框列表"></a>9. 复选框列表</h3><ul><li><input checked="" disabled="" type="checkbox"> C</li><li><input checked="" disabled="" type="checkbox"> C++</li><li><input checked="" disabled="" type="checkbox"> Java</li><li><input checked="" disabled="" type="checkbox"> Qt</li><li><input checked="" disabled="" type="checkbox"> Android</li><li><input disabled="" type="checkbox"> C#</li><li><input disabled="" type="checkbox"> .NET</li></ul><h3 id="10-文字引用"><a href="#10-文字引用" class="headerlink" title="10. 文字引用"></a>10. 文字引用</h3><p>使用 &gt; 表示文字引用。</p><p>单个引用：</p><blockquote><p>野火烧不尽，春风吹又生。</p></blockquote><p>字符包围：</p><blockquote><p>数据结构</p><blockquote><p>树</p><blockquote><p>二叉树</p><blockquote><p>平衡二叉树</p><blockquote><p>满二叉树</p></blockquote></blockquote></blockquote></blockquote></blockquote><h3 id="11-代码块"><a href="#11-代码块" class="headerlink" title="11. 代码块"></a>11. 代码块<a name="blockquotes"></a></h3><p><a name="blockquotes">使用 四个缩进空格 表示代码块。</a></p><a name="blockquotes"><p>示例：</p><pre><code class="hljs">这是一个代码块，此行左侧有四个不可见的空格。</code></pre></a><h3 id="12-加强的代码块"><a name="blockquotes"></a><a href="#12-加强的代码块" class="headerlink" title="12. 加强的代码块 "></a>12. 加强的代码块 <a name="code"></a></h3><p><a name="code">支持四十一种编程语言的语法高亮的显示，行号显示。</a></p><a name="code"><p>非代码示例：</p><figure class="highlight cmake"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ sudo npm <span class="hljs-keyword">install</span> <br></code></pre></td></tr></tbody></table></figure><p>Python 示例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@requires_authorization</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">somefunc</span>(<span class="hljs-params">param1=<span class="hljs-string">''</span>, param2=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-string">'''A docstring'''</span><br>    <span class="hljs-keyword">if</span> param1 &gt; param2: <span class="hljs-comment"># interesting</span><br>        <span class="hljs-built_in">print</span> <span class="hljs-string">'Greater'</span><br>    <span class="hljs-keyword">return</span> (param2 - param1 + <span class="hljs-number">1</span>) <span class="hljs-keyword">or</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SomeClass</span>:<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>message = <span class="hljs-string">'''interpreter</span><br><span class="hljs-string"><span class="hljs-meta">... </span>prompt'''</span><br></code></pre></td></tr></tbody></table></figure><p>JavaScript 示例：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* nth element in the fibonacci series.</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> n &gt;= 0</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span> the nth element, &gt;= 0.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>) {<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">var</span> tmp;<br>  <span class="hljs-keyword">while</span> (--n &gt;= <span class="hljs-number">0</span>) {<br>    tmp = a;<br>    a += b;<br>    b = tmp;<br>  }<br>  <span class="hljs-keyword">return</span> a;<br>}<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-title function_">fib</span>(<span class="hljs-number">10</span>));<br></code></pre></td></tr></tbody></table></figure></a><h3 id="13-插入图像"><a name="code"></a><a href="#13-插入图像" class="headerlink" title=" 13.插入图像"></a><a name="pic"> 13.插入图像</a></h3><p><a name="pic">使用 ![描述](图片链接地址) 插入图像。</a></p><a name="pic"><p>插入图片示例：</p><p><img src="https://github.com/gnipbao/gnipbao.github.io/blob/master/images/markdown.jpg" alt="Markdown"></p><p>给图片添加链接:</p></a><p><a name="pic"></a><a href="http://gnipbao.github.io/css3-test/src/Funny-demo/Button/index.html">![V]</a><br>[V]:<a href="https://github.com/gnipbao/gnipbao.github.io/blob/master/images/markdown.jpg">https://github.com/gnipbao/gnipbao.github.io/blob/master/images/markdown.jpg</a></p><h3 id="14-显示表格"><a href="#14-显示表格" class="headerlink" title="14.显示表格"></a><a name="table">14.显示表格</a></h3><pre><a name="table"><code>表头1  | 表头2------------- | -------------Content Cell  | Content CellContent Cell  | Content Cell</code></a></pre><a name="table"><table><thead><tr><th>表头1</th><th>表头2</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><table><thead><tr><th>名字</th><th>描述</th></tr></thead><tbody><tr><td>Help</td><td>Display the help window.</td></tr><tr><td>Close</td><td>Closes a window</td></tr></tbody></table><p>表格中也可以使用普通文本的删除线，斜体等效果</p><table><thead><tr><th>名字</th><th>描述</th></tr></thead><tbody><tr><td>Help</td><td><del>Display the</del> help window.</td></tr><tr><td>Close</td><td><em>Closes</em> a window</td></tr></tbody></table><p>表格可以指定对齐方式</p><table><thead><tr><th align="left">左对齐</th><th align="center">居中</th><th align="right">右对齐</th></tr></thead><tbody><tr><td align="left">col 3 is</td><td align="center">some wordy text</td><td align="right">$1600</td></tr><tr><td align="left">col 2 is</td><td align="center">centered</td><td align="right">$12</td></tr><tr><td align="left">zebra stripes</td><td align="center">are neat</td><td align="right">$1</td></tr></tbody></table><p>表格中嵌入图片</p><table><thead><tr><th>图片</th><th>描述</th></tr></thead><tbody><tr><td><img src="https://github.com/gnipbao/gnipbao.github.io/blob/master/images/markdown.jpg" alt="Markdown"></td><td>图片</td></tr></tbody></table></a><h3 id="15-Html-标签"><a name="table"></a><a href="#15-Html-标签" class="headerlink" title="15. Html 标签"></a>15. Html 标签</h3><p>本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：</p><pre><code class="hljs">&lt;table&gt;    &lt;tr&gt;        &lt;th rowspan="2"&gt;值班人员&lt;/th&gt;        &lt;th&gt;星期一&lt;/th&gt;        &lt;th&gt;星期二&lt;/th&gt;        &lt;th&gt;星期三&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;李强&lt;/td&gt;        &lt;td&gt;张明&lt;/td&gt;        &lt;td&gt;王平&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;</code></pre><table>    <tbody><tr>        <th rowspan="2">值班人员</th>        <th>星期一</th>        <th>星期二</th>        <th>星期三</th>    </tr>    <tr>        <td>李强</td>        <td>张明</td>        <td>王平</td>    </tr></tbody></table><h3 id="16-待办事宜-Todo-列表"><a href="#16-待办事宜-Todo-列表" class="headerlink" title="16. 待办事宜 Todo 列表"></a>16. 待办事宜 Todo 列表</h3><p>使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：</p><pre><code class="hljs">- [ ] **Cmd Markdown 开发**    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率    - [ ] 支持以 PDF 格式导出文稿    - [x] 新增Todo列表功能     - [x] 改进 LaTex 功能        - [x] 修复 LaTex 公式渲染问题        - [x] 新增 LaTex 公式编号功能 - [ ] **七月旅行准备**    - [ ] 准备邮轮上需要携带的物品    - [ ] 浏览日本免税店的物品    - [x] 购买蓝宝石公主号七月一日的船票    </code></pre><p>对应显示如下待办事宜 Todo 列表：</p><ul><li><input disabled="" type="checkbox"> <strong>Cmd Markdown 开发</strong><ul><li><input disabled="" type="checkbox"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li><li><input disabled="" type="checkbox"> 支持以 PDF 格式导出文稿</li><li><input checked="" disabled="" type="checkbox"> 新增Todo列表功能 </li><li><input checked="" disabled="" type="checkbox"> 改进 LaTex 功能<ul><li><input checked="" disabled="" type="checkbox"> 修复 LaTex 公式渲染问题</li><li><input checked="" disabled="" type="checkbox"> 新增 LaTex 公式编号功能</li></ul></li></ul></li><li><input disabled="" type="checkbox"> <strong>七月旅行准备</strong><ul><li><input disabled="" type="checkbox"> 准备邮轮上需要携带的物品</li><li><input disabled="" type="checkbox"> 浏览日本免税店的物品</li><li><input checked="" disabled="" type="checkbox"> 购买蓝宝石公主号七月一日的船票</li></ul></li></ul><h3 id="17-添加表情"><a href="#17-添加表情" class="headerlink" title="17.添加表情"></a><a name="emoji">17.添加表情</a></h3><p><a name="emoji">Github的Markdown语法支持添加emoji表情，输入不同的符号码（两个冒号包围的字符）可以显示出不同的表情.</a></p><a name="emoji"><p>比如<code>:blush:</code>，可以显示<span class="github-emoji"><span>😊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>.</p></a><p><a name="emoji">详细查看</a><a href="./emoji.md">emoji</a>.</p>]]></content>
    
    
    <categories>
      
      <category>MarkDown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MarkDown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些常用的Gradle依赖</title>
    <link href="/2023/08/31/docs/gradle/yi-xie-chang-yong-de-gradle-yi-lai/"/>
    <url>/2023/08/31/docs/gradle/yi-xie-chang-yong-de-gradle-yi-lai/</url>
    
    <content type="html"><![CDATA[<pre class="line-numbers language-Groovy" data-language="Groovy"><code class="language-Groovy">//kotlin安卓扩展apply plugin: 'kotlin-android-extensions'//Retrifot(网络请求)implementation 'com.squareup.retrofit2:retrofit:2.0.2'implementation 'com.squareup.retrofit2:converter-gson:2.0.2'implementation 'com.squareup.okhttp3:okhttp:3.12.1'// CameraXdef camerax_version = "1.0.0-alpha05"// CameraX viewdef camerax_view_version = "1.0.0-alpha02"// CameraX 扩展 librarydef camerax_ext_version = "1.0.0-alpha02"implementation "androidx.camera:camera-core:$camerax_version"//如果你要使用Camera2的扩展功能implementation "androidx.camera:camera-camera2:$camerax_version"// 如果你要使用 CameraX Viewimplementation "androidx.camera:camera-view:$camerax_view_version"// 如果你要使用 CameraX 的 扩展功能implementation "androidx.camera:camera-extensions:$camerax_ext_version"//申请权限implementation 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.5'//add at the end of android{} blockcompileOptions {    sourceCompatibility JavaVersion.VERSION_1_8            targetCompatibility JavaVersion.VERSION_1_8}//Collection KTXimplementation "androidx.collection:collection-ktx:1.1.0"//Permissionximplementation 'com.permissionx.guolindev:permissionx:1.3.0'implementation 'com.permissionx.guolindev:permission-support:1.3.0'//协程implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.1"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Gradle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Gradle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gradle知识点汇总</title>
    <link href="/2023/08/31/docs/gradle/gradle-zhi-shi-dian-hui-zong/"/>
    <url>/2023/08/31/docs/gradle/gradle-zhi-shi-dian-hui-zong/</url>
    
    <content type="html"><![CDATA[<h1 id="依赖项配置">          <a href="#依赖项配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#依赖项配置" class="headerlink" title="依赖项配置"></a>依赖项配置</h1>      <div class="table-container"><table><thead><tr><th>配置</th><th>说明</th></tr></thead><tbody><tr><td>implementation</td><td>Gradle 会将依赖项添加到编译类路径，并将依赖项打包到编译输出。不过，当模块配置 implementation 依赖项时，其他模块只有在运行时才能使用该依赖项。</td></tr><tr><td>api</td><td>Gradle 会将依赖项添加到编译类路径和编译输出。当一个模块包含 api 依赖项时，会让 Gradle 了解该模块要以传递方式将该依赖项导出到其他模块，以便这些模块在运行时和编译时都可以使用该依赖项。</td></tr><tr><td>compileOnly</td><td>Gradle 只会将依赖项添加到编译类路径（也就是说，不会将其添加到编译输出）。</td></tr><tr><td>runtimeOnly</td><td>Gradle 只会将依赖项添加到编译输出，以便在运行时使用。也就是说，不会将其添加到编译类路径。</td></tr><tr><td>annotationProcessor</td><td>要添加对作为注解处理器的库的依赖关系，必须使用 annotationProcessor 配置将其添加到注解处理器类路径。</td></tr></tbody></table></div>]]></content>
    
    
    <categories>
      
      <category>Gradle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Gradle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>根据flavor设置不同启动页面</title>
    <link href="/2023/08/31/docs/gradle/gen-ju-flavor-she-zhi-bu-tong-qi-dong-ye-mian/"/>
    <url>/2023/08/31/docs/gradle/gen-ju-flavor-she-zhi-bu-tong-qi-dong-ye-mian/</url>
    
    <content type="html"><![CDATA[<pre class="line-numbers language-Groovy" data-language="Groovy"><code class="language-Groovy">defaultConfig {&nbsp; &nbsp;......&nbsp; &nbsp;// 先在默认配置中定义两个变量main_activity_key和oem_main_activity_key，并赋初始值&nbsp; &nbsp;manifestPlaceholders += [main_activity_key: "android.intent.action.MAIN",&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; oem_main_activity_key: "android.intent.action.NO_MAIN"]&nbsp; //不能单独写两个manifestPlaceholders，必须是一个数组，不然编译通不过&nbsp; &nbsp;......}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Groovy" data-language="Groovy"><code class="language-Groovy">productFlavors {    OemA {        buildConfigField "int", "oem_type", "0"    }    OemB {        buildConfigField "int", "oem_type", "0"    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Groovy" data-language="Groovy"><code class="language-Groovy">// 遍历OEM版本，在目标客户中根据需要替换main_activity_key和oem_main_activity_key的值productFlavors.all {flavor -&gt;    if (flavor.name.contains("OemA")) {        flavor.manifestPlaceholders = [main_activity_key:        "androidintent.action.NO_MAIN",        oem_main_activity_key: "android.intent.action.MAIN"]    } else if (flavor.name.contains("OemB")) {        flavor.manifestPlaceholders = [main_activity_key: "android.intent.action.MAIN",&nbsp; &nbsp;oem_main_activity_key: "android.intent.action.NO_MAIN"]    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在Manifest中修改两个Activity的action属性</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span>    <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.ui.activity.OemAActivity<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>excludeFromRecents</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>launchMode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>singleInstance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>screenOrientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>landscape<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@android:style/Theme.NoTitleBar.Fullscreen<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${oem_main_activity_key}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> // 修改属性        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.category.LAUNCHER<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span>    <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.ui.activity.OemBActivity<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>excludeFromRecents</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>launchMode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>singleInstance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>screenOrientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>landscape<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@android:style/Theme.NoTitleBar.Fullscreen<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${main_activity_key}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> // 修改属性        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.category.LAUNCHER<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Gradle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Gradle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>仓库中有某个库依然报错找不到某个依赖库</title>
    <link href="/2023/08/31/docs/gradle/cang-ku-zhong-you-mou-ge-ku-yi-ran-bao-cuo-zhao-bu-dao-mou-ge-yi-lai-ku/"/>
    <url>/2023/08/31/docs/gradle/cang-ku-zhong-you-mou-ge-ku-yi-ran-bao-cuo-zhao-bu-dao-mou-ge-yi-lai-ku/</url>
    
    <content type="html"><![CDATA[<p>gradle同步时提示找不到某个依赖库</p><p>先排除是不是网络有问题，或者这个库是不是真的不存在</p><p>但是大部分情况下上面这两个都是没问题的，还是会提示找不到某个依赖库，类似这样</p><pre class="line-numbers language-none"><code class="language-none">Where:    Build file xxx build.gradle.kts' line: 4    * What went wrong:    Plugin [id:"xxx:" x.x.x ，apply: false] was not found in any of the following sources:    -Gradle Core Plugins (plugin is not in 'org.gradle' namespace)    -plugin Repositories (could not resolve plugin artifact xxx:x.x.x)    Searched in the following repositories:    maven(http://xxx1/repository/maven-releases/)    maven2(http://xxx2/repository/maven-releases/)    Gradle Central Plugin Repository    Google     MavenRepoTry:&gt; Run with --stacktrace option to get the stack trace .&gt; Run with --debug option to get more log output.&gt; Run with --scan to get full insights.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种情况可以加上<code>--info</code>之后再执行一下，看看控制台输出的具体日志，有可能会出现类似下面的内容:</p><pre class="line-numbers language-none"><code class="language-none">...Failed to get resource: HEAD.[HTTP HTTP/1.1 502 Bad Gateway: http://xxx2/repository/maven-releases/xxx.pom)]FAILURE: Build failed with an exception....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>明明配置了多个仓库，但是gradle只在其中一个仓库中找不到这个依赖就直接报错停止了，没有继续从其他仓库中找。</p><p>这种情况是因为gradle下载依赖会判断 http status code，正常情况下如果仓库中没有某个依赖，返回的code应该是404，这时gradle才会继续从下一个仓库中寻找，但如果仓库服务器返回了不明的code，gralde就会视为程序异常直接抛出异常提示build失败。上面这个例子就是因为这个maven2仓库返回了502的状态导致构建直接异常。</p><p>解决办法，调整gradle脚本中仓库地址的顺序，尽量将官方的仓库放到前面，将第三方仓库或者自建的maven仓库放到后面。<br>类似这样：</p><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">pluginManagement <span class="token punctuation">{</span>    <span class="token keyword">repositories</span> <span class="token punctuation">{</span>        <span class="token function">gradlePluginPortal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">google</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        maven <span class="token punctuation">{</span>            <span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"http://xxx1"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        maven <span class="token punctuation">{</span>            <span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"http://xxx2"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果报错不是这个原因的话，再根据实际日志信息进行排查</p>]]></content>
    
    
    <categories>
      
      <category>Gradle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Gradle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用fat-aar 打包依赖库到aar</title>
    <link href="/2023/08/31/docs/gradle/shi-yong-fat-aar-da-bao-yi-lai-ku-dao-aar/"/>
    <url>/2023/08/31/docs/gradle/shi-yong-fat-aar-da-bao-yi-lai-ku-dao-aar/</url>
    
    <content type="html"><![CDATA[<p><span class="exturl"><a class="exturl__link" href="https://github.com/kezong/fat-aar-android">https://github.com/kezong/fat-aar-android</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>项目根目录 <code>build.gradle</code> 添加</p><pre class="line-numbers language-Groovy" data-language="Groovy"><code class="language-Groovy">buildscript {    repositories {        maven { url "https://plugins.gradle.org/m2/" }    }    dependencies {        classpath 'com.kezong:fat-aar:1.3.1'    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>module</code> 的 <code>build.gradle</code> 添加：</p><pre class="line-numbers language-Groovy" data-language="Groovy"><code class="language-Groovy">apply plugin: 'com.kezong.fat-aar'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用：<br>需要打包进aar的库使用 <code>embed</code> ，而不是 <code>implementation</code></p><pre class="line-numbers language-Groovy" data-language="Groovy"><code class="language-Groovy">embed(name: 'abcdef', ext: 'aar')embed('com.abc.abc:abc:1.2.3')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Gradle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Gradle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssh-agent</title>
    <link href="/2023/08/31/docs/ssh/ssh-agent/"/>
    <url>/2023/08/31/docs/ssh/ssh-agent/</url>
    
    <content type="html"><![CDATA[<p>ssh-add命令是把专用密钥添加到ssh-agent的高速缓存中,从而提高ssh的认证速度。</p>        <h3 id="命令语法">          <a href="#命令语法" class="heading-link"><i class="fas fa-link"></i></a><a href="#命令语法" class="headerlink" title="命令语法"></a>命令语法</h3>      <pre class="line-numbers language-none"><code class="language-none">ssh-add [-cDdLlXx] [-t life] [file ...]ssh-add -s pkcs11ssh-add -e pkcs11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>        <h3 id="命令选项">          <a href="#命令选项" class="heading-link"><i class="fas fa-link"></i></a><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h3>      <pre class="line-numbers language-none"><code class="language-none">-D：删除ssh-agent中的所有密钥.-d：从ssh-agent中的删除密钥-e pkcs11：删除PKCS#11共享库pkcs1提供的钥匙。-s pkcs11：添加PKCS#11共享库pkcs1提供的钥匙。-L：显示ssh-agent中的公钥-l：显示ssh-agent中的密钥-t life：对加载的密钥设置超时时间，超时ssh-agent将自动卸载密钥-X：对ssh-agent进行解锁-x：对ssh-agent进行加锁<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="开启ssh-agent">          <a href="#开启ssh-agent" class="heading-link"><i class="fas fa-link"></i></a><a href="#开启ssh-agent" class="headerlink" title="开启ssh-agent"></a>开启ssh-agent</h3>      <p>默认操作系统是不开启ssh-agent的，需要手动打开</p><ul><li><p>Linux:</p><blockquote><p>ssh-agent bash</p></blockquote></li><li><p>Windows: </p><p>  使用管理员打开Power Shell后执行：</p><blockquote><p>Start-Service ssh-agent</p></blockquote><p>  也可以设置自启动：</p><blockquote><p>Set-Service ssh-agent -StartupType Auto</p></blockquote></li></ul>        <h3 id="把专用密钥添加到ssh-agent的高速缓存中">          <a href="#把专用密钥添加到ssh-agent的高速缓存中" class="heading-link"><i class="fas fa-link"></i></a><a href="#把专用密钥添加到ssh-agent的高速缓存中" class="headerlink" title="把专用密钥添加到ssh-agent的高速缓存中"></a>把专用密钥添加到ssh-agent的高速缓存中</h3>      <blockquote><p>ssh-add ~/.ssh/id_dsa</p></blockquote>        <h3 id="从ssh-agent中删除密钥">          <a href="#从ssh-agent中删除密钥" class="heading-link"><i class="fas fa-link"></i></a><a href="#从ssh-agent中删除密钥" class="headerlink" title="从ssh-agent中删除密钥"></a>从ssh-agent中删除密钥</h3>      <blockquote><p>ssh-add -d ~/.ssh/id_dsa.pub</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>ssh</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssh-config</title>
    <link href="/2023/08/31/docs/ssh/ssh-config/"/>
    <url>/2023/08/31/docs/ssh/ssh-config/</url>
    
    <content type="html"><![CDATA[<p>ssh配置文件详解</p><p>1、/etc/ssh/ssh_config配置文件</p><div class="table-container"><table><thead><tr><th>选项参数</th><th>说明</th></tr></thead><tbody><tr><td>Host *</td><td>选项“Host”只对能够匹配后面字串的计算机有效。“*”表示所有的计算机。</td></tr><tr><td>ForwardAgent no</td><td>设置连接是否经过验证代理（如果存在）转发给远程计算机。</td></tr><tr><td>ForwardX11 no</td><td>设置X11连接是否被自动重定向到安全的通道和显示集（DISPLAY set）</td></tr><tr><td>RhostsAuthentication no</td><td>设置是否使用基于rhosts的安全验证</td></tr><tr><td>RhostsRSAAuthentication no</td><td>设置是否使用用RSA算法的基于rhosts的安全验证</td></tr><tr><td>RSAAuthentication yes</td><td>设置是否使用RSA算法进行安全验证</td></tr><tr><td>PasswordAuthentication yes</td><td>设置是否使用口令验证</td></tr><tr><td>FallBackToRsh no</td><td>设置如果用ssh连接出现错误是否自动使用rsh</td></tr><tr><td>UseRsh no</td><td>设置是否在这台计算机上使用“rlogin/rsh”</td></tr><tr><td>BatchMode no</td><td>如果设为“yes”，passphrase/password（交互式输入口令）的提示将被禁止。当不能交互式输入口令的时候，这个选项对脚本文件和批处理任务十分有用</td></tr><tr><td>CheckHostIP yes</td><td>设置ssh是否查看连接到服务器的主机的IP地址以防止DNS欺骗。建议设置为“yes”</td></tr><tr><td>StrictHostKeyChecking no</td><td>如果设置成“yes”，ssh就不会自动把计算机的密匙加入“$HOME/.ssh/known_hosts”文件，并且一旦计算机的密匙发生了变化，就拒绝连接</td></tr><tr><td>IdentityFile ~/.ssh/identity</td><td>设置从哪个文件读取用户的RSA安全验证标识</td></tr><tr><td>Port 22</td><td>设置连接到远程主机的端口</td></tr><tr><td>Cipher blowfish</td><td>设置加密用的密码</td></tr><tr><td>EscapeChar ~</td><td>设置escape字符</td></tr></tbody></table></div><p>2、/etc/ssh/sshd_config配置文件</p><div class="table-container"><table><thead><tr><th>参数选项</th><th>说明</th></tr></thead><tbody><tr><td>Port 22</td><td>SH 预设使用 22 这个 port，您也可以使用多的 port ！</td></tr><tr><td>Protocol 2,1</td><td>选择的 SSH 协议版本，可以是 1 也可以是 2 ，如果要同时支持两者，就必须要使用 2,1 这个分隔了！</td></tr><tr><td>ListenAddress 0.0.0.0</td><td>监听的主机适配卡！举个例子来说，如果您有两个 IP，分别是 192.168.0.100 及 192.168.2.20 ，那么只想要开放 192.168.0.100 时，就可以写如同下面的样式：</td></tr><tr><td>ListenAddress 192.168.0.100</td><td>只监听来自 192.168.0.100 这个 IP 的SSH联机。如果不使用设定的话，则预设所有接口均接受 SSH</td></tr><tr><td>PidFile /var/run/sshd.pid</td><td>可以放置 SSHD 这个 PID 的档案！左列为默认值</td></tr><tr><td>LoginGraceTime 600</td><td>当使用者连上 SSH server 之后，会出现输入密码的画面，在该画面中，在多久时间内没有成功连上 SSH server ，就断线！时间为秒！</td></tr><tr><td>Compression yes</td><td>是否可以使用压缩指令？</td></tr><tr><td>HostKey /etc/ssh/ssh_host_key</td><td>SH version 1 使用的私钥</td></tr><tr><td>HostKey /etc/ssh/ssh_host_rsa_key</td><td>SH version 2 使用的 RSA 私钥</td></tr><tr><td>HostKey /etc/ssh/ssh_host_dsa_key</td><td>SH version 2 使用的 DSA 私钥</td></tr><tr><td>KeyRegenerationInterval 3600</td><td>由前面联机的说明可以知道， version 1 会使用 server 的 Public Key ，每隔一段时间来重新建立一次！时间为秒！</td></tr><tr><td>ServerKeyBits 768</td><td>erver key 的长度！</td></tr><tr><td>SyslogFacility AUTH</td><td>当有人使用 SSH 登入系统的时候，SSH会记录信息</td></tr><tr><td>LogLevel INFO</td><td>登录记录的等级—》全部</td></tr><tr><td>PermitRootLogin no</td><td>是否允许 root 登入！预设是允许的，但是建议设定成 no！</td></tr><tr><td>UserLogin no</td><td>在 SSH 底下本来就不接受 login 这个程序的登入！</td></tr><tr><td>StrictModes yes</td><td>当使用者的 host key 改变之后，Server 就不接受联机</td></tr><tr><td>RSAAuthentication yes</td><td>是否使用纯的 RSA 认证！？仅针对 version 1 ！</td></tr><tr><td>PubkeyAuthentication yes</td><td>是否允许 Public Key ？只有 version 2</td></tr><tr><td>AuthorizedKeysFile   .ssh/authorized_keys</td><td>设定若要使用不需要密码登入的账号时，那么那个账号的存放档案所在档名！</td></tr><tr><td>RhostsAuthentication no</td><td>本机系统不使用 .rhosts ， .rhosts 不安全！</td></tr><tr><td>IgnoreRhosts yes</td><td>是否取消使用 ~/.ssh/.rhosts 来做为认证！</td></tr><tr><td>RhostsRSAAuthentication no</td><td>针对 version 1 ，使用 rhosts 档案在/etc/hosts.equiv配合 RSA 演算方式来进行认证！</td></tr><tr><td>HostbasedAuthentication no</td><td>这个项目与上面的项目类似，不过是给 version 2 使用的！</td></tr><tr><td>IgnoreUserKnownHosts no</td><td>是否忽略家目录内的 ~/.ssh/known_hosts 这个档案所记录的主机内容</td></tr><tr><td>PasswordAuthentication yes</td><td>密码验证当然是需要的！</td></tr><tr><td>PermitEmptyPasswords no</td><td>上面那一项如果设定为 yes 的话，这一项就最好设定为 no ，这个项目在是否允许以空的密码登入！</td></tr><tr><td>ChallengeResponseAuthentication yes</td><td>挑战任何的密码认证！所以，任何 login.conf 规定的认证方式，均可适用！</td></tr><tr><td>PAMAuthenticationViaKbdInt yes</td><td>是否启用其它的 PAM 模块！启用这个模块将会导致 PasswordAuthentication 设定失效！</td></tr><tr><td>与Kerberos 有关的参数设定！底下不用设定</td><td></td></tr><tr><td>KerberosAuthentication no</td><td></td></tr><tr><td>KerberosOrLocalPasswd yes</td><td></td></tr><tr><td>KerberosTicketCleanup yes</td><td></td></tr><tr><td>KerberosTgtPassing no</td><td></td></tr><tr><td>有关在 X-Window 底下使用的相关设定</td><td></td></tr><tr><td>X11Forwarding yes</td><td></td></tr><tr><td>X11DisplayOffset 10</td><td></td></tr><tr><td>X11UseLocalhost yes</td><td></td></tr><tr><td>PrintMotd no</td><td>登入后是否显示出一些信息呢？例如上次登入的时间、地点等，预设是 yes ，但是，如果为了安全，可以考虑改为 no ！</td></tr><tr><td>PrintLastLog yes</td><td>显示上次登入的信息！预设也是 yes</td></tr><tr><td>KeepAlive yes</td><td>一般而言，如果设定这项目的话，那么 SSH Server 会传送KeepAlive 的讯息给 Client 端，以确保两者的联机正常！在这个情况下，任何一端死掉后， SSH 可以立刻知道！而不会有僵尸程序的发生！</td></tr><tr><td>UsePrivilegeSeparation yes</td><td>使用者的权限设定项目！</td></tr><tr><td>MaxStartups 10</td><td>同时允许几个尚未登入的联机画面</td></tr><tr><td>DenyUsers *</td><td>设定受抵挡的使用者名称</td></tr><tr><td>AllowUsers *</td><td>设定允许的使用者名称</td></tr></tbody></table></div>]]></content>
    
    
    <categories>
      
      <category>ssh</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>抓包</title>
    <link href="/2023/08/31/docs/others/zhua-bao/"/>
    <url>/2023/08/31/docs/others/zhua-bao/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb push tcpdump /data/local/tmp<br><br>adb shell <span class="hljs-built_in">chmod</span> 777 /data/local/tmp/tcpdump<br><br>/data/local/tmp/tcpdump -i any -p -X -s 0 -w /sdcard/test.pcap<br><br>adb pull /sdcard/test.pcap E:\Files\pcaps<br><br></code></pre></td></tr></tbody></table></figure><p>监视指定主机的数据包</p><p>打印所有进入或离开<code>sundown</code>的数据包.</p><figure class="highlight ebnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">tcpdump host sundown</span><br></code></pre></td></tr></tbody></table></figure><p>也可以指定ip,例如截获所有210.27.48.1 的主机收到的和发出的所有的数据包</p><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">tcpdump</span> host <span class="hljs-number">210.27.48.1</span> <br></code></pre></td></tr></tbody></table></figure><p>打印<code>helios</code> 与 <code>hot</code> 或者与 <code>ace</code> 之间通信的数据包</p><figure class="highlight livescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">tcpdump host helios <span class="hljs-keyword">and</span> <span class="hljs-string">\(</span> hot <span class="hljs-keyword">or</span> ace <span class="hljs-string">\)</span><br></code></pre></td></tr></tbody></table></figure><p>截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信</p><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">tcpdump</span> host <span class="hljs-number">210.27.48.1</span> and \ (<span class="hljs-number">210.27.48.2</span> or <span class="hljs-number">210.27.48.3</span> \) <br></code></pre></td></tr></tbody></table></figure><p>打印ace与任何其他主机之间通信的IP 数据包, 但不包括与helios之间的数据包.</p><figure class="highlight armasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">tcpdump</span> <span class="hljs-built_in">ip</span> host ace <span class="hljs-keyword">and</span> not helios<br></code></pre></td></tr></tbody></table></figure><p>如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：</p><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">tcpdump</span> ip host <span class="hljs-number">210.27.48.1</span> and ! <span class="hljs-number">210.27.48.2</span><br></code></pre></td></tr></tbody></table></figure><p>截获主机hostname发送的所有数据</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">tcpdump -<span class="hljs-selector-tag">i</span> eth0 <span class="hljs-attribute">src</span> host hostname<br></code></pre></td></tr></tbody></table></figure><p>监视所有送到主机hostname的数据包</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">tcpdump -<span class="hljs-selector-tag">i</span> eth0 dst host hostname<br></code></pre></td></tr></tbody></table></figure><p>监视指定主机和端口的数据包<br>如果想要获取主机210.27.48.1接收或发出的telnet包，使用如下命令</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tcpdump</span> tcp port <span class="hljs-number">23</span> and host <span class="hljs-number">210.27.48.1</span><br></code></pre></td></tr></tbody></table></figure><p>对本机的udp 123 端口进行监视 123 为ntp的服务端口</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tcpdump</span> udp port <span class="hljs-number">123</span> <br></code></pre></td></tr></tbody></table></figure><p>监视指定网络的数据包<br>打印本地主机与Berkeley网络上的主机之间的所有通信数据包(nt: ucb-ether, 此处可理解为’Berkeley网络’的网络地址,此表达式最原始的含义可表达为: 打印网络地址为ucb-ether的所有数据包)</p><figure class="highlight dos"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">tcpdump <span class="hljs-built_in">net</span> ucb-ether<br></code></pre></td></tr></tbody></table></figure><p>打印所有通过网关snup的ftp数据包(注意, 表达式被单引号括起来了, 这可以防止shell对其中的括号进行错误解析)</p><figure class="highlight haskell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">tcpdump</span> 'gateway snup and (port ftp or ftp-<span class="hljs-class"><span class="hljs-keyword">data</span>)'</span><br></code></pre></td></tr></tbody></table></figure><p>打印所有源地址或目标地址是本地主机的IP数据包<br>(如果本地网络通过网关连到了另一网络, 则另一网络并不能算作本地网络.(nt: 此句翻译曲折,需补充).localnet 实际使用时要真正替换成本地网络的名字)</p><figure class="highlight armasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">tcpdump</span> <span class="hljs-built_in">ip</span> <span class="hljs-keyword">and</span> not net localnet<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Others</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习正则表达式的简单方法</title>
    <link href="/2023/08/31/docs/zheng-ze-biao-da-shi/xue-xi-zheng-ze-biao-da-shi-de-jian-dan-fang-fa/"/>
    <url>/2023/08/31/docs/zheng-ze-biao-da-shi/xue-xi-zheng-ze-biao-da-shi-de-jian-dan-fang-fa/</url>
    
    <content type="html"><![CDATA[<p><span class="exturl"><a class="exturl__link" href="https://github.com/cdoco/learn-regex-zh">源文件地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><br><p align="center"><img src="https://i.imgur.com/bYwl7Vf.png" alt="Learn Regex"></p><br>        <h2 id="什么是正则表达式-？">          <a href="#什么是正则表达式-？" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是正则表达式-？" class="headerlink" title="什么是正则表达式 ？"></a>什么是正则表达式 ？</h2>      <blockquote><p>正则表达式是一种被用于从文本中检索符合某些特定模式的文本。</p></blockquote><p>正则表达式是从左到右来匹配一个字符串的。“Regular Expression”这个词太长了，我们通常使用它的缩写“regex”或者“regexp”。<br>正则表达式可以被用来替换字符串中的文本、验证表单、基于模式匹配从一个字符串中提取字符串等等。<br><br></p><p>想象一下，您正在编写应用程序，并且您希望在用户选择用户名时设置规则。我们希望用户名可以包含字母，数字，下划线和连字符。<br>为了让它看起来不丑，我们还想限制用户名中的字符数量。这时我们可以使用以下正则表达式来验证用户名：</p><p align="center"><img src="https://i.imgur.com/UrDb9qc.png" alt="Regular expression"></p><p>上面这个正则表达式可以匹配 <code>john_doe</code>，<code>jo-hn_doe</code> 和 <code>john12_as</code>。但是它不能匹配 <code>Jo</code>，因为该字符串里面包含大写字符，并且它太短了。</p>        <h2 id="目录">          <a href="#目录" class="heading-link"><i class="fas fa-link"></i></a><a href="#目录" class="headerlink" title="目录"></a>目录</h2>      <ul><li><a href="#1-%E5%9F%BA%E6%9C%AC%E5%8C%B9%E9%85%8D">基本匹配</a></li><li><a href="#2-%E5%85%83%E5%AD%97%E7%AC%A6">元字符</a><ul><li><a href="#21-%E8%8B%B1%E6%96%87%E5%8F%A5%E5%8F%B7">英文句号</a></li><li><a href="#22-%E5%AD%97%E7%AC%A6%E9%9B%86">字符集</a><ul><li><a href="#221-%E5%90%A6%E5%AE%9A%E5%AD%97%E7%AC%A6%E9%9B%86">否定字符集</a></li></ul></li><li><a href="#23-%E9%87%8D%E5%A4%8D">重复</a><ul><li><a href="#231-%E6%98%9F%E5%8F%B7">星号</a></li><li><a href="#232-%E5%8A%A0%E5%8F%B7">加号</a></li><li><a href="#233-%E9%97%AE%E5%8F%B7">问号</a></li></ul></li><li><a href="#24-%E8%8A%B1%E6%8B%AC%E5%8F%B7">花括号</a></li><li><a href="#25-%E5%AD%97%E7%AC%A6%E7%BB%84">字符组</a></li><li><a href="#26-%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84">分支结构</a></li><li><a href="#27-%E8%BD%AC%E4%B9%89%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6">转义特殊字符</a></li><li><a href="#28-%E5%AE%9A%E4%BD%8D%E7%AC%A6">定位符</a><ul><li><a href="#281-%E6%8F%92%E5%85%A5%E7%AC%A6%E5%8F%B7">插入符号</a></li><li><a href="#282-%E7%BE%8E%E5%85%83%E7%AC%A6%E5%8F%B7">美元符号</a></li></ul></li></ul></li><li><a href="#3-%E7%AE%80%E5%86%99%E5%AD%97%E7%AC%A6%E9%9B%86">简写字符集</a></li><li><a href="#4-%E6%96%AD%E8%A8%80">断言</a><ul><li><a href="#41-%E6%AD%A3%E5%90%91%E5%85%88%E8%A1%8C%E6%96%AD%E8%A8%80">正向先行断言</a></li><li><a href="#42-%E8%B4%9F%E5%90%91%E5%85%88%E8%A1%8C%E6%96%AD%E8%A8%80">负向先行断言</a></li><li><a href="#43-%E6%AD%A3%E5%90%91%E5%90%8E%E8%A1%8C%E6%96%AD%E8%A8%80">正向后行断言</a></li><li><a href="#44-%E8%B4%9F%E5%90%91%E5%90%8E%E8%A1%8C%E6%96%AD%E8%A8%80">负向后行断言</a></li></ul></li><li><a href="#5-%E6%A0%87%E8%AE%B0">标记</a><ul><li><a href="#51-%E4%B8%8D%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99">不区分大小写</a></li><li><a href="#52-%E5%85%A8%E5%B1%80%E6%90%9C%E7%B4%A2">全局搜索</a></li><li><a href="#53-%E5%A4%9A%E8%A1%8C%E5%8C%B9%E9%85%8D">多行匹配</a></li></ul></li><li><a href="#%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">常用正则表达式</a></li></ul>        <h2 id="1-基本匹配">          <a href="#1-基本匹配" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-基本匹配" class="headerlink" title="1. 基本匹配"></a>1. 基本匹配</h2>      <p>正则表达式只是我们用于在文本中检索字符串的模式。例如正则表达式 <code>cat</code>，表示：字母 <code>c</code> 后面跟着一个字母 <code>a</code>，再后面跟着一个字母 <code>t</code>。</p><pre>"cat" =&gt; The <a href="#learn-regex"><strong>cat</strong></a> sat on the mat</pre><p>正则表达式 <code>123</code> 会匹配字符串“123”。通过将正则表达式中的每个字符逐个与要匹配的字符串中的每个字符进行比较，来完成正则匹配。<br>正则表达式通常区分大小写，因此正则表达式 <code>Cat</code> 与字符串“cat”不匹配。</p><pre>"Cat" =&gt; The cat sat on the <a href="#learn-regex"><strong>Cat</strong></a></pre>        <h2 id="2-元字符">          <a href="#2-元字符" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-元字符" class="headerlink" title="2. 元字符"></a>2. 元字符</h2>      <p>元字符是正则表达式的基本组成元素。元字符在这里跟它通常表达的意思不一样，而是以某种特殊的含义去解释。有些元字符在写在方括号内时有特殊含义。<br>元字符如下：</p><div class="table-container"><table><thead><tr><th align="center">元字符</th><th>描述</th></tr></thead><tbody><tr><td align="center">.</td><td>匹配除换行符以外的任意字符。</td></tr><tr><td align="center">[ ]</td><td>字符类，匹配方括号中包含的任意字符。</td></tr><tr><td align="center">[^ ]</td><td>否定字符类。匹配方括号中不包含的任意字符</td></tr><tr><td align="center">*</td><td>匹配前面的子表达式零次或多次</td></tr><tr><td align="center">+</td><td>匹配前面的子表达式一次或多次</td></tr><tr><td align="center">?</td><td>匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。</td></tr><tr><td align="center">{n,m}</td><td>花括号，匹配前面字符至少 n 次，但是不超过 m 次。</td></tr><tr><td align="center">(xyz)</td><td>字符组，按照确切的顺序匹配字符 xyz。</td></tr><tr><td align="center">|</td><td>分支结构，匹配符号之前的字符或后面的字符。</td></tr><tr><td align="center">\</td><td>转义符，它可以还原元字符原来的含义，允许你匹配保留字符 <code>[ ] ( ) { } . * + ? ^ $ \ |</code></td></tr><tr><td align="center">^</td><td>匹配行的开始</td></tr><tr><td align="center">$</td><td>匹配行的结束</td></tr></tbody></table></div>        <h2 id="2-1-英文句号">          <a href="#2-1-英文句号" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-1-英文句号" class="headerlink" title="2.1 英文句号"></a>2.1 英文句号</h2>      <p>英文句号 <code>.</code> 是元字符的最简单的例子。元字符 <code>.</code> 可以匹配任意单个字符。它不会匹配换行符和新行的字符。例如正则表达式 <code>.ar</code>，表示：任意字符后面跟着一个字母 <code>a</code>，<br>再后面跟着一个字母 <code>r</code>。</p><pre>".ar" =&gt; The <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.</pre>        <h2 id="2-2-字符集">          <a href="#2-2-字符集" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-2-字符集" class="headerlink" title="2.2 字符集"></a>2.2 字符集</h2>      <p>字符集也称为字符类。方括号被用于指定字符集。使用字符集内的连字符来指定字符范围。方括号内的字符范围的顺序并不重要。<br>例如正则表达式 <code>[Tt]he</code>，表示：大写 <code>T</code> 或小写 <code>t</code> ，后跟字母 <code>h</code>，再后跟字母 <code>e</code>。</p><pre>"[Tt]he" =&gt; <a href="#learn-regex"><strong>The</strong></a> car parked in <a href="#learn-regex"><strong>the</strong></a> garage.</pre><p>然而，字符集中的英文句号表示它字面的含义。正则表达式 <code>ar[.]</code>，表示小写字母 <code>a</code>，后面跟着一个字母 <code>r</code>，再后面跟着一个英文句号 <code>.</code> 字符。</p><pre>"ar[.]" =&gt; A garage is a good place to park a c<a href="#learn-regex"><strong>ar.</strong></a></pre>        <h3 id="2-2-1-否定字符集">          <a href="#2-2-1-否定字符集" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-2-1-否定字符集" class="headerlink" title="2.2.1 否定字符集"></a>2.2.1 否定字符集</h3>      <p>一般来说插入字符 <code>^</code> 表示一个字符串的开始，但是当它在方括号内出现时，它会取消字符集。例如正则表达式 <code>[^c]ar</code>，表示：除了字母 <code>c</code> 以外的任意字符，后面跟着字符 <code>a</code>，<br>再后面跟着一个字母 <code>r</code>。</p><pre>"[^c]ar" =&gt; The car <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.</pre>        <h2 id="2-3-重复">          <a href="#2-3-重复" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-3-重复" class="headerlink" title="2.3 重复"></a>2.3 重复</h2>      <p>以下元字符 <code>+</code>，<code>*</code> 或 <code>?</code> 用于指定子模式可以出现多少次。这些元字符在不同情况下的作用不同。</p>        <h3 id="2-3-1-星号">          <a href="#2-3-1-星号" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-3-1-星号" class="headerlink" title="2.3.1 星号"></a>2.3.1 星号</h3>      <p>星号 <code>*</code> 表示匹配上一个匹配规则零次或多次。正则表达式 <code>a*</code> 表示小写字母 <code>a</code> 可以重复零次或者多次。但是它如果出现在字符集或者字符类之后，它表示整个字符集的重复。<br>例如正则表达式 <code>[a-z]*</code>，表示：一行中可以包含任意数量的小写字母。</p><pre>"[a-z]*" =&gt; T<a href="#learn-regex"><strong>he</strong></a> <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>parked</strong></a> <a href="#learn-regex"><strong>in</strong></a> <a href="#learn-regex"><strong>the</strong></a> <a href="#learn-regex"><strong>garage</strong></a> #21.</pre><p>星号 <code>*</code> 可以与元符号 <code>.</code> 用在一起，用来匹配任意字符串 <code>.*</code>。星号 <code>*</code> 可以与空格符 <code>\s</code> 一起使用，用来匹配一串空格字符。<br>例如正则表达式 <code>\s*cat\s*</code>，表示：零个或多个空格，后面跟小写字母 <code>c</code>，再后面跟小写字母 <code>a</code>，再在后面跟小写字母 <code>t</code>，后面再跟零个或多个空格。</p><pre>"\s*cat\s*" =&gt; The fat<a href="#learn-regex"><strong> cat </strong></a>sat on the <a href="#learn-regex"><strong>cat</strong></a>.</pre>        <h3 id="2-3-2-加号">          <a href="#2-3-2-加号" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-3-2-加号" class="headerlink" title="2.3.2 加号"></a>2.3.2 加号</h3>      <p>加号 <code>+</code> 表示匹配上一个字符一次或多次。例如正则表达式 <code>c.+t</code>，表示：一个小写字母 <code>c</code>，后跟任意数量的字符，后跟小写字母 <code>t</code>。</p><pre>"c.+t" =&gt; The fat <a href="#learn-regex"><strong>cat sat on the mat</strong></a>.</pre>        <h3 id="2-3-3-问号">          <a href="#2-3-3-问号" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-3-3-问号" class="headerlink" title="2.3.3 问号"></a>2.3.3 问号</h3>      <p>在正则表达式中，元字符 <code>?</code> 用来表示前一个字符是可选的。该符号匹配前一个字符零次或一次。<br>例如正则表达式 <code>[T]?he</code>，表示：可选的大写字母 <code>T</code>，后面跟小写字母 <code>h</code>，后跟小写字母 <code>e</code>。</p><pre>"[T]he" =&gt; <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.</pre><pre>"[T]?he" =&gt; <a href="#learn-regex"><strong>The</strong></a> car is parked in t<a href="#learn-regex"><strong>he</strong></a> garage.</pre>        <h2 id="2-4-花括号">          <a href="#2-4-花括号" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-4-花括号" class="headerlink" title="2.4 花括号"></a>2.4 花括号</h2>      <p>在正则表达式中花括号（也被称为量词？）用于指定字符或一组字符可以重复的次数。例如正则表达式 <code>[0-9]{2,3}</code>，表示：匹配至少 2 位数字但不超过 3 位（0 到 9 范围内的字符）。</p><pre>"[0-9]{2,3}" =&gt; The number was 9.<a href="#learn-regex"><strong>999</strong></a>7 but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.</pre><p>我们可以省略第二个数字。例如正则表达式 <code>[0-9]{2,}</code>，表示：匹配 2 个或更多个数字。如果我们也删除逗号，则正则表达式 <code>[0-9]{2}</code>，表示：匹配正好为 2 位数的数字。</p><pre>"[0-9]{2,}" =&gt; The number was 9.<a href="#learn-regex"><strong>9997</strong></a> but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.</pre><pre>"[0-9]{2}" =&gt; The number was 9.<a href="#learn-regex"><strong>99</strong></a><a href="#learn-regex"><strong>97</strong></a> but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.</pre>        <h2 id="2-5-字符组">          <a href="#2-5-字符组" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-5-字符组" class="headerlink" title="2.5 字符组"></a>2.5 字符组</h2>      <p>字符组是一组写在圆括号内的子模式 <code>(...)</code>。正如我们在正则表达式中讨论的那样，如果我们把一个量词放在一个字符之后，它会重复前一个字符。<br>但是，如果我们把量词放在一个字符组之后，它会重复整个字符组。<br>例如正则表达式 <code>(ab)*</code> 表示匹配零个或多个的字符串“ab”。我们还可以在字符组中使用元字符 <code>|</code>。例如正则表达式 <code>(c|g|p)ar</code>，表示：小写字母 <code>c</code>、<code>g</code> 或 <code>p</code> 后面跟字母 <code>a</code>，后跟字母 <code>r</code>。</p><pre>"(c|g|p)ar" =&gt; The <a href="#learn-regex"><strong>car</strong></a> is <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.</pre>        <h2 id="2-6-分支结构">          <a href="#2-6-分支结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-6-分支结构" class="headerlink" title="2.6 分支结构"></a>2.6 分支结构</h2>      <p>在正则表达式中垂直条 <code>|</code> 用来定义分支结构，分支结构就像多个表达式之间的条件。现在你可能认为这个字符集和分支结构的工作方式一样。<br>但是字符集和分支结构巨大的区别是字符集只在字符级别上有作用，然而分支结构在表达式级别上依然可以使用。<br>例如正则表达式 <code>(T|t)he|car</code>，表示：匹配大写字母 <code>T</code> 或小写字母 <code>t</code>，后面跟小写字母 <code>h</code>，后跟小写字母 <code>e</code>，或匹配小写字母 <code>c</code>，后跟小写字母 <code>a</code>，后跟小写字母 <code>r</code>。</p><pre>"(T|t)he|car" =&gt; <a href="#learn-regex"><strong>The</strong></a> <a href="#learn-regex"><strong>car</strong></a> is parked in <a href="#learn-regex"><strong>the</strong></a> garage.</pre>        <h2 id="2-7-转义特殊字符">          <a href="#2-7-转义特殊字符" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-7-转义特殊字符" class="headerlink" title="2.7 转义特殊字符"></a>2.7 转义特殊字符</h2>      <p>正则表达式中使用反斜杠 <code>\</code> 来转义下一个字符。这将允许你使用保留字符来作为匹配字符 <code>{ } [ ] / \ + * . $ ^ | ?</code>。在特殊字符前面加 <code>\</code>，就可以使用它来做匹配字符。<br>例如正则表达式 <code>.</code> 是用来匹配除了换行符以外的任意字符。现在要在输入字符串中匹配 <code>.</code> 字符，正则表达式 <code>(f|c|m)at\.?</code>，表示：小写字母 <code>f</code>、<code>c</code> 或者 <code>m</code> 后跟小写字母 <code>a</code>，后跟小写字母 <code>t</code>，后跟可选的 <code>.</code> 字符。</p><pre>"(f|c|m)at\.?" =&gt; The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> sat on the <a href="#learn-regex"><strong>mat.</strong></a></pre>        <h2 id="2-8-定位符">          <a href="#2-8-定位符" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-8-定位符" class="headerlink" title="2.8 定位符"></a>2.8 定位符</h2>      <p>在正则表达式中，为了检查匹配符号是否是起始符号或结尾符号，我们使用定位符。<br>定位符有两种类型：第一种类型是 <code>^</code> 检查匹配字符是否是起始字符，第二种类型是 <code>$</code>，它检查匹配字符是否是输入字符串的最后一个字符。</p>        <h3 id="2-8-1-插入符号">          <a href="#2-8-1-插入符号" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-8-1-插入符号" class="headerlink" title="2.8.1 插入符号"></a>2.8.1 插入符号</h3>      <p>插入符号 <code>^</code> 符号用于检查匹配字符是否是输入字符串的第一个字符。如果我们使用正则表达式 <code>^a</code>（如果 a 是起始符号）匹配字符串 <code>abc</code>，它会匹配到 <code>a</code>。<br>但是如果我们使用正则表达式 <code>^b</code>，它是匹配不到任何东西的，因为在字符串 <code>abc</code> 中“b”不是起始字符。<br>让我们来看看另一个正则表达式 <code>^(T|t)he</code>，这表示：大写字母 <code>T</code> 或小写字母 <code>t</code> 是输入字符串的起始符号，后面跟着小写字母 <code>h</code>，后跟小写字母 <code>e</code>。</p><pre>"(T|t)he" =&gt; <a href="#learn-regex"><strong>The</strong></a> car is parked in <a href="#learn-regex"><strong>the</strong></a> garage.</pre><pre>"^(T|t)he" =&gt; <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.</pre>        <h3 id="2-8-2-美元符号">          <a href="#2-8-2-美元符号" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-8-2-美元符号" class="headerlink" title="2.8.2 美元符号"></a>2.8.2 美元符号</h3>      <p>美元 <code>$</code> 符号用于检查匹配字符是否是输入字符串的最后一个字符。例如正则表达式 <code>(at\.)$</code>，表示：小写字母 <code>a</code>，后跟小写字母 <code>t</code>，后跟一个 <code>.</code> 字符，且这个匹配器必须是字符串的结尾。</p><pre>"(at\.)" =&gt; The fat c<a href="#learn-regex"><strong>at.</strong></a> s<a href="#learn-regex"><strong>at.</strong></a> on the m<a href="#learn-regex"><strong>at.</strong></a></pre><pre>"(at\.)$" =&gt; The fat cat sat on the m<a href="#learn-regex"><strong>at.</strong></a></pre>        <h2 id="3-简写字符集">          <a href="#3-简写字符集" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-简写字符集" class="headerlink" title="3. 简写字符集"></a>3. 简写字符集</h2>      <p>正则表达式为常用的字符集和常用的正则表达式提供了简写。简写字符集如下：</p><div class="table-container"><table><thead><tr><th align="center">简写</th><th>描述</th></tr></thead><tbody><tr><td align="center">.</td><td>匹配除换行符以外的任意字符</td></tr><tr><td align="center">\w</td><td>匹配所有字母和数字的字符：<code>[a-zA-Z0-9_]</code></td></tr><tr><td align="center">\W</td><td>匹配非字母和数字的字符：<code>[^\w]</code></td></tr><tr><td align="center">\d</td><td>匹配数字：<code>[0-9]</code></td></tr><tr><td align="center">\D</td><td>匹配非数字：<code>[^\d]</code></td></tr><tr><td align="center">\s</td><td>匹配空格符：<code>[\t\n\f\r\p{Z}]</code></td></tr><tr><td align="center">\S</td><td>匹配非空格符：<code>[^\s]</code></td></tr></tbody></table></div>        <h2 id="4-断言">          <a href="#4-断言" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-断言" class="headerlink" title="4. 断言"></a>4. 断言</h2>      <p>后行断言和先行断言有时候被称为断言，它们是特殊类型的 <em><strong>非捕获组</strong></em>（用于匹配模式，但不包括在匹配列表中）。当我们在一种特定模式之前或者之后有这种模式时，会优先使用断言。<br>例如我们想获取输入字符串 <code>$4.44 and $10.88</code> 中带有前缀 <code>$</code> 的所有数字。我们可以使用这个正则表达式 <code>(?&lt;=\$)[0-9\.]*</code>，表示：获取包含 <code>.</code> 字符且前缀为 <code>$</code> 的所有数字。<br>以下是正则表达式中使用的断言：</p><div class="table-container"><table><thead><tr><th align="center">符号</th><th>描述</th></tr></thead><tbody><tr><td align="center">?=</td><td>正向先行断言</td></tr><tr><td align="center">?!</td><td>负向先行断言</td></tr><tr><td align="center">?&lt;=</td><td>正向后行断言</td></tr><tr><td align="center">?&lt;!</td><td>负向后行断言</td></tr></tbody></table></div>        <h3 id="4-1-正向先行断言">          <a href="#4-1-正向先行断言" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-1-正向先行断言" class="headerlink" title="4.1 正向先行断言"></a>4.1 正向先行断言</h3>      <p>正向先行断言认为第一部分的表达式的后面必须是先行断言表达式。返回的匹配结果仅包含与第一部分表达式匹配的文本。<br>要在一个括号内定义一个正向先行断言，在括号中问号和等号是这样使用的 <code>(?=...)</code>。先行断言表达式写在括号中的等号后面。<br>例如正则表达式 <code>(T|t)he(?=\sfat)</code>，表示：匹配大写字母 <code>T</code> 或小写字母 <code>t</code>，后面跟字母 <code>h</code>，后跟字母 <code>e</code>。<br>在括号中，我们定义了正向先行断言，它会引导正则表达式引擎匹配后面跟着 <code>fat</code> 的 <code>The</code> 或 <code>the</code>。</p><pre>"(T|t)he(?=\sfat)" =&gt; <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.</pre>        <h3 id="4-2-负向先行断言">          <a href="#4-2-负向先行断言" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-2-负向先行断言" class="headerlink" title="4.2 负向先行断言"></a>4.2 负向先行断言</h3>      <p>当我们需要指定第一部分表达式的后面不跟随某一内容时，使用负向先行断言。负向先行断言的定义跟我们定义的正向先行断言一样，<br>唯一的区别在于我们使用否定符号 <code>!</code> 而不是等号 <code>=</code>，例如 <code>(?!...)</code>。<br>我们来看看下面的正则表达式 <code>(T|t)he(?!\sfat)</code>，表示：从输入字符串中获取全部 <code>The</code> 或者 <code>the</code> 且不匹配 <code>fat</code> 前面加上一个空格字符。</p><pre>"(T|t)he(?!\sfat)" =&gt; The fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.</pre>        <h3 id="4-3-正向后行断言">          <a href="#4-3-正向后行断言" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-3-正向后行断言" class="headerlink" title="4.3 正向后行断言"></a>4.3 正向后行断言</h3>      <p>正向后行断言用于获取跟随在特定模式之后的所有匹配内容。正向后行断言表示为 <code>(?&lt;=...)</code>。例如正则表达式 <code>(?&lt;=(T|t)he\s)(fat|mat)</code>，表示：从输入字符串中获取在单词 <code>The</code> 或 <code>the</code> 之后的所有 <code>fat</code> 和 <code>mat</code> 单词。</p><pre>"(?&lt;=(T|t)he\s)(fat|mat)" =&gt; The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the <a href="#learn-regex"><strong>mat</strong></a>.</pre>        <h3 id="4-4-负向后行断言">          <a href="#4-4-负向后行断言" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-4-负向后行断言" class="headerlink" title="4.4 负向后行断言"></a>4.4 负向后行断言</h3>      <p>负向后行断言是用于获取不跟随在特定模式之后的所有匹配的内容。负向后行断言表示为 <code>(?&lt;!...)</code>。例如正则表达式 <code>(?&lt;!(T|t)he\s)(cat)</code>，表示：在输入字符中获取所有不在 <code>The</code> 或 <code>the</code> 之后的所有单词 <code>cat</code>。</p><pre>"(?&lt;!(T|t)he\s)(cat)" =&gt; The cat sat on <a href="#learn-regex"><strong>cat</strong></a>.</pre>        <h2 id="5-标记">          <a href="#5-标记" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-标记" class="headerlink" title="5. 标记"></a>5. 标记</h2>      <p>标记也称为修饰符，因为它会修改正则表达式的输出。这些标志可以以任意顺序或组合使用，并且是正则表达式的一部分。</p><div class="table-container"><table><thead><tr><th align="center">标记</th><th>描述</th></tr></thead><tbody><tr><td align="center">i</td><td>不区分大小写：将匹配设置为不区分大小写。</td></tr><tr><td align="center">g</td><td>全局搜索：搜索整个输入字符串中的所有匹配。</td></tr><tr><td align="center">m</td><td>多行匹配：会匹配输入字符串每一行。</td></tr></tbody></table></div>        <h3 id="5-1-不区分大小写">          <a href="#5-1-不区分大小写" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-1-不区分大小写" class="headerlink" title="5.1 不区分大小写"></a>5.1 不区分大小写</h3>      <p><code>i</code> 修饰符用于执行不区分大小写匹配。例如正则表达式 <code>/The/gi</code>，表示：大写字母 <code>T</code>，后跟小写字母 <code>h</code>，后跟字母 <code>e</code>。<br>但是在正则匹配结束时 <code>i</code> 标记会告诉正则表达式引擎忽略这种情况。正如你所看到的，我们还使用了 <code>g</code> 标记，因为我们要在整个输入字符串中搜索匹配。</p><pre>"The" =&gt; <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.</pre><pre>"/The/gi" =&gt; <a href="#learn-regex"><strong>The</strong></a> fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.</pre>        <h3 id="5-2-全局搜索">          <a href="#5-2-全局搜索" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-2-全局搜索" class="headerlink" title="5.2 全局搜索"></a>5.2 全局搜索</h3>      <p><code>g</code> 修饰符用于执行全局匹配（会查找所有匹配，不会在查找到第一个匹配时就停止）。<br>例如正则表达式 <code>/.(at)/g</code>，表示：除换行符之外的任意字符，后跟小写字母 <code>a</code>，后跟小写字母 <code>t</code>。<br>因为我们在正则表达式的末尾使用了 <code>g</code> 标记，它会从整个输入字符串中找到每个匹配项。</p><pre>".(at)" =&gt; The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the mat.</pre><pre>"/.(at)/g" =&gt; The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> <a href="#learn-regex"><strong>sat</strong></a> on the <a href="#learn-regex"><strong>mat</strong></a>.</pre>        <h3 id="5-3-多行匹配">          <a href="#5-3-多行匹配" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-3-多行匹配" class="headerlink" title="5.3 多行匹配"></a>5.3 多行匹配</h3>      <p><code>m</code> 修饰符被用来执行多行的匹配。正如我们前面讨论过的 <code>(^, $)</code>，使用定位符来检查匹配字符是输入字符串开始或者结束。但是我们希望每一行都使用定位符，所以我们就使用 <code>m</code> 修饰符。<br>例如正则表达式 <code>/at(.)?$/gm</code>，表示：小写字母 <code>a</code>，后跟小写字母 <code>t</code>，匹配除了换行符以外任意字符零次或一次。而且因为 <code>m</code> 标记，现在正则表达式引擎匹配字符串中每一行的末尾。</p><pre>"/.at(.)?$/" =&gt; The fat                cat sat                on the <a href="#learn-regex"><strong>mat.</strong></a></pre><pre>"/.at(.)?$/gm" =&gt; The <a href="#learn-regex"><strong>fat</strong></a>                  cat <a href="#learn-regex"><strong>sat</strong></a>                  on the <a href="#learn-regex"><strong>mat.</strong></a></pre>        <h2 id="常用正则表达式">          <a href="#常用正则表达式" class="heading-link"><i class="fas fa-link"></i></a><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h2>      <ul><li><strong>正整数</strong>：<code>^\d+$</code></li><li><strong>负整数</strong>：<code>^-\d+$</code></li><li><strong>电话号码</strong>：<code>^+?[\d\s]{3,}$</code></li><li><strong>电话代码</strong>：<code>^+?[\d\s]+(?[\d\s]{10,}$</code></li><li><strong>整数</strong>：<code>^-?\d+$</code></li><li><strong>用户名</strong>：<code>^[\w\d_.]{4,16}$</code></li><li><strong>字母数字字符</strong>：<code>^[a-zA-Z0-9]*$</code></li><li><strong>带空格的字母数字字符</strong>：<code>^[a-zA-Z0-9 ]*$</code></li><li><strong>密码</strong>：<code>^(?=^.{6,}$)((?=.*[A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z]))^.*$</code></li><li><strong>电子邮件</strong>：<code>^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4})*$</code></li><li><strong>IPv4 地址</strong>：<code>^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$</code></li><li><strong>小写字母</strong>：<code>^([a-z])*$</code></li><li><strong>大写字母</strong>：<code>^([A-Z])*$</code></li><li><strong>网址</strong>：<code>^(((http|https|ftp):\/\/)?([[a-zA-Z0-9]\-\.])+(\.)([[a-zA-Z0-9]]){2,4}([[a-zA-Z0-9]\/+=%&amp;_\.~?\-]*))*$</code></li><li><strong>VISA 信用卡号码</strong>：<code>^(4[0-9]{12}(?:[0-9]{3})?)*$</code></li><li><strong>日期（MM/DD/YYYY）</strong>：<code>^(0?[1-9]|1[012])[- /.](0?[1-9]|[12][0-9]|3[01])[- /.](19|20)?[0-9]{2}$</code></li><li><strong>日期（YYYY/MM/DD）</strong>：<code>^(19|20)?[0-9]{2}[- /.](0?[1-9]|1[012])[- /.](0?[1-9]|[12][0-9]|3[01])$</code></li><li><strong>万事达信用卡号码</strong>：<code>^(5[1-5][0-9]{14})*$</code></li></ul>        <h2 id="Contribution">          <a href="#Contribution" class="heading-link"><i class="fas fa-link"></i></a><a href="#Contribution" class="headerlink" title="Contribution"></a>Contribution</h2>      <ul><li>Report issues</li><li>Open pull request with improvements</li><li>Spread the word</li></ul>        <h2 id="License">          <a href="#License" class="heading-link"><i class="fas fa-link"></i></a><a href="#License" class="headerlink" title="License"></a>License</h2>      <p>MIT © <span class="exturl"><a class="exturl__link" href="mailto:ziishaned@gmail.com">Zeeshan Ahmed</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><hr><p><strong><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-">⬆ top</a></strong></p>]]></content>
    
    
    <categories>
      
      <category>正则表达式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用到正则表达式</title>
    <link href="/2023/08/31/docs/zheng-ze-biao-da-shi/chang-yong-dao-zheng-ze-biao-da-shi/"/>
    <url>/2023/08/31/docs/zheng-ze-biao-da-shi/chang-yong-dao-zheng-ze-biao-da-shi/</url>
    
    <content type="html"><![CDATA[<p><span class="exturl"><a class="exturl__link" href="https://github.com/cdoco/learn-regex-zh">源文件地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><div align="center">  <p><img src="http://openlogos.org/logos/sage.jpg"></p>  <img src="https://img.shields.io/badge/branch-master-brightgreen.svg">  <img src="https://img.shields.io/badge/License-MIT-blue.svg">  <img src="https://jaywcjlove.github.io/sb/lang/chinese.svg"></div>        <h2 id="目录">          <a href="#目录" class="heading-link"><i class="fas fa-link"></i></a><a href="#目录" class="headerlink" title="目录"></a>目录</h2>      <ul><li><a href="#%E9%82%AE%E7%AE%B1">邮箱</a></li><li><a href="#%E7%94%B5%E8%AF%9D">电话</a></li><li><a href="#%E5%9F%9F%E5%90%8D">域名</a></li><li><a href="#ip">IP</a></li><li><a href="#%E5%B8%90%E5%8F%B7%E6%A0%A1%E9%AA%8C">帐号校验</a></li><li><a href="#%E5%AD%97%E7%AC%A6%E6%A0%A1%E9%AA%8C">字符校验</a><ul><li><a href="#%E6%B1%89%E5%AD%97">汉字</a></li><li><a href="#%E8%8B%B1%E6%96%87%E5%92%8C%E6%95%B0%E5%AD%97">英文和数字</a></li><li><a href="#%E9%95%BF%E5%BA%A6%E4%B8%BA3-20%E7%9A%84%E6%89%80%E6%9C%89%E5%AD%97%E7%AC%A6">长度为3-20的所有字符</a></li><li><a href="#%E7%94%B1%E8%8B%B1%E6%96%87%E5%AD%97%E7%AC%A6">英文字符</a><ul><li><a href="#%E7%94%B126%E4%B8%AA%E8%8B%B1%E6%96%87%E5%AD%97%E6%AF%8D%E7%BB%84%E6%88%90%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2">由26个英文字母组成的字符串</a></li><li><a href="#%E7%94%B126%E4%B8%AA%E5%A4%A7%E5%86%99%E8%8B%B1%E6%96%87%E5%AD%97%E6%AF%8D%E7%BB%84%E6%88%90%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2">由26个大写英文字母组成的字符串</a></li><li><a href="#%E7%94%B126%E4%B8%AA%E5%B0%8F%E5%86%99%E8%8B%B1%E6%96%87%E5%AD%97%E6%AF%8D%E7%BB%84%E6%88%90%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2">由26个小写英文字母组成的字符串</a></li><li><a href="#%E7%94%B1%E6%95%B0%E5%AD%97%E5%92%8C26%E4%B8%AA%E8%8B%B1%E6%96%87%E5%AD%97%E6%AF%8D%E7%BB%84%E6%88%90%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2">由数字和26个英文字母组成的字符串</a></li><li><a href="#%E7%94%B1%E6%95%B0%E5%AD%9726%E4%B8%AA%E8%8B%B1%E6%96%87%E5%AD%97%E6%AF%8D%E6%88%96%E8%80%85%E4%B8%8B%E5%88%92%E7%BA%BF%E7%BB%84%E6%88%90%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2">由数字、26个英文字母或者下划线组成的字符串</a></li></ul></li><li><a href="#%E4%B8%AD%E6%96%87%E8%8B%B1%E6%96%87%E6%95%B0%E5%AD%97%E5%8C%85%E6%8B%AC%E4%B8%8B%E5%88%92%E7%BA%BF">中文、英文、数字包括下划线</a></li><li><a href="#%E4%B8%AD%E6%96%87%E8%8B%B1%E6%96%87%E6%95%B0%E5%AD%97%E4%BD%86%E4%B8%8D%E5%8C%85%E6%8B%AC%E4%B8%8B%E5%88%92%E7%BA%BF%E7%AD%89%E7%AC%A6%E5%8F%B7">中文、英文、数字但不包括下划线等符号</a></li><li><a href="#%E7%A6%81%E6%AD%A2%E8%BE%93%E5%85%A5%E5%90%AB%E6%9C%89%E7%AD%89%E5%AD%97%E7%AC%A6">禁止输入含有^%&amp;’,;=?$"等字符</a></li><li><a href="#%E7%A6%81%E6%AD%A2%E8%BE%93%E5%85%A5%E5%90%AB%E6%9C%89%E7%9A%84%E5%AD%97%E7%AC%A6">禁止输入含有~的字符</a></li></ul></li><li><a href="#%E6%95%B0%E5%AD%97%E6%AD%A3%E5%88%99">数字正则</a><ul><li><a href="#%E6%95%B4%E6%95%B0">整数</a><ul><li><a href="#%E6%AD%A3%E6%95%B4%E6%95%B0">正整数</a></li><li><a href="#%E8%B4%9F%E6%95%B4%E6%95%B0">负整数</a></li><li><a href="#%E9%9D%9E%E8%B4%9F%E6%95%B4%E6%95%B0">非负整数</a></li><li><a href="#%E9%9D%9E%E6%AD%A3%E6%95%B4%E6%95%B0">非正整数</a></li></ul></li><li><a href="#%E6%B5%AE%E7%82%B9%E6%95%B0">浮点数</a><ul><li><a href="#%E6%AD%A3%E6%B5%AE%E7%82%B9%E6%95%B0">正浮点数</a></li><li><a href="#%E8%B4%9F%E6%B5%AE%E7%82%B9%E6%95%B0">负浮点数</a></li><li><a href="#%E9%9D%9E%E8%B4%9F%E6%B5%AE%E7%82%B9%E6%95%B0">非负浮点数</a></li><li><a href="#%E9%9D%9E%E6%AD%A3%E6%B5%AE%E7%82%B9%E6%95%B0">非正浮点数</a></li></ul></li></ul></li></ul>        <h2 id="邮箱">          <a href="#邮箱" class="heading-link"><i class="fas fa-link"></i></a><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h2>      <p><code>gaozihang-001@gmail.com</code> 只允许英文字母、数字、下划线、英文句号、以及中划线组成</p><pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token anchor function">^</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span>_-<span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">+</span>@<span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span>_-<span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span class="token group punctuation">(</span><span class="token special-escape escape">\.</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span>_-<span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span class="token group punctuation">)</span><span class="token quantifier number">+</span><span class="token anchor function">$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/email.png" alt="email"></p><p><code>高子航001Abc@bowbee.com.cn</code> 名称允许汉字、字母、数字，域名只允许英文域名</p><pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token anchor function">^</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span><span class="token range"><span class="token escape">\u4e00</span><span class="token range-punctuation operator">-</span><span class="token escape">\u9fa5</span></span><span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">+</span>@<span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span>_-<span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span class="token group punctuation">(</span><span class="token special-escape escape">\.</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span>_-<span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span class="token group punctuation">)</span><span class="token quantifier number">+</span><span class="token anchor function">$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/email2.png" alt="email"></p>        <h2 id="电话">          <a href="#电话" class="heading-link"><i class="fas fa-link"></i></a><a href="#电话" class="headerlink" title="电话"></a>电话</h2>      <p><code>13012345678</code> 手机号</p><pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token anchor function">^</span>1<span class="token group punctuation">(</span>3<span class="token alternation keyword">|</span>4<span class="token alternation keyword">|</span>5<span class="token alternation keyword">|</span>6<span class="token alternation keyword">|</span>7<span class="token alternation keyword">|</span>8<span class="token alternation keyword">|</span>9<span class="token group punctuation">)</span><span class="token char-set class-name">\d</span><span class="token quantifier number">{9}</span><span class="token anchor function">$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/phone.png" alt="phone"></p><p><code>XXX-XXXXXXX</code> <code>XXXX-XXXXXXXX</code> 固定电话</p><pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token group punctuation">(</span><span class="token special-escape escape">\(</span><span class="token char-set class-name">\d</span><span class="token quantifier number">{3,4}</span><span class="token special-escape escape">\)</span><span class="token alternation keyword">|</span><span class="token char-set class-name">\d</span><span class="token quantifier number">{3,4}</span>-<span class="token alternation keyword">|</span><span class="token char-set class-name">\s</span><span class="token group punctuation">)</span><span class="token quantifier number">?</span><span class="token char-set class-name">\d</span><span class="token quantifier number">{8}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/phone2.png" alt="email"></p>        <h2 id="域名">          <a href="#域名" class="heading-link"><i class="fas fa-link"></i></a><a href="#域名" class="headerlink" title="域名"></a>域名</h2>      <p><code>https://google.com/</code></p><pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token anchor function">^</span><span class="token group punctuation">(</span><span class="token group punctuation">(</span>http:<span class="token escape">\/</span><span class="token escape">\/</span><span class="token group punctuation">)</span><span class="token alternation keyword">|</span><span class="token group punctuation">(</span>https:<span class="token escape">\/</span><span class="token escape">\/</span><span class="token group punctuation">)</span><span class="token group punctuation">)</span><span class="token quantifier number">?</span><span class="token group punctuation">(</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token group punctuation">(</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span><span class="token escape">\-</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">{0,61}</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token group punctuation">)</span><span class="token quantifier number">?</span><span class="token special-escape escape">\.</span><span class="token group punctuation">)</span><span class="token quantifier number">+</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">{2,6}</span><span class="token group punctuation">(</span><span class="token escape">\/</span><span class="token group punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/domain-name.png" alt="domain-name"></p>        <h2 id="IP">          <a href="#IP" class="heading-link"><i class="fas fa-link"></i></a><a href="#IP" class="headerlink" title="IP"></a>IP</h2>      <p><code>127.0.0.1</code></p><pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token group punctuation">(</span><span class="token group punctuation">(?:</span><span class="token group punctuation">(?:</span>25<span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">0<span class="token range-punctuation operator">-</span>5</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token alternation keyword">|</span>2<span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">0<span class="token range-punctuation operator">-</span>4</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token char-set class-name">\d</span><span class="token alternation keyword">|</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span>01<span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">?</span><span class="token char-set class-name">\d</span><span class="token quantifier number">?</span><span class="token char-set class-name">\d</span><span class="token group punctuation">)</span><span class="token special-escape escape">\.</span><span class="token group punctuation">)</span><span class="token quantifier number">{3}</span><span class="token group punctuation">(?:</span>25<span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">0<span class="token range-punctuation operator">-</span>5</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token alternation keyword">|</span>2<span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">0<span class="token range-punctuation operator">-</span>4</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token char-set class-name">\d</span><span class="token alternation keyword">|</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span>01<span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">?</span><span class="token char-set class-name">\d</span><span class="token quantifier number">?</span><span class="token char-set class-name">\d</span><span class="token group punctuation">)</span><span class="token group punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/ip.png" alt="ip"></p>        <h2 id="帐号校验">          <a href="#帐号校验" class="heading-link"><i class="fas fa-link"></i></a><a href="#帐号校验" class="headerlink" title="帐号校验"></a>帐号校验</h2>      <p><code>gaozihang_001</code> 字母开头，允许5-16字节，允许字母数字下划线</p><pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token anchor function">^</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span>_<span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">{4,15}</span><span class="token anchor function">$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/userid.png" alt="user"></p>        <h2 id="字符校验">          <a href="#字符校验" class="heading-link"><i class="fas fa-link"></i></a><a href="#字符校验" class="headerlink" title="字符校验"></a>字符校验</h2>              <h3 id="汉字">          <a href="#汉字" class="heading-link"><i class="fas fa-link"></i></a><a href="#汉字" class="headerlink" title="汉字"></a>汉字</h3>      <p><code>高子航</code></p><pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token anchor function">^</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range"><span class="token escape">\u4e00</span><span class="token range-punctuation operator">-</span><span class="token escape">\u9fa5</span></span><span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">{0,}</span><span class="token anchor function">$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/chineses.png" alt="chinese"></p>        <h3 id="英文和数字">          <a href="#英文和数字" class="heading-link"><i class="fas fa-link"></i></a><a href="#英文和数字" class="headerlink" title="英文和数字"></a>英文和数字</h3>      <pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token anchor function">^</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span class="token anchor function">$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/char1.png" alt="char"></p>        <h3 id="长度为3-20的所有字符">          <a href="#长度为3-20的所有字符" class="heading-link"><i class="fas fa-link"></i></a><a href="#长度为3-20的所有字符" class="headerlink" title="长度为3-20的所有字符"></a>长度为3-20的所有字符</h3>      <pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token anchor function">^</span><span class="token char-set class-name">.</span><span class="token quantifier number">{3,20}</span><span class="token anchor function">$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/char2.png" alt="char"></p>        <h3 id="英文字符">          <a href="#英文字符" class="heading-link"><i class="fas fa-link"></i></a><a href="#英文字符" class="headerlink" title="英文字符"></a>英文字符</h3>              <h4 id="由26个英文字母组成的字符串">          <a href="#由26个英文字母组成的字符串" class="heading-link"><i class="fas fa-link"></i></a><a href="#由26个英文字母组成的字符串" class="headerlink" title="由26个英文字母组成的字符串"></a>由26个英文字母组成的字符串</h4>      <pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token anchor function">^</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span class="token anchor function">$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/char3.png" alt="char"></p>        <h4 id="由26个大写英文字母组成的字符串">          <a href="#由26个大写英文字母组成的字符串" class="heading-link"><i class="fas fa-link"></i></a><a href="#由26个大写英文字母组成的字符串" class="headerlink" title="由26个大写英文字母组成的字符串"></a>由26个大写英文字母组成的字符串</h4>      <pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token anchor function">^</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span class="token anchor function">$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/char4.png" alt="char"></p>        <h4 id="由26个小写英文字母组成的字符串">          <a href="#由26个小写英文字母组成的字符串" class="heading-link"><i class="fas fa-link"></i></a><a href="#由26个小写英文字母组成的字符串" class="headerlink" title="由26个小写英文字母组成的字符串"></a>由26个小写英文字母组成的字符串</h4>      <pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token anchor function">^</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span class="token anchor function">$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/char5.png" alt="char"></p>        <h4 id="由数字和26个英文字母组成的字符串">          <a href="#由数字和26个英文字母组成的字符串" class="heading-link"><i class="fas fa-link"></i></a><a href="#由数字和26个英文字母组成的字符串" class="headerlink" title="由数字和26个英文字母组成的字符串"></a>由数字和26个英文字母组成的字符串</h4>      <pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token anchor function">^</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span class="token anchor function">$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/char6.png" alt="char"></p>        <h4 id="由数字、26个英文字母或者下划线组成的字符串">          <a href="#由数字、26个英文字母或者下划线组成的字符串" class="heading-link"><i class="fas fa-link"></i></a><a href="#由数字、26个英文字母或者下划线组成的字符串" class="headerlink" title="由数字、26个英文字母或者下划线组成的字符串"></a>由数字、26个英文字母或者下划线组成的字符串</h4>      <pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token anchor function">^</span><span class="token char-set class-name">\w</span><span class="token quantifier number">+</span><span class="token anchor function">$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/char7.png" alt="char"></p>        <h3 id="中文、英文、数字包括下划线">          <a href="#中文、英文、数字包括下划线" class="heading-link"><i class="fas fa-link"></i></a><a href="#中文、英文、数字包括下划线" class="headerlink" title="中文、英文、数字包括下划线"></a>中文、英文、数字包括下划线</h3>      <pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token anchor function">^</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range"><span class="token escape">\u4E00</span><span class="token range-punctuation operator">-</span><span class="token escape">\u9FA5</span></span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span>_<span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span class="token anchor function">$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/char8.png" alt="char"></p>        <h3 id="中文、英文、数字但不包括下划线等符号">          <a href="#中文、英文、数字但不包括下划线等符号" class="heading-link"><i class="fas fa-link"></i></a><a href="#中文、英文、数字但不包括下划线等符号" class="headerlink" title="中文、英文、数字但不包括下划线等符号"></a>中文、英文、数字但不包括下划线等符号</h3>      <pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token anchor function">^</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range"><span class="token escape">\u4E00</span><span class="token range-punctuation operator">-</span><span class="token escape">\u9FA5</span></span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span class="token anchor function">$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/char9.png" alt="char"></p>        <h3 id="禁止输入含有-’-等字符">          <a href="#禁止输入含有-’-等字符" class="heading-link"><i class="fas fa-link"></i></a><a href="#禁止输入含有-’-等字符" class="headerlink" title="禁止输入含有%&amp;’,;=?$&quot;等字符"></a>禁止输入含有%&amp;’,;=?$"等字符</h3>      <pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token char-class-negation operator">^</span>%&amp;',;=?$<span class="token escape">\x22</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/char10.png" alt="char"></p>        <h3 id="禁止输入含有-的字符">          <a href="#禁止输入含有-的字符" class="heading-link"><i class="fas fa-link"></i></a><a href="#禁止输入含有-的字符" class="headerlink" title="禁止输入含有~的字符"></a>禁止输入含有~的字符</h3>      <pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token char-class-negation operator">^</span>~<span class="token escape">\x22</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/char11.png" alt="char"></p>        <h2 id="数字正则">          <a href="#数字正则" class="heading-link"><i class="fas fa-link"></i></a><a href="#数字正则" class="headerlink" title="数字正则"></a>数字正则</h2>              <h3 id="整数">          <a href="#整数" class="heading-link"><i class="fas fa-link"></i></a><a href="#整数" class="headerlink" title="整数"></a>整数</h3>      <pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token anchor function">^</span>-<span class="token quantifier number">?</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">1<span class="token range-punctuation operator">-</span>9</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token char-set class-name">\d</span><span class="token quantifier number">*</span><span class="token anchor function">$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/num1.png" alt="num"></p>        <h4 id="正整数">          <a href="#正整数" class="heading-link"><i class="fas fa-link"></i></a><a href="#正整数" class="headerlink" title="正整数"></a>正整数</h4>      <pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token anchor function">^</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">1<span class="token range-punctuation operator">-</span>9</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token char-set class-name">\d</span><span class="token quantifier number">*</span><span class="token anchor function">$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/num2.png" alt="num"></p>        <h4 id="负整数">          <a href="#负整数" class="heading-link"><i class="fas fa-link"></i></a><a href="#负整数" class="headerlink" title="负整数"></a>负整数</h4>      <pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token anchor function">^</span>-<span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">1<span class="token range-punctuation operator">-</span>9</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token char-set class-name">\d</span><span class="token quantifier number">*</span><span class="token anchor function">$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/num3.png" alt="num"></p>        <h4 id="非负整数">          <a href="#非负整数" class="heading-link"><i class="fas fa-link"></i></a><a href="#非负整数" class="headerlink" title="非负整数"></a>非负整数</h4>      <pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token anchor function">^</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">1<span class="token range-punctuation operator">-</span>9</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token char-set class-name">\d</span><span class="token quantifier number">*</span><span class="token alternation keyword">|</span>0<span class="token anchor function">$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/num4.png" alt="num"></p>        <h4 id="非正整数">          <a href="#非正整数" class="heading-link"><i class="fas fa-link"></i></a><a href="#非正整数" class="headerlink" title="非正整数"></a>非正整数</h4>      <pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token anchor function">^</span>-<span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">1<span class="token range-punctuation operator">-</span>9</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token char-set class-name">\d</span><span class="token quantifier number">*</span><span class="token alternation keyword">|</span>0<span class="token anchor function">$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/num5.png" alt="num"></p>        <h3 id="浮点数">          <a href="#浮点数" class="heading-link"><i class="fas fa-link"></i></a><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3>      <pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token anchor function">^</span>-<span class="token quantifier number">?</span><span class="token group punctuation">(</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">1<span class="token range-punctuation operator">-</span>9</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token char-set class-name">\d</span><span class="token quantifier number">*</span><span class="token special-escape escape">\.</span><span class="token char-set class-name">\d</span><span class="token quantifier number">*</span><span class="token alternation keyword">|</span>0<span class="token special-escape escape">\.</span><span class="token char-set class-name">\d</span><span class="token quantifier number">*</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">1<span class="token range-punctuation operator">-</span>9</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token char-set class-name">\d</span><span class="token quantifier number">*</span><span class="token alternation keyword">|</span>0<span class="token quantifier number">?</span><span class="token special-escape escape">\.</span>0<span class="token quantifier number">+</span><span class="token alternation keyword">|</span>0<span class="token group punctuation">)</span><span class="token anchor function">$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/num6.png" alt="num"></p>        <h4 id="正浮点数">          <a href="#正浮点数" class="heading-link"><i class="fas fa-link"></i></a><a href="#正浮点数" class="headerlink" title="正浮点数"></a>正浮点数</h4>      <pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token anchor function">^</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">1<span class="token range-punctuation operator">-</span>9</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token char-set class-name">\d</span><span class="token quantifier number">*</span><span class="token special-escape escape">\.</span><span class="token char-set class-name">\d</span><span class="token quantifier number">*</span><span class="token alternation keyword">|</span>0<span class="token special-escape escape">\.</span><span class="token char-set class-name">\d</span><span class="token quantifier number">*</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">1<span class="token range-punctuation operator">-</span>9</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token char-set class-name">\d</span><span class="token quantifier number">*</span><span class="token anchor function">$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/num7.png" alt="num"></p>        <h4 id="负浮点数">          <a href="#负浮点数" class="heading-link"><i class="fas fa-link"></i></a><a href="#负浮点数" class="headerlink" title="负浮点数"></a>负浮点数</h4>      <pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token anchor function">^</span>-<span class="token group punctuation">(</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">1<span class="token range-punctuation operator">-</span>9</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token char-set class-name">\d</span><span class="token quantifier number">*</span><span class="token special-escape escape">\.</span><span class="token char-set class-name">\d</span><span class="token quantifier number">*</span><span class="token alternation keyword">|</span>0<span class="token special-escape escape">\.</span><span class="token char-set class-name">\d</span><span class="token quantifier number">*</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">1<span class="token range-punctuation operator">-</span>9</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token char-set class-name">\d</span><span class="token quantifier number">*</span><span class="token group punctuation">)</span><span class="token anchor function">$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/num8.png" alt="num"></p>        <h4 id="非负浮点数">          <a href="#非负浮点数" class="heading-link"><i class="fas fa-link"></i></a><a href="#非负浮点数" class="headerlink" title="非负浮点数"></a>非负浮点数</h4>      <pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token anchor function">^</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">1<span class="token range-punctuation operator">-</span>9</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token char-set class-name">\d</span><span class="token quantifier number">*</span><span class="token special-escape escape">\.</span><span class="token char-set class-name">\d</span><span class="token quantifier number">*</span><span class="token alternation keyword">|</span>0<span class="token special-escape escape">\.</span><span class="token char-set class-name">\d</span><span class="token quantifier number">*</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">1<span class="token range-punctuation operator">-</span>9</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token char-set class-name">\d</span><span class="token quantifier number">*</span><span class="token alternation keyword">|</span>0<span class="token quantifier number">?</span><span class="token special-escape escape">\.</span>0<span class="token quantifier number">+</span><span class="token alternation keyword">|</span>0<span class="token anchor function">$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/num9.png" alt="num"></p>        <h4 id="非正浮点数">          <a href="#非正浮点数" class="heading-link"><i class="fas fa-link"></i></a><a href="#非正浮点数" class="headerlink" title="非正浮点数"></a>非正浮点数</h4>      <pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token anchor function">^</span><span class="token group punctuation">(</span>-<span class="token group punctuation">(</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">1<span class="token range-punctuation operator">-</span>9</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token char-set class-name">\d</span><span class="token quantifier number">*</span><span class="token special-escape escape">\.</span><span class="token char-set class-name">\d</span><span class="token quantifier number">*</span><span class="token alternation keyword">|</span>0<span class="token special-escape escape">\.</span><span class="token char-set class-name">\d</span><span class="token quantifier number">*</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">1<span class="token range-punctuation operator">-</span>9</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token char-set class-name">\d</span><span class="token quantifier number">*</span><span class="token group punctuation">)</span><span class="token group punctuation">)</span><span class="token alternation keyword">|</span>0<span class="token quantifier number">?</span><span class="token special-escape escape">\.</span>0<span class="token quantifier number">+</span><span class="token alternation keyword">|</span>0<span class="token anchor function">$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/num10.png" alt="num"></p>        <h2 id="License">          <a href="#License" class="heading-link"><i class="fas fa-link"></i></a><a href="#License" class="headerlink" title="License"></a>License</h2>      <p>MIT License. See the <a href="LICENSE">LICENSE</a> file.</p><p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ top</a></strong></p>]]></content>
    
    
    <categories>
      
      <category>正则表达式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2023/08/31/docs/zheng-ze-biao-da-shi/zheng-ze-biao-da-shi/"/>
    <url>/2023/08/31/docs/zheng-ze-biao-da-shi/zheng-ze-biao-da-shi/</url>
    
    <content type="html"><![CDATA[<h2 id="正则表达式">          <a href="#正则表达式" class="heading-link"><i class="fas fa-link"></i></a><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2>              <h3 id="基本表达式">          <a href="#基本表达式" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本表达式" class="headerlink" title="基本表达式"></a>基本表达式</h3>      <div class="table-container"><table><thead><tr><th>表达式</th><th>匹配</th><th>示例</th></tr></thead><tbody><tr><td>\u####</td><td>中文字符</td><td>\u548c -&gt; 和</td></tr><tr><td>.</td><td>任意一个字符</td><td></td></tr><tr><td>\d</td><td>一个数字</td><td></td></tr><tr><td>\D</td><td>一个非数字</td><td></td></tr><tr><td>\w</td><td>一个字母、数字或下划线</td><td></td></tr><tr><td>\s</td><td>一个空格字符(空格，tab 等)</td><td></td></tr><tr><td>\S</td><td>非\s</td><td></td></tr><tr><td>*</td><td>修饰符，匹配任意个字符</td><td></td></tr><tr><td>+</td><td>修饰符，至少一个数字</td><td></td></tr><tr><td>？</td><td>修饰符，匹配 0 个或 1 个字符</td><td></td></tr><tr><td>{n}</td><td>修饰符，匹配 n 个字符</td><td>\d{3} - &gt; 匹配 3 个数字</td></tr><tr><td>{m,n}</td><td>修饰符，匹配 m 到 n 个字符</td><td>\d{3,5} -&gt; 匹配 3 到 5 个数字</td></tr><tr><td>{n,}</td><td>修饰符，匹配至少 n 个字符</td><td>\d{3,} -&gt; 匹配至少 3 个数字</td></tr><tr><td>[…]</td><td>修饰符，匹配[ ]里面的字符</td><td>[123456789]\d{6,7} -&gt; 匹配不以 0 开头的 7-8 位数字 <br> [1-9]\d{6,7} -&gt; 同上</td></tr><tr><td>[^…]</td><td>修饰符，匹配不包含 … 的字符</td><td></td></tr><tr><td>|</td><td>或</td><td></td></tr><tr><td>^</td><td>开头 ^\d -&gt; 数字开头</td><td></td></tr><tr><td>$</td><td>结尾 \d$ -&gt; 数字结尾</td><td></td></tr></tbody></table></div>        <h3 id="其他表达式示例">          <a href="#其他表达式示例" class="heading-link"><i class="fas fa-link"></i></a><a href="#其他表达式示例" class="headerlink" title="其他表达式示例"></a>其他表达式示例</h3>      <div class="table-container"><table><thead><tr><th>表达式</th><th>匹配</th></tr></thead><tbody><tr><td>(($\n\r*$)|(^\n\r*^))</td><td>匹配空行</td></tr><tr><td>(^(\s|&amp;nbsp;)*$)</td><td>匹配空行,包含空格</td></tr><tr><td>[一-龥]</td><td>匹配汉字</td></tr></tbody></table></div>]]></content>
    
    
    <categories>
      
      <category>正则表达式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JNI中打印AndroidLog</title>
    <link href="/2023/08/31/docs/android/jni/jni-zhong-da-yin-androidlog/"/>
    <url>/2023/08/31/docs/android/jni/jni-zhong-da-yin-androidlog/</url>
    
    <content type="html"><![CDATA[<p>在文件前面加上下面的定义</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;android/log.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TAG <span class="hljs-string">"LogTag"</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, TAG, __VA_ARGS__)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LOGI(...) __android_log_print(ANDROID_LOG_INFO, TAG, __VA_ARGS__)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LOGV(...) __android_log_print(ANDROID_LOG_VERBOSE, TAG, __VA_ARGS__)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LOGE(...) __android_log_print(ANDROID_LOG_ERROR, TAG, __VA_ARGS__)</span><br><br></code></pre></td></tr></tbody></table></figure><p>然后就可以使用定义的这些方法打印Logcat日志了</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>JNI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图片操作（byte[],Bitmap,YuvImage,Drawable）旋转、缩放、相互转化</title>
    <link href="/2023/08/31/docs/android/gong-ju-lei/tu-pian-cao-zuo-byte-bitmap-yuvimage-drawable-xuan-zhuan-suo-fang-xiang-hu-zhuan-hua/"/>
    <url>/2023/08/31/docs/android/gong-ju-lei/tu-pian-cao-zuo-byte-bitmap-yuvimage-drawable-xuan-zhuan-suo-fang-xiang-hu-zhuan-hua/</url>
    
    <content type="html"><![CDATA[<h2 id="byte-Bitmap-YuvImage-Drawable-旋转、缩放、相互转化">          <a href="#byte-Bitmap-YuvImage-Drawable-旋转、缩放、相互转化" class="heading-link"><i class="fas fa-link"></i></a><a href="#byte-Bitmap-YuvImage-Drawable-旋转、缩放、相互转化" class="headerlink" title="byte[],Bitmap,YuvImage,Drawable 旋转、缩放、相互转化"></a>byte[],Bitmap,YuvImage,Drawable 旋转、缩放、相互转化</h2>              <h3 id="1、byte-Bitmap">          <a href="#1、byte-Bitmap" class="heading-link"><i class="fas fa-link"></i></a><a href="#1、byte-Bitmap" class="headerlink" title="1、byte->Bitmap"></a>1、byte<a href="YuvImage"></a>-&gt;Bitmap</h3>      <p>在相机开发中，Camera获取到摄像头每一帧的图像数据byte[]，有时候需要把它转为Bitmap</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPreviewFrame</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token class-name">Camera</span> camera<span class="token punctuation">)</span> <span class="token punctuation">{</span>    camera<span class="token punctuation">.</span><span class="token function">setPreviewCallback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mCamera <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token class-name">Camera<span class="token punctuation">.</span>Parameters</span> parameters <span class="token operator">=</span> camera<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> width <span class="token operator">=</span> parameters<span class="token punctuation">.</span><span class="token function">getPreviewSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span>    <span class="token keyword">int</span> height <span class="token operator">=</span> parameters<span class="token punctuation">.</span><span class="token function">getPreviewSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>height<span class="token punctuation">;</span>    <span class="token class-name">YuvImage</span> yuv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">YuvImage</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> parameters<span class="token punctuation">.</span><span class="token function">getPreviewFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ByteArrayOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    yuv<span class="token punctuation">.</span><span class="token function">compressToJpeg</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> out<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Bitmap</span> bitmap <span class="token operator">=</span> <span class="token class-name">BitmapFactory</span><span class="token punctuation">.</span><span class="token function">decodeByteArray</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mCamera<span class="token punctuation">.</span><span class="token function">setPreviewCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="2、byte顺时针旋转90度">          <a href="#2、byte顺时针旋转90度" class="heading-link"><i class="fas fa-link"></i></a><a href="#2、byte顺时针旋转90度" class="headerlink" title="2、byte顺时针旋转90度"></a>2、byte<a href="YuvImage"></a>顺时针旋转90度</h3>      <p>Camera获取到摄像头图像帧数据，直接把byte[]数据进行图像旋转。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">rotateYUV420Degree90</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> imageWidth<span class="token punctuation">,</span> <span class="token keyword">int</span> imageHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> yuv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>imageWidth<span class="token operator">*</span>imageHeight<span class="token operator">*</span><span class="token number">3</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// Rotate the Y luma</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>x <span class="token operator">&lt;</span> imageWidth<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> imageHeight<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>y <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>y<span class="token operator">--</span><span class="token punctuation">)</span>                                       <span class="token punctuation">{</span>            yuv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>y<span class="token operator">*</span>imageWidth<span class="token operator">+</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// Rotate the U and V color components </span>    i <span class="token operator">=</span> imageWidth<span class="token operator">*</span>imageHeight<span class="token operator">*</span><span class="token number">3</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> imageWidth<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>x<span class="token operator">=</span>x<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>y <span class="token operator">&lt;</span> imageHeight<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>y<span class="token operator">++</span><span class="token punctuation">)</span>                                        <span class="token punctuation">{</span>            yuv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">(</span>imageWidth<span class="token operator">*</span>imageHeight<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>y<span class="token operator">*</span>imageWidth<span class="token punctuation">)</span><span class="token operator">+</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">--</span><span class="token punctuation">;</span>            yuv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">(</span>imageWidth<span class="token operator">*</span>imageHeight<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>y<span class="token operator">*</span>imageWidth<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> yuv<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Android很多使用zxing扫码工具，关于获取预览帧进行旋转的代码，大多数都是错误的，包括徐医生的在内的。<br>我从Zxing官方项目，下载源码进行了优化和精简，使用了很多不错的特性。<br><span class="exturl"><a class="exturl__link" href="https://github.com/JantHsueh/ZxingAndroid">源码地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="3-、从resources中获取Bitmap">          <a href="#3-、从resources中获取Bitmap" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-、从resources中获取Bitmap" class="headerlink" title="3 、从resources中获取Bitmap"></a>3 、从resources中获取Bitmap</h3>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Resources</span> res <span class="token operator">=</span> <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Bitmap</span> bmp <span class="token operator">=</span> <span class="token class-name">BitmapFactory</span><span class="token punctuation">.</span><span class="token function">decodeResource</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>icon<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>        <h3 id="4、Bitmap-→-byte">          <a href="#4、Bitmap-→-byte" class="heading-link"><i class="fas fa-link"></i></a><a href="#4、Bitmap-→-byte" class="headerlink" title="4、Bitmap → byte[]"></a>4、Bitmap → byte[]</h3>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">Bitmap2Bytes</span><span class="token punctuation">(</span><span class="token class-name">Bitmap</span> bm<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ByteArrayOutputStream</span> baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bm<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span><span class="token class-name">Bitmap<span class="token punctuation">.</span>CompressFormat</span><span class="token punctuation">.</span><span class="token constant">PNG</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> baos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="5、byte-→-Bitmap">          <a href="#5、byte-→-Bitmap" class="heading-link"><i class="fas fa-link"></i></a><a href="#5、byte-→-Bitmap" class="headerlink" title="5、byte[] → Bitmap"></a>5、byte[] → Bitmap</h3>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Bitmap</span> <span class="token class-name">Bytes2Bimap</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">BitmapFactory</span><span class="token punctuation">.</span><span class="token function">decodeByteArray</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="6、将Drawable转化为Bitmap">          <a href="#6、将Drawable转化为Bitmap" class="heading-link"><i class="fas fa-link"></i></a><a href="#6、将Drawable转化为Bitmap" class="headerlink" title="6、将Drawable转化为Bitmap"></a>6、将Drawable转化为Bitmap</h3>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Bitmap</span> <span class="token function">drawableToBitmap</span><span class="token punctuation">(</span><span class="token class-name">Drawable</span> drawable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 取 drawable 的长宽</span>    <span class="token keyword">int</span> w <span class="token operator">=</span> drawable<span class="token punctuation">.</span><span class="token function">getIntrinsicWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> drawable<span class="token punctuation">.</span><span class="token function">getIntrinsicHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 取 drawable 的颜色格式</span>    <span class="token class-name">Bitmap<span class="token punctuation">.</span>Config</span> config <span class="token operator">=</span> drawable<span class="token punctuation">.</span><span class="token function">getOpacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">PixelFormat</span><span class="token punctuation">.</span><span class="token constant">OPAQUE</span> <span class="token operator">?</span> <span class="token class-name">Bitmap<span class="token punctuation">.</span>Config</span><span class="token punctuation">.</span><span class="token constant">ARGB_8888</span> <span class="token operator">:</span> <span class="token class-name">Bitmap<span class="token punctuation">.</span>Config</span><span class="token punctuation">.</span><span class="token constant">RGB_565</span><span class="token punctuation">;</span>    <span class="token comment">// 建立对应 bitmap</span>    <span class="token class-name">Bitmap</span> bitmap <span class="token operator">=</span> <span class="token class-name">Bitmap</span><span class="token punctuation">.</span><span class="token function">createBitmap</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 建立对应 bitmap 的画布</span>    <span class="token class-name">Canvas</span> canvas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Canvas</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>    drawable<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 把 drawable 内容画到画布中</span>    drawable<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bitmap<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="7、Bitmap转换成Drawable">          <a href="#7、Bitmap转换成Drawable" class="heading-link"><i class="fas fa-link"></i></a><a href="#7、Bitmap转换成Drawable" class="headerlink" title="7、Bitmap转换成Drawable"></a>7、Bitmap转换成Drawable</h3>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Bitmap</span> bm<span class="token operator">=</span>xxx<span class="token punctuation">;</span> <span class="token comment">//xxx根据你的情况获取</span><span class="token class-name">BitmapDrawable</span> bd<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitmapDrawable</span><span class="token punctuation">(</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bm<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//因为BtimapDrawable是Drawable的子类，最终直接使用bd对象即可。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>        <h3 id="8、Bitmap缩放">          <a href="#8、Bitmap缩放" class="heading-link"><i class="fas fa-link"></i></a><a href="#8、Bitmap缩放" class="headerlink" title="8、Bitmap缩放"></a>8、Bitmap缩放</h3>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Bitmap</span> <span class="token function">zoomBitmap</span><span class="token punctuation">(</span><span class="token class-name">Bitmap</span> bitmap<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> w <span class="token operator">=</span> bitmap<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> bitmap<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Matrix</span> matrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Matrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> scaleWidth <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> width <span class="token operator">/</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> scaleHeight <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> height <span class="token operator">/</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    matrix<span class="token punctuation">.</span><span class="token function">postScale</span><span class="token punctuation">(</span>scaleWidth<span class="token punctuation">,</span> scaleHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Bitmap</span> newbmp <span class="token operator">=</span> <span class="token class-name">Bitmap</span><span class="token punctuation">.</span><span class="token function">createBitmap</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">,</span> matrix<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newbmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="9、Drawable缩放">          <a href="#9、Drawable缩放" class="heading-link"><i class="fas fa-link"></i></a><a href="#9、Drawable缩放" class="headerlink" title="9、Drawable缩放"></a>9、Drawable缩放</h3>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Drawable</span> <span class="token function">zoomDrawable</span><span class="token punctuation">(</span><span class="token class-name">Drawable</span> drawable<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">,</span> <span class="token keyword">int</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> width <span class="token operator">=</span> drawable<span class="token punctuation">.</span><span class="token function">getIntrinsicWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> height <span class="token operator">=</span> drawable<span class="token punctuation">.</span><span class="token function">getIntrinsicHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// drawable转换成bitmap</span>    <span class="token class-name">Bitmap</span> oldbmp <span class="token operator">=</span> <span class="token function">drawableToBitmap</span><span class="token punctuation">(</span>drawable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建操作图片用的Matrix对象</span>    <span class="token class-name">Matrix</span> matrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Matrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 计算缩放比例</span>    <span class="token keyword">float</span> sx <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> w <span class="token operator">/</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> sy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> h <span class="token operator">/</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置缩放比例</span>    matrix<span class="token punctuation">.</span><span class="token function">postScale</span><span class="token punctuation">(</span>sx<span class="token punctuation">,</span> sy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 建立新的bitmap，其内容是对原bitmap的缩放后的图</span>    <span class="token class-name">Bitmap</span> newbmp <span class="token operator">=</span> <span class="token class-name">Bitmap</span><span class="token punctuation">.</span><span class="token function">createBitmap</span><span class="token punctuation">(</span>oldbmp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span>matrix<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BitmapDrawable</span><span class="token punctuation">(</span>newbmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>工具类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EditText属性配置</title>
    <link href="/2023/08/31/docs/android/view/edittext/"/>
    <url>/2023/08/31/docs/android/view/edittext/</url>
    
    <content type="html"><![CDATA[<h3 id="一些-inputType-属性值"><a href="#一些-inputType-属性值" class="headerlink" title="一些 inputType 属性值"></a>一些 <code>inputType</code> 属性值</h3><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs routeros">android:<span class="hljs-attribute">inputType</span>=<span class="hljs-string">"none"</span>--输入普通字符<br><br>android:<span class="hljs-attribute">inputType</span>=<span class="hljs-string">"text"</span>--输入普通字符<br><br>android:<span class="hljs-attribute">inputType</span>=<span class="hljs-string">"textCapWords"</span>--单词首字母大小<br><br>android:<span class="hljs-attribute">inputType</span>=<span class="hljs-string">"textCapSentences"</span>--仅第一个字母大小<br><br>android:<span class="hljs-attribute">inputType</span>=<span class="hljs-string">"textAutoCorrect"</span>--前两个自动完成<br><br>android:<span class="hljs-attribute">inputType</span>=<span class="hljs-string">"textAutoComplete"</span>--前两个自动完成<br><br>android:<span class="hljs-attribute">inputType</span>=<span class="hljs-string">"textMultiLine"</span>--多行输入<br><br>android:<span class="hljs-attribute">inputType</span>=<span class="hljs-string">"textImeMultiLine"</span>--输入法多行（不一定支持）<br><br>android:<span class="hljs-attribute">inputType</span>=<span class="hljs-string">"textNoSuggestions"</span>--不提示<br><br>android:<span class="hljs-attribute">inputType</span>=<span class="hljs-string">"textUri"</span>--URI格式<br><br>android:<span class="hljs-attribute">inputType</span>=<span class="hljs-string">"textEmailAddress"</span>--电子邮件地址格式<br><br>android:<span class="hljs-attribute">inputType</span>=<span class="hljs-string">"textEmailSubject"</span>--邮件主题格式<br><br>android:<span class="hljs-attribute">inputType</span>=<span class="hljs-string">"textShortMessage"</span>--短消息格式<br><br>android:<span class="hljs-attribute">inputType</span>=<span class="hljs-string">"textLongMessage"</span>--长消息格式<br><br>android:<span class="hljs-attribute">inputType</span>=<span class="hljs-string">"textPersonName"</span>--人名格式<br><br>android:<span class="hljs-attribute">inputType</span>=<span class="hljs-string">"textPostalAddress"</span>--邮政格式<br><br>android:<span class="hljs-attribute">inputType</span>=<span class="hljs-string">"textPassword"</span>--密码格式<br><br>android:<span class="hljs-attribute">inputType</span>=<span class="hljs-string">"textVisiblePassword"</span>--密码可见格式<br><br>android:<span class="hljs-attribute">inputType</span>=<span class="hljs-string">"textWebEditText"</span>--作为网页表单的文本格式<br><br>android:<span class="hljs-attribute">inputType</span>=<span class="hljs-string">"textFilter"</span>--文本筛选格式<br><br>android:<span class="hljs-attribute">inputType</span>=<span class="hljs-string">"textPhonetic"</span>--拼音输入格式<br><br>android:<span class="hljs-attribute">inputType</span>=<span class="hljs-string">"number"</span>--数字格式<br><br>android:<span class="hljs-attribute">inputType</span>=<span class="hljs-string">"numberSigned"</span>--有符号数字格式<br><br>android:<span class="hljs-attribute">inputType</span>=<span class="hljs-string">"numberDecimal"</span>--可以带小数点的浮点格式<br><br>android:<span class="hljs-attribute">inputType</span>=<span class="hljs-string">"phone"</span>--拨号键盘<br><br>android:<span class="hljs-attribute">inputType</span>=<span class="hljs-string">"datetime"</span><br><br>android:<span class="hljs-attribute">inputType</span>=<span class="hljs-string">"date"</span>--日期键盘<br><br>android:<span class="hljs-attribute">inputType</span>=<span class="hljs-string">"time"</span>--时间键盘<br></code></pre></td></tr></tbody></table></figure><h3 id="清单文件里面键盘的属性"><a href="#清单文件里面键盘的属性" class="headerlink" title="清单文件里面键盘的属性"></a>清单文件里面键盘的属性</h3><p><code>android:windowSoftInputMode</code></p><figure class="highlight gcode"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-string">"stateUnspecified"</span><br><br>软键盘的状态<span class="hljs-comment">(是否它是隐藏或可见)</span>没有被指定。系统将选择一个合适的状态或依赖于主题的设置。<br><br>这个是软键盘行为默认的设置。<br><br><span class="hljs-string">"stateUnchanged"</span><br><br>软键盘被保持无论它上次是什么状态，是否可见或隐藏，当主窗口出现在前面时。<br><br><span class="hljs-string">"stateHidden"</span><br><br>当用户选择该Activity时，软键盘被隐藏——也就是，当用户确定导航到该Activity时，而不是返回到它由于离开另一个Activity。<br><br><span class="hljs-string">"stateAlwaysHidden"</span><br><br>软键盘总是被隐藏的，当该Activity主窗口获取焦点时。<br><br><span class="hljs-string">"stateVisible"</span><br><br>软键盘是可见的，当那个是正常合适的时<span class="hljs-comment">(当用户导航到Activity主窗口时)</span>。<br><br><span class="hljs-string">"stateAlwaysVisible"</span><br><br>当用户选择这个Activity时，软键盘是可见的——也就是，也就是，当用户确定导航到该Activity时，而不是返回到它由于离开另一个Activity。<br><br><span class="hljs-string">"adjustUnspecified"</span><br><br>它不被指定是否该Activity主 窗口调整大小以便留出软键盘的空间，或是否窗口上的内容得到屏幕上当前的焦点是可见的。<br><br>系统将自动选择这些模式中一种主要依赖于是否窗口的内容有任何布局 视图能够滚动他们的内容。如果有这样的一个视图，<br><br>这个窗口将调整大小，这样的假设可以使滚动窗口的内容在一个较小的区域中可见的。这个是主窗口默认的行为 设置。<br><br><span class="hljs-string">"adjustResize"</span><br><br>该Activity主窗口总是被调整屏幕的大小以便留出软键盘的空间<br><br><span class="hljs-string">"adjustPan"</span><br><br>该Activity主窗口并不调整屏幕的大小以便留出软键盘的空间。相反，当前窗口的内容将自动移动以便当前焦点从不被键盘覆盖和用户能总是看到输入内容的部分。<br><br>这个通常是不期望比调整大小，因为用户可能关闭软键盘以便获得与被覆盖内容的交互操作。<br></code></pre></td></tr></tbody></table></figure><h3 id="禁止EditText横屏键盘全屏"><a href="#禁止EditText横屏键盘全屏" class="headerlink" title="禁止EditText横屏键盘全屏"></a>禁止EditText横屏键盘全屏</h3><figure class="highlight avrasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">android:</span>imeOptions=<span class="hljs-string">"flagNoExtractUi"</span><br></code></pre></td></tr></tbody></table></figure><p>注意 若在切换横竖屏后页面显示不全需要追加属性 <code>flagNoFullscreen</code></p><figure class="highlight avrasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">android:</span>imeOptions=<span class="hljs-string">"flagNoExtractUi|flagNoFullscreen"</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>View</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RadioButton属性</title>
    <link href="/2023/08/31/docs/android/view/radiobutton/"/>
    <url>/2023/08/31/docs/android/view/radiobutton/</url>
    
    <content type="html"><![CDATA[<h1 id="RadioButton"><a href="#RadioButton" class="headerlink" title="RadioButton"></a>RadioButton</h1><h2 id="切换文字和按钮布局"><a href="#切换文字和按钮布局" class="headerlink" title="切换文字和按钮布局"></a>切换文字和按钮布局</h2><p>RadioButton默认选择框是在左边显示的，文字显示在右边。</p><p>在某些场景下，我们想在右边显示选择框，左边显示文字，给RadioButton 添加一下两个属性就可实现这种效果 </p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">android:layoutDirection="rtl"<br>android:textDirection="ltr"<br></code></pre></td></tr></tbody></table></figure><p>两个属性的值分别设置成 <code>ltr</code> 和 <code>rtl</code> 可以实现4种布局效果</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>View</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AndroidSamples</title>
    <link href="/2023/08/31/docs/android/qi-ta/androidsamples/"/>
    <url>/2023/08/31/docs/android/qi-ta/androidsamples/</url>
    
    <content type="html"><![CDATA[<h2 id="AndroidSamples">          <a href="#AndroidSamples" class="heading-link"><i class="fas fa-link"></i></a><a href="#AndroidSamples" class="headerlink" title="AndroidSamples"></a>AndroidSamples</h2>      <p><span class="exturl"><a class="exturl__link" href="https://github.com/android">Android</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><a href="git@github.com:sifutang/Camera1Demo.git">Camera1</a></p><p><a href="git@github.com:shalutd/DataStoreDemo.git">DataStoreDemo</a></p><p><a href="git@github.com:haiyangwu/mediasoup-demo-android.git">mediasoup-demo-android</a></p><p><a href="git@github.com:googlesamples/mlkit.git">MLKit</a></p><p><span class="exturl"><a class="exturl__link" href="https://github.com/saki4510t/UVCCamera">UVCCamera</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><a href="git@github.com:android/android-test.git">android-test</a></p><p><a href="git@github.com:googlecodelabs/android-compose-codelabs.git">android-compose-codelabs</a></p><p><a href="git@github.com:android/animation-samples.git">animation-samples</a></p><p><a href="git@github.com:android/background-tasks-samples.git">background-tasks-samples</a></p><p><a href="git@github.com:android/camera-samples.git">camera-samples</a></p><p><span class="exturl"><a class="exturl__link" href="https://github.com/android/compose-samples.git">compose-samples</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><a href="git@github.com:android/graphics-samples.git">graphics-samples</a></p><p><span class="exturl"><a class="exturl__link" href="https://github.com/material-components/material-components-android">material-components-android</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><a href="git@github.com:android/permissions-samples.git">permissions-samples</a></p><p><a href="git@github.com:android/testing-samples.git">testing-samples</a></p><p><a href="git@github.com:android/user-interface-samples.git">user-interface-samples</a></p><p><a href="git@github.com:android/views-widgets-samples.git">views-widgets-samples</a></p><p><span class="exturl"><a class="exturl__link" href="https://github.com/vcaen/splashscreen-sample.git">splashscreen-sample</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android目录文件简析</title>
    <link href="/2023/08/31/docs/android/qi-ta/android-mu-lu-wen-jian-jian-xi/"/>
    <url>/2023/08/31/docs/android/qi-ta/android-mu-lu-wen-jian-jian-xi/</url>
    
    <content type="html"><![CDATA[<h1 id="Android目录文件简析">          <a href="#Android目录文件简析" class="heading-link"><i class="fas fa-link"></i></a><a href="#Android目录文件简析" class="headerlink" title="Android目录文件简析"></a>Android目录文件简析</h1>      <p>[TOC]</p>        <h2 id="根目录">          <a href="#根目录" class="heading-link"><i class="fas fa-link"></i></a><a href="#根目录" class="headerlink" title="根目录"></a>根目录</h2>              <h3 id="data">          <a href="#data" class="heading-link"><i class="fas fa-link"></i></a><a href="#data" class="headerlink" title="data"></a>data</h3>      <p>data分区</p>        <h4 id="app">          <a href="#app" class="heading-link"><i class="fas fa-link"></i></a><a href="#app" class="headerlink" title="app"></a>app</h4>      <p>用户安装的软件都在这里面,一个包名一个文件夹</p>        <h5 id="oat-arm-base-art-base-odex-base-vdex">          <a href="#oat-arm-base-art-base-odex-base-vdex" class="heading-link"><i class="fas fa-link"></i></a><a href="#oat-arm-base-art-base-odex-base-vdex" class="headerlink" title="oat/arm/base.art,base.odex,base.vdex"></a>oat/arm/base.art,base.odex,base.vdex</h5>      <p>用户运行应用，而这随后就会触发 ART 加载 .dex 文件。<br>如果有 .oat 文件（即 .dex 文件的 AOT 二进制文件），则 ART 会直接使用该文件，软件速度会明显提升。删除这个文件夹一般不会影响软件功能，但是软件速度会明显变慢。<br>有Speed编译方式和Everything编译</p>        <h4 id="dalvik-cache">          <a href="#dalvik-cache" class="heading-link"><i class="fas fa-link"></i></a><a href="#dalvik-cache" class="headerlink" title="dalvik-cache"></a>dalvik-cache</h4>      <p>里面有arm和arm64文件夹，存放软件编译后的文件，这些文件删除后会重新生成。</p>        <h4 id="data-1">          <a href="#data-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#data-1" class="headerlink" title="data"></a>data</h4>      <p>软件数据目录</p>        <h4 id="media">          <a href="#media" class="heading-link"><i class="fas fa-link"></i></a><a href="#media" class="headerlink" title="media"></a>media</h4>              <h5 id="0">          <a href="#0" class="heading-link"><i class="fas fa-link"></i></a><a href="#0" class="headerlink" title="0"></a>0</h5>      <p>手机内部存储分区</p>        <h4 id="system">          <a href="#system" class="heading-link"><i class="fas fa-link"></i></a><a href="#system" class="headerlink" title="system"></a>system</h4>              <h5 id="locksettings-db">          <a href="#locksettings-db" class="heading-link"><i class="fas fa-link"></i></a><a href="#locksettings-db" class="headerlink" title="locksettings.db"></a>locksettings.db</h5>      <p>锁屏密码文件，删除此文件即可删除手机锁屏密码</p>        <h3 id="dev">          <a href="#dev" class="heading-link"><i class="fas fa-link"></i></a><a href="#dev" class="headerlink" title="dev"></a>dev</h3>      <p>手机各分区文件</p>        <h3 id="etc">          <a href="#etc" class="heading-link"><i class="fas fa-link"></i></a><a href="#etc" class="headerlink" title="etc"></a>etc</h3>              <h4 id="host">          <a href="#host" class="heading-link"><i class="fas fa-link"></i></a><a href="#host" class="headerlink" title="host"></a>host</h4>      <pre class="line-numbers language-none"><code class="language-none">127.0.0.1 localhost::         1ip6-localhost<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以修改此文件达到去广告或限制手机访问某些域名的目的<br>比如加上<code>127.0.0.1  baidu.com</code> ，手机就访问不了百度了</p>        <h3 id="misc">          <a href="#misc" class="heading-link"><i class="fas fa-link"></i></a><a href="#misc" class="headerlink" title="misc"></a>misc</h3>              <h4 id="wifi">          <a href="#wifi" class="heading-link"><i class="fas fa-link"></i></a><a href="#wifi" class="headerlink" title="wifi"></a>wifi</h4>              <h5 id="WifiConfigStore-xml">          <a href="#WifiConfigStore-xml" class="heading-link"><i class="fas fa-link"></i></a><a href="#WifiConfigStore-xml" class="headerlink" title="WifiConfigStore.xml"></a>WifiConfigStore.xml</h5>      <p>这个文件存放手机连接的WiFi信息，打开可以查看手机连接过的所有WiFi密码信息</p>        <h3 id="sbin">          <a href="#sbin" class="heading-link"><i class="fas fa-link"></i></a><a href="#sbin" class="headerlink" title="sbin"></a>sbin</h3>              <h3 id="sdcard">          <a href="#sdcard" class="heading-link"><i class="fas fa-link"></i></a><a href="#sdcard" class="headerlink" title="sdcard"></a>sdcard</h3>      <p>实质上是一个快捷方式，指向<code>data/media/0</code></p>        <h3 id="storage">          <a href="#storage" class="heading-link"><i class="fas fa-link"></i></a><a href="#storage" class="headerlink" title="storage"></a>storage</h3>      <p><code>storage/emulated/0</code> 也是 <code>data/media/0</code> 手机内部存储目录</p>        <h3 id="system-1">          <a href="#system-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#system-1" class="headerlink" title="system"></a>system</h3>              <h4 id="app-1">          <a href="#app-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#app-1" class="headerlink" title="app"></a>app</h4>      <p>系统级非核心软件，删除里面的软件系统不一定会崩溃</p>        <h4 id="data-app">          <a href="#data-app" class="heading-link"><i class="fas fa-link"></i></a><a href="#data-app" class="headerlink" title="data-app"></a>data-app</h4>      <p>不是必有的文件夹，有些系统会预装很多软件，即使卸载后，再恢复出厂设置就又会出现，这些预装软件就是放在这里面的，系统第一次初始化时会把这些软件安装到data分区</p>        <h4 id="priv-app">          <a href="#priv-app" class="heading-link"><i class="fas fa-link"></i></a><a href="#priv-app" class="headerlink" title="priv-app"></a>priv-app</h4>      <p>安卓4.4增加的新分区，主要是存放系统的系统级核心应用，比如电话，短信，设置，SystemUI等，这些应用需要系统级权限，而又不能被用户卸载掉，删除里面的软件后系统会崩溃</p>        <h3 id="xbin">          <a href="#xbin" class="heading-link"><i class="fas fa-link"></i></a><a href="#xbin" class="headerlink" title="xbin"></a>xbin</h3>      <p>如果使用普通方式 root，里面会有<code>su</code>文件，可以通过此方式判断设备有没有被 root，但是如果是用的<code>magisk</code>进行root不会有这个文件，<code>magisk</code>可以隐藏 root（现在应该有别的方式去判断是否有root权限，Magisk应该也有别的方式去隐藏root）</p>        <h3 id="media-1">          <a href="#media-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#media-1" class="headerlink" title="media"></a>media</h3>      <p>系统媒体文件夹</p>        <h4 id="audio">          <a href="#audio" class="heading-link"><i class="fas fa-link"></i></a><a href="#audio" class="headerlink" title="audio"></a>audio</h4>              <h4 id="alarm">          <a href="#alarm" class="heading-link"><i class="fas fa-link"></i></a><a href="#alarm" class="headerlink" title="alarm"></a>alarm</h4>      <p>系统预设闹铃铃声</p>        <h4 id="notification">          <a href="#notification" class="heading-link"><i class="fas fa-link"></i></a><a href="#notification" class="headerlink" title="notification"></a>notification</h4>      <p>系统预设通知铃声</p>        <h4 id="ringtones">          <a href="#ringtones" class="heading-link"><i class="fas fa-link"></i></a><a href="#ringtones" class="headerlink" title="ringtones"></a>ringtones</h4>      <p>系统预设电话铃声</p>        <h4 id="ui">          <a href="#ui" class="heading-link"><i class="fas fa-link"></i></a><a href="#ui" class="headerlink" title="ui"></a>ui</h4>      <p>系统各种UI提示音<br>比如拍照快门声，充电音效，锁屏音效等</p>        <h4 id="lockscreen，wallpager">          <a href="#lockscreen，wallpager" class="heading-link"><i class="fas fa-link"></i></a><a href="#lockscreen，wallpager" class="headerlink" title="lockscreen，wallpager"></a>lockscreen，wallpager</h4>      <p>系统预设壁纸</p>        <h4 id="bootanimation-zip">          <a href="#bootanimation-zip" class="heading-link"><i class="fas fa-link"></i></a><a href="#bootanimation-zip" class="headerlink" title="bootanimation.zip"></a>bootanimation.zip</h4>      <p>开机动画，里面是包含一个<code>desc.txt</code>文件和若干个<code>part</code>文件夹<br><code>part</code> 文件夹里面是动画的每一帧<br><code>desc</code> 文件用来描述动画属性</p>        <h3 id="build-prop">          <a href="#build-prop" class="heading-link"><i class="fas fa-link"></i></a><a href="#build-prop" class="headerlink" title="build.prop"></a>build.prop</h3>      <p>系统配置属性文件<br>正确的修改可以自定义系统某些特性。<br>下面是里面部分内容所代表的意思</p><pre class="line-numbers language-none"><code class="language-none">ro.boot.selinux=permissivepermissive模式#音量阶数ro.config.media_vol_steps = 30#增加虚拟键qemu.hw.mainkeys=0#谷歌相机persist.camera.HAL3.enabled=1#增加虚拟键qemu.hw.mainkeys=0#渲染GPU的UIdebug.sf.hw=1#禁用开机动画debug.sf.nobootanimation=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="vendor">          <a href="#vendor" class="heading-link"><i class="fas fa-link"></i></a><a href="#vendor" class="headerlink" title="vendor"></a>vendor</h3>      <p>安卓8新加的分区<br>有<code>vendor</code>分区不一定支持<code>PT（ProjectTreble）</code>，支持<code>PT</code>的一定有<code>vendor</code>分区<br>这里面存放底层芯片硬件驱动等</p>        <h2 id="Xposed">          <a href="#Xposed" class="heading-link"><i class="fas fa-link"></i></a><a href="#Xposed" class="headerlink" title="Xposed"></a>Xposed</h2>      <p><code>Xposed</code> 是一款开源框架，可以在不修改APK的情况下影响程序运行(修改系统)的框架服务，基于它可以制作出许多功能强大的模块，且在功能不冲突的情况下同时运作。<br><code>Xposed</code> 具有比较高的可定制化程度。用户可定制手机的外观、状态等几乎所有东西，<br><code>Xposed</code>的主要作用是hook应用方法，动态劫持方法的运行逻辑。<br>需要用 <code>Xposed管理器</code> 配合相关 <code>XP模块</code> 来使用。<br>目前<code>Xposed</code> 已经停止维护，在高版本安卓上面已经不能使用了，取而代之的有<code>Edxposed</code>、<code>LSPosed</code>等<br><code>Xp模块</code>也是一个apk，编写时引用的<code>XposedBridgeApi.jar</code>，<code>Mainfest.xml</code>文件加入以下标签</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta-data</span>        <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xposedmodule<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta-data</span>        <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xposeddescription<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>这是一个xposed应用<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta-data</span>        <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xposedminversion<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>54<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后编写hook工具类，重写<code>handleLoadPakage</code>方法 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XposedHookUtil</span> <span class="token keyword">implements</span> <span class="token class-name">IXposedHookLoadPackage</span> <span class="token punctuation">{</span><span class="token class-name">String</span> class_name <span class="token operator">=</span> <span class="token string">"com.hdc.xposeddemo.MainActivity"</span><span class="token punctuation">;</span><span class="token comment">// 对指定包名,指定方法进行hook，将其修改成自己的方法</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleLoadPackage</span><span class="token punctuation">(</span><span class="token class-name">XC_LoadPackage<span class="token punctuation">.</span>LoadPackageParam</span> loadPackageParam<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>    <span class="token class-name">Class</span> clazz <span class="token operator">=</span> loadPackageParam<span class="token punctuation">.</span>classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>class_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">XposedHelpers</span><span class="token punctuation">.</span><span class="token function">findAndHookMethod</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> <span class="token string">"getTTAd"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">XC_MethodReplacement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">replaceHookedMethod</span><span class="token punctuation">(</span><span class="token class-name">MethodHookParam</span> methodHookParam<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>            xxxx<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用的Xposed模块：QX，微X，应用变量等</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ContentResolver</title>
    <link href="/2023/08/31/docs/android/qi-ta/contentresolver/"/>
    <url>/2023/08/31/docs/android/qi-ta/contentresolver/</url>
    
    <content type="html"><![CDATA[<h2 id="ContentResolver">          <a href="#ContentResolver" class="heading-link"><i class="fas fa-link"></i></a><a href="#ContentResolver" class="headerlink" title="ContentResolver"></a>ContentResolver</h2>              <h3 id="遍历其他类型文件">          <a href="#遍历其他类型文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#遍历其他类型文件" class="headerlink" title="遍历其他类型文件"></a>遍历其他类型文件</h3>      <pre class="line-numbers language-Kotlin" data-language="Kotlin"><code class="language-Kotlin">val cursor: Cursor? = requireContext().contentResolver.query(    //数据源    MediaStore.Files.getContentUri("external"),    // 想要查询的信息    arrayOf(        MediaStore.Files.FileColumns._ID,        MediaStore.Files.FileColumns.TITLE,        MediaStore.Files.FileColumns.DISPLAY_NAME,    ),    //条件为文件类型    MediaStore.Files.FileColumns.MIME_TYPE + "= ?",    arrayOf(        MimeTypeMap.getSingleton().getMimeTypeFromExtension("docx"),        MimeTypeMap.getSingleton().getMimeTypeFromExtension("pdf"),        MimeTypeMap.getSingleton().getMimeTypeFromExtension("doc"),        MimeTypeMap.getSingleton().getMimeTypeFromExtension("xls"),        MimeTypeMap.getSingleton().getMimeTypeFromExtension("xlsx"),    ),    //默认排序    null)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebRTC编译</title>
    <link href="/2023/08/31/docs/android/qi-ta/webrtc-bian-yi/"/>
    <url>/2023/08/31/docs/android/qi-ta/webrtc-bian-yi/</url>
    
    <content type="html"><![CDATA[<p><span class="exturl"><a class="exturl__link" href="https://glumes.com/post/webrtc/webrtc-android-setup/">https://glumes.com/post/webrtc/webrtc-android-setup/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h4 id="安装工具">          <a href="#安装工具" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h4>      <p>下载工具</p><pre class="line-numbers language-none"><code class="language-none">// 安装一些基础的软件依赖sudo apt-get updatesudo apt-get install -y openssl vim git gcc g++ curl python build-essential inetutils-ping net-tools sudo lsb-release libxml2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下载depot_tools</p><pre class="line-numbers language-none"><code class="language-none">git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置环境</p><pre class="line-numbers language-none"><code class="language-none">// 配置环境，打开.bashrc文件gedit ~/.bashrc// 在这文件添加如下内容# depot_tools_pathexport DEPOT_TOOLS_PATH=/root/work/webrtc/depot_toolsexport PATH=${PATH}:${DEPOT_TOOLS_PATH}// 使环境生效source ~/.bashrc// 查看是否设置成功echo $PATHfetch --help<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建立源码路径，下载好源码（漫长的过程）后期更新只需要执行 gclient sync 即可</p><pre class="line-numbers language-none"><code class="language-none">mkdir webrtccd webrtcfetch --nohooks webrtc_androidgclient sync<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        <h4 id="安装依赖">          <a href="#安装依赖" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4>      <p>下载完 WebRTC 后需要安装相关的依赖，进入到 WebRTC 源码的 <code>src</code> 目录中，执行如下命令：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cd src<span class="token punctuation">.</span><span class="token operator">/</span>build<span class="token operator">/</span>install<span class="token operator">-</span>build<span class="token operator">-</span>deps<span class="token punctuation">.</span>sh <span class="token operator">--</span>no<span class="token operator">-</span>chromeos<span class="token operator">-</span>fonts<span class="token punctuation">.</span><span class="token operator">/</span>build<span class="token operator">/</span>install<span class="token operator">-</span>build<span class="token operator">-</span>deps<span class="token operator">-</span>android<span class="token punctuation">.</span>sh <span class="token operator">--</span>no<span class="token operator">-</span>chromeos<span class="token operator">-</span>fonts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行shell脚本时报错：: 没有那个文件或目录<br>是因为该文件在windows系统上打开过，关闭后其中的空格符号和Linux的不同，导致这个报错，我们可以通过sed命令与正则的配合将文件中的空格符号替换成linux的空格：</p><pre class="line-numbers language-none"><code class="language-none">sed -i 's/\r$//' xxx.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h4 id="编译">          <a href="#编译" class="heading-link"><i class="fas fa-link"></i></a><a href="#编译" class="headerlink" title="编译"></a>编译</h4>      <p>设置编译参数，生成ninja文件</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token preprocessor property"># source ./build/android/envsetup.sh</span>gn gen <span class="token keyword">out</span><span class="token operator">/</span>build <span class="token operator">--</span>args<span class="token operator">=</span>'target_os<span class="token operator">=</span><span class="token string">"android"</span> target_cpu<span class="token operator">=</span><span class="token string">"arm64"</span> is_debug<span class="token operator">=</span><span class="token class-name">false</span> treat_warnings_as_errors<span class="token operator">=</span><span class="token boolean">false</span>'<span class="token preprocessor property"># out/build ： 编译生成文件的目录，随意指定</span><span class="token preprocessor property"># target_os ： 编译目标平台 android ios 等</span><span class="token preprocessor property"># target_cpu ： CPU架构平台 arm arm64 x86 x64等</span><span class="token preprocessor property"># is_debug : Release模式或者Debug模式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>清理目录</p><pre class="line-numbers language-none"><code class="language-none">gn clean out/build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编译</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token preprocessor property">#全量编译</span>ninja <span class="token operator">-</span>C <span class="token keyword">out</span><span class="token operator">/</span>build    ninja <span class="token operator">-</span>C <span class="token keyword">out</span><span class="token operator">/</span>build AppRTCMobile<span class="token preprocessor property">#编译组合</span>a<span class="token punctuation">)</span>编译arm debug版本    gn gen <span class="token keyword">out</span><span class="token operator">/</span>Debug_arm <span class="token operator">--</span>args<span class="token operator">=</span>'target_os<span class="token operator">=</span><span class="token string">"android"</span> target_cpu<span class="token operator">=</span><span class="token string">"arm"</span> treat_warnings_as_errors<span class="token operator">=</span><span class="token boolean">false</span>'    ninja <span class="token operator">-</span>C <span class="token keyword">out</span><span class="token operator">/</span><span class="token class-name">Debug_arm</span>b<span class="token punctuation">)</span>编译arm64 debug版本    gn gen <span class="token keyword">out</span><span class="token operator">/</span>Debug_arm64 <span class="token operator">--</span>args<span class="token operator">=</span>'target_os<span class="token operator">=</span><span class="token string">"android"</span> target_cpu<span class="token operator">=</span><span class="token string">"arm64"</span> treat_warnings_as_errors<span class="token operator">=</span><span class="token boolean">false</span>'    ninja <span class="token operator">-</span>C <span class="token keyword">out</span><span class="token operator">/</span><span class="token class-name">Debug_arm64</span>c<span class="token punctuation">)</span>编译arm release版本    gn gen <span class="token keyword">out</span><span class="token operator">/</span>Release_arm <span class="token operator">--</span>args<span class="token operator">=</span>'target_os<span class="token operator">=</span><span class="token string">"android"</span> target_cpu<span class="token operator">=</span><span class="token string">"arm"</span> is_debug<span class="token operator">=</span><span class="token class-name">false</span> treat_warnings_as_errors<span class="token operator">=</span><span class="token boolean">false</span>'    ninja <span class="token operator">-</span>C <span class="token keyword">out</span><span class="token operator">/</span><span class="token class-name">Release_arm</span>d<span class="token punctuation">)</span>编译arm64 release版本    gn gen <span class="token keyword">out</span><span class="token operator">/</span>Release_arm64 <span class="token operator">--</span>args<span class="token operator">=</span>'target_os<span class="token operator">=</span><span class="token string">"android"</span> target_cpu<span class="token operator">=</span><span class="token string">"arm64"</span> is_debug<span class="token operator">=</span><span class="token class-name">false</span> treat_warnings_as_errors<span class="token operator">=</span><span class="token boolean">false</span>'    ninja <span class="token operator">-</span>C <span class="token keyword">out</span><span class="token operator">/</span>Release_arm64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成aar</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> webrtc/srcpython tools_webrtc/android/build_aar.py <span class="token parameter variable">--output</span> <span class="token string">"libwebrtc.aar"</span> <span class="token parameter variable">--arch</span> <span class="token string">"armeabi-v7a"</span> <span class="token string">"arm64-v8a"</span> --build-dir out/Release  --extra-gn-args <span class="token string">'is_debug=false is_component_build=false is_clang=true rtc_include_tests=false rtc_use_h264=true rtc_enable_protobuf=false use_rtti=true use_custom_libcxx=false treat_warnings_as_errors=false'</span> //只编译 arm64python tools_webrtc/android/build_aar.py <span class="token parameter variable">--output</span> <span class="token string">"libwebrtc.aar"</span> <span class="token parameter variable">--arch</span> <span class="token string">"arm64-v8a"</span> --build-dir out/Release  --extra-gn-args <span class="token string">'is_debug=false is_component_build=false is_clang=true rtc_include_tests=false rtc_use_h264=true rtc_enable_protobuf=false use_rtti=true use_custom_libcxx=false treat_warnings_as_errors=false'</span><span class="token comment"># 成功后你会在src目录下看到libwebrtc.aar文件，里面就是Android开发需要用到的SDK了。</span><span class="token comment"># out/Release目录是编译目录，第一编译会全量编译速度很慢（预计30~40分钟），以后就增量编译很快（预计10s内）。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成so文件，生成so文件首次会全量编译，后续增量编译速度非常快。如果以后只改C层代码不生成Java或者Object-C的API，这种方法非常适合测试。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">ninja <span class="token operator">-</span>C <span class="token keyword">out</span><span class="token operator">/</span>Release sdk<span class="token operator">/</span>android<span class="token punctuation">:</span>libjingle_peerconnection_so<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h4 id="编译mediasoupclient">          <a href="#编译mediasoupclient" class="heading-link"><i class="fas fa-link"></i></a><a href="#编译mediasoupclient" class="headerlink" title="编译mediasoupclient"></a>编译mediasoupclient</h4>      <pre class="line-numbers language-none"><code class="language-none">$ cd /root/work/libmediasoupclient$ cmake . -Bbuild \  -DLIBWEBRTC_INCLUDE_PATH:PATH=/root/work/webrtc/webrtc_android/src \  -DLIBWEBRTC_BINARY_PATH:PATH=/root/work/webrtc/webrtc_android/src/out/build/obj$ make -C build/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装包时可能会因为依赖其他包而安装失败，可以使用aptitude安装</p><pre class="line-numbers language-none"><code class="language-none">// 安装aptitudesudo apt-get install aptitude// 安装所需要的包sudo aptitude install xxxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>或者 <span class="exturl"><a class="exturl__link" href="https://launchpad.net/ubuntu">https://launchpad.net/ubuntu</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 搜索需要的deb包，然后到本地下载，然后dpkg -i xxx.deb</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>查看Apk签名信息</title>
    <link href="/2023/08/31/docs/android/qi-ta/cha-kan-apk-qian-ming-xin-xi/"/>
    <url>/2023/08/31/docs/android/qi-ta/cha-kan-apk-qian-ming-xin-xi/</url>
    
    <content type="html"><![CDATA[<h1 id="查看apk签名信息"><a href="#查看apk签名信息" class="headerlink" title="查看apk签名信息"></a>查看apk签名信息</h1><h2 id="直接用Android-SDK中的工具查看"><a href="#直接用Android-SDK中的工具查看" class="headerlink" title="直接用Android-SDK中的工具查看"></a>直接用Android-SDK中的工具查看</h2><figure class="highlight mipsasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>.\apksigner.<span class="hljs-keyword">jar </span>verify --verbose --print-certs xxx.apk<br></code></pre></td></tr></tbody></table></figure><p>其中 <code>apksigner.jar</code> 工具包位置在 <code>Android-SDK</code> 目录下面，<code>Android-SDK\build-tools\xx.x.x\lib</code></p><h2 id="使用JDK中的工具查看"><a href="#使用JDK中的工具查看" class="headerlink" title="使用JDK中的工具查看"></a>使用JDK中的工具查看</h2><p>转自：<a href="https://blog.csdn.net/findsafety/article/details/25365997">https://blog.csdn.net/findsafety/article/details/25365997</a></p><p>假定安装了JDK，如果想查HelloWorld.apk所使用的签名的fingerprint，可以这样做：</p><ol><li><p>查找apk里的rsa文件</p><p> （Windows）</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jar tf HelloWorld.apk | findstr RSA<br></code></pre></td></tr></tbody></table></figure><p> （Linux）</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jar tf HelloWorld.apk | grep RSA<br></code></pre></td></tr></tbody></table></figure><p> 输出结果：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">META-INF/CERT.RSA<br></code></pre></td></tr></tbody></table></figure></li><li><p>从apk中解压rsa文件</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jar xf HelloWorld.apk META-INF/CERT.RSA<br></code></pre></td></tr></tbody></table></figure></li><li><p>获取签名的fingerprints</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">keytool -printcert -file META-INF/CERT.RSA<br></code></pre></td></tr></tbody></table></figure><p> 输出结果</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">...<br>Certificate fingerprints:<br>MD5: BC:6D:BD:6E:49:69:2A:57:A8:B8:28:89:04:3B:93:A8<br>SHA1: 0D:DF:76:F4:85:96:DF:17:C2:68:1D:3D:FF:9B:0F:D2:A1:CF:14:60<br>Signature algorithm name: SHA1withRSA<br>Version: 3<br>...<br></code></pre></td></tr></tbody></table></figure></li><li><p>清理工作，删除rsa文件</p><p> （Windows）</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rmdir</span> /S /Q META-INF<br></code></pre></td></tr></tbody></table></figure><p> （Linux）</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf META-INF<br></code></pre></td></tr></tbody></table></figure></li></ol><p>如果你想知道两个apk是不是用的同一个签名，那比一下它们签名的MD5码（或SHA1码）是不是一样就行了。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统广播</title>
    <link href="/2023/08/31/docs/android/qi-ta/xi-tong-guang-bo/"/>
    <url>/2023/08/31/docs/android/qi-ta/xi-tong-guang-bo/</url>
    
    <content type="html"><![CDATA[<h2 id="一些系统广播">          <a href="#一些系统广播" class="heading-link"><i class="fas fa-link"></i></a><a href="#一些系统广播" class="headerlink" title="一些系统广播"></a>一些系统广播</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java">intent<span class="token punctuation">.</span>action<span class="token punctuation">.</span><span class="token constant">AIRPLANE_MODE</span><span class="token punctuation">;</span><span class="token comment">//关闭或打开飞行模式时的广播</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_BATTERY_CHANGED</span><span class="token punctuation">;</span><span class="token comment">//充电状态，或者电池的电量发生变化</span><span class="token comment">//电池的充电状态、电荷级别改变，不能通过组建声明接收这个广播，只有通过Context.registerReceiver()注册</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_BATTERY_LOW</span><span class="token punctuation">;</span><span class="token comment">//表示电池电量低</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_BATTERY_OKAY</span><span class="token punctuation">;</span><span class="token comment">//表示电池电量充足，即从电池电量低变化到饱满时会发出广播</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_BOOT_COMPLETED</span><span class="token punctuation">;</span><span class="token comment">//在系统启动完成后，这个动作被广播一次（只有一次）。</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_CAMERA_BUTTON</span><span class="token punctuation">;</span><span class="token comment">//按下照相时的拍照按键(硬件按键)时发出的广播</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_CLOSE_SYSTEM_DIALOGS</span><span class="token punctuation">;</span><span class="token comment">//当屏幕超时进行锁屏时,当用户按下电源按钮,长按或短按(不管有没跳出话框)，进行锁屏时,android系统都会广播此Action消息</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_CONFIGURATION_CHANGED</span><span class="token punctuation">;</span><span class="token comment">//设备当前设置被改变时发出的广播(包括的改变:界面语言，设备方向，等，请参考Configuration.java)</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_DATE_CHANGED</span><span class="token punctuation">;</span><span class="token comment">//设备日期发生改变时会发出此广播</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_DEVICE_STORAGE_LOW</span><span class="token punctuation">;</span><span class="token comment">//设备内存不足时发出的广播,此广播只能由系统使用，其它APP不可用？</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_DEVICE_STORAGE_OK</span><span class="token punctuation">;</span><span class="token comment">//设备内存从不足到充足时发出的广播,此广播只能由系统使用，其它APP不可用？</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_DOCK_EVENT</span><span class="token punctuation">;</span><span class="token comment">//</span><span class="token comment">//发出此广播的地方frameworks\base\services\java\com\android\server\DockObserver.java</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_EXTERNAL_APPLICATIONS_AVAILABLE</span><span class="token punctuation">;</span><span class="token comment">////移动APP完成之后，发出的广播(移动是指:APP2SD)</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE</span><span class="token punctuation">;</span><span class="token comment">//正在移动APP时，发出的广播(移动是指:APP2SD)</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_GTALK_SERVICE_CONNECTED</span><span class="token punctuation">;</span><span class="token comment">//Gtalk已建立连接时发出的广播</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_GTALK_SERVICE_DISCONNECTED</span><span class="token punctuation">;</span><span class="token comment">//Gtalk已断开连接时发出的广播</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_HEADSET_PLUG</span><span class="token punctuation">;</span><span class="token comment">//在耳机口上插入耳机时发出的广播</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_INPUT_METHOD_CHANGED</span><span class="token punctuation">;</span><span class="token comment">//改变输入法时发出的广播</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_LOCALE_CHANGED</span><span class="token punctuation">;</span><span class="token comment">//设备当前区域设置已更改时发出的广播</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_MANAGE_PACKAGE_STORAGE</span><span class="token punctuation">;</span><span class="token comment">//</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_MEDIA_BAD_REMOVAL</span><span class="token punctuation">;</span><span class="token comment">//未正确移除SD卡(正确移除SD卡的方法:设置--SD卡和设备内存--卸载SD卡)，但已把SD卡取出来时发出的广播</span><span class="token comment">//广播：扩展介质（扩展卡）已经从 SD 卡插槽拔出，但是挂载点 (mount point) 还没解除 (unmount)</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_MEDIA_BUTTON</span><span class="token punctuation">;</span><span class="token comment">//按下"Media Button" 按键时发出的广播,假如有"Media Button" 按键的话(硬件按键)</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_MEDIA_CHECKING</span><span class="token punctuation">;</span><span class="token comment">//插入外部储存装置，比如SD卡时，系统会检验SD卡，此时发出的广播?</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_MEDIA_EJECT</span><span class="token punctuation">;</span><span class="token comment">//已拔掉外部大容量储存设备发出的广播（比如SD卡，或移动硬盘）,不管有没有正确卸载都会发出此广播?</span><span class="token comment">//广播：用户想要移除扩展介质（拔掉扩展卡）。</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_MEDIA_MOUNTED</span><span class="token punctuation">;</span><span class="token comment">//插入SD卡并且已正确安装（识别）时发出的广播</span><span class="token comment">//广播：扩展介质被插入，而且已经被挂载。</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_MEDIA_NOFS</span><span class="token punctuation">;</span><span class="token comment">//</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_MEDIA_REMOVED</span><span class="token punctuation">;</span><span class="token comment">//外部储存设备已被移除，不管有没正确卸载,都会发出此广播？</span><span class="token comment">// 广播：扩展介质被移除。</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_MEDIA_SCANNER_FINISHED</span><span class="token punctuation">;</span><span class="token comment">//广播：已经扫描完介质的一个目录</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_MEDIA_SCANNER_SCAN_FILE</span><span class="token punctuation">;</span><span class="token comment">//</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_MEDIA_SCANNER_STARTED</span><span class="token punctuation">;</span><span class="token comment">//广播：开始扫描介质的一个目录</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_MEDIA_SHARED</span><span class="token punctuation">;</span><span class="token comment">// 广播：扩展介质的挂载被解除 (unmount)，因为它已经作为 USB 大容量存储被共享。</span> <span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_MEDIA_UNMOUNTABLE</span><span class="token punctuation">;</span><span class="token comment">//</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_MEDIA_UNMOUNTED</span><span class="token comment">// 广播：扩展介质存在，但是还没有被挂载 (mount)。</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_NEW_OUTGOING_CALL</span><span class="token punctuation">;</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_PACKAGE_ADDED</span><span class="token punctuation">;</span><span class="token comment">//成功的安装APK之后</span><span class="token comment">//广播：设备上新安装了一个应用程序包。</span><span class="token comment">//一个新应用包已经安装在设备上，数据包括包名（最新安装的包程序不能接收到这个广播）</span> <span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_PACKAGE_CHANGED</span><span class="token punctuation">;</span><span class="token comment">//一个已存在的应用程序包已经改变，包括包名</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_PACKAGE_DATA_CLEARED</span><span class="token punctuation">;</span><span class="token comment">//清除一个应用程序的数据时发出的广播(在设置－－应用管理－－选中某个应用，之后点清除数据时?)</span><span class="token comment">//用户已经清除一个包的数据，包括包名（清除包程序不能接收到这个广播）</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_PACKAGE_INSTALL</span><span class="token punctuation">;</span><span class="token comment">//触发一个下载并且完成安装时发出的广播，比如在电子市场里下载应用？</span><span class="token comment">//</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_PACKAGE_REMOVED</span><span class="token punctuation">;</span><span class="token comment">//成功的删除某个APK之后发出的广播</span><span class="token comment">//一个已存在的应用程序包已经从设备上移除，包括包名（正在被安装的包程序不能接收到这个广播）</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_PACKAGE_REPLACED</span><span class="token punctuation">;</span><span class="token comment">//替换一个现有的安装包时发出的广播（不管现在安装的APP比之前的新还是旧，都会发出此广播？）</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_PACKAGE_RESTARTED</span><span class="token punctuation">;</span><span class="token comment">//用户重新开始一个包，包的所有进程将被杀死，所有与其联系的运行时间状态应该被移除，包括包名（重新开始包程序不能接收到这个广播）</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_POWER_CONNECTED</span><span class="token punctuation">;</span><span class="token comment">//插上外部电源时发出的广播</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_POWER_DISCONNECTED</span><span class="token punctuation">;</span><span class="token comment">//已断开外部电源连接时发出的广播</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_PROVIDER_CHANGED</span><span class="token punctuation">;</span><span class="token comment">//</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_REBOOT</span><span class="token punctuation">;</span><span class="token comment">//重启设备时的广播</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_SCREEN_OFF</span><span class="token punctuation">;</span><span class="token comment">//屏幕被关闭之后的广播</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_SCREEN_ON</span><span class="token punctuation">;</span><span class="token comment">//屏幕被打开之后的广播</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_SHUTDOWN</span><span class="token punctuation">;</span><span class="token comment">//关闭系统时发出的广播</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_TIMEZONE_CHANGED</span><span class="token punctuation">;</span><span class="token comment">//时区发生改变时发出的广播</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_TIME_CHANGED</span><span class="token punctuation">;</span><span class="token comment">//时间被设置时发出的广播</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_TIME_TICK</span><span class="token punctuation">;</span><span class="token comment">//广播：当前时间已经变化（正常的时间流逝）。</span><span class="token comment">//当前时间改变，每分钟都发送，不能通过组件声明来接收，只有通过Context.registerReceiver()方法来注册</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_UID_REMOVED</span><span class="token punctuation">;</span><span class="token comment">//一个用户ID已经从系统中移除发出的广播</span><span class="token comment">//</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_UMS_CONNECTED</span><span class="token punctuation">;</span><span class="token comment">//设备已进入USB大容量储存状态时发出的广播？</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_UMS_DISCONNECTED</span><span class="token punctuation">;</span><span class="token comment">//设备已从USB大容量储存状态转为正常状态时发出的广播？</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_USER_PRESENT</span><span class="token punctuation">;</span><span class="token comment">//</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_WALLPAPER_CHANGED</span><span class="token punctuation">;</span><span class="token comment">//设备墙纸已改变时发出的广播</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓杂记</title>
    <link href="/2023/08/31/docs/android/qi-ta/an-zhuo-za-ji/"/>
    <url>/2023/08/31/docs/android/qi-ta/an-zhuo-za-ji/</url>
    
    <content type="html"><![CDATA[<h3 id="Volley（网络请求）">          <a href="#Volley（网络请求）" class="heading-link"><i class="fas fa-link"></i></a><a href="#Volley（网络请求）" class="headerlink" title="Volley（网络请求）"></a>Volley（网络请求）</h3>      <ul><li>依赖</li></ul><pre class="line-numbers language-Groovy" data-language="Groovy"><code class="language-Groovy">implementation'com.android.volley:volley:1.1.1'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>请求</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RequestQueue</span> queue <span class="token operator">=</span> <span class="token class-name">Volley</span><span class="token punctuation">.</span><span class="token function">newRequestQueue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token class-name">JsonObjectRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonObjectRequest</span><span class="token punctuation">(</span><span class="token constant">GET</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> object<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Response<span class="token punctuation">.</span>Listener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JSONObject</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Response<span class="token punctuation">.</span>ErrorListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>停止请求：</p><p>方法一：</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">request<span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为请求添加一个标签TAG，在activityonStop里停止包含TAG</span>的请求 <span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> onStop <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>mRequestQueue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       mRequestQueue<span class="token punctuation">.</span><span class="token function">cancelAll</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  方法二：</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">   <span class="token comment">// 停止所有请求：</span>requestQueue<span class="token punctuation">.</span><span class="token function">cancelAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul>        <h3 id="透明状态栏">          <a href="#透明状态栏" class="heading-link"><i class="fas fa-link"></i></a><a href="#透明状态栏" class="headerlink" title="透明状态栏"></a>透明状态栏</h3>      <ul><li>依赖</li></ul><pre class="line-numbers language-Groovy" data-language="Groovy"><code class="language-Groovy">implementation 'com.jaeger.statusbarutil:library:1.5.1'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">StatusBarUtil</span><span class="token punctuation">.</span><span class="token function">setTransparent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果是白色背景加上下面这一句将状态栏改成黑色字体</span><span class="token comment">//getWindow().getDecorView().setSystemUiVisibility(SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>        <h3 id="防止手机转屏页面重建数据丢失">          <a href="#防止手机转屏页面重建数据丢失" class="heading-link"><i class="fas fa-link"></i></a><a href="#防止手机转屏页面重建数据丢失" class="headerlink" title="防止手机转屏页面重建数据丢失"></a>防止手机转屏页面重建数据丢失</h3>      <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span><span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.xxxActivity<span class="token punctuation">"</span></span><span class="token attr-name">&lt;!---在活动下面加上这句话就可以防止转屏丢失数据---</span><span class="token punctuation">&gt;</span></span>android:configChanges="orientation|keyboard|keyboardHidden|screenSize"&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用DataBinding也可以保持数据</p>        <h3 id="安卓P允许访问http页面">          <a href="#安卓P允许访问http页面" class="heading-link"><i class="fas fa-link"></i></a><a href="#安卓P允许访问http页面" class="headerlink" title="安卓P允许访问http页面"></a>安卓P允许访问http页面</h3>      <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span><span class="token attr-name"><span class="token namespace">android:</span>usesCleartextTraffic</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>        <h3 id="ViewModel、DataBinding-ViewBinding">          <a href="#ViewModel、DataBinding-ViewBinding" class="heading-link"><i class="fas fa-link"></i></a><a href="#ViewModel、DataBinding-ViewBinding" class="headerlink" title="ViewModel、DataBinding / ViewBinding"></a>ViewModel、DataBinding / ViewBinding</h3>      <ul><li>依赖</li></ul><pre class="line-numbers language-Groovy" data-language="Groovy"><code class="language-Groovy">dataBinding {    enabled true}viewBinding {    enabled true}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Activity使用方法：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">MyViewModel</span> viewModel<span class="token punctuation">;</span><span class="token class-name">ActivityViewModelBinding</span> binding<span class="token punctuation">;</span>binding <span class="token operator">=</span> <span class="token class-name">DataBindingUtil</span><span class="token punctuation">.</span><span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_view_model<span class="token punctuation">)</span><span class="token punctuation">;</span>viewModel <span class="token operator">=</span> <span class="token class-name">ViewModelProviders</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">MyViewModel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>binding<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>viewModel<span class="token punctuation">)</span><span class="token punctuation">;</span>binding<span class="token punctuation">.</span><span class="token function">setLifecycleOwner</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>XML绑定语法</li></ul><pre class="line-numbers language-none"><code class="language-none">@{data.xxx}@{()-&gt;data.xxx()}// 与视图Text控件绑定时一定注意LiveData类型，不是String要进行转型（这个错误编译不会报错，但是运行就会FC）：android:text="@{String.valueOf(data.number)}"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="阻止按钮自动大写">          <a href="#阻止按钮自动大写" class="heading-link"><i class="fas fa-link"></i></a><a href="#阻止按钮自动大写" class="headerlink" title="阻止按钮自动大写"></a>阻止按钮自动大写</h3>      <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textAllCaps<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h3 id="Room简单使用流程">          <a href="#Room简单使用流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#Room简单使用流程" class="headerlink" title="Room简单使用流程"></a>Room简单使用流程</h3>      <ul><li>依赖</li></ul><pre class="line-numbers language-Groovy" data-language="Groovy"><code class="language-Groovy">   def room_version = "2.2.2"   implementation "androidx.room:room-runtime:$room_version"   annotationProcessor "androidx.room:room-compiler:$room_version"    testImplementation "androidx.room:room-testing:$room_version"//下面这三个一般用不到//implementation "androidx.room:room-ktx:$room_version"   //implementation "androidx.room:room-rxjava2:$room_version"   //implementation "androidx.room:room-guava:$room_version"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>使用</p><ol><li>新建一个<code>@Entity</code> XXX类，定义表格格式</li><li>定义一个<code>@Dao</code>接口<code>interface</code> <code>xxxDao</code>，编写数据库操作语句</li></ol>  <pre class="line-numbers language-none"><code class="language-none">      @Insert@Update@Delete@Query(“”)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>定义一个抽象类<code>xxxDataBase</code></li></ol>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">      <span class="token annotation punctuation">@DataBase</span><span class="token punctuation">(</span>entities <span class="token operator">=</span> <span class="token punctuation">{</span>xxx<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>version <span class="token operator">=</span> x<span class="token punctuation">,</span>exportSchema <span class="token operator">=</span> boolen<span class="token punctuation">)</span><span class="token comment">// 里面定义一个抽象方法</span><span class="token keyword">abstract</span> xxxDao getxxxDao<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li>调用：</li></ol>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">   xxxDataBase x <span class="token operator">=</span> <span class="token class-name">Room</span><span class="token punctuation">.</span><span class="token function">databaseBuilder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>xxxDataBase<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token comment">//.allowMainThreadQueries() //设置允许在主线程运行，一般不要这样写</span>       <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xxxDao xx <span class="token operator">=</span> x<span class="token punctuation">.</span>getxxxDao<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul>        <h3 id="防止键盘遮挡输入框">          <a href="#防止键盘遮挡输入框" class="heading-link"><i class="fas fa-link"></i></a><a href="#防止键盘遮挡输入框" class="headerlink" title="防止键盘遮挡输入框"></a>防止键盘遮挡输入框</h3>      <p>将布局放到 <code>ScrollView</code> 中，然后在 <code>MainFest</code> 里 <code>Activity</code> 里面加入：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">android:windowSoftInputMode="adjustResize"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h3 id="RecyclerView简单调用流程">          <a href="#RecyclerView简单调用流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#RecyclerView简单调用流程" class="headerlink" title="RecyclerView简单调用流程"></a>RecyclerView简单调用流程</h3>              <h4 id="定义Adapter：">          <a href="#定义Adapter：" class="heading-link"><i class="fas fa-link"></i></a><a href="#定义Adapter：" class="headerlink" title="定义Adapter："></a>定义Adapter：</h4>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//定义一个内部类ViewHolder</span><span class="token comment">//Adapter继承RecyclerView.Adapter&lt;xxxAdapter.ViewHolder&gt;</span><span class="token keyword">public</span> <span class="token keyword">class</span> xxxAdapter <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>Adapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">xxxAdapter<span class="token punctuation">.</span></span>ViewHolder</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">xxxAdapter</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>xxx<span class="token punctuation">&gt;</span></span> lists<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ViewHolder</span> <span class="token keyword">extends</span>  <span class="token class-name">RecyclerView<span class="token punctuation">.</span>ViewHolder</span> <span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token class-name">ViewHolder</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">View</span> itemView<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>itemView<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化item上的控件</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//IDE会引导生成三个需要实现的方法</span><span class="token keyword">public</span> <span class="token class-name">ViewHolder</span> <span class="token function">onCreateViewHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">View</span> view <span class="token operator">=</span> <span class="token class-name">LayoutInflater</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item_recycler<span class="token punctuation">,</span>parent<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">ViewHolder</span> holder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ViewHolder</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> holder<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onBindViewHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//绑定视图，为item上的控件赋值</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//返回item个数</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h4 id="具体调用：">          <a href="#具体调用：" class="heading-link"><i class="fas fa-link"></i></a><a href="#具体调用：" class="headerlink" title="具体调用："></a>具体调用：</h4>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>xxx<span class="token punctuation">&gt;</span></span> lists<span class="token punctuation">;</span> <span class="token comment">//封装数据</span><span class="token class-name">RecyclerView</span> recylcler <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>recycler<span class="token punctuation">.</span><span class="token function">setLayoutManager</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinearLayoutManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果可以确定每个item的高度是固定的，设置下面这个选项可以提高性能</span>recycler<span class="token punctuation">.</span><span class="token function">setHasFixedSize</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Adapter</span>xxxAdapter adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">xxxAdapter</span><span class="token punctuation">(</span>lists<span class="token punctuation">)</span><span class="token punctuation">;</span>recycler<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="广播接收器">          <a href="#广播接收器" class="heading-link"><i class="fas fa-link"></i></a><a href="#广播接收器" class="headerlink" title="广播接收器"></a>广播接收器</h3>              <h4 id="发送广播时：">          <a href="#发送广播时：" class="heading-link"><i class="fas fa-link"></i></a><a href="#发送广播时：" class="headerlink" title="发送广播时："></a>发送广播时：</h4>      <p>高版本的android系统，对于广播的接收变得越来越严格，发送广播时要在 <code>Intent</code> 后面加上 <code>.setComponent</code> 参数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Intent</span> intent <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span> <span class="token string">"com.xxx.name"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//参数是广播接收器name</span><span class="token comment">//参数1是广播接收器所在的包名，参数2是广播接收器name</span>intent<span class="token punctuation">.</span><span class="token function">setComponent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span><span class="token string">"com.xxx"</span><span class="token punctuation">,</span><span class="token string">"com.xxx.name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sendBroadcast</span><span class="token punctuation">(</span>intent <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="Retrofit（网络请求）">          <a href="#Retrofit（网络请求）" class="heading-link"><i class="fas fa-link"></i></a><a href="#Retrofit（网络请求）" class="headerlink" title="Retrofit（网络请求）"></a>Retrofit（网络请求）</h3>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建一个接口，通过注解定义请求方式格式等</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RetrofitUtil</span> <span class="token punctuation">{</span><span class="token comment">//第二段请求地址</span><span class="token comment">//加上第一段请求地址意思就是请求 https://a.b.b/de</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"de"</span><span class="token punctuation">)</span>    <span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UpdateInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">getUpdateInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//使用</span><span class="token comment">//构建一个Retrofit</span><span class="token class-name">Retrofit</span> retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit        <span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//这里是使用Gson将请求结果封装成对象</span>        <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span><span class="token class-name">GsonConverterFactory</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//第一段请求地址</span>        <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"https://a.b.b/"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">RetrofitUtil</span> retrofitUtil <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">RetrofitUtil</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UpdateInfo</span><span class="token punctuation">&gt;</span></span> call <span class="token operator">=</span> retrofitUtil<span class="token punctuation">.</span><span class="token function">getUpdateInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//异步请求</span>call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UpdateInfo</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="EventBus（活动间发送接收信息）">          <a href="#EventBus（活动间发送接收信息）" class="heading-link"><i class="fas fa-link"></i></a><a href="#EventBus（活动间发送接收信息）" class="headerlink" title="EventBus（活动间发送接收信息）"></a>EventBus（活动间发送接收信息）</h3>              <h4 id="发送：">          <a href="#发送：" class="heading-link"><i class="fas fa-link"></i></a><a href="#发送：" class="headerlink" title="发送："></a>发送：</h4>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">EventBus</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">postSticky</span><span class="token punctuation">(</span>city_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">B</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>        <h4 id="接收：">          <a href="#接收：" class="heading-link"><i class="fas fa-link"></i></a><a href="#接收：" class="headerlink" title="接收："></a>接收：</h4>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//接收前先注册</span><span class="token class-name">EventBus</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//活动销毁时反注册</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">EventBus</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//通过注解使用</span><span class="token comment">//(线程模式，是否Stiky粘性注册)</span><span class="token annotation punctuation">@Subscribe</span><span class="token punctuation">(</span>threadMode <span class="token operator">=</span> <span class="token class-name">ThreadMode</span><span class="token punctuation">.</span><span class="token constant">MAIN</span><span class="token punctuation">,</span> sticky <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eventGetCityId</span><span class="token punctuation">(</span><span class="token class-name">String</span> city_id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>city_id <span class="token operator">=</span> city_id<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> </p>        <h3 id="改变Menu三个小点颜色">          <a href="#改变Menu三个小点颜色" class="heading-link"><i class="fas fa-link"></i></a><a href="#改变Menu三个小点颜色" class="headerlink" title="改变Menu三个小点颜色"></a>改变Menu三个小点颜色</h3>      <p>item下面可以继续包含Menu</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span>    <span class="token attr-name"><span class="token namespace">android:</span>icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/ic_more_white_24<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">app:</span>showAsAction</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>always<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>About<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>menu</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/m_item_about<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>关于<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>menu</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="锁屏显示页面">          <a href="#锁屏显示页面" class="heading-link"><i class="fas fa-link"></i></a><a href="#锁屏显示页面" class="headerlink" title="锁屏显示页面"></a>锁屏显示页面</h3>      <pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//onCreat()</span><span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addFlags</span><span class="token punctuation">(</span>WindowManager<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>FLAG_SHOW_WHEN_LOCKED <span class="token comment">//锁屏显示</span>                | WindowManager<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>FLAG_DISMISS_KEYGUARD <span class="token comment">//解锁</span>                | WindowManager<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>FLAG_KEEP_SCREEN_ON <span class="token comment">//保持屏幕不息屏</span>                | WindowManager<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>FLAG_TURN_SCREEN_ON<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//点亮屏幕</span><span class="token comment">//startActivity</span><span class="token keyword">val</span> pm <span class="token operator">=</span> <span class="token function">getSystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>POWER_SERVICE<span class="token punctuation">)</span> <span class="token keyword">as</span> PowerManager<span class="token keyword">val</span> mKeyguardManager <span class="token operator">=</span> <span class="token function">getSystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>KEYGUARD_SERVICE<span class="token punctuation">)</span> <span class="token keyword">as</span> KeyguardManager<span class="token keyword">val</span> wakeLock <span class="token operator">=</span> pm<span class="token punctuation">.</span><span class="token function">newWakeLock</span><span class="token punctuation">(</span>PowerManager<span class="token punctuation">.</span>ACQUIRE_CAUSES_WAKEUP <span class="token operator">or</span>  PowerManager<span class="token punctuation">.</span>SCREEN_DIM_WAKE_LOCK<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"wakeLock"</span></span><span class="token punctuation">)</span>wakeLock<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> mKeyguardLock <span class="token operator">=</span> mKeyguardManager<span class="token punctuation">.</span><span class="token function">newKeyguardLock</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">""</span></span><span class="token punctuation">)</span>mKeyguardLock<span class="token punctuation">.</span><span class="token function">disableKeyguard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> i <span class="token operator">=</span> <span class="token function">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>CameraActivity<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>i<span class="token punctuation">.</span><span class="token function">addFlags</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>FLAG_ACTIVITY_NEW_TASK <span class="token operator">or</span> Intent<span class="token punctuation">.</span>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS<span class="token punctuation">)</span><span class="token function">startActivity</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="查看内存">          <a href="#查看内存" class="heading-link"><i class="fas fa-link"></i></a><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h3>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 打印当前手机内存信息应用的内存信息 */</span><span class="token annotation punctuation">@TargetApi</span><span class="token punctuation">(</span><span class="token class-name">Build</span><span class="token punctuation">.</span><span class="token constant">VERSION_CODES</span><span class="token punctuation">.</span><span class="token constant">JELLY_BEAN</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printMemoryInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TAG</span> <span class="token operator">=</span> <span class="token string">"MemoryUtils.printMemoryInfo()"</span><span class="token punctuation">;</span>    <span class="token comment">//打印当前APP内存信息</span>    <span class="token comment">//开启了  android:largeHeap="true" 后,就是启用了流氓应用的内存限制</span>    <span class="token comment">//打印当前应用内存信息</span>    <span class="token class-name">Runtime</span> rt <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"APP当前内存状态: 最大可申请内存:"</span> <span class="token operator">+</span> rt<span class="token punctuation">.</span><span class="token function">maxMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">"MB 已申请内存:"</span> <span class="token operator">+</span> rt<span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">"MB 空闲内存:"</span> <span class="token operator">+</span> rt<span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">"MB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 获得app可用内存的字节数  这个类不需要try,catch理论上不会报错 */</span><span class="token annotation punctuation">@TargetApi</span><span class="token punctuation">(</span><span class="token class-name">Build</span><span class="token punctuation">.</span><span class="token constant">VERSION_CODES</span><span class="token punctuation">.</span><span class="token constant">HONEYCOMB</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getAppSurplusMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TAG</span> <span class="token operator">=</span> <span class="token string">"MemoryUtils.getAppSurplusMe()"</span><span class="token punctuation">;</span>    <span class="token class-name">Runtime</span> rt <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//一下参数单位为字节数</span>    <span class="token keyword">long</span> totalMemory <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个是已经申请的内存,等于已经使用的内存加上空闲内存</span>    <span class="token keyword">long</span> maxMemory <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">maxMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最大内存限制</span>    <span class="token keyword">long</span> freeMemory <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//假如最大内存限制是64M,已经申请了34M,空闲4M,那么其实当前使用的是:(34-4)M,而实际当前有效可使用的内存是:64-(34-4)=34;</span>    <span class="token comment">//64-(34-4)=34   请允许我引用高数老师的那句话:"同理可得" 64-34+4</span>    <span class="token comment">//so</span>    <span class="token keyword">long</span> surplusMemory <span class="token operator">=</span> maxMemory <span class="token operator">-</span> totalMemory <span class="token operator">+</span> freeMemory<span class="token punctuation">;</span>    <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"系统当前内存状态: 最大可申请内存:"</span> <span class="token operator">+</span> rt<span class="token punctuation">.</span><span class="token function">maxMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">"MB 已申请内存:"</span> <span class="token operator">+</span> rt<span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">"MB 空闲内存:"</span> <span class="token operator">+</span> rt<span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">"MB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> surplusMemory<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 获得手机可用内存的字节数  这个类不需要try,catch,理论上不会报错 * &lt;p&gt; * 这个方法要慎用  容易导致崩溃  特别在引导页的时候  低内存手机容易发生崩溃 * * @param context * @return */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getPhoneSurplusMe</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ActivityManager</span> am <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ActivityManager</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getSystemService</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token constant">ACTIVITY_SERVICE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ActivityManager<span class="token punctuation">.</span>MemoryInfo</span> mi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActivityManager<span class="token punctuation">.</span>MemoryInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    am<span class="token punctuation">.</span><span class="token function">getMemoryInfo</span><span class="token punctuation">(</span>mi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mi<span class="token punctuation">.</span>availMem<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="传感器">          <a href="#传感器" class="heading-link"><i class="fas fa-link"></i></a><a href="#传感器" class="headerlink" title="传感器"></a>传感器</h3>      <pre class="line-numbers language-none"><code class="language-none">#define SENSOR_TYPE_ACCELEROMETER       1 //加速度#define SENSOR_TYPE_MAGNETIC_FIELD      2 //磁力#define SENSOR_TYPE_ORIENTATION         3 //方向#define SENSOR_TYPE_GYROSCOPE           4 //陀螺仪#define SENSOR_TYPE_LIGHT               5 //光线感应#define SENSOR_TYPE_PRESSURE            6 //压力#define SENSOR_TYPE_TEMPERATURE         7 //温度 #define SENSOR_TYPE_PROXIMITY           8 //接近#define SENSOR_TYPE_GRAVITY             9 //重力#define SENSOR_TYPE_LINEAR_ACCELERATION 10//线性加速度#define SENSOR_TYPE_ROTATION_VECTOR     11//旋转矢量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>加速度传感器<br>加速度传感器又叫 <code>G-sensor</code> ，返回x、y、z三轴的加速度数值。</p><p>该数值包含地心引力的影响，单位是m/s^2。<br>将手机平放在桌面上，x轴默认为0，y轴默认0，z轴默认9.81。<br>将手机朝下放在桌面上，z轴为-9.81。<br>将手机向左倾斜，x轴为正值。<br>将手机向右倾斜，x轴为负值。<br>将手机向上倾斜，y轴为负值。<br>将手机向下倾斜，y轴为正值。<br>加速度传感器可能是最为成熟的一种mems产品，市场上的加速度传感器种类很多。<br>手机中常用的加速度传感器有BOSCH（博世）的BMA系列，AMK的897X系列，ST的LIS3X系列等。<br>这些传感器一般提供±2G至±16G的加速度测量范围，采用I2C或SPI接口和MCU相连，数据精度小于16bit。</p></li><li><p>磁力传感器<br>磁力传感器简称为M-sensor，返回x、y、z三轴的环境磁场数据。</p><p>该数值的单位是微特斯拉（micro-Tesla），用uT表示。<br>单位也可以是高斯（Gauss），1Tesla=10000Gauss。<br>硬件上一般没有独立的磁力传感器，磁力数据由电子罗盘传感器提供（E-compass）。<br>电子罗盘传感器同时提供下文的方向传感器数据。</p></li><li><p>方向传感器</p><p>方向传感器简称为O-sensor，返回三轴的角度数据，方向数据的单位是角度。</p><p>为了得到精确的角度数据，E-compass需要获取G-sensor的数据，<br>经过计算生产O-sensor数据，否则只能获取水平方向的角度。<br>方向传感器提供三个数据，分别为azimuth、pitch和roll。<br>azimuth：方位，返回水平时磁北极和Y轴的夹角，范围为0°至360°。<br>0°=北，90°=东，180°=南，270°=西。<br>pitch：x轴和水平面的夹角，范围为-180°至180°。<br>当z轴向y轴转动时，角度为正值。<br>roll：y轴和水平面的夹角，由于历史原因，范围为-90°至90°。<br>当x轴向z轴移动时，角度为正值。<br>电子罗盘在获取正确的数据前需要进行校准，通常可用8字校准法。<br>8字校准法要求用户使用需要校准的设备在空中做8字晃动，<br>原则上尽量多的让设备法线方向指向空间的所有8个象限。<br>手机中使用的电子罗盘芯片有AKM公司的897X系列，ST公司的LSM系列以及雅马哈公司等等。<br>由于需要读取G-sensor数据并计算出M-sensor和O-sensor数据，<br>因此厂商一般会提供一个后台daemon来完成工作，电子罗盘算法一般是公司私有产权。</p></li><li><p>陀螺仪传感器</p><p>陀螺仪传感器叫做Gyro-sensor，返回x、y、z三轴的角加速度数据。<br>角加速度的单位是radians/second。<br>根据Nexus S手机实测：<br>水平逆时针旋转，Z轴为正。<br>水平逆时针旋转，z轴为负。<br>向左旋转，y轴为负。<br>向右旋转，y轴为正。<br>向上旋转，x轴为负。<br>向下旋转，x轴为正。<br>ST的L3G系列的陀螺仪传感器比较流行，iphone4和google的nexus s中使用该种传感器。</p></li><li><p>光线感应传感器</p><p>光线感应传感器检测实时的光线强度，光强单位是lux，其物理意义是照射到单位面积上的光通量。<br>光线感应传感器主要用于Android系统的LCD自动亮度功能。<br>可以根据采样到的光强数值实时调整LCD的亮度。</p></li><li><p>压力传感器</p><p>压力传感器返回当前的压强，单位是百帕斯卡hectopascal（hPa）。</p></li><li><p>温度传感器</p><p>温度传感器返回当前的温度。</p></li><li><p>接近传感器</p><p>接近传感器检测物体与手机的距离，单位是厘米。<br>一些接近传感器只能返回远和近两个状态，<br>因此，接近传感器将最大距离返回远状态，小于最大距离返回近状态。<br>接近传感器可用于接听电话时自动关闭LCD屏幕以节省电量。<br>一些芯片集成了接近传感器和光线传感器两者功能。<br>下面三个传感器是Android2新提出的传感器类型，目前还不太清楚有哪些应用程序使用。</p></li><li><p>重力传感器</p><p>重力传感器简称GV-sensor，输出重力数据。<br>在地球上，重力数值为9.8，单位是m/s^2。<br>坐标系统与加速度传感器相同。<br>当设备复位时，重力传感器的输出与加速度传感器相同。</p></li><li><p>线性加速度传感器</p><p>线性加速度传感器简称LA-sensor。<br>线性加速度传感器是加速度传感器减去重力影响获取的数据。<br>单位是m/s^2，坐标系统与加速度传感器相同。<br>加速度传感器、重力传感器和线性加速度传感器的计算公式如下：<br>加速度 = 重力 + 线性加速度</p></li><li><p>旋转矢量传感器</p><p>旋转矢量传感器简称RV-sensor。旋转矢量代表设备的方向，是一个将坐标轴和角度混合计算得到的数据。<br>RV-sensor输出三个数据：<br>x<em>sin(theta/2)<br>y</em>sin(theta/2)<br>z*sin(theta/2)<br>sin(theta/2)是RV的数量级。<br>RV的方向与轴旋转的方向相同。<br>RV的三个数值，与cos(theta/2)组成一个四元组。<br>RV的数据没有单位，使用的坐标系与加速度相同。<br>举例：</p><pre class="line-numbers language-none"><code class="language-none">sensors_event_t.data[0] = x*sin(theta/2)sensors_event_t.data[1] = y*sin(theta/2)sensors_event_t.data[2] = z*sin(theta/2)sensors_event_t.data[3] = cos(theta/2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>GV、LA和RV的数值没有物理传感器可以直接给出，<br>需要G-sensor、O-sensor和Gyro-sensor经过算法计算后得出。<br>算法一般是传感器公司的私有产权。</p><p>参考文献：android source code hardware\libhardware\include\hardwaresensor.h<br><span class="exturl"><a class="exturl__link" href="http://www.dzsc.com/data/html/2010-11-29/87454.html">http://www.dzsc.com/data/html/2010-11-29/87454.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></li></ol>        <h3 id="状态栏">          <a href="#状态栏" class="heading-link"><i class="fas fa-link"></i></a><a href="#状态栏" class="headerlink" title="状态栏"></a>状态栏</h3>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 隐藏状态栏</span><span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addFlags</span><span class="token punctuation">(</span><span class="token class-name">WindowManager<span class="token punctuation">.</span> LayoutParams</span><span class="token punctuation">.</span> <span class="token constant">FLAG_FULLSCREEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 显示状态栏</span><span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clearFlags</span><span class="token punctuation">(</span><span class="token class-name">WindowManager<span class="token punctuation">.</span> LayoutParams</span><span class="token punctuation">.</span><span class="token constant">FLAG_FULLSCREEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="控制状态栏和导航栏显示-setSystemUiVisibility">          <a href="#控制状态栏和导航栏显示-setSystemUiVisibility" class="heading-link"><i class="fas fa-link"></i></a><a href="#控制状态栏和导航栏显示-setSystemUiVisibility" class="headerlink" title="控制状态栏和导航栏显示, setSystemUiVisibility"></a>控制状态栏和导航栏显示, setSystemUiVisibility</h3>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">View</span><span class="token punctuation">.</span> <span class="token constant">SYSTEM_UI_FLAG_LAYOUT_STABLE</span> <span class="token comment">//全屏显示时保证尺寸不变。</span><span class="token class-name">View</span><span class="token punctuation">.</span> <span class="token constant">SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</span> <span class="token comment">//Activity全屏显示，状态栏显示在Activity页面上面。</span><span class="token class-name">View</span><span class="token punctuation">.</span> <span class="token constant">SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</span> <span class="token comment">//效果同View. SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</span><span class="token class-name">View</span><span class="token punctuation">.</span> <span class="token constant">SYSTEM_UI_FLAG_HIDE_NAVIGATION</span> <span class="token comment">//隐藏导航栏</span><span class="token class-name">View</span><span class="token punctuation">.</span> <span class="token constant">SYSTEM_UI_FLAG_FULLSCREEN</span> <span class="token comment">//Activity全屏显示，且状态栏被隐藏覆盖掉。</span><span class="token class-name">View</span><span class="token punctuation">.</span> <span class="token constant">SYSTEM_UI_FLAG_VISIBLE</span> <span class="token comment">//Activity非全屏显示，显示状态栏和导航栏。</span><span class="token class-name">View</span><span class="token punctuation">.</span> <span class="token constant">INVISIBLE</span><span class="token comment">//Activity伸展全屏显示，隐藏状态栏。</span><span class="token class-name">View</span><span class="token punctuation">.</span> <span class="token constant">SYSTEM_UI_LAYOUT_FLAGS</span><span class="token comment">//效果同View. SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</span><span class="token class-name">View</span><span class="token punctuation">.</span> <span class="token constant">SYSTEM_UI_FLAG_IMMERSIVE_STICKY</span><span class="token comment">//必须配合View.SYSTEM_UI_FLAG_FULLSCREEN和View.SYSTEM_UI_FLAG_HIDE_NAVIGATION组合使用，达到的效果是拉出状态栏和导航栏后显示一会儿消失。</span><span class="token comment">// 全屏展示</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Build</span><span class="token punctuation">.</span> <span class="token constant">VERSION</span><span class="token punctuation">.</span> <span class="token constant">SDK_INT</span> <span class="token operator">&gt;=</span> <span class="token class-name">Build</span><span class="token punctuation">.</span> <span class="token constant">VERSION_CODES</span><span class="token punctuation">.</span> <span class="token constant">JELLY_BEAN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Build</span><span class="token punctuation">.</span> <span class="token constant">VERSION</span><span class="token punctuation">.</span> <span class="token constant">SDK_INT</span> <span class="token operator">&gt;=</span> <span class="token class-name">Build</span><span class="token punctuation">.</span> <span class="token constant">VERSION_CODES</span><span class="token punctuation">.</span> <span class="token constant">LOLLIPOP</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 全屏显示，隐藏状态栏和导航栏，拉出状态栏和导航栏显示一会儿后消失。</span>        activity<span class="token punctuation">.</span><span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDecorView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSystemUiVisibility</span><span class="token punctuation">(</span>                <span class="token class-name">View</span><span class="token punctuation">.</span> <span class="token constant">SYSTEM_UI_FLAG_LAYOUT_STABLE</span>                        <span class="token operator">|</span> <span class="token class-name">View</span><span class="token punctuation">.</span> <span class="token constant">SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</span>                        <span class="token operator">|</span> <span class="token class-name">View</span><span class="token punctuation">.</span> <span class="token constant">SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</span>                        <span class="token operator">|</span> <span class="token class-name">View</span><span class="token punctuation">.</span> <span class="token constant">SYSTEM_UI_FLAG_HIDE_NAVIGATION</span>                        <span class="token operator">|</span> <span class="token class-name">View</span><span class="token punctuation">.</span> <span class="token constant">SYSTEM_UI_FLAG_FULLSCREEN</span>                        <span class="token operator">|</span> <span class="token class-name">View</span><span class="token punctuation">.</span> <span class="token constant">SYSTEM_UI_FLAG_IMMERSIVE_STICKY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 全屏显示，隐藏状态栏</span>        activity<span class="token punctuation">.</span><span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDecorView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSystemUiVisibility</span><span class="token punctuation">(</span><span class="token class-name">View</span><span class="token punctuation">.</span> <span class="token constant">SYSTEM_UI_FLAG_FULLSCREEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 非全屏显示，显示状态栏和导航栏</span>activity<span class="token punctuation">.</span><span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDecorView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSystemUiVisibility</span><span class="token punctuation">(</span><span class="token class-name">View</span><span class="token punctuation">.</span> <span class="token constant">SYSTEM_UI_FLAG_VISIBLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统提供的Activity</title>
    <link href="/2023/08/31/docs/android/qi-ta/xi-tong-ti-gong-de-activity/"/>
    <url>/2023/08/31/docs/android/qi-ta/xi-tong-ti-gong-de-activity/</url>
    
    <content type="html"><![CDATA[<h3 id="系统提供的Activity">          <a href="#系统提供的Activity" class="heading-link"><i class="fas fa-link"></i></a><a href="#系统提供的Activity" class="headerlink" title="系统提供的Activity"></a>系统提供的Activity</h3>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.拨打电话</span><span class="token comment">// 给移动客服10086拨打电话</span><span class="token class-name">Uri</span> uri <span class="token operator">=</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"tel:10086"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_DIAL</span><span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.发送短信</span><span class="token comment">// 给10086发送内容为“Hello”的短信</span><span class="token class-name">Uri</span> uri <span class="token operator">=</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"smsto:10086"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_SENDTO</span><span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"sms_body"</span><span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.发送彩信（相当于发送带附件的短信）</span><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_SEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"sms_body"</span><span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Uri</span> uri <span class="token operator">=</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"content://media/external/images/media/23"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">EXTRA_STREAM</span><span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"image/png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.打开浏览器:</span><span class="token comment">// 打开Google主页</span><span class="token class-name">Uri</span> uri <span class="token operator">=</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Intent</span> intent  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_VIEW</span><span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5.发送电子邮件:(阉割了Google服务的没戏!!!!)</span><span class="token comment">// 给someone@domain.com发邮件</span><span class="token class-name">Uri</span> uri <span class="token operator">=</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"mailto:someone@domain.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_SENDTO</span><span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 给someone@domain.com发邮件发送内容为“Hello”的邮件</span><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_SEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">EXTRA_EMAIL</span><span class="token punctuation">,</span> <span class="token string">"someone@domain.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">EXTRA_SUBJECT</span><span class="token punctuation">,</span> <span class="token string">"Subject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">EXTRA_TEXT</span><span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"text/plain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 给多人发邮件</span><span class="token class-name">Intent</span> intent<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_SEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tos <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"1@abc.com"</span><span class="token punctuation">,</span> <span class="token string">"2@abc.com"</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 收件人</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ccs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"3@abc.com"</span><span class="token punctuation">,</span> <span class="token string">"4@abc.com"</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 抄送</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bccs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"5@abc.com"</span><span class="token punctuation">,</span> <span class="token string">"6@abc.com"</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 密送</span>intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">EXTRA_EMAIL</span><span class="token punctuation">,</span> tos<span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">EXTRA_CC</span><span class="token punctuation">,</span> ccs<span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">EXTRA_BCC</span><span class="token punctuation">,</span> bccs<span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">EXTRA_SUBJECT</span><span class="token punctuation">,</span> <span class="token string">"Subject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">EXTRA_TEXT</span><span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"message/rfc822"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6.显示地图:</span><span class="token comment">// 打开Google地图中国北京位置（北纬39.9，东经116.3）</span><span class="token class-name">Uri</span> uri <span class="token operator">=</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"geo:39.9,116.3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_VIEW</span><span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//7.路径规划</span><span class="token comment">// 路径规划：从北京某地（北纬39.9，东经116.3）到上海某地（北纬31.2，东经121.4）</span><span class="token class-name">Uri</span> uri <span class="token operator">=</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"http://maps.google.com/maps?f=d&amp;saddr=39.9 116.3&amp;daddr=31.2 121.4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_VIEW</span><span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//8.多媒体播放:</span><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_VIEW</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Uri</span> uri <span class="token operator">=</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"file:///sdcard/foo.mp3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">setDataAndType</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> <span class="token string">"audio/mp3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取SD卡下所有音频文件,然后播放第一首=-= </span><span class="token class-name">Uri</span> uri <span class="token operator">=</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">withAppendedPath</span><span class="token punctuation">(</span><span class="token class-name">MediaStore<span class="token punctuation">.</span>Audio<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span><span class="token constant">INTERNAL_CONTENT_URI</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_VIEW</span><span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//9.打开摄像头拍照:</span><span class="token comment">// 打开拍照程序</span><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">MediaStore</span><span class="token punctuation">.</span><span class="token constant">ACTION_IMAGE_CAPTURE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">startActivityForResult</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 取出照片数据</span><span class="token class-name">Bundle</span> extras <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getExtras</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Bitmap</span> bitmap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Bitmap</span><span class="token punctuation">)</span> extras<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//另一种:</span><span class="token comment">//调用系统相机应用程序，并存储拍下来的照片</span><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">MediaStore</span><span class="token punctuation">.</span><span class="token constant">ACTION_IMAGE_CAPTURE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> time <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTimeInMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token class-name">MediaStore</span><span class="token punctuation">.</span><span class="token constant">EXTRA_OUTPUT</span><span class="token punctuation">,</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">fromFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">Environment</span><span class="token punctuation">.</span><span class="token function">getExternalStorageDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/tucue"</span><span class="token punctuation">,</span> time <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">startActivityForResult</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> <span class="token constant">ACTIVITY_GET_CAMERA_IMAGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10.获取并剪切图片</span><span class="token comment">// 获取并剪切图片</span><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_GET_CONTENT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"image/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"crop"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 开启剪切</span>intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"aspectX"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 剪切的宽高比为1：2</span>intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"aspectY"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"outputX"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 保存图片的宽和高</span>intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"outputY"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span> intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"output"</span><span class="token punctuation">,</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">fromFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/mnt/sdcard/temp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 保存路径</span>intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"outputFormat"</span><span class="token punctuation">,</span> <span class="token string">"JPEG"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回格式</span><span class="token function">startActivityForResult</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 剪切特定图片</span><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token string">"com.android.camera.action.CROP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> intent<span class="token punctuation">.</span><span class="token function">setClassName</span><span class="token punctuation">(</span><span class="token string">"com.android.camera"</span><span class="token punctuation">,</span> <span class="token string">"com.android.camera.CropImage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> intent<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">fromFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/mnt/sdcard/temp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"outputX"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 剪切的宽高比为1：2</span>intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"outputY"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"aspectX"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 保存图片的宽和高</span>intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"aspectY"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"scale"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"noFaceDetection"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"output"</span><span class="token punctuation">,</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"file:///mnt/sdcard/temp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">startActivityForResult</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//11.打开Google Market </span><span class="token comment">// 打开Google Market直接进入该程序的详细页面</span><span class="token class-name">Uri</span> uri <span class="token operator">=</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"market://details?id="</span> <span class="token operator">+</span> <span class="token string">"com.demo.app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_VIEW</span><span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//12.进入手机设置界面:</span><span class="token comment">// 进入无线网络设置界面（其它可以举一反三）  </span><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>provider<span class="token punctuation">.</span></span>Settings</span><span class="token punctuation">.</span><span class="token constant">ACTION_WIRELESS_SETTINGS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">startActivityForResult</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//13.安装apk:</span><span class="token class-name">Uri</span> installUri <span class="token operator">=</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">fromParts</span><span class="token punctuation">(</span><span class="token string">"package"</span><span class="token punctuation">,</span> <span class="token string">"xxx"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   returnIt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_PACKAGE_ADDED</span><span class="token punctuation">,</span> installUri<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//14.卸载apk:</span><span class="token class-name">Uri</span> uri <span class="token operator">=</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">fromParts</span><span class="token punctuation">(</span><span class="token string">"package"</span><span class="token punctuation">,</span> strPackageName<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Intent</span> it <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_DELETE</span><span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">startActivity</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//15.发送附件:</span><span class="token class-name">Intent</span> it <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_SEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      it<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">EXTRA_SUBJECT</span><span class="token punctuation">,</span> <span class="token string">"The email subject text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      it<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">EXTRA_STREAM</span><span class="token punctuation">,</span> <span class="token string">"file:///sdcard/eoe.mp3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      sendIntent<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"audio/mp3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token function">createChooser</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> <span class="token string">"Choose Email Client"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//16.进入联系人页面:</span><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_VIEW</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">People</span><span class="token punctuation">.</span><span class="token constant">CONTENT_URI</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//17.查看指定联系人:</span><span class="token class-name">Uri</span> personUri <span class="token operator">=</span> <span class="token class-name">ContentUris</span><span class="token punctuation">.</span><span class="token function">withAppendedId</span><span class="token punctuation">(</span><span class="token class-name">People</span><span class="token punctuation">.</span><span class="token constant">CONTENT_URI</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//info.id联系人ID</span><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_VIEW</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>personUri<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>请求忽略电池优化</title>
    <link href="/2023/08/31/docs/android/qi-ta/qing-qiu-hu-lue-dian-chi-you-hua/"/>
    <url>/2023/08/31/docs/android/qi-ta/qing-qiu-hu-lue-dian-chi-you-hua/</url>
    
    <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 忽略电池优化 */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ignoreBatteryOptimization</span><span class="token punctuation">(</span><span class="token class-name">Activity</span> activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Build</span><span class="token punctuation">.</span><span class="token constant">VERSION</span><span class="token punctuation">.</span><span class="token constant">SDK_INT</span> <span class="token operator">&gt;=</span> <span class="token class-name">Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>M</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">PowerManager</span> powerManager <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PowerManager</span><span class="token punctuation">)</span> <span class="token function">getSystemService</span><span class="token punctuation">(</span><span class="token constant">POWER_SERVICE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">boolean</span> hasIgnored <span class="token operator">=</span> powerManager<span class="token punctuation">.</span><span class="token function">isIgnoringBatteryOptimizations</span><span class="token punctuation">(</span>activity<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//  判断当前APP是否有加入电池优化的白名单，如果没有，弹出加入电池优化的白名单的设置对话框。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasIgnored<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Settings</span><span class="token punctuation">.</span><span class="token constant">ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            intent<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"package:"</span> <span class="token operator">+</span> activity<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>intent<span class="token punctuation">.</span><span class="token function">resolveActivity</span><span class="token punctuation">(</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"ignoreBattery"</span><span class="token punctuation">,</span> <span class="token string">"hasIgnored"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统信息获取</title>
    <link href="/2023/08/31/docs/android/qi-ta/xi-tong-xin-xi-huo-qu/"/>
    <url>/2023/08/31/docs/android/qi-ta/xi-tong-xin-xi-huo-qu/</url>
    
    <content type="html"><![CDATA[<div class="table-container"><table><thead><tr><th>字段名</th><th>描述</th></tr></thead><tbody><tr><td>android.os.Build.VERSION.RELEASE</td><td>获取系统版本字符串。如 4.1.2 或 7.1.2 等</td></tr><tr><td>android.os.Build.VERSION.SDK_INT</td><td>系统的 API 级别 数字表示</td></tr><tr><td>android.os.Build.BOARD</td><td>获取设备基板名称</td></tr><tr><td>android.os.Build.BOOTLOADER</td><td>获取设备引导程序版本号</td></tr><tr><td>android.os.Build.BRAND</td><td>获取设备品牌</td></tr><tr><td>android.os.Build.CPU_ABI</td><td>获取设备指令集名称（CPU 的类型）</td></tr><tr><td>android.os.Build.CPU_ABI2</td><td>获取第二个指令集名称</td></tr><tr><td>android.os.Build.DEVICE</td><td>获取设备驱动名称</td></tr><tr><td>android.os.Build.DISPLAY</td><td>获取设备显示的版本包（在系统设置中显示为版本号）和 ID 一样</td></tr><tr><td>android.os.Build.FINGERPRINT</td><td>设备的唯一标识。由设备的多个信息拼接合成。</td></tr><tr><td>android.os.Build.HARDWARE</td><td>设备硬件名称,一般和基板名称一样（BOARD）</td></tr><tr><td>android.os.Build.HOST</td><td>设备主机地址</td></tr><tr><td>android.os.Build.ID</td><td>设备版本号。</td></tr><tr><td>android.os.Build.MODEL</td><td>获取手机的型号 设备名称。如：SM-N9100（三星 Note4）</td></tr><tr><td>android.os.Build.MANUFACTURER</td><td>获取设备制造商。如：samsung</td></tr><tr><td>android.os.Build.PRODUCT</td><td>整个产品的名称</td></tr><tr><td>android.os.Build.RADIO</td><td>无线电固件版本号，通常是不可用的 显示</td></tr><tr><td>unknownandroid.os.Build.TAGS</td><td>设备标签。如 release-keys 或测试的 test-keys</td></tr><tr><td>android.os.Build.TIME</td><td>时间</td></tr><tr><td>android.os.Build.TYPE</td><td>设备版本类型 主要为”user” 或”eng”.</td></tr><tr><td>android.os.Build.USER</td><td>设备用户名 基本上都为 android-build</td></tr><tr><td>android.os.Build.VERSION.CODENAME</td><td>设备当前的系统开发代号，一般使用 REL 代替</td></tr><tr><td>android.os.Build.VERSION.INCREMENTAL</td><td>系统源代码控制值，一个数字或者 git hash 值</td></tr></tbody></table></div>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软键盘相关操作</title>
    <link href="/2023/08/31/docs/android/qi-ta/ruan-jian-pan-xiang-guan-cao-zuo/"/>
    <url>/2023/08/31/docs/android/qi-ta/ruan-jian-pan-xiang-guan-cao-zuo/</url>
    
    <content type="html"><![CDATA[<h2 id="禁止EditorText自动弹出软键盘">          <a href="#禁止EditorText自动弹出软键盘" class="heading-link"><i class="fas fa-link"></i></a><a href="#禁止EditorText自动弹出软键盘" class="headerlink" title="禁止EditorText自动弹出软键盘"></a>禁止EditorText自动弹出软键盘</h2>      <p>在控件父布局加上：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.constraintlayout.widget.ConstraintLayout</span>    <span class="token attr-name">...</span>    <span class="token attr-name"><span class="token namespace">android:</span>focusable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>focusableInTouchMode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>    <span class="token attr-name">...</span>    <span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="弹出软键盘">          <a href="#弹出软键盘" class="heading-link"><i class="fas fa-link"></i></a><a href="#弹出软键盘" class="headerlink" title="弹出软键盘"></a>弹出软键盘</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">InputMethodManager</span> imm <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InputMethodManager</span><span class="token punctuation">)</span> <span class="token function">getSystemService</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token constant">INPUT_METHOD_SERVICE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>imm <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    imm<span class="token punctuation">.</span><span class="token function">showSoftInput</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token class-name">InputMethodManager</span><span class="token punctuation">.</span><span class="token constant">SHOW_FORCED</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//推荐使用这种方式，针对不同Api有不同的实现</span> <span class="token function">WindowInsetsControllerCompat</span><span class="token punctuation">(</span>    <span class="token function">requireActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>window<span class="token punctuation">,</span>    view <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>WindowInsetsCompat<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">ime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="隐藏软键盘">          <a href="#隐藏软键盘" class="heading-link"><i class="fas fa-link"></i></a><a href="#隐藏软键盘" class="headerlink" title="隐藏软键盘"></a>隐藏软键盘</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">InputMethodManager</span> imm <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InputMethodManager</span><span class="token punctuation">)</span> <span class="token function">getSystemService</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token constant">INPUT_METHOD_SERVICE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>imm <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> view <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    imm<span class="token punctuation">.</span><span class="token function">hideSoftInputFromWindow</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token function">getWindowToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//推荐使用这种方式，针对不同Api有不同的实现</span> <span class="token function">WindowInsetsControllerCompat</span><span class="token punctuation">(</span>    <span class="token function">requireActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>window<span class="token punctuation">,</span>    view <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>WindowInsetsCompat<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">ime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些方法在大多数情况下都能凑效，但是有些情况可能怎么都无法通过代码隐藏软键盘，可以实现一个模拟返回键事件的功能，在子线程执行（目前未遇到这种情况，该方法未实际测试）：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Instrumentation</span> instrumentation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Instrumentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instrumentation<span class="token punctuation">.</span><span class="token function">sendKeyDownUpSync</span><span class="token punctuation">(</span><span class="token class-name">KeyEvent</span><span class="token punctuation">.</span><span class="token constant">KEYCODE_BACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>        <h2 id="注意">          <a href="#注意" class="heading-link"><i class="fas fa-link"></i></a><a href="#注意" class="headerlink" title="注意"></a>注意</h2>      <ul><li>控件设置<code>enable</code>为<code>false</code>时，不需要手动清除焦点（<code>View.clearFocus()</code>）或手动执行隐藏键盘的方法，因为在 <code>setEnable()</code> 方法里面已经执行隐藏键盘的相关逻辑了，手动调用 <code>clearFocus</code> 反而可能会引起异常。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//TextView.java</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token annotation punctuation">@android.view.RemotableViewMethod</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> enabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>enabled <span class="token operator">==</span> <span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>enabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Hide the soft input if the currently active TextView is </span>        <span class="token class-name">InputMethodManager</span> imm <span class="token operator">=</span> <span class="token function">getInputMethodManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>imm <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> imm<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            imm<span class="token punctuation">.</span><span class="token function">hideSoftInputFromWindow</span><span class="token punctuation">(</span><span class="token function">getWindowToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setEnabled</span><span class="token punctuation">(</span>enabled<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>enabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Make sure IME is updated with current editor info.</span>        <span class="token class-name">InputMethodManager</span> imm <span class="token operator">=</span> <span class="token function">getInputMethodManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>imm <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> imm<span class="token punctuation">.</span><span class="token function">restartInput</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// Will change text color</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mEditor <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mEditor<span class="token punctuation">.</span><span class="token function">invalidateTextDisplayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mEditor<span class="token punctuation">.</span><span class="token function">prepareCursorControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// start or stop the cursor blinking as appropriate</span>        mEditor<span class="token punctuation">.</span><span class="token function">makeBlink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android扩展知识点</title>
    <link href="/2023/08/31/docs/android/zhi-shi-hui-zong/android-kuo-zhan-zhi-shi-dian/"/>
    <url>/2023/08/31/docs/android/zhi-shi-hui-zong/android-kuo-zhan-zhi-shi-dian/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#art">ART</a><ul><li><a href="#art-%E5%8A%9F%E8%83%BD">ART 功能</a><ul><li><a href="#%E9%A2%84%E5%85%88-aot-%E7%BC%96%E8%AF%91">预先 (AOT) 编译</a></li><li><a href="#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%BC%98%E5%8C%96">垃圾回收优化</a></li><li><a href="#%E5%BC%80%E5%8F%91%E5%92%8C%E8%B0%83%E8%AF%95%E6%96%B9%E9%9D%A2%E7%9A%84%E4%BC%98%E5%8C%96">开发和调试方面的优化</a></li></ul></li><li><a href="#art-gc">ART GC</a></li></ul></li><li><a href="#hook">Hook</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B">基本流程</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B">使用示例</a></li></ul></li><li><a href="#proguard">Proguard</a><ul><li><a href="#%E8%A7%84%E5%88%99">规则</a></li><li><a href="#%E5%85%AC%E5%85%B1%E6%A8%A1%E6%9D%BF">公共模板</a></li><li><a href="#%E5%B8%B8%E7%94%A8%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B7%B7%E6%B7%86%E8%A7%84%E5%88%99">常用的自定义混淆规则</a></li><li><a href="#aar%E4%B8%AD%E5%A2%9E%E5%8A%A0%E7%8B%AC%E7%AB%8B%E7%9A%84%E6%B7%B7%E6%B7%86%E9%85%8D%E7%BD%AE">aar中增加独立的混淆配置</a></li><li><a href="#%E6%A3%80%E6%9F%A5%E6%B7%B7%E6%B7%86%E5%92%8C%E8%BF%BD%E8%B8%AA%E5%BC%82%E5%B8%B8">检查混淆和追踪异常</a></li></ul></li><li><a href="#%E6%9E%B6%E6%9E%84">架构</a><ul><li><a href="#mvc">MVC</a></li><li><a href="#mvp">MVP</a></li><li><a href="#mvvm">MVVM</a></li></ul></li><li><a href="#jetpack">Jetpack</a><ul><li><a href="#%E6%9E%B6%E6%9E%84-1">架构</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B-1">使用示例</a></li></ul></li><li><a href="#ndk-%E5%BC%80%E5%8F%91">NDK 开发</a><ul><li><a href="#jni-%E5%9F%BA%E7%A1%80">JNI 基础</a><ul><li><a href="#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">数据类型</a></li><li><a href="#string-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0%E6%93%8D%E4%BD%9C">String 字符串函数操作</a></li><li><a href="#%E5%B8%B8%E7%94%A8-jni-%E8%AE%BF%E9%97%AE-java-%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95">常用 JNI 访问 Java 对象方法</a></li></ul></li><li><a href="#ndk-%E5%BC%80%E5%8F%91-1">NDK 开发</a><ul><li><a href="#%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B">基础开发流程</a></li><li><a href="#systemloadlibrary">System.loadLibrary()</a></li></ul></li><li><a href="#cmake-%E6%9E%84%E5%BB%BA-ndk-%E9%A1%B9%E7%9B%AE">CMake 构建 NDK 项目</a></li><li><a href="#%E5%B8%B8%E7%94%A8%E7%9A%84-android-ndk-%E5%8E%9F%E7%94%9F-api">常用的 Android NDK 原生 API</a></li></ul></li><li><a href="#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8">类加载器</a><ul><li><a href="#%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%89%98%E6%A8%A1%E5%BC%8F">双亲委托模式</a></li><li><a href="#dexpathlist">DexPathList</a></li></ul></li></ul>        <h1 id="ART">          <a href="#ART" class="heading-link"><i class="fas fa-link"></i></a><a href="#ART" class="headerlink" title="ART"></a>ART</h1>      <p>ART 代表 Android Runtime，其处理应用程序执行的方式完全不同于 Dalvik，Dalvik 是依靠一个 Just-In-Time (JIT) 编译器去解释字节码。开发者编译后的应用代码需要通过一个解释器在用户的设备上运行，这一机制并不高效，但让应用能更容易在不同硬件和架构上运 行。ART 则完全改变了这套做法，在应用安装时就预编译字节码到机器语言，这一机制叫 Ahead-Of-Time (AOT）编译。在移除解释代码这一过程后，应用程序执行将更有效率，启动更快。</p>        <h2 id="ART-功能">          <a href="#ART-功能" class="heading-link"><i class="fas fa-link"></i></a><a href="#ART-功能" class="headerlink" title="ART 功能"></a>ART 功能</h2>              <h3 id="预先-AOT-编译">          <a href="#预先-AOT-编译" class="heading-link"><i class="fas fa-link"></i></a><a href="#预先-AOT-编译" class="headerlink" title="预先 (AOT) 编译"></a>预先 (AOT) 编译</h3>      <p>ART 引入了预先编译机制，可提高应用的性能。ART 还具有比 Dalvik 更严格的安装时验证。在安装时，ART 使用设备自带的 dex2oat 工具来编译应用。该实用工具接受 DEX 文件作为输入，并为目标设备生成经过编译的应用可执行文件。该工具应能够顺利编译所有有效的 DEX 文件。</p>        <h3 id="垃圾回收优化">          <a href="#垃圾回收优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#垃圾回收优化" class="headerlink" title="垃圾回收优化"></a>垃圾回收优化</h3>      <p>垃圾回收 (GC) 可能有损于应用性能，从而导致显示不稳定、界面响应速度缓慢以及其他问题。ART 通过以下几种方式对垃圾回收做了优化：</p><ul><li>只有一次（而非两次）GC 暂停</li><li>在 GC 保持暂停状态期间并行处理</li><li>在清理最近分配的短时对象这种特殊情况中，回收器的总 GC 时间更短</li><li>优化了垃圾回收的工效，能够更加及时地进行并行垃圾回收，这使得 GC_FOR_ALLOC 事件在典型用例中极为罕见</li><li>压缩 GC 以减少后台内存使用和碎片</li></ul>        <h3 id="开发和调试方面的优化">          <a href="#开发和调试方面的优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#开发和调试方面的优化" class="headerlink" title="开发和调试方面的优化"></a>开发和调试方面的优化</h3>      <ul><li>支持采样分析器</li></ul><p>一直以来，开发者都使用 Traceview 工具（用于跟踪应用执行情况）作为分析器。虽然 Traceview 可提供有用的信息，但每次方法调用产生的开销会导致 Dalvik 分析结果出现偏差，而且使用该工具明显会影响运行时性能</p><p>ART 添加了对没有这些限制的专用采样分析器的支持，因而可更准确地了解应用执行情况，而不会明显减慢速度。KitKat 版本为 Dalvik 的 Traceview 添加了采样支持。</p><ul><li>支持更多调试功能</li></ul><p>ART 支持许多新的调试选项，特别是与监控和垃圾回收相关的功能。例如，查看堆栈跟踪中保留了哪些锁，然后跳转到持有锁的线程；询问指定类的当前活动的实例数、请求查看实例，以及查看使对象保持有效状态的参考；过滤特定实例的事件（如断点）等。</p><ul><li>优化了异常和崩溃报告中的诊断详细信息</li></ul><p>当发生运行时异常时，ART 会为您提供尽可能多的上下文和详细信息。ART 会提供 <code>java.lang.ClassCastException</code>、<code>java.lang.ClassNotFoundException</code> 和 <code>java.lang.NullPointerException</code> 的更多异常详细信息（较高版本的 Dalvik 会提供 <code>java.lang.ArrayIndexOutOfBoundsException</code> 和 <code>java.lang.ArrayStoreException</code> 的更多异常详细信息，这些信息现在包括数组大小和越界偏移量；ART 也提供这类信息）。</p>        <h2 id="ART-GC">          <a href="#ART-GC" class="heading-link"><i class="fas fa-link"></i></a><a href="#ART-GC" class="headerlink" title="ART GC"></a>ART GC</h2>      <p>ART 有多个不同的 GC 方案，这些方案包括运行不同垃圾回收器。默认方案是 CMS（并发标记清除）方案，主要使用粘性 CMS 和部分 CMS。粘性 CMS 是 ART 的不移动分代垃圾回收器。它仅扫描堆中自上次 GC 后修改的部分，并且只能回收自上次 GC 后分配的对象。除 CMS 方案外，当应用将进程状态更改为察觉不到卡顿的进程状态（例如，后台或缓存）时，ART 将执行堆压缩。</p><p>除了新的垃圾回收器之外，ART 还引入了一种基于位图的新内存分配程序，称为 RosAlloc（插槽运行分配器）。此新分配器具有分片锁，当分配规模较小时可添加线程的本地缓冲区，因而性能优于 DlMalloc。</p><p>与 Dalvik 相比，ART CMS 垃圾回收计划在很多方面都有一定的改善：</p><ul><li><p>与 Dalvik 相比，暂停次数从 2 次减少到 1 次。Dalvik 的第一次暂停主要是为了进行根标记，即在 ART 中进行并发标记，让线程标记自己的根，然后马上恢复运行。</p></li><li><p>与 Dalvik 类似，ART GC 在清除过程开始之前也会暂停 1 次。两者在这方面的主要差异在于：在此暂停期间，某些 Dalvik 环节在 ART 中并发进行。这些环节包括 java.lang.ref.Reference 处理、系统弱清除（例如，jni 弱全局等）、重新标记非线程根和卡片预清理。在 ART 暂停期间仍进行的阶段包括扫描脏卡片以及重新标记线程根，这些操作有助于缩短暂停时间。</p></li><li><p>相对于 Dalvik，ART GC 改进的最后一个方面是粘性 CMS 回收器增加了 GC 吞吐量。不同于普通的分代 GC，粘性 CMS 不移动。系统会将年轻对象保存在一个分配堆栈（基本上是 java.lang.Object 数组）中，而非为其设置一个专属区域。这样可以避免移动所需的对象以维持低暂停次数，但缺点是容易在堆栈中加入大量复杂对象图像而使堆栈变长。</p></li></ul><p>ART GC 与 Dalvik 的另一个主要区别在于 ART GC 引入了移动垃圾回收器。使用移动 GC 的目的在于通过堆压缩来减少后台应用使用的内存。目前，触发堆压缩的事件是 ActivityManager 进程状态的改变。当应用转到后台运行时，它会通知 ART 已进入不再“感知”卡顿的进程状态。此时 ART 会进行一些操作（例如，压缩和监视器压缩），从而导致应用线程长时间暂停。目前正在使用的两个移动 GC 是同构空间压缩和半空间压缩。</p><ul><li><p>半空间压缩将对象在两个紧密排列的碰撞指针空间之间进行移动。这种移动 GC 适用于小内存设备，因为它可以比同构空间压缩稍微多节省一点内存。额外节省出的空间主要来自紧密排列的对象，这样可以避免 RosAlloc/DlMalloc 分配器占用开销。由于 CMS 仍在前台使用，且不能从碰撞指针空间中进行收集，因此当应用在前台使用时，半空间还要再进行一次转换。这种情况并不理想，因为它可能引起较长时间的暂停。</p></li><li><p>同构空间压缩通过将对象从一个 RosAlloc 空间复制到另一个 RosAlloc 空间来实现。这有助于通过减少堆碎片来减少内存使用量。这是目前非低内存设备的默认压缩模式。相比半空间压缩，同构空间压缩的主要优势在于应用从后台切换到前台时无需进行堆转换。</p></li></ul>        <h1 id="Hook">          <a href="#Hook" class="heading-link"><i class="fas fa-link"></i></a><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h1>              <h2 id="基本流程">          <a href="#基本流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2>      <p>1、根据需求确定 要 hook 的对象<br>2、寻找要hook的对象的持有者，拿到要 hook 的对象<br>3、定义“要 hook 的对象”的代理类，并且创建该类的对象<br>4、使用上一步创建出来的对象，替换掉要 hook 的对象</p>        <h2 id="使用示例">          <a href="#使用示例" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** hook的核心代码* 这个方法的唯一目的：用自己的点击事件，替换掉 View 原来的点击事件** @param view hook的范围仅限于这个view*/</span><span class="token annotation punctuation">@SuppressLint</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"DiscouragedPrivateApi"</span><span class="token punctuation">,</span> <span class="token string">"PrivateApi"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hook</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// 反射执行View类的getListenerInfo()方法，拿到v的mListenerInfo对象，这个对象就是点击事件的持有者</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token class-name">View</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"getListenerInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//由于getListenerInfo()方法并不是public的，所以要加这个代码来保证访问权限</span>        <span class="token class-name">Object</span> mListenerInfo <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里拿到的就是mListenerInfo对象，也就是点击事件的持有者</span>        <span class="token comment">// 要从这里面拿到当前的点击事件对象</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> listenerInfoClz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"android.view.View$ListenerInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这是内部类的表示方法</span>        <span class="token class-name">Field</span> field <span class="token operator">=</span> listenerInfoClz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"mOnClickListener"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span> onClickListenerInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">)</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mListenerInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取得真实的mOnClickListener对象</span>        <span class="token comment">// 2. 创建我们自己的点击事件代理类</span>        <span class="token comment">//   方式1：自己创建代理类</span>        <span class="token comment">//   ProxyOnClickListener proxyOnClickListener = new ProxyOnClickListener(onClickListenerInstance);</span>        <span class="token comment">//   方式2：由于View.OnClickListener是一个接口，所以可以直接用动态代理模式</span>        <span class="token comment">// Proxy.newProxyInstance的3个参数依次分别是：</span>        <span class="token comment">// 本地的类加载器;</span>        <span class="token comment">// 代理类的对象所继承的接口（用Class数组表示，支持多个接口）</span>        <span class="token comment">// 代理类的实际逻辑，封装在new出来的InvocationHandler内</span>        <span class="token class-name">Object</span> proxyOnClickListener <span class="token operator">=</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"HookSetOnClickListener"</span><span class="token punctuation">,</span> <span class="token string">"点击事件被hook到了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加入自己的逻辑</span>                <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>onClickListenerInstance<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行被代理的对象的逻辑</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3. 用我们自己的点击事件代理类，设置到"持有者"中</span>        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>mListenerInfo<span class="token punctuation">,</span> proxyOnClickListener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 自定义代理类</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ProxyOnClickListener</span> <span class="token keyword">implements</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span> <span class="token punctuation">{</span>    <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span> oriLis<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ProxyOnClickListener</span><span class="token punctuation">(</span><span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span> oriLis<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>oriLis <span class="token operator">=</span> oriLis<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"HookSetOnClickListener"</span><span class="token punctuation">,</span> <span class="token string">"点击事件被hook到了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oriLis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            oriLis<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="Proguard">          <a href="#Proguard" class="heading-link"><i class="fas fa-link"></i></a><a href="#Proguard" class="headerlink" title="Proguard"></a>Proguard</h1>      <p>Proguard 具有以下三个功能：</p><ul><li>压缩（Shrink）: 检测和删除没有使用的类，字段，方法和特性</li><li>优化（Optimize） : 分析和优化Java字节码</li><li>混淆（Obfuscate）: 使用简短的无意义的名称，对类，字段和方法进行重命名</li></ul>        <h2 id="规则">          <a href="#规则" class="heading-link"><i class="fas fa-link"></i></a><a href="#规则" class="headerlink" title="规则"></a>规则</h2>      <ul><li>关键字</li></ul><div class="table-container"><table><thead><tr><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>keep</td><td>保留类和类中的成员，防止被混淆或移除</td></tr><tr><td>keepnames</td><td>保留类和类中的成员，防止被混淆，成员没有被引用会被移除</td></tr><tr><td>keepclassmembers</td><td>只保留类中的成员，防止被混淆或移除</td></tr><tr><td>keepclassmembernames</td><td>只保留类中的成员，防止被混淆，成员没有引用会被移除</td></tr><tr><td>keepclasseswithmembers</td><td>保留类和类中的成员，防止被混淆或移除，保留指明的成员</td></tr><tr><td>keepclasseswithmembernames</td><td>保留类和类中的成员，防止被混淆，保留指明的成员，成员没有引用会被移除</td></tr></tbody></table></div><ul><li>通配符</li></ul><div class="table-container"><table><thead><tr><th>通配符</th><th>描述</th></tr></thead><tbody><tr><td>&lt;field&gt;</td><td>匹配类中的所有字段</td></tr><tr><td>&lt;method&gt;</td><td>匹配类中所有的方法</td></tr><tr><td>&lt;init&gt;</td><td>匹配类中所有的构造函数</td></tr><tr><td>*</td><td>匹配任意长度字符，不包含包名分隔符(.)</td></tr><tr><td>**</td><td>匹配任意长度字符，包含包名分隔符(.)</td></tr><tr><td>***</td><td>匹配任意参数类型</td></tr></tbody></table></div><ul><li>指定混淆时可使用字典<pre class="line-numbers language-none"><code class="language-none">-applymapping filename 指定重用一个已经写好了的map文件作为新旧元素名的映射。-obfuscationdictionary filename 指定一个文本文件用来生成混淆后的名字。-classobfuscationdictionary filename 指定一个混淆类名的字典-packageobfuscationdictionary filename 指定一个混淆包名的字典-overloadaggressively 混淆的时候大量使用重载，多个方法名使用同一个混淆名（慎用）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>        <h2 id="公共模板">          <a href="#公共模板" class="heading-link"><i class="fas fa-link"></i></a><a href="#公共模板" class="headerlink" title="公共模板"></a>公共模板</h2>      <pre class="line-numbers language-none"><code class="language-none">############################################### 对于一些基本指令的添加############################################### 代码混淆压缩比，在 0~7 之间，默认为 5，一般不做修改-optimizationpasses 5# 混合时不使用大小写混合，混合后的类名为小写-dontusemixedcaseclassnames# 指定不去忽略非公共库的类-dontskipnonpubliclibraryclasses# 这句话能够使我们的项目混淆后产生映射文件# 包含有类名-&gt;混淆后类名的映射关系-verbose# 指定不去忽略非公共库的类成员-dontskipnonpubliclibraryclassmembers# 不做预校验，preverify 是 proguard 的四个步骤之一，Android 不需要 preverify，去掉这一步能够加快混淆速度。-dontpreverify# 保留 Annotation 不混淆-keepattributes *Annotation*,InnerClasses# 避免混淆泛型-keepattributes Signature# 抛出异常时保留代码行号-keepattributes SourceFile,LineNumberTable# 指定混淆是采用的算法，后面的参数是一个过滤器# 这个过滤器是谷歌推荐的算法，一般不做更改-optimizations !code/simplification/cast,!field/*,!class/merging/*############################################### Android开发中一些需要保留的公共部分############################################### 保留我们使用的四大组件，自定义的 Application 等等这些类不被混淆# 因为这些子类都有可能被外部调用-keep public class * extends android.app.Activity-keep public class * extends android.app.Appliction-keep public class * extends android.app.Service-keep public class * extends android.content.BroadcastReceiver-keep public class * extends android.content.ContentProvider-keep public class * extends android.app.backup.BackupAgentHelper-keep public class * extends android.preference.Preference-keep public class * extends android.view.View-keep public class com.android.vending.licensing.ILicensingService# 保留 support 下的所有类及其内部类-keep class android.support.** { *; }# 保留继承的-keep public class * extends android.support.v4.**-keep public class * extends android.support.v7.**-keep public class * extends android.support.annotation.**# 保留 R 下面的资源-keep class **.R$* { *; }# 保留本地 native 方法不被混淆-keepclasseswithmembernames class * {    native &lt;methods&gt;;}# 保留在 Activity 中的方法参数是view的方法，# 这样以来我们在 layout 中写的 onClick 就不会被影响-keepclassmembers class * extends android.app.Activity {    public void *(android.view.View);}# 保留枚举类不被混淆-keepclassmembers enum * {    public static **[] values();    public static ** valueOf(java.lang.String);}# 保留我们自定义控件（继承自 View）不被混淆-keep public class * extends android.view.View {    *** get*();    void set*(***);    public &lt;init&gt;(android.content.Context);    public &lt;init&gt;(android.content.Context, android.util.AttributeSet);    public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);}# 保留 Parcelable 序列化类不被混淆-keep class * implements android.os.Parcelable {    public static final android.os.Parcelable$Creator *;}# 保留 Serializable 序列化的类不被混淆-keepnames class * implements java.io.Serializable-keepclassmembers class * implements java.io.Serializable {    static final long serialVersionUID;    private static final java.io.ObjectStreamField[] serialPersistentFields;    !static !transient &lt;fields&gt;;    !private &lt;fields&gt;;    !private &lt;methods&gt;;    private void writeObject(java.io.ObjectOutputStream);    private void readObject(java.io.ObjectInputStream);    java.lang.Object writeReplace();    java.lang.Object readResolve();}# 对于带有回调函数的 onXXEvent、**On*Listener 的，不能被混淆-keepclassmembers class * {    void *(**On*Event);    void *(**On*Listener);}# webView 处理，项目中没有使用到 webView 忽略即可-keepclassmembers class fqcn.of.javascript.interface.for.webview {    public *;}-keepclassmembers class * extends android.webkit.webViewClient {    public void *(android.webkit.WebView, java.lang.String, android.graphics.Bitmap);    public boolean *(android.webkit.WebView, java.lang.String);}-keepclassmembers class * extends android.webkit.webViewClient {    public void *(android.webkit.webView, java.lang.String);}# js-keepattributes JavascriptInterface-keep class android.webkit.JavascriptInterface { *; }-keepclassmembers class * {    @android.webkit.JavascriptInterface &lt;methods&gt;;}# @Keep-keep,allowobfuscation @interface android.support.annotation.Keep-keep @android.support.annotation.Keep class *-keepclassmembers class * {    @android.support.annotation.Keep *;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="常用的自定义混淆规则">          <a href="#常用的自定义混淆规则" class="heading-link"><i class="fas fa-link"></i></a><a href="#常用的自定义混淆规则" class="headerlink" title="常用的自定义混淆规则"></a>常用的自定义混淆规则</h2>      <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"># 通配符*，匹配任意长度字符，但不含包名分隔符(.)# 通配符**，匹配任意长度字符，并且包含包名分隔符(.)# 不混淆某个类-keep public class com.jasonwu.demo.Test { *; }# 不混淆某个包所有的类-keep class com.jasonwu.demo.test.** { *; }# 不混淆某个类的子类-keep public class * com.jasonwu.demo.Test { *; }# 不混淆所有类名中包含了 ``model`` 的类及其成员-keep public class **.*model*.** {*;}# 不混淆某个接口的实现-keep class * implements com.jasonwu.demo.TestInterface { *; }# 不混淆某个类的构造方法-keepclassmembers class com.jasonwu.demo.Test {   public <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init</span><span class="token punctuation">&gt;</span></span>(); }# 不混淆某个类的特定的方法-keepclassmembers class com.jasonwu.demo.Test {   public void test(java.lang.String); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="aar中增加独立的混淆配置">          <a href="#aar中增加独立的混淆配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#aar中增加独立的混淆配置" class="headerlink" title="aar中增加独立的混淆配置"></a>aar中增加独立的混淆配置</h2>      <p><code>build.gralde</code></p><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">android <span class="token punctuation">{</span>    ···    defaultConfig <span class="token punctuation">{</span>        ···        consumerProguardFile <span class="token string">'proguard-rules.pro'</span>    <span class="token punctuation">}</span>    ···<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="检查混淆和追踪异常">          <a href="#检查混淆和追踪异常" class="heading-link"><i class="fas fa-link"></i></a><a href="#检查混淆和追踪异常" class="headerlink" title="检查混淆和追踪异常"></a>检查混淆和追踪异常</h2>      <p>开启 Proguard 功能，则每次构建时 ProGuard 都会输出下列文件：</p><ul><li><p>dump.txt<br>说明 APK 中所有类文件的内部结构。</p></li><li><p>mapping.txt<br>提供原始与混淆过的类、方法和字段名称之间的转换。</p></li><li><p>seeds.txt<br>列出未进行混淆的类和成员。</p></li><li><p>usage.txt<br>列出从 APK 移除的代码。</p></li></ul><p>这些文件保存在 /build/outputs/mapping/release/ 中。我们可以查看 seeds.txt 里面是否是我们需要保留的，以及 usage.txt 里查看是否有误删除的代码。 mapping.txt 文件很重要，由于我们的部分代码是经过重命名的，如果该部分出现 bug，对应的异常堆栈信息里的类或成员也是经过重命名的，难以定位问题。我们可以用 retrace 脚本（在 Windows 上为 retrace.bat；在 Mac/Linux 上为 retrace.sh）。它位于 /tools/proguard/ 目录中。该脚本利用 mapping.txt 文件和你的异常堆栈文件生成没有经过混淆的异常堆栈文件,这样就可以看清是哪里出问题了。使用 retrace 工具的语法如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">retrace.bat<span class="token operator">|</span>retrace.sh <span class="token punctuation">[</span>-verbose<span class="token punctuation">]</span> mapping.txt <span class="token punctuation">[</span><span class="token operator">&lt;</span>stacktrace_file<span class="token operator">&gt;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h1 id="架构">          <a href="#架构" class="heading-link"><i class="fas fa-link"></i></a><a href="#架构" class="headerlink" title="架构"></a>架构</h1>              <h2 id="MVC">          <a href="#MVC" class="heading-link"><i class="fas fa-link"></i></a><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2>      <p><img src="https://mmbiz.qpic.cn/mmbiz_png/zKFJDM5V3Wy5xbLTp6JMMdouZiavFxyYCwLhGyLdicyLzgUDKFTZVt1OgU6iaSx2IUwnygzmQzW7Renaa8hmQ62cQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" style=""></p><p>在 Android 中，三者的关系如下：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/zKFJDM5V3Wy5xbLTp6JMMdouZiavFxyYCicNvEVMO9vDgukUR29Z1DCacZJwmmH1EEb7gUOZmDxolWexP01O8jfg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" style=""></p><p>由于在 Android 中 xml 布局的功能性太弱，所以 Activity 承担了绝大部分的工作，所以在 Android 中 mvc 更像：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/zKFJDM5V3Wy5xbLTp6JMMdouZiavFxyYCOq89MLQX4UM3dgBTQfU72desHb1XbOWRQZINnXOCCdZCuicUiaTHhtEg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" style=""></p><p>总结：</p><ul><li>具有一定的分层，model 解耦，controller 和 view 并没有解耦</li><li>controller 和 view 在 Android 中无法做到彻底分离，Controller 变得臃肿不堪</li><li>易于理解、开发速度快、可维护性高</li></ul>        <h2 id="MVP">          <a href="#MVP" class="heading-link"><i class="fas fa-link"></i></a><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h2>      <p><img src="https://mmbiz.qpic.cn/mmbiz_png/zKFJDM5V3Wy5xbLTp6JMMdouZiavFxyYCLVgibsuVQFguBI8FBdZibLNfpvbpd6njkdGWdyR2UL6TzMOhKHFqLC0Q/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" style=""></p><p>通过引入接口 BaseView，让相应的视图组件如 Activity，Fragment去实现 BaseView，把业务逻辑放在 presenter 层中，弱化 Model 只有跟 view 相关的操作都由 View 层去完成。</p><p>总结：</p><ul><li>彻底解决了 MVC 中 View 和 Controller 傻傻分不清楚的问题</li><li>但是随着业务逻辑的增加，一个页面可能会非常复杂，UI 的改变是非常多，会有非常多的 case，这样就会造成 View 的接口会很庞大</li><li>更容易单元测试</li></ul>        <h2 id="MVVM">          <a href="#MVVM" class="heading-link"><i class="fas fa-link"></i></a><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2>      <p><img src="https://mmbiz.qpic.cn/mmbiz_png/zKFJDM5V3Wy5xbLTp6JMMdouZiavFxyYCMygIDD6xo5djkq6Y3jZo53sT2A4kKNaz8JEVRwmUnTmcAwJm0pZVWg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" style=""></p><p>在 MVP 中 View 和 Presenter 要相互持有，方便调用对方，而在 MVP 中 View 和 ViewModel 通过 Binding 进行关联，他们之前的关联处理通过  DataBinding 完成。</p><p>总结：</p><ul><li>很好的解决了 MVC 和 MVP 的问题</li><li>视图状态较多，ViewModel 的构建和维护的成本都会比较高</li><li>但是由于数据和视图的双向绑定，导致出现问题时不太好定位来源</li></ul>        <h1 id="Jetpack">          <a href="#Jetpack" class="heading-link"><i class="fas fa-link"></i></a><a href="#Jetpack" class="headerlink" title="Jetpack"></a>Jetpack</h1>              <h2 id="架构-1">          <a href="#架构-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#架构-1" class="headerlink" title="架构"></a>架构</h2>      <p><img src="https://developer.android.google.cn/topic/libraries/architecture/images/final-architecture.png"></p>        <h2 id="使用示例-1">          <a href="#使用示例-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h2>      <p><code>build.gradle</code></p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">android <span class="token punctuation">{</span>    ···    dataBinding <span class="token punctuation">{</span>        enabled <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>    ···    implementation <span class="token interpolation-string"><span class="token string">"androidx.fragment:fragment-ktx:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">rootProject</span></span><span class="token string">.fragmentVersion"</span></span>    implementation <span class="token interpolation-string"><span class="token string">"androidx.lifecycle:lifecycle-extensions:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">rootProject</span></span><span class="token string">.lifecycleVersion"</span></span>    implementation <span class="token interpolation-string"><span class="token string">"androidx.lifecycle:lifecycle-livedata-ktx:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">rootProject</span></span><span class="token string">.lifecycleVersion"</span></span>    implementation <span class="token interpolation-string"><span class="token string">"androidx.lifecycle:lifecycle-viewmodel-ktx:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">rootProject</span></span><span class="token string">.lifecycleVersion"</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>fragment_plant_detail.xml</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span>            <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewModel<span class="token punctuation">"</span></span>            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.google.samples.apps.sunflower.viewmodels.PlantDetailViewModel<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.constraintlayout.widget.ConstraintLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name">···</span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{viewModel.plant.name}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.constraintlayout.widget.ConstraintLayout</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>PlantDetailFragment.kt</code></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> PlantDetailFragment <span class="token operator">:</span> <span class="token function">Fragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> args<span class="token operator">:</span> PlantDetailFragmentArgs <span class="token keyword">by</span> <span class="token function">navArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> shareText<span class="token operator">:</span> String    <span class="token keyword">private</span> <span class="token keyword">val</span> plantDetailViewModel<span class="token operator">:</span> PlantDetailViewModel <span class="token keyword">by</span> viewModels <span class="token punctuation">{</span>        InjectorUtils<span class="token punctuation">.</span><span class="token function">providePlantDetailViewModelFactory</span><span class="token punctuation">(</span><span class="token function">requireActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span>plantId<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreateView</span><span class="token punctuation">(</span>        inflater<span class="token operator">:</span> LayoutInflater<span class="token punctuation">,</span>        container<span class="token operator">:</span> ViewGroup<span class="token operator">?</span><span class="token punctuation">,</span>        savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span>    <span class="token punctuation">)</span><span class="token operator">:</span> View<span class="token operator">?</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> binding <span class="token operator">=</span> DataBindingUtil<span class="token punctuation">.</span>inflate<span class="token operator">&lt;</span>FragmentPlantDetailBinding<span class="token operator">&gt;</span><span class="token punctuation">(</span>                inflater<span class="token punctuation">,</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>fragment_plant_detail<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>            viewModel <span class="token operator">=</span> plantDetailViewModel            lifecycleOwner <span class="token operator">=</span> <span class="token keyword">this</span><span class="token label symbol">@PlantDetailFragment</span>        <span class="token punctuation">}</span>        plantDetailViewModel<span class="token punctuation">.</span>plant<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> plant <span class="token operator">-&gt;</span>            <span class="token comment">// 更新相关 UI</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> binding<span class="token punctuation">.</span>root    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Plant.kt</code></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Plant</span> <span class="token punctuation">(</span>    <span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>PlantDetailViewModel.kt</code></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">PlantDetailViewModel</span><span class="token punctuation">(</span>    plantRepository<span class="token operator">:</span> PlantRepository<span class="token punctuation">,</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> plantId<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> plant<span class="token operator">:</span> LiveData<span class="token operator">&lt;</span>Plant<span class="token operator">&gt;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCleared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCleared</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        viewModelScope<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">init</span> <span class="token punctuation">{</span>        plant <span class="token operator">=</span> plantRepository<span class="token punctuation">.</span><span class="token function">getPlant</span><span class="token punctuation">(</span>plantId<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>PlantDetailViewModelFactory.kt</code></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">PlantDetailViewModelFactory</span><span class="token punctuation">(</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> plantRepository<span class="token operator">:</span> PlantRepository<span class="token punctuation">,</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> plantId<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">:</span> ViewModelProvider<span class="token punctuation">.</span><span class="token function">NewInstanceFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation builtin">@Suppress</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"UNCHECKED_CAST"</span></span><span class="token punctuation">)</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T <span class="token operator">:</span> ViewModel<span class="token operator">&gt;</span> <span class="token function">create</span><span class="token punctuation">(</span>modelClass<span class="token operator">:</span> Class<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">PlantDetailViewModel</span><span class="token punctuation">(</span>plantRepository<span class="token punctuation">,</span> plantId<span class="token punctuation">)</span> <span class="token keyword">as</span> T    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>InjectorUtils.kt</code></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">object</span> InjectorUtils <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">getPlantRepository</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span><span class="token operator">:</span> PlantRepository <span class="token punctuation">{</span>        ···    <span class="token punctuation">}</span>    <span class="token keyword">fun</span> <span class="token function">providePlantDetailViewModelFactory</span><span class="token punctuation">(</span>        context<span class="token operator">:</span> Context<span class="token punctuation">,</span>        plantId<span class="token operator">:</span> String    <span class="token punctuation">)</span><span class="token operator">:</span> PlantDetailViewModelFactory <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">PlantDetailViewModelFactory</span><span class="token punctuation">(</span><span class="token function">getPlantRepository</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">,</span> plantId<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="NDK-开发">          <a href="#NDK-开发" class="heading-link"><i class="fas fa-link"></i></a><a href="#NDK-开发" class="headerlink" title="NDK 开发"></a>NDK 开发</h1>      <blockquote><p>NDK 全称是 Native Development Kit，是一组可以让你在 Android 应用中编写实现 C/C++ 的工具，可以在项目用自己写源代码构建，也可以利用现有的预构建库。</p></blockquote><p>使用 NDK 的使用目的有：</p><ul><li>从设备获取更好的性能以用于计算密集型应用，例如游戏或物理模拟  </li><li>重复使用自己或其他开发者的 C/C++ 库，便利于跨平台。  </li><li>NDK 集成了譬如 OpenSL、Vulkan 等 API 规范的特定实现，以实现在 java 层无法做到的功能如提升音频性能等  </li><li>增加反编译难度</li></ul>        <h2 id="JNI-基础">          <a href="#JNI-基础" class="heading-link"><i class="fas fa-link"></i></a><a href="#JNI-基础" class="headerlink" title="JNI 基础"></a>JNI 基础</h2>              <h3 id="数据类型">          <a href="#数据类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3>      <ul><li>基本数据类型</li></ul><div class="table-container"><table><thead><tr><th>Java 类型</th><th>Native 类型</th><th>符号属性</th><th>字长</th></tr></thead><tbody><tr><td>boolean</td><td>jboolean</td><td>无符号</td><td>8位</td></tr><tr><td>byte</td><td>jbyte</td><td>无符号</td><td>8位</td></tr><tr><td>char</td><td>jchar</td><td>无符号</td><td>16位</td></tr><tr><td>short</td><td>jshort</td><td>有符号</td><td>16位</td></tr><tr><td>int</td><td>jnit</td><td>有符号</td><td>32位</td></tr><tr><td>long</td><td>jlong</td><td>有符号</td><td>64位</td></tr><tr><td>float</td><td>jfloat</td><td>有符号</td><td>32位</td></tr><tr><td>double</td><td>jdouble</td><td>有符号</td><td>64位</td></tr></tbody></table></div><ul><li>引用数据类型</li></ul><div class="table-container"><table><thead><tr><th>Java 引用类型</th><th>Native 类型</th><th>Java 引用类型</th><th>Native 类型</th></tr></thead><tbody><tr><td>All objects</td><td>jobject</td><td>char[]</td><td>jcharArray</td></tr><tr><td>java.lang.Class</td><td>jclass</td><td>short[]</td><td>jshortArray</td></tr><tr><td>java.lang.String</td><td>jstring</td><td>int[]</td><td>jintArray</td></tr><tr><td>Object[]</td><td>jobjectArray</td><td>long[]</td><td>jlongArray</td></tr><tr><td>boolean[]</td><td>jbooleanArray</td><td>float[]</td><td>jfloatArray</td></tr><tr><td>byte[]</td><td>jbyteArray</td><td>double[]</td><td>jdoubleArray</td></tr><tr><td>java.lang.Throwable</td><td>jthrowable</td><td></td><td></td></tr></tbody></table></div>        <h3 id="String-字符串函数操作">          <a href="#String-字符串函数操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#String-字符串函数操作" class="headerlink" title="String 字符串函数操作"></a>String 字符串函数操作</h3>      <div class="table-container"><table><thead><tr><th>JNI 函数</th><th>描述</th></tr></thead><tbody><tr><td>GetStringChars / ReleaseStringChars</td><td>获得或释放一个指向 Unicode 编码的字符串的指针（指 C/C++ 字符串）</td></tr><tr><td>GetStringUTFChars / ReleaseStringUTFChars</td><td>获得或释放一个指向 UTF-8 编码的字符串的指针（指 C/C++ 字符串）</td></tr><tr><td>GetStringLength</td><td>返回 Unicode 编码的字符串的长度</td></tr><tr><td>getStringUTFLength</td><td>返回 UTF-8 编码的字符串的长度</td></tr><tr><td>NewString</td><td>将 Unicode 编码的 C/C++ 字符串转换为 Java 字符串</td></tr><tr><td>NewStringUTF</td><td>将 UTF-8 编码的 C/C++ 字符串转换为 Java 字符串</td></tr><tr><td>GetStringCritical / ReleaseStringCritical</td><td>获得或释放一个指向字符串内容的指针(指 Java 字符串)</td></tr><tr><td>GetStringRegion</td><td>获取或者设置 Unicode 编码的字符串的指定范围的内容</td></tr><tr><td>GetStringUTFRegion</td><td>获取或者设置 UTF-8 编码的字符串的指定范围的内容</td></tr></tbody></table></div>        <h3 id="常用-JNI-访问-Java-对象方法">          <a href="#常用-JNI-访问-Java-对象方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#常用-JNI-访问-Java-对象方法" class="headerlink" title="常用 JNI 访问 Java 对象方法"></a>常用 JNI 访问 Java 对象方法</h3>      <p><code>MyJob.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>myjniproject</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyJob</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">JOB_STRING</span> <span class="token operator">=</span> <span class="token string">"my_job"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> jobId<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyJob</span><span class="token punctuation">(</span><span class="token keyword">int</span> jobId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>jobId <span class="token operator">=</span> jobId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getJobId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> jobId<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>native-lib.cpp</code></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;jni.h&gt;extern "C"JNIEXPORT jint JNICALLJava_com_example_myjniproject_MainActivity_getJobId(JNIEnv *env, jobject thiz, jobject job) {    // 根据实力获取 class 对象    jclass jobClz = env-&gt;GetObjectClass(job);    // 根据类名获取 class 对象    jclass jobClz = env-&gt;FindClass("com/example/myjniproject/MyJob");    // 获取属性 id    jfieldID fieldId = env-&gt;GetFieldID(jobClz, "jobId", "I");    // 获取静态属性 id    jfieldID sFieldId = env-&gt;GetStaticFieldID(jobClz, "JOB_STRING", "Ljava/lang/String;");    // 获取方法 id    jmethodID methodId = env-&gt;GetMethodID(jobClz, "getJobId", "()I");    // 获取构造方法 id    jmethodID  initMethodId = env-&gt;GetMethodID(jobClz, "&lt;init&gt;", "(I)V");    // 根据对象属性 id 获取该属性值    jint id = env-&gt;GetIntField(job, fieldId);    // 根据对象方法 id 调用该方法    jint id = env-&gt;CallIntMethod(job, methodId);    // 创建新的对象    jobject newJob = env-&gt;NewObject(jobClz, initMethodId, 10);    return id;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="NDK-开发-1">          <a href="#NDK-开发-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#NDK-开发-1" class="headerlink" title="NDK 开发"></a>NDK 开发</h2>              <h3 id="基础开发流程">          <a href="#基础开发流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#基础开发流程" class="headerlink" title="基础开发流程"></a>基础开发流程</h3>      <ul><li><p>在 java 中声明 native 方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token comment">// Used to load the 'native-lib' library on application startup.</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">"native-lib"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"MainActivity"</span><span class="token punctuation">,</span> <span class="token function">stringFromJNI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token class-name">String</span> <span class="token function">stringFromJNI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 <code>app/src/main</code> 目录下新建 cpp 目录，新建相关 cpp 文件，实现相关方法（AS 可用快捷键快速生成）</p></li></ul><p><code>native-lib.cpp</code></p><pre class="line-numbers language-none"><code class="language-none">#include &lt;jni.h&gt;extern "C" JNIEXPORT jstring JNICALLJava_com_example_myjniproject_MainActivity_stringFromJNI(        JNIEnv *env,        jobject /* this */) {    std::string hello = "Hello from C++";    return env-&gt;NewStringUTF(hello.c_str());}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>函数名的格式遵循遵循如下规则：Java_包名_类名_方法名。</li><li>extern “C” 指定采用 C 语言的命名风格来编译，否则由于 C 与 C++ 风格不同，导致链接时无法找到具体的函数</li><li>JNIEnv*：表示一个指向 JNI 环境的指针，可以通过他来访问 JNI 提供的接口方法</li><li>jobject：表示 java 对象中的 this</li><li>JNIEXPORT 和 JNICALL：JNI 所定义的宏，可以在 jni.h 头文件中查找到</li></ul></blockquote><ul><li>通过 CMake 或者 ndk-build 构建动态库</li></ul>        <h3 id="System-loadLibrary">          <a href="#System-loadLibrary" class="heading-link"><i class="fas fa-link"></i></a><a href="#System-loadLibrary" class="headerlink" title="System.loadLibrary()"></a>System.loadLibrary()</h3>      <p><code>java/lang/System.java</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@CallerSensitive</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load0</span><span class="token punctuation">(</span><span class="token class-name">Reflection</span><span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>调用 <code>Runtime</code> 相关 native 方法</li></ul><p><code>java/lang/Runtime.java</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token class-name">String</span> <span class="token function">nativeLoad</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">,</span> <span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> caller<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>native 方法的实现如下：</li></ul><p><code>dalvik/vm/native/java_lang_Runtime.cpp</code>:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Dalvik_java_lang_Runtime_nativeLoad</span><span class="token punctuation">(</span><span class="token keyword">const</span> u4<span class="token operator">*</span> args<span class="token punctuation">,</span>    JValue<span class="token operator">*</span> pResult<span class="token punctuation">)</span><span class="token punctuation">{</span>    ···    <span class="token keyword">bool</span> success<span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>fileNameObj <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将 Java 的 library path String 转换到 native 的 String</span>    fileName <span class="token operator">=</span> <span class="token function">dvmCreateCstrFromString</span><span class="token punctuation">(</span>fileNameObj<span class="token punctuation">)</span><span class="token punctuation">;</span>    success <span class="token operator">=</span> <span class="token function">dvmLoadNativeCode</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> classLoader<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> msg <span class="token operator">=</span> <span class="token punctuation">(</span>reason <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">?</span> reason <span class="token operator">:</span> <span class="token string">"unknown failure"</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token function">dvmCreateStringFromCstr</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dvmReleaseTrackedAlloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Object<span class="token operator">*</span><span class="token punctuation">)</span> result<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ···<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>dvmLoadNativeCode</code> 函数实现如下：</li></ul><p><code>dalvik/vm/Native.cpp</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">dvmLoadNativeCode</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pathName<span class="token punctuation">,</span> Object<span class="token operator">*</span> classLoader<span class="token punctuation">,</span>        <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> detail<span class="token punctuation">)</span><span class="token punctuation">{</span>    SharedLib<span class="token operator">*</span> pEntry<span class="token punctuation">;</span>    <span class="token keyword">void</span><span class="token operator">*</span> handle<span class="token punctuation">;</span>    ···    <span class="token operator">*</span>detail <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment">// 如果已经加载过了，则直接返回 true</span>    pEntry <span class="token operator">=</span> <span class="token function">findSharedLibEntry</span><span class="token punctuation">(</span>pathName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pEntry <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pEntry<span class="token operator">-&gt;</span>classLoader <span class="token operator">!=</span> classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ···            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ···        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkOnLoadResult</span><span class="token punctuation">(</span>pEntry<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Thread<span class="token operator">*</span> self <span class="token operator">=</span> <span class="token function">dvmThreadSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ThreadStatus oldStatus <span class="token operator">=</span> <span class="token function">dvmChangeStatus</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> THREAD_VMWAIT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 把.so mmap 到进程空间，并把 func 等相关信息填充到 soinfo 中</span>    handle <span class="token operator">=</span> <span class="token function">dlopen</span><span class="token punctuation">(</span>pathName<span class="token punctuation">,</span> RTLD_LAZY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dvmChangeStatus</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> oldStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>    ···    <span class="token comment">// 创建一个新的 entry</span>    SharedLib<span class="token operator">*</span> pNewEntry<span class="token punctuation">;</span>    pNewEntry <span class="token operator">=</span> <span class="token punctuation">(</span>SharedLib<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>SharedLib<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pNewEntry<span class="token operator">-&gt;</span>pathName <span class="token operator">=</span> <span class="token function">strdup</span><span class="token punctuation">(</span>pathName<span class="token punctuation">)</span><span class="token punctuation">;</span>    pNewEntry<span class="token operator">-&gt;</span>handle <span class="token operator">=</span> handle<span class="token punctuation">;</span>    pNewEntry<span class="token operator">-&gt;</span>classLoader <span class="token operator">=</span> classLoader<span class="token punctuation">;</span>    <span class="token function">dvmInitMutex</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pNewEntry<span class="token operator">-&gt;</span>onLoadLock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_cond_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pNewEntry<span class="token operator">-&gt;</span>onLoadCond<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pNewEntry<span class="token operator">-&gt;</span>onLoadThreadId <span class="token operator">=</span> self<span class="token operator">-&gt;</span>threadId<span class="token punctuation">;</span>    <span class="token comment">// 尝试添加到列表中</span>    SharedLib<span class="token operator">*</span> pActualEntry <span class="token operator">=</span> <span class="token function">addSharedLibEntry</span><span class="token punctuation">(</span>pNewEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pNewEntry <span class="token operator">!=</span> pActualEntry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ···        <span class="token function">freeSharedLibEntry</span><span class="token punctuation">(</span>pNewEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">checkOnLoadResult</span><span class="token punctuation">(</span>pActualEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        ···        <span class="token keyword">bool</span> result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">void</span><span class="token operator">*</span> vonLoad<span class="token punctuation">;</span>        <span class="token keyword">int</span> version<span class="token punctuation">;</span>        <span class="token comment">// 调用该 so 库的 JNI_OnLoad 方法</span>        vonLoad <span class="token operator">=</span> <span class="token function">dlsym</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token string">"JNI_OnLoad"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vonLoad <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ···        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 调用 JNI_Onload 方法，重写类加载器。</span>            OnLoadFunc func <span class="token operator">=</span> <span class="token punctuation">(</span>OnLoadFunc<span class="token punctuation">)</span>vonLoad<span class="token punctuation">;</span>            Object<span class="token operator">*</span> prevOverride <span class="token operator">=</span> self<span class="token operator">-&gt;</span>classLoaderOverride<span class="token punctuation">;</span>            self<span class="token operator">-&gt;</span>classLoaderOverride <span class="token operator">=</span> classLoader<span class="token punctuation">;</span>            oldStatus <span class="token operator">=</span> <span class="token function">dvmChangeStatus</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> THREAD_NATIVE<span class="token punctuation">)</span><span class="token punctuation">;</span>            ···            version <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span>gDvmJni<span class="token punctuation">.</span>jniVm<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dvmChangeStatus</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> oldStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>            self<span class="token operator">-&gt;</span>classLoaderOverride <span class="token operator">=</span> prevOverride<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>version <span class="token operator">!=</span> JNI_VERSION_1_2 <span class="token operator">&amp;&amp;</span> version <span class="token operator">!=</span> JNI_VERSION_1_4 <span class="token operator">&amp;&amp;</span>                version <span class="token operator">!=</span> JNI_VERSION_1_6<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ···                result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                ···            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span>            pNewEntry<span class="token operator">-&gt;</span>onLoadResult <span class="token operator">=</span> kOnLoadOkay<span class="token punctuation">;</span>        <span class="token keyword">else</span>            pNewEntry<span class="token operator">-&gt;</span>onLoadResult <span class="token operator">=</span> kOnLoadFailed<span class="token punctuation">;</span>        pNewEntry<span class="token operator">-&gt;</span>onLoadThreadId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 释放锁资源 </span>        <span class="token function">dvmLockMutex</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pNewEntry<span class="token operator">-&gt;</span>onLoadLock<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pthread_cond_broadcast</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pNewEntry<span class="token operator">-&gt;</span>onLoadCond<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dvmUnlockMutex</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pNewEntry<span class="token operator">-&gt;</span>onLoadLock<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><!-- ### native 方法调用原理- 虚拟机调用一个方法时，发现如果这是一个 native 方法，则使用 Method 对象中的nativeFunc 函数指针对象调用。``dalvik2/vm/interp/Stack.cpp``:<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Object<span class="token operator">*</span> <span class="token function">dvmInvokeMethod</span><span class="token punctuation">(</span>Object<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">const</span> Method<span class="token operator">*</span> method<span class="token punctuation">,</span>    ArrayObject<span class="token operator">*</span> argList<span class="token punctuation">,</span> ArrayObject<span class="token operator">*</span> params<span class="token punctuation">,</span> ClassObject<span class="token operator">*</span> returnType<span class="token punctuation">,</span>    <span class="token keyword">bool</span> noAccessCheck<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ···    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dvmIsNativeMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">TRACE_METHOD_ENTER</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>method<span class="token operator">-></span>nativeFunc<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>u4<span class="token operator">*</span><span class="token punctuation">)</span>self<span class="token operator">-></span>interpSave<span class="token punctuation">.</span>curFrame<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retval<span class="token punctuation">,</span> method<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">TRACE_METHOD_EXIT</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">dvmInterpret</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> method<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retval<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ···<span class="token punctuation">&#125;</span>``` <span class="token operator">--</span><span class="token operator">></span>## CMake 构建 NDK 项目<span class="token operator">></span> CMake 是一个开源的跨平台工具系列，旨在构建，测试和打包软件，从 Android Studio <span class="token number">2.2</span> 开始，Android Sudio 默认地使用 CMake 与 Gradle 搭配使用来构建原生库。启动方式只需要在 ``app<span class="token operator">/</span>build<span class="token punctuation">.</span>gradle`` 中添加相关：```groovyandroid <span class="token punctuation">&#123;</span>    ···    defaultConfig <span class="token punctuation">&#123;</span>        ···        externalNativeBuild <span class="token punctuation">&#123;</span>            cmake <span class="token punctuation">&#123;</span>                cppFlags <span class="token string">""</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        ndk <span class="token punctuation">&#123;</span>            abiFilters <span class="token char">'arm64-v8a'</span><span class="token punctuation">,</span> <span class="token char">'armeabi-v7a'</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    ···    externalNativeBuild <span class="token punctuation">&#123;</span>        cmake <span class="token punctuation">&#123;</span>            path <span class="token string">"CMakeLists.txt"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在对应目录新建一个 <code>CMakeLists.txt</code> 文件：</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt"># 定义了所需 CMake 的最低版本cmake_minimum_required(VERSION 3.4.1)# add_library() 命令用来添加库# native-lib 对应着生成的库的名字# SHARED 代表为分享库# src/main/cpp/native-lib.cpp 则是指明了源文件的路径。add_library( # Sets the name of the library.        native-lib        # Sets the library as a shared library.        SHARED        # Provides a relative path to your source file(s).        src/main/cpp/native-lib.cpp)# find_library 命令添加到 CMake 构建脚本中以定位 NDK 库，并将其路径存储为一个变量。# 可以使用此变量在构建脚本的其他部分引用 NDK 库find_library( # Sets the name of the path variable.        log-lib        # Specifies the name of the NDK library that        # you want CMake to locate.        log)# 预构建的 NDK 库已经存在于 Android 平台上，因此，无需再构建或将其打包到 APK 中。# 由于 NDK 库已经是 CMake 搜索路径的一部分，只需要向 CMake 提供希望使用的库的名称，并将其关联到自己的原生库中# 要将预构建库关联到自己的原生库target_link_libraries( # Specifies the target library.        native-lib        # Links the target library to the log library        # included in the NDK.        $&#123;log-lib&#125;)···<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><span class="exturl"><a class="exturl__link"   href="https://cmake.org/cmake/help/latest/manual/cmake-commands.7.html" >CMake 命令详细信息文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul>        <h2 id="常用的-Android-NDK-原生-API"   >          <a href="#常用的-Android-NDK-原生-API" class="heading-link"><i class="fas fa-link"></i></a><a href="#常用的-Android-NDK-原生-API" class="headerlink" title="常用的 Android NDK 原生 API"></a>常用的 Android NDK 原生 API</h2>      <div class="table-container"><table><thead><tr><th>支持 NDK 的 API 级别</th><th>关键原生 API</th><th>包括</th></tr></thead><tbody><tr><td>3</td><td>Java 原生接口</td><td>#include &lt;jni.h&gt;</td></tr><tr><td>3</td><td>Android 日志记录 API</td><td>#include &lt;android&#x2F;log.h&gt;</td></tr><tr><td>5</td><td>OpenGL ES 2.0</td><td>#include &lt;GLES2&#x2F;gl2.h&gt;<br>#include &lt;GLES2&#x2F;gl2ext.h&gt;</td></tr><tr><td>8</td><td>Android 位图 API</td><td>#include &lt;android&#x2F;bitmap.h&gt;</td></tr><tr><td>9</td><td>OpenSL ES</td><td>#include &lt;SLES&#x2F;OpenSLES.h&gt;<br>#include &lt;SLES&#x2F;OpenSLES_Platform.h&gt;<br>#include &lt;SLES&#x2F;OpenSLES_Android.h&gt;<br>#include &lt;SLES&#x2F;OpenSLES_AndroidConfiguration.h&gt;</td></tr><tr><td>9</td><td>原生应用 API</td><td>#include &lt;android&#x2F;rect.h&gt;<br>#include &lt;android&#x2F;window.h&gt;<br>#include&lt;android&#x2F;native_activity.h&gt;<br>···</td></tr><tr><td>18</td><td>OpenGL ES 3.0</td><td>#include &lt;GLES3&#x2F;gl3.h&gt;<br>#include &lt;GLES3&#x2F;gl3ext.h&gt;</td></tr><tr><td>21</td><td>原生媒体 API</td><td>#include &lt;media&#x2F;NdkMediaCodec.h&gt;<br>#include &lt;media&#x2F;NdkMediaCrypto.h&gt;<br>···</td></tr><tr><td>24</td><td>原生相机 API</td><td>#include &lt;camera&#x2F;NdkCameraCaptureSession.h&gt;<br>#include &lt;camera&#x2F;NdkCameraDevice.h&gt;<br>···</td></tr><tr><td>···</td><td></td><td></td></tr></tbody></table></div>        <h1 id="类加载器"   >          <a href="#类加载器" class="heading-link"><i class="fas fa-link"></i></a><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1>      <p><img   src="https://img-blog.csdn.net/20161021101447117?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" style="" ></p>        <h2 id="双亲委托模式"   >          <a href="#双亲委托模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#双亲委托模式" class="headerlink" title="双亲委托模式"></a>双亲委托模式</h2>      <p>某个特定的类加载器在接到加载类的请求时，首先将加载任务委托给父类加载器，依次递归，如果父类加载器可以完成类加载任务，就成功返回；只有父类加载器无法完成此加载任务时，才自己去加载。</p><p>因为这样可以避免重复加载，当父亲已经加载了该类的时候，就没有必要子 ClassLoader 再加载一次。如果不使用这种委托模式，那我们就可以随时使用自定义的类来动态替代一些核心的类，存在非常大的安全隐患。</p>        <h2 id="DexPathList"   >          <a href="#DexPathList" class="heading-link"><i class="fas fa-link"></i></a><a href="#DexPathList" class="headerlink" title="DexPathList"></a>DexPathList</h2>      <p>DexClassLoader 重载了 <code>findClass</code> 方法，在加载类时会调用其内部的 DexPathList 去加载。DexPathList 是在构造 DexClassLoader 时生成的，其内部包含了 DexFile。</p><p><code>DexPathList.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">···<span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token function">findClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Element</span> element <span class="token operator">:</span> dexElements<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DexFile</span> dex <span class="token operator">=</span> element<span class="token punctuation">.</span>dexFile<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dex <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Class</span> clazz <span class="token operator">=</span> dex<span class="token punctuation">.</span><span class="token function">loadClassBinaryName</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> definingContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>···<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>-->]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>知识汇总</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见面试算法题汇总</title>
    <link href="/2023/08/31/docs/android/zhi-shi-hui-zong/chang-jian-mian-shi-suan-fa-ti-hui-zong/"/>
    <url>/2023/08/31/docs/android/zhi-shi-hui-zong/chang-jian-mian-shi-suan-fa-ti-hui-zong/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E6%8E%92%E5%BA%8F">排序</a><ul><li><a href="#%E6%AF%94%E8%BE%83%E6%8E%92%E5%BA%8F">比较排序</a><ul><li><a href="#%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F">冒泡排序</a></li><li><a href="#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F">归并排序</a></li><li><a href="#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F">快速排序</a></li></ul></li><li><a href="#%E7%BA%BF%E6%80%A7%E6%8E%92%E5%BA%8F">线性排序</a><ul><li><a href="#%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F">计数排序</a></li><li><a href="#%E6%A1%B6%E6%8E%92%E5%BA%8F">桶排序</a></li></ul></li></ul></li><li><a href="#%E4%BA%8C%E5%8F%89%E6%A0%91">二叉树</a><ul><li><a href="#%E9%A1%BA%E5%BA%8F%E9%81%8D%E5%8E%86">顺序遍历</a></li><li><a href="#%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86">层次遍历</a></li><li><a href="#%E5%B7%A6%E5%8F%B3%E7%BF%BB%E8%BD%AC">左右翻转</a></li><li><a href="#%E6%9C%80%E5%A4%A7%E5%80%BC">最大值</a></li><li><a href="#%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6">最大深度</a></li><li><a href="#%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6">最小深度</a></li><li><a href="#%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91">平衡二叉树</a></li></ul></li><li><a href="#%E9%93%BE%E8%A1%A8">链表</a><ul><li><a href="#%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9">删除节点</a></li><li><a href="#%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8">翻转链表</a></li><li><a href="#%E4%B8%AD%E9%97%B4%E5%85%83%E7%B4%A0">中间元素</a></li><li><a href="#%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8">判断是否为循环链表</a></li><li><a href="#%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E5%B7%B2%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8">合并两个已排序链表</a></li><li><a href="#%E9%93%BE%E8%A1%A8%E6%8E%92%E5%BA%8F">链表排序</a></li><li><a href="#%E5%88%A0%E9%99%A4%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E8%8A%82%E7%82%B9">删除倒数第N个节点</a></li><li><a href="#%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E7%9B%B8%E4%BA%A4">两个链表是否相交</a></li></ul></li><li><a href="#%E6%A0%88--%E9%98%9F%E5%88%97">栈 / 队列</a><ul><li><a href="#%E5%B8%A6%E6%9C%80%E5%B0%8F%E5%80%BC%E6%93%8D%E4%BD%9C%E7%9A%84%E6%A0%88">带最小值操作的栈</a></li><li><a href="#%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7">有效括号</a></li><li><a href="#%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97">用栈实现队列</a></li><li><a href="#%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC">逆波兰表达式求值</a></li></ul></li><li><a href="#%E4%BA%8C%E5%88%86">二分</a><ul><li><a href="#%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2">二分搜索</a></li><li><a href="#x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9">X的平方根</a></li></ul></li><li><a href="#%E5%93%88%E5%B8%8C%E8%A1%A8">哈希表</a><ul><li><a href="#%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C">两数之和</a></li><li><a href="#%E8%BF%9E%E7%BB%AD%E6%95%B0%E7%BB%84">连续数组</a></li><li><a href="#%E6%9C%80%E9%95%BF%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E5%AD%90%E4%B8%B2">最长无重复字符的子串</a></li><li><a href="#%E6%9C%80%E5%A4%9A%E7%82%B9%E5%9C%A8%E4%B8%80%E6%9D%A1%E7%9B%B4%E7%BA%BF%E4%B8%8A">最多点在一条直线上</a></li></ul></li><li><a href="#%E5%A0%86--%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97">堆 / 优先队列</a><ul><li><a href="#%E5%89%8Dk%E5%A4%A7%E7%9A%84%E6%95%B0">前K大的数</a></li><li><a href="#%E5%89%8Dk%E5%A4%A7%E7%9A%84%E6%95%B0ii">前K大的数II</a></li><li><a href="#%E7%AC%ACk%E5%A4%A7%E7%9A%84%E6%95%B0">第K大的数</a></li></ul></li><li><a href="#%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91">二叉搜索树</a><ul><li><a href="#%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91">验证二叉搜索树</a></li><li><a href="#%E7%AC%ACk%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0">第K小的元素</a></li></ul></li><li><a href="#%E6%95%B0%E7%BB%84--%E5%8F%8C%E6%8C%87%E9%92%88">数组 / 双指针</a><ul><li><a href="#%E5%8A%A0%E4%B8%80">加一</a></li><li><a href="#%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0">删除元素</a></li><li><a href="#%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E6%95%B0%E5%AD%97">删除排序数组中的重复数字</a></li><li><a href="#%E6%88%91%E7%9A%84%E6%97%A5%E7%A8%8B%E5%AE%89%E6%8E%92%E8%A1%A8-i">我的日程安排表 I</a></li><li><a href="#%E5%90%88%E5%B9%B6%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84">合并排序数组</a></li></ul></li><li><a href="#%E8%B4%AA%E5%BF%83">贪心</a><ul><li><a href="#%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA">买卖股票的最佳时机</a></li><li><a href="#%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA-ii">买卖股票的最佳时机 II</a></li><li><a href="#%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84">最大子数组</a></li><li><a href="#%E4%B8%BB%E5%85%83%E7%B4%A0">主元素</a></li></ul></li><li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86">字符串处理</a><ul><li><a href="#%E7%94%9F%E6%88%90%E6%8B%AC%E5%8F%B7">生成括号</a></li><li><a href="#excel%E8%A1%A8%E5%88%97%E6%A0%87%E9%A2%98">Excel表列标题</a></li><li><a href="#%E7%BF%BB%E8%BD%AC%E6%B8%B8%E6%88%8F">翻转游戏</a></li><li><a href="#%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D">翻转字符串中的单词</a></li><li><a href="#%E8%BD%AC%E6%8D%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%B0%E6%95%B4%E6%95%B0">转换字符串到整数</a></li><li><a href="#%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80">最长公共前缀</a></li><li><a href="#%E5%9B%9E%E6%96%87%E6%95%B0">回文数</a></li></ul></li><li><a href="#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92">动态规划</a><ul><li><a href="#%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86">单词拆分</a></li><li><a href="#%E7%88%AC%E6%A5%BC%E6%A2%AF">爬楼梯</a></li><li><a href="#%E6%89%93%E5%8A%AB%E6%88%BF%E5%B1%8B">打劫房屋</a></li><li><a href="#%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB">编辑距离</a></li><li><a href="#%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%88%97">乘积最大子序列</a></li></ul></li><li><a href="#%E7%9F%A9%E9%98%B5">矩阵</a><ul><li><a href="#%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5">螺旋矩阵</a></li><li><a href="#%E5%88%A4%E6%96%AD%E6%95%B0%E7%8B%AC%E6%98%AF%E5%90%A6%E5%90%88%E6%B3%95">判断数独是否合法</a></li><li><a href="#%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F">旋转图像</a></li></ul></li><li><a href="#%E4%BA%8C%E8%BF%9B%E5%88%B6--%E4%BD%8D%E8%BF%90%E7%AE%97">二进制 / 位运算</a><ul><li><a href="#%E8%90%BD%E5%8D%95%E7%9A%84%E6%95%B0">落单的数</a></li><li><a href="#%E6%A0%BC%E9%9B%B7%E7%BC%96%E7%A0%81">格雷编码</a></li></ul></li><li><a href="#%E5%85%B6%E4%BB%96">其他</a><ul><li><a href="#%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0">反转整数</a></li><li><a href="#lru%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5">LRU缓存策略</a></li></ul></li></ul>        <h1 id="排序">          <a href="#排序" class="heading-link"><i class="fas fa-link"></i></a><a href="#排序" class="headerlink" title="排序"></a>排序</h1>              <h2 id="比较排序">          <a href="#比较排序" class="heading-link"><i class="fas fa-link"></i></a><a href="#比较排序" class="headerlink" title="比较排序"></a>比较排序</h2>              <h3 id="冒泡排序">          <a href="#冒泡排序" class="heading-link"><i class="fas fa-link"></i></a><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3>      <p>重复地走访过要排序的数列，每次比较相邻两个元素，如果它们的顺序错误就把它们交换过来，越大的元素会经由交换慢慢“浮”到数列的尾端。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> swap<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 每次需要排序的长度</span>        <span class="token comment">// 增加一个swap的标志，当前一轮没有进行交换时，说明数组已经有序</span>        swap <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 从第一个元素到第i个元素</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                swap <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>swap<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="归并排序">          <a href="#归并排序" class="heading-link"><i class="fas fa-link"></i></a><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3>      <p>分解待排序的数组成两个各具 n/2 个元素的子数组，递归调用归并排序两个子数组，合并两个已排序的子数组成一个已排序的数组。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">internalMergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">internalMergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 当left == right时，不需要再划分</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token function">internalMergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">internalMergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mergeSortedArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 合并两个有序子序列</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mergeSortedArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">?</span> arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">:</span> arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 把temp数据复制回原数组</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>left <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="快速排序">          <a href="#快速排序" class="heading-link"><i class="fas fa-link"></i></a><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3>      <p>在待排序的数组选取一个元素作为基准，将待排序的元素进行分区，比基准元素大的元素放在一边，比其小的放另一边，递归调用快速排序对两边的元素排序。选取基准元素并分区的过程采用双指针左右交换。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&gt;=</span> high<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> pivot <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将数组分为两部分</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> pivot <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//递归排序左子数组</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pivot <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//递归排序右子数组</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">//基准</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>            high<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token comment">//交换比基准大的记录到左端</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>            low<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment">//交换比基准小的记录到右端</span>    <span class="token punctuation">}</span>    <span class="token comment">//扫描完成，基准到位</span>    arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> pivot<span class="token punctuation">;</span>    <span class="token comment">//返回的是基准的位置</span>    <span class="token keyword">return</span> low<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="线性排序">          <a href="#线性排序" class="heading-link"><i class="fas fa-link"></i></a><a href="#线性排序" class="headerlink" title="线性排序"></a>线性排序</h2>              <h3 id="计数排序">          <a href="#计数排序" class="heading-link"><i class="fas fa-link"></i></a><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3>      <p>根据待排序的数组中最大和最小的元素，统计数组中每个值为i的元素出现的次数，存入数组C的第i项，对所有的计数累加，然后反向填充目标数组。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">countSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        min <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 存储数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 计数数组</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">=</span> min<span class="token punctuation">;</span> num <span class="token operator">&lt;=</span> max<span class="token punctuation">;</span> num<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 初始化各元素值为0，数组下标从0开始因此减min</span>        count<span class="token punctuation">[</span>num <span class="token operator">-</span> min<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        count<span class="token punctuation">[</span>num <span class="token operator">-</span> min<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 每出现一个值，计数数组对应元素的值+1</span>        <span class="token comment">// 此时count[i]表示数值等于i的元素的个数</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        count<span class="token punctuation">[</span>i <span class="token operator">-</span> min<span class="token punctuation">]</span> <span class="token operator">+=</span> count<span class="token punctuation">[</span>i <span class="token operator">-</span> min <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 此时count[i]表示数值&lt;=i的元素的个数</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 原数组第i位的值</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> count<span class="token punctuation">[</span>num <span class="token operator">-</span> min<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//加总数组中对应元素的下标</span>            b<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span> <span class="token comment">// 将该值存入存储数组对应下标中</span>            count<span class="token punctuation">[</span>num <span class="token operator">-</span> min<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 加总数组中，该值的总和减少1。</span>    <span class="token punctuation">}</span>    <span class="token comment">// 将存储数组的值替换给原数组</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="桶排序">          <a href="#桶排序" class="heading-link"><i class="fas fa-link"></i></a><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3>      <p>找出待排序数组中的最大值max、最小值min，数组ArrayList作为桶，桶里放的元素用ArrayList存储。计算每个元素 arr[i] 放的桶，每个桶各自排序，遍历桶数组，把排序好的元素放进输出数组。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bucketSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        min <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 桶数</span>    <span class="token keyword">int</span> bucketNum <span class="token operator">=</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">/</span> arr<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArrayList</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> bucketArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>bucketNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucketNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        bucketArr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 将每个元素放入桶</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        bucketArr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 对每个桶进行排序</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucketArr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>bucketArr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> bucketArr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> bucketArr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="二叉树">          <a href="#二叉树" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> left<span class="token punctuation">,</span> right<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="顺序遍历">          <a href="#顺序遍历" class="heading-link"><i class="fas fa-link"></i></a><a href="#顺序遍历" class="headerlink" title="顺序遍历"></a>顺序遍历</h2>      <p>先序遍历: 根-&gt;左-&gt;右<br>中序遍历: 左-&gt;根-&gt;右<br>后序遍历: 左-&gt;右-&gt;根</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 先序遍历</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preTraverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">preTraverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">preTraverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 中序遍历</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inTraverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">inTraverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">inTraverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 后序遍历</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postTraverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">postTraverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">postTraverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="层次遍历">          <a href="#层次遍历" class="heading-link"><i class="fas fa-link"></i></a><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 层次遍历(DFS)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> res<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">==</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> res<span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> res<span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 层次遍历(BFS)</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> level <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">TreeNode</span> head <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            level<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// "Z"字遍历</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">zigzagLevelOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isFromLeft <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        isFromLeft <span class="token operator">=</span> <span class="token operator">!</span>isFromLeft<span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">TreeNode</span> node<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isFromLeft<span class="token punctuation">)</span><span class="token punctuation">{</span>                node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>isFromLeft<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    queue<span class="token punctuation">.</span><span class="token function">offerLast</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    queue<span class="token punctuation">.</span><span class="token function">offerLast</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    queue<span class="token punctuation">.</span><span class="token function">offerFirst</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    queue<span class="token punctuation">.</span><span class="token function">offerFirst</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="左右翻转">          <a href="#左右翻转" class="heading-link"><i class="fas fa-link"></i></a><a href="#左右翻转" class="headerlink" title="左右翻转"></a>左右翻转</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invert</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">TreeNode</span> temp <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token function">invert</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">invert</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="最大值">          <a href="#最大值" class="heading-link"><i class="fas fa-link"></i></a><a href="#最大值" class="headerlink" title="最大值"></a>最大值</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">getMax</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">getMax</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> rigth<span class="token punctuation">)</span><span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="最大深度">          <a href="#最大深度" class="heading-link"><i class="fas fa-link"></i></a><a href="#最大深度" class="headerlink" title="最大深度"></a>最大深度</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="最小深度">          <a href="#最小深度" class="heading-link"><i class="fas fa-link"></i></a><a href="#最小深度" class="headerlink" title="最小深度"></a>最小深度</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minDepth</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="平衡二叉树">          <a href="#平衡二叉树" class="heading-link"><i class="fas fa-link"></i></a><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2>      <blockquote><p>平衡二叉树每一个节点的左右两个子树的高度差不超过1</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> right <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>left <span class="token operator">-</span> right<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="链表">          <a href="#链表" class="heading-link"><i class="fas fa-link"></i></a><a href="#链表" class="headerlink" title="链表"></a>链表</h1>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>     <span class="token keyword">int</span> val<span class="token punctuation">;</span>     <span class="token class-name">ListNode</span> next<span class="token punctuation">;</span>     <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>         val <span class="token operator">=</span> x<span class="token punctuation">;</span>         next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="删除节点">          <a href="#删除节点" class="heading-link"><i class="fas fa-link"></i></a><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        node <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 取缔下一节点</span>    node<span class="token punctuation">.</span>val <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val    node<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="翻转链表">          <a href="#翻转链表" class="heading-link"><i class="fas fa-link"></i></a><a href="#翻转链表" class="headerlink" title="翻转链表"></a>翻转链表</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//prev表示前继节点</span>    <span class="token class-name">ListNode</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//temp记录下一个节点，head是当前节点</span>        <span class="token class-name">ListNode</span> temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>        prev <span class="token operator">=</span> head<span class="token punctuation">;</span>        head <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> prev<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="中间元素">          <a href="#中间元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#中间元素" class="headerlink" title="中间元素"></a>中间元素</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">findMiddle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment">// fast.next = null 表示 fast 是链表的尾节点</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> slow<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="判断是否为循环链表">          <a href="#判断是否为循环链表" class="heading-link"><i class="fas fa-link"></i></a><a href="#判断是否为循环链表" class="headerlink" title="判断是否为循环链表"></a>判断是否为循环链表</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> slow<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fast <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> fast<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="合并两个已排序链表">          <a href="#合并两个已排序链表" class="heading-link"><i class="fas fa-link"></i></a><a href="#合并两个已排序链表" class="headerlink" title="合并两个已排序链表"></a>合并两个已排序链表</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ListNode</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> lastNode <span class="token operator">=</span> dummy<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            lastNode<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>            l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            lastNode<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>            l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        lastNode <span class="token operator">=</span> lastNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lastNode<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        lastNode<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="链表排序">          <a href="#链表排序" class="heading-link"><i class="fas fa-link"></i></a><a href="#链表排序" class="headerlink" title="链表排序"></a>链表排序</h2>      <p>可利用归并、快排等算法实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 归并排序</span><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">sortList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">ListNode</span> mid <span class="token operator">=</span> <span class="token function">findMiddle</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> right <span class="token operator">=</span> <span class="token function">sortList</span><span class="token punctuation">(</span>mid<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    mid<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> left <span class="token operator">=</span> <span class="token function">sortList</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 快速排序</span><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">sortList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> start<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token class-name">ListNode</span> pt <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> pt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>pt<span class="token punctuation">.</span>next<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">ListNode</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> start<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> pivotKey <span class="token operator">=</span> start<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> p1 <span class="token operator">=</span> start<span class="token punctuation">,</span> p2 <span class="token operator">=</span> start<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p2 <span class="token operator">!=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p2<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> pivotKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>            p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token function">swapValue</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">swapValue</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swapValue</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> node1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> node2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> node1<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    node1<span class="token punctuation">.</span>val <span class="token operator">=</span> node2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    node2<span class="token punctuation">.</span>val <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="删除倒数第N个节点">          <a href="#删除倒数第N个节点" class="heading-link"><i class="fas fa-link"></i></a><a href="#删除倒数第N个节点" class="headerlink" title="删除倒数第N个节点"></a>删除倒数第N个节点</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token class-name">ListNode</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dummy<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> preDelete <span class="token operator">=</span> dummy<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 此时head为正数第N个节点</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        preDelete <span class="token operator">=</span> preDelete<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    preDelete<span class="token punctuation">.</span>next <span class="token operator">=</span> preDelete<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="两个链表是否相交">          <a href="#两个链表是否相交" class="heading-link"><i class="fas fa-link"></i></a><a href="#两个链表是否相交" class="headerlink" title="两个链表是否相交"></a>两个链表是否相交</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> headA<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> headB<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>headA <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> headB <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">ListNode</span> currA <span class="token operator">=</span> headA<span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> currB <span class="token operator">=</span> headB<span class="token punctuation">;</span>    <span class="token keyword">int</span> lengthA <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> lengthB <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 让长的先走到剩余长度和短的一样</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>currA <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        currA <span class="token operator">=</span> currA<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        lengthA<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>currB <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        currB <span class="token operator">=</span> currB<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        lengthB<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    currA <span class="token operator">=</span> headA<span class="token punctuation">;</span>    currB <span class="token operator">=</span> headB<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>lengthA <span class="token operator">&gt;</span> lengthB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        currA <span class="token operator">=</span> currA<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        lengthA<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>lengthB <span class="token operator">&gt;</span> lengthA<span class="token punctuation">)</span> <span class="token punctuation">{</span>        currB <span class="token operator">=</span> currB<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        lengthB<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 然后同时走到第一个相同的地方</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>currA <span class="token operator">!=</span> currB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        currA <span class="token operator">=</span> currA<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        currB <span class="token operator">=</span> currB<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 返回交叉开始的节点</span>    <span class="token keyword">return</span> currA<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="栈-队列">          <a href="#栈-队列" class="heading-link"><i class="fas fa-link"></i></a><a href="#栈-队列" class="headerlink" title="栈 / 队列"></a>栈 / 队列</h1>              <h2 id="带最小值操作的栈">          <a href="#带最小值操作的栈" class="heading-link"><i class="fas fa-link"></i></a><a href="#带最小值操作的栈" class="headerlink" title="带最小值操作的栈"></a>带最小值操作的栈</h2>      <blockquote><p>实现一个栈, 额外支持一个操作：min() 返回栈中元素的最小值</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinStack</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stack<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> minStack<span class="token punctuation">;</span> <span class="token comment">// 维护一个辅助栈，传入当前栈的最小值</span>        <span class="token keyword">public</span> <span class="token class-name">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        minStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            minStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            minStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> minStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        minStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="有效括号">          <a href="#有效括号" class="heading-link"><i class="fas fa-link"></i></a><a href="#有效括号" class="headerlink" title="有效括号"></a>有效括号</h2>      <blockquote><p>给定一个字符串所表示的括号序列，包含以下字符： ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’， 判定是否是有效的括号序列。括号必须依照 “()” 顺序表示， “()[]{}” 是有效的括号，但 “([)]” 则是无效的括号。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidParentheses</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Character</span> c <span class="token operator">:</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"({["</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isValid</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token keyword">char</span> c1<span class="token punctuation">,</span> <span class="token keyword">char</span> c2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>c1 <span class="token operator">==</span> <span class="token char">'('</span> <span class="token operator">&amp;&amp;</span> c2 <span class="token operator">==</span> <span class="token char">')'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>c1 <span class="token operator">==</span> <span class="token char">'{'</span> <span class="token operator">&amp;&amp;</span> c2 <span class="token operator">==</span> <span class="token char">'}'</span><span class="token punctuation">)</span>        <span class="token operator">||</span> <span class="token punctuation">(</span>c1 <span class="token operator">==</span> <span class="token char">'['</span> <span class="token operator">&amp;&amp;</span> c2 <span class="token operator">==</span> <span class="token char">']'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="用栈实现队列">          <a href="#用栈实现队列" class="heading-link"><i class="fas fa-link"></i></a><a href="#用栈实现队列" class="headerlink" title="用栈实现队列"></a>用栈实现队列</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyQueue</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> outStack<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> inStack<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       outStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       inStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">in2OutStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>inStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            outStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>inStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        inStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>outStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">in2OutStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> outStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>outStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">in2OutStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> outStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="逆波兰表达式求值">          <a href="#逆波兰表达式求值" class="heading-link"><i class="fas fa-link"></i></a><a href="#逆波兰表达式求值" class="headerlink" title="逆波兰表达式求值"></a>逆波兰表达式求值</h2>      <blockquote><p>在反向波兰表示法中计算算术表达式的值, [“2”, “1”, “+”, “3”, “*”] -&gt; (2 + 1) * 3 -&gt; 9</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">evalRPN</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tokens<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> operators <span class="token operator">=</span> <span class="token string">"+-*/"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> token <span class="token operator">:</span> tokens<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>operators<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b <span class="token operator">/</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="二分">          <a href="#二分" class="heading-link"><i class="fas fa-link"></i></a><a href="#二分" class="headerlink" title="二分"></a>二分</h1>              <h2 id="二分搜索">          <a href="#二分搜索" class="heading-link"><i class="fas fa-link"></i></a><a href="#二分搜索" class="headerlink" title="二分搜索"></a>二分搜索</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> hkey<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&gt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">//防止溢位</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> hkey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> hkey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> hkey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> hkey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">return</span> mid<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="X的平方根">          <a href="#X的平方根" class="heading-link"><i class="fas fa-link"></i></a><a href="#X的平方根" class="headerlink" title="X的平方根"></a>X的平方根</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> end <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token comment">// 直接对答案可能存在的区间进行二分 =&gt; 二分答案</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">==</span> x <span class="token operator">/</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> x <span class="token operator">/</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            start <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            end <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&gt;</span> x <span class="token operator">/</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> start<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> end<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="哈希表">          <a href="#哈希表" class="heading-link"><i class="fas fa-link"></i></a><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1>              <h2 id="两数之和">          <a href="#两数之和" class="heading-link"><i class="fas fa-link"></i></a><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2>      <blockquote><p>给一个整数数组，找到两个数使得他们的和等于一个给定的数 target。需要实现的函数twoSum需要返回这两个数的下标。</p></blockquote><p>用一个hashmap来记录，key记录target-numbers[i]的值，value记录numbers[i]的i的值，如果碰到一个<br>numbers[j]在hashmap中存在，那么说明前面的某个numbers[i]和numbers[j]的和为target，i和j即为答案</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>target <span class="token operator">-</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="连续数组">          <a href="#连续数组" class="heading-link"><i class="fas fa-link"></i></a><a href="#连续数组" class="headerlink" title="连续数组"></a>连续数组</h2>      <blockquote><p>给一个二进制数组，找到 0 和 1 数量相等的子数组的最大长度</p></blockquote><p>使用一个数字sum维护到i为止1的数量与0的数量的差值。在loop i的同时维护sum并将其插入hashmap中。对于某一个sum值，若hashmap中已有这个值，则当前的i与sum上一次出现的位置之间的序列0的数量与1的数量相同。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findMaxLength</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> prefix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    prefix<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当第一个0 1数量相等的情况出现时，数组下标减去-1得到正确的长度</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            sum<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>prefix<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> i <span class="token operator">-</span> prefix<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            prefix<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="最长无重复字符的子串">          <a href="#最长无重复字符的子串" class="heading-link"><i class="fas fa-link"></i></a><a href="#最长无重复字符的子串" class="headerlink" title="最长无重复字符的子串"></a>最长无重复字符的子串</h2>      <p>用HashMap记录每一个字母出现的位置。设定一个左边界, 到当前枚举到的位置之间的字符串为不含重复字符的子串。若新碰到的字符的上一次的位置在左边界右边, 则需要向右移动左边界</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 计算无重复字符子串开始的位置</span>    <span class="token keyword">int</span> current <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">&gt;=</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 上一次的位置在左边界右边, 则需要向右移动左边界</span>                start <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                 map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> i <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="最多点在一条直线上">          <a href="#最多点在一条直线上" class="heading-link"><i class="fas fa-link"></i></a><a href="#最多点在一条直线上" class="headerlink" title="最多点在一条直线上"></a>最多点在一条直线上</h2>      <blockquote><p>给出二维平面上的n个点，求最多有多少点在同一条直线上</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span>    <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>         x <span class="token operator">=</span> a<span class="token punctuation">;</span> y <span class="token operator">=</span> b<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过HashMap记录下两个点之间的斜率相同出现的次数，注意考虑点重合的情况</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxPoints</span><span class="token punctuation">(</span><span class="token class-name">Point</span><span class="token punctuation">[</span><span class="token punctuation">]</span> points<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>points <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> points<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxPoints <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> overlap <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> points<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">==</span> points<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">==</span> points<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>                overlap<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 两个点重合的情况记录下来</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">double</span> rate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">-</span> points<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">-</span> points<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>rate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>rate<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>rate<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>rate<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            maxPoints <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxPoints<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>rate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxPoints <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> maxPoints <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> maxPoints <span class="token operator">+</span> overlap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="堆-优先队列">          <a href="#堆-优先队列" class="heading-link"><i class="fas fa-link"></i></a><a href="#堆-优先队列" class="headerlink" title="堆 / 优先队列"></a>堆 / 优先队列</h1>              <h2 id="前K大的数">          <a href="#前K大的数" class="heading-link"><i class="fas fa-link"></i></a><a href="#前K大的数" class="headerlink" title="前K大的数"></a>前K大的数</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 维护一个 PriorityQueue，以返回前K的数</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">topk</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>            pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="前K大的数II">          <a href="#前K大的数II" class="heading-link"><i class="fas fa-link"></i></a><a href="#前K大的数II" class="headerlink" title="前K大的数II"></a>前K大的数II</h2>      <blockquote><p>实现一个数据结构，提供下面两个接口：1.add(number) 添加一个元素  2.topk() 返回前K大的数</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> minheap<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        minheap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        maxSize <span class="token operator">=</span> k<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minheap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> maxSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>            minheap<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> minheap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            minheap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            minheap<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">topk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Iterator</span> it <span class="token operator">=</span> minheap<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="第K大的数">          <a href="#第K大的数" class="heading-link"><i class="fas fa-link"></i></a><a href="#第K大的数" class="headerlink" title="第K大的数"></a>第K大的数</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">kthLargestElement</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> k <span class="token operator">&gt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">partition</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&gt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> start<span class="token punctuation">,</span> right <span class="token operator">=</span> end<span class="token punctuation">;</span>    <span class="token keyword">int</span> pivot <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&gt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>            right<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>            right<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">partition</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> right<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;=</span> left<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">partition</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> end<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="二叉搜索树">          <a href="#二叉搜索树" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h1>              <h2 id="验证二叉搜索树">          <a href="#验证二叉搜索树" class="heading-link"><i class="fas fa-link"></i></a><a href="#验证二叉搜索树" class="headerlink" title="验证二叉搜索树"></a>验证二叉搜索树</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">long</span> min<span class="token punctuation">,</span> <span class="token keyword">long</span> max<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> min <span class="token operator">||</span> root<span class="token punctuation">.</span>val <span class="token operator">&gt;=</span> max<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> min<span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="第K小的元素">          <a href="#第K小的元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#第K小的元素" class="headerlink" title="第K小的元素"></a>第K小的元素</h2>      <p>增加getCount方法来获取传入节点的子节点数（包括自己），从root节点开始判断k值和子节点数的大小决定递归路径是往左还是往右。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> leftCount <span class="token operator">=</span> <span class="token function">getCount</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftCount <span class="token operator">&gt;=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>leftCount <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> k <span class="token operator">-</span> leftCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">getCount</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">getCount</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="数组-双指针">          <a href="#数组-双指针" class="heading-link"><i class="fas fa-link"></i></a><a href="#数组-双指针" class="headerlink" title="数组 / 双指针"></a>数组 / 双指针</h1>              <h2 id="加一">          <a href="#加一" class="heading-link"><i class="fas fa-link"></i></a><a href="#加一" class="headerlink" title="加一"></a>加一</h2>      <blockquote><p>给定一个非负数，表示一个数字数组，在该数的基础上+1，返回一个新的数组。该数字按照数位高低进行排列，最高位的数在列表的最前面。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">plusOne</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> digits<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> carries <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> digits<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> carries <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">int</span> sum <span class="token operator">=</span> digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> carries<span class="token punctuation">;</span>        digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        carries <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>carries <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> digits<span class="token punctuation">;</span>    <span class="token punctuation">}</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>digits<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    rst<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rst<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        rst<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> digits<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> rst<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="删除元素">          <a href="#删除元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2>      <blockquote><p>给定一个数组和一个值，在原地删除与值相同的数字，返回新数组的长度。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removeElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token keyword">int</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">A</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token class-name">A</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">A</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">A</span><span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>        <span class="token keyword">return</span> index<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="删除排序数组中的重复数字">          <a href="#删除排序数组中的重复数字" class="heading-link"><i class="fas fa-link"></i></a><a href="#删除排序数组中的重复数字" class="headerlink" title="删除排序数组中的重复数字"></a>删除排序数组中的重复数字</h2>      <blockquote><p>在原数组中“删除”重复出现的数字，使得每个元素只出现一次，并且返回“新”数组的长度。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">A</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">A</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token class-name">A</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">A</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token class-name">A</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">A</span><span class="token punctuation">[</span><span class="token operator">++</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="我的日程安排表-I">          <a href="#我的日程安排表-I" class="heading-link"><i class="fas fa-link"></i></a><a href="#我的日程安排表-I" class="headerlink" title="我的日程安排表 I"></a>我的日程安排表 I</h2>      <blockquote><p>实现MyCalendar类来存储活动。如果新添加的活动没有重复，则可以添加。类将有方法book(int start，int end)。这代表左闭右开的间隔[start，end)有了预定，范围内的实数x，都满足start &lt;= x &lt; end，返回true。 否则，返回false，并且事件不会添加到日历中。</p></blockquote><p>TreeMap 是一个有序的key-value集合，它通过 <span class="exturl"><a class="exturl__link" href="http://www.cnblogs.com/skywang12345/p/3245399.html">红黑树</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 实现，继承于AbstractMap，所以它是一个Map，即一个key-value集合。TreeMap可以查询小于等于某个值的最大的key，也可查询大于等于某个值的最小的key。<br>元素的顺序可以改变，并且对新的数组不会有影响。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyCalendar</span> <span class="token punctuation">{</span>    <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> calendar<span class="token punctuation">;</span>    <span class="token class-name">MyCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        calendar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">book</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Integer</span> previous <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">floorKey</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">,</span> next <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">ceilingKey</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>previous <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>previous<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> start<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> end <span class="token operator">&lt;=</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            calendar<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="合并排序数组">          <a href="#合并排序数组" class="heading-link"><i class="fas fa-link"></i></a><a href="#合并排序数组" class="headerlink" title="合并排序数组"></a>合并排序数组</h2>      <blockquote><p>合并两个排序的整数数组A和B变成一个新的数组。可以假设A具有足够的空间去添加B中的元素。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mergeSortedArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> index <span class="token operator">=</span> m <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token class-name">B</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">A</span><span class="token punctuation">[</span>index<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">[</span>i<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">A</span><span class="token punctuation">[</span>index<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">B</span><span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">A</span><span class="token punctuation">[</span>index<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">[</span>i<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">A</span><span class="token punctuation">[</span>index<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">B</span><span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="贪心">          <a href="#贪心" class="heading-link"><i class="fas fa-link"></i></a><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h1>              <h2 id="买卖股票的最佳时机">          <a href="#买卖股票的最佳时机" class="heading-link"><i class="fas fa-link"></i></a><a href="#买卖股票的最佳时机" class="headerlink" title="买卖股票的最佳时机"></a>买卖股票的最佳时机</h2>      <blockquote><p>假设有一个数组，它的第i个元素是一支给定的股票在第i天的价格。如果你最多只允许完成一次交易(例如，一次买卖股票)，设计一个算法来找出最大利润。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>prices <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> prices<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>  <span class="token comment">//记录最低的价格</span>    <span class="token keyword">int</span> profit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> price <span class="token operator">:</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        min <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>price<span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>        profit <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>price <span class="token operator">-</span> min<span class="token punctuation">,</span> profit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> profit<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="买卖股票的最佳时机-II">          <a href="#买卖股票的最佳时机-II" class="heading-link"><i class="fas fa-link"></i></a><a href="#买卖股票的最佳时机-II" class="headerlink" title="买卖股票的最佳时机 II"></a>买卖股票的最佳时机 II</h2>      <blockquote><p>给定一个数组 prices 表示一支股票每天的价格。可以完成任意次数的交易, 不过不能同时参与多个交易，设计一个算法求出最大的利润。</p></blockquote><p>贪心：只要相邻的两天股票的价格是上升的, 我们就进行一次交易, 获得一定利润。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> profit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> diff <span class="token operator">=</span> prices<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>diff <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            profit <span class="token operator">+=</span> diff<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> profit<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="最大子数组">          <a href="#最大子数组" class="heading-link"><i class="fas fa-link"></i></a><a href="#最大子数组" class="headerlink" title="最大子数组"></a>最大子数组</h2>      <blockquote><p>给定一个整数数组，找到一个具有最大和的子数组，返回其最大和。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">A</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">A</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token class-name">A</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//max记录全局最大值，sum记录区间和，如果当前sum&gt;0，那么可以继续和后面的数求和，否则就从0开始</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">A</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> <span class="token class-name">A</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        sum <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="主元素">          <a href="#主元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#主元素" class="headerlink" title="主元素"></a>主元素</h2>      <p>给定一个整型数组，找出主元素，它在数组中的出现次数严格大于数组元素个数的二分之一(可以假设数组非空，且数组中总是存在主元素)。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">majorityNumber</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> currentMajor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            currentMajor <span class="token operator">=</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> currentMajor<span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            count<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> currentMajor<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="字符串处理">          <a href="#字符串处理" class="heading-link"><i class="fas fa-link"></i></a><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h1>              <h2 id="生成括号">          <a href="#生成括号" class="heading-link"><i class="fas fa-link"></i></a><a href="#生成括号" class="headerlink" title="生成括号"></a>生成括号</h2>      <blockquote><p>给定 n，表示有 n 对括号, 请写一个函数以将其生成所有的括号组合，并返回组合结果。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">generateParenthesis</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">helper</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// DFS</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">helper</span><span class="token punctuation">(</span><span class="token keyword">int</span> nL<span class="token punctuation">,</span> <span class="token keyword">int</span> nR<span class="token punctuation">,</span> <span class="token class-name">String</span> parenthesis<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// nL 和 nR 分别代表左右括号剩余的数量</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nL <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> nR <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nL <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nR <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>parenthesis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">helper</span><span class="token punctuation">(</span>nL <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> nR<span class="token punctuation">,</span> parenthesis <span class="token operator">+</span> <span class="token string">"("</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nL <span class="token operator">&gt;=</span> nR<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">helper</span><span class="token punctuation">(</span>nL<span class="token punctuation">,</span> nR <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> parenthesis <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="Excel表列标题">          <a href="#Excel表列标题" class="heading-link"><i class="fas fa-link"></i></a><a href="#Excel表列标题" class="headerlink" title="Excel表列标题"></a>Excel表列标题</h2>      <blockquote><p>给定一个正整数，返回相应的列标题，如Excel表中所示。如1 -&gt; A，2 -&gt; B…26 -&gt; Z，27 -&gt; AA</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> convertToTitle <span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">StringBuilder</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        n<span class="token operator">--</span><span class="token punctuation">;</span>        str<span class="token punctuation">.</span>append <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token char">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">/=</span> <span class="token number">26</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="翻转游戏">          <a href="#翻转游戏" class="heading-link"><i class="fas fa-link"></i></a><a href="#翻转游戏" class="headerlink" title="翻转游戏"></a>翻转游戏</h2>      <blockquote><p>翻转游戏：给定一个只包含两种字符的字符串：+和-，你和你的小伙伴轮流翻转”++”变成”–”。当一个人无法采取行动时游戏结束，另一个人将是赢家。编写一个函数，计算字符串在一次有效移动后的所有可能状态。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> generatePossibleNextMoves <span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> s<span class="token punctuation">.</span>indexOf <span class="token punctuation">(</span><span class="token string">"++"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span>add <span class="token punctuation">(</span>s<span class="token punctuation">.</span>substring <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span> s<span class="token punctuation">.</span>substring <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="翻转字符串中的单词">          <a href="#翻转字符串中的单词" class="heading-link"><i class="fas fa-link"></i></a><a href="#翻转字符串中的单词" class="headerlink" title="翻转字符串中的单词"></a>翻转字符串中的单词</h2>      <blockquote><p>给定一个字符串，逐个翻转字符串中的每个单词。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverseWords</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> s <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//按照空格将s切分</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//从后往前遍历array，在sb中插入单词</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="转换字符串到整数">          <a href="#转换字符串到整数" class="heading-link"><i class="fas fa-link"></i></a><a href="#转换字符串到整数" class="headerlink" title="转换字符串到整数"></a>转换字符串到整数</h2>      <blockquote><p>实现atoi这个函数，将一个字符串转换为整数。如果没有合法的整数，返回0。如果整数超出了32位整数的范围，返回INT_MAX(2147483647)如果是正整数，或者INT_MIN(-2147483648)如果是负整数。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">myAtoi</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>            <span class="token keyword">int</span> sign <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'+'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        index<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sign <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        index<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token char">'0'</span> <span class="token operator">||</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token char">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        num <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">*</span> sign <span class="token operator">&gt;=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">*</span> sign <span class="token operator">&lt;=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>num <span class="token operator">*</span> sign<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="最长公共前缀">          <a href="#最长公共前缀" class="heading-link"><i class="fas fa-link"></i></a><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>strs <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> strs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">String</span> prefix <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> prefix<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> prefix<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        prefix <span class="token operator">=</span> prefix<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> prefix<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="回文数">          <a href="#回文数" class="heading-link"><i class="fas fa-link"></i></a><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h2>      <blockquote><p>判断一个正整数是不是回文数。回文数的定义是，将这个数反转之后，得到的数仍然是同一个数。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">palindromeNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// Write your code here</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> div <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>num <span class="token operator">/</span> div <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        div <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">/</span> div <span class="token operator">!=</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        num <span class="token operator">=</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> div<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        div <span class="token operator">/=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="动态规划">          <a href="#动态规划" class="heading-link"><i class="fas fa-link"></i></a><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1>              <h2 id="单词拆分">          <a href="#单词拆分" class="heading-link"><i class="fas fa-link"></i></a><a href="#单词拆分" class="headerlink" title="单词拆分"></a>单词拆分</h2>      <blockquote><p>给定字符串 s 和单词字典 dict，确定 s 是否可以分成一个或多个以空格分隔的子串，并且这些子串都在字典中存在。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">wordBreak</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> dict<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// write your code here</span>    <span class="token keyword">int</span> maxLength <span class="token operator">=</span> <span class="token function">getMaxLength</span><span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 长度为n的单词 有n + 1个切割点 比如: _l_i_n_t_</span>    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> canBreak <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 当s长度为0时</span>    canBreak<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> canBreak<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> maxLength <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//i - j 表示从 i 点开始往前j个点的位置</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i <span class="token operator">-</span> j<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//如果此str在词典中 并且 str之前的 字符串可以拆分     </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dict<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> canBreak<span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                canBreak<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> canBreak<span class="token punctuation">[</span>canBreak<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getMaxLength</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> dict<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> dict<span class="token punctuation">)</span><span class="token punctuation">{</span>        max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="爬楼梯">          <a href="#爬楼梯" class="heading-link"><i class="fas fa-link"></i></a><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a>爬楼梯</h2>      <blockquote><p>假设你正在爬楼梯，需要n步你才能到达顶部。但每次你只能爬一步或者两步，你能有多少种不同的方法爬到楼顶部？</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> array<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> array<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="打劫房屋">          <a href="#打劫房屋" class="heading-link"><i class="fas fa-link"></i></a><a href="#打劫房屋" class="headerlink" title="打劫房屋"></a>打劫房屋</h2>      <blockquote><p>假设你是一个专业的窃贼，准备沿着一条街打劫房屋。每个房子都存放着特定金额的钱。你面临的唯一约束条件是：相邻的房子装着相互联系的防盗系统，且 当相邻的两个房子同一天被打劫时，该系统会自动报警。给定一个非负整数列表，表示每个房子中存放的钱， 算一算，如果今晚去打劫，在不触动报警装置的情况下, 你最多可以得到多少钱 。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">houseRobber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">A</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token class-name">A</span><span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> res<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token class-name">A</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> res<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">[</span><span class="token class-name">A</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="编辑距离">          <a href="#编辑距离" class="heading-link"><i class="fas fa-link"></i></a><a href="#编辑距离" class="headerlink" title="编辑距离"></a>编辑距离</h2>      <blockquote><p>给出两个单词word1和word2，计算出将word1 转换为word2的最少操作次数。你总共三种操作方法：插入一个字符、删除一个字符、替换一个字符。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minDistance</span><span class="token punctuation">(</span><span class="token class-name">String</span> word1<span class="token punctuation">,</span> <span class="token class-name">String</span> word2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// write your code here</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> word1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> word2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>word1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> word2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span>  dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="乘积最大子序列">          <a href="#乘积最大子序列" class="heading-link"><i class="fas fa-link"></i></a><a href="#乘积最大子序列" class="headerlink" title="乘积最大子序列"></a>乘积最大子序列</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 分别记录正数最大值和负数最小值</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> max <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> min <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        min<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        min<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            max<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> max<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            min<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>min<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> min<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            max<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> min<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            min<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>min<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> max<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                result <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> max<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="矩阵">          <a href="#矩阵" class="heading-link"><i class="fas fa-link"></i></a><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h1>              <h2 id="螺旋矩阵">          <a href="#螺旋矩阵" class="heading-link"><i class="fas fa-link"></i></a><a href="#螺旋矩阵" class="headerlink" title="螺旋矩阵"></a>螺旋矩阵</h2>      <blockquote><p>给定一个包含 m x n 个要素的矩阵，（m 行, n 列），按照螺旋顺序，返回该矩阵中的所有要素。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> rst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>matrix <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> matrix<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> rst<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> rows <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> cols <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>count <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">&lt;</span> rows <span class="token operator">&amp;&amp;</span> count <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">&lt;</span> cols<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> count<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cols <span class="token operator">-</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            rst<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rows <span class="token operator">-</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            rst<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>cols <span class="token operator">-</span> count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rows <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> count <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> cols <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果只剩1行或1列</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> cols <span class="token operator">-</span> count <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> count<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            rst<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>rows <span class="token operator">-</span> count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> rows <span class="token operator">-</span> count <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            rst<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> rst<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="判断数独是否合法">          <a href="#判断数独是否合法" class="heading-link"><i class="fas fa-link"></i></a><a href="#判断数独是否合法" class="headerlink" title="判断数独是否合法"></a>判断数独是否合法</h2>      <blockquote><p>请判定一个数独是否有效。该数独可能只填充了部分数字，其中缺少的数字用 . 表示。  </p></blockquote><p>维护一个HashSet用来记同一行、同一列、同一九宫格是否存在相同数字</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidSudoku</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Set</span> seen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> number <span class="token operator">=</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token char">'.'</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>seen<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token string">" in row "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">||</span>                    <span class="token operator">!</span>seen<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token string">" in column "</span> <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">||</span>                    <span class="token operator">!</span>seen<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token string">" in block "</span> <span class="token operator">+</span> i <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> j <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="旋转图像">          <a href="#旋转图像" class="heading-link"><i class="fas fa-link"></i></a><a href="#旋转图像" class="headerlink" title="旋转图像"></a>旋转图像</h2>      <blockquote><p>给定一个N×N的二维矩阵表示图像，90度顺时针旋转图像。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> matrix<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> length <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token punctuation">(</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>length <span class="token operator">-</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            matrix<span class="token punctuation">[</span>length <span class="token operator">-</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>length <span class="token operator">-</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            matrix<span class="token punctuation">[</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>length <span class="token operator">-</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="二进制-位运算">          <a href="#二进制-位运算" class="heading-link"><i class="fas fa-link"></i></a><a href="#二进制-位运算" class="headerlink" title="二进制 / 位运算"></a>二进制 / 位运算</h1>              <h2 id="落单的数">          <a href="#落单的数" class="heading-link"><i class="fas fa-link"></i></a><a href="#落单的数" class="headerlink" title="落单的数"></a>落单的数</h2>      <blockquote><p>给出 2 * n + 1个数字，除其中一个数字之外其他每个数字均出现两次，找到这个数字。</p></blockquote><p>异或运算具有很好的性质，相同数字异或运算后为0，并且具有交换律和结合律，故将所有数字异或运算后即可得到只出现一次的数字。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">A</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">A</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token class-name">A</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> rst <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">A</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        rst <span class="token operator">^=</span> <span class="token class-name">A</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> rst<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="格雷编码">          <a href="#格雷编码" class="heading-link"><i class="fas fa-link"></i></a><a href="#格雷编码" class="headerlink" title="格雷编码"></a>格雷编码</h2>      <blockquote><p>格雷编码是一个二进制数字系统，在该系统中，两个连续的数值仅有一个二进制的差异。给定一个非负整数 n ，表示该代码中所有二进制的总数，请找出其格雷编码顺序。一个格雷编码顺序必须以 0 开始，并覆盖所有的 2n 个整数。例子——输入：2；输出：[0, 1, 3, 2]；解释: 0 - 00，1 - 01，3 - 11，2 - 10</p></blockquote><p>格雷码生成公式：G(i) = i ^ (i &gt;&gt; 2)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">grayCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i <span class="token operator">^</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="其他">          <a href="#其他" class="heading-link"><i class="fas fa-link"></i></a><a href="#其他" class="headerlink" title="其他"></a>其他</h1>              <h2 id="反转整数">          <a href="#反转整数" class="heading-link"><i class="fas fa-link"></i></a><a href="#反转整数" class="headerlink" title="反转整数"></a>反转整数</h2>      <blockquote><p>将一个整数中的数字进行颠倒，当颠倒后的整数溢出时，返回 0 (标记为 32 位整数)。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverseInteger</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> reversed_n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> reversed_n <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">!=</span> reversed_n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            reversed_n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        reversed_n <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> reversed_n<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="LRU缓存策略">          <a href="#LRU缓存策略" class="heading-link"><i class="fas fa-link"></i></a><a href="#LRU缓存策略" class="headerlink" title="LRU缓存策略"></a>LRU缓存策略</h2>      <blockquote><p>为最近最少使用（LRU）缓存策略设计一个数据结构，它应该支持以下操作：获取数据（get）和写入数据（set）。获取数据get(key)：如果缓存中存在key，则获取其数据值（通常是正数），否则返回-1。 写入数据set(key, value)：如果key还没有在缓存中，则写入其数据值。当缓存达到上限，它应该在写入新数据之前删除最近最少使用的数据用来腾出空闲位置。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LRUCache</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>        <span class="token class-name">Node</span> prev<span class="token punctuation">;</span>        <span class="token class-name">Node</span> next<span class="token punctuation">;</span>        <span class="token keyword">int</span> key<span class="token punctuation">;</span>        <span class="token keyword">int</span> value<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> hs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>        tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> tail<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>hs<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//key找不到</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// remove current</span>        <span class="token class-name">Node</span> current <span class="token operator">=</span> hs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        current<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        current<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> current<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token comment">// move current to tail</span>        <span class="token function">move_to_tail</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//每次get，使用次数+1，最近使用，放于尾部</span>        <span class="token keyword">return</span> hs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//数据放入缓存</span>        <span class="token comment">// get 这个方法会把key挪到最末端，因此，不需要再调用 move_to_tail</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            hs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//超出缓存上限</span>            hs<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除头部数据</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Node</span> insert <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//新建节点</span>        hs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> insert<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">move_to_tail</span><span class="token punctuation">(</span>insert<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//放于尾部</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">move_to_tail</span><span class="token punctuation">(</span><span class="token class-name">Node</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//移动数据至尾部</span>        current<span class="token punctuation">.</span>prev <span class="token operator">=</span> tail<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> current<span class="token punctuation">;</span>        current<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">;</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> tail<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>知识汇总</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android知识点汇总</title>
    <link href="/2023/08/31/docs/android/zhi-shi-hui-zong/android-zhi-shi-dian-hui-zong/"/>
    <url>/2023/08/31/docs/android/zhi-shi-hui-zong/android-zhi-shi-dian-hui-zong/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#activity">Activity</a><ul><li><a href="#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">生命周期</a></li><li><a href="#%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F">启动模式</a></li><li><a href="#%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B">启动过程</a></li></ul></li><li><a href="#fragment">Fragment</a><ul><li><a href="#%E7%89%B9%E7%82%B9">特点</a></li><li><a href="#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-1">生命周期</a></li><li><a href="#%E4%B8%8Eactivity%E9%80%9A%E4%BF%A1">与Activity通信</a></li></ul></li><li><a href="#service">Service</a><ul><li><a href="#%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B-1">启动过程</a></li><li><a href="#%E7%BB%91%E5%AE%9A%E8%BF%87%E7%A8%8B">绑定过程</a></li><li><a href="#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-2">生命周期</a></li><li><a href="#%E5%90%AF%E7%94%A8%E5%89%8D%E5%8F%B0%E6%9C%8D%E5%8A%A1">启用前台服务</a></li></ul></li><li><a href="#broadcastreceiver">BroadcastReceiver</a><ul><li><a href="#%E6%B3%A8%E5%86%8C%E8%BF%87%E7%A8%8B">注册过程</a></li></ul></li><li><a href="#contentprovider">ContentProvider</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8">基本使用</a></li></ul></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8">数据存储</a></li><li><a href="#view">View</a><ul><li><a href="#measurespec">MeasureSpec</a></li><li><a href="#motionevent">MotionEvent</a></li><li><a href="#velocitytracker">VelocityTracker</a></li><li><a href="#gesturedetector">GestureDetector</a></li><li><a href="#scroller">Scroller</a></li><li><a href="#view-%E7%9A%84%E6%BB%91%E5%8A%A8">View 的滑动</a></li><li><a href="#view-%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91">View 的事件分发</a></li><li><a href="#%E5%9C%A8-activity-%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%9F%90%E4%B8%AA-view-%E7%9A%84%E5%AE%BD%E9%AB%98">在 Activity 中获取某个 View 的宽高</a></li><li><a href="#draw-%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B">Draw 的基本流程</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89-view">自定义 View</a></li></ul></li><li><a href="#%E8%BF%9B%E7%A8%8B">进程</a><ul><li><a href="#%E8%BF%9B%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">进程生命周期</a></li><li><a href="#%E5%A4%9A%E8%BF%9B%E7%A8%8B">多进程</a></li><li><a href="#%E8%BF%9B%E7%A8%8B%E5%AD%98%E6%B4%BB">进程存活</a><ul><li><a href="#oom_adj">OOM_ADJ</a></li><li><a href="#%E8%BF%9B%E7%A8%8B%E8%A2%AB%E6%9D%80%E6%83%85%E5%86%B5">进程被杀情况</a></li><li><a href="#%E8%BF%9B%E7%A8%8B%E4%BF%9D%E6%B4%BB%E6%96%B9%E6%A1%88">进程保活方案</a></li></ul></li></ul></li><li><a href="#parcelable-%E6%8E%A5%E5%8F%A3">Parcelable 接口</a><ul><li><a href="#%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B">使用示例</a></li><li><a href="#%E6%96%B9%E6%B3%95%E8%AF%B4%E6%98%8E">方法说明</a></li><li><a href="#parcelable-%E4%B8%8E-serializable-%E5%AF%B9%E6%AF%94">Parcelable 与 Serializable 对比</a></li></ul></li><li><a href="#ipc">IPC</a><ul><li><a href="#ipc%E6%96%B9%E5%BC%8F">IPC方式</a></li><li><a href="#binder">Binder</a><ul><li><a href="#%E6%B5%81%E7%A8%8B">流程</a></li></ul></li><li><a href="#aidl-%E9%80%9A%E4%BF%A1">AIDL 通信</a></li><li><a href="#messenger">Messenger</a></li></ul></li><li><a href="#window--windowmanager">Window / WindowManager</a><ul><li><a href="#window-%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%88%86%E7%B1%BB">Window 概念与分类</a></li><li><a href="#window-%E7%9A%84%E5%86%85%E9%83%A8%E6%9C%BA%E5%88%B6">Window 的内部机制</a></li><li><a href="#window-%E7%9A%84%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B">Window 的创建过程</a><ul><li><a href="#activity-%E7%9A%84-window-%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B">Activity 的 Window 创建过程</a></li><li><a href="#dialog-%E7%9A%84-window-%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B">Dialog 的 Window 创建过程</a></li><li><a href="#toast-%E7%9A%84-window-%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B">Toast 的 Window 创建过程</a></li></ul></li></ul></li><li><a href="#bitmap">Bitmap</a><ul><li><a href="#%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B8%8E%E5%8E%8B%E7%BC%A9%E6%96%B9%E5%BC%8F">配置信息与压缩方式</a></li><li><a href="#%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C">常用操作</a><ul><li><a href="#%E8%A3%81%E5%89%AA%E7%BC%A9%E6%94%BE%E6%97%8B%E8%BD%AC%E7%A7%BB%E5%8A%A8">裁剪、缩放、旋转、移动</a></li><li><a href="#%E4%BF%9D%E5%AD%98%E4%B8%8E%E9%87%8A%E6%94%BE">保存与释放</a></li><li><a href="#%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9">图片压缩</a></li></ul></li><li><a href="#bitmapfactory">BitmapFactory</a><ul><li><a href="#bitmap%E5%88%9B%E5%BB%BA%E6%B5%81%E7%A8%8B">Bitmap创建流程</a></li><li><a href="#option%E7%B1%BB">Option类</a></li><li><a href="#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-1">基本使用</a></li></ul></li><li><a href="#%E5%86%85%E5%AD%98%E5%9B%9E%E6%94%B6">内存回收</a></li></ul></li><li><a href="#%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D">屏幕适配</a><ul><li><a href="#%E5%8D%95%E4%BD%8D">单位</a></li><li><a href="#%E5%A4%B4%E6%9D%A1%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88">头条适配方案</a></li><li><a href="#%E5%88%98%E6%B5%B7%E5%B1%8F%E9%80%82%E9%85%8D">刘海屏适配</a></li></ul></li><li><a href="#context">Context</a></li><li><a href="#sharedpreferences">SharedPreferences</a><ul><li><a href="#%E8%8E%B7%E5%8F%96%E6%96%B9%E5%BC%8F">获取方式</a><ul><li><a href="#getpreferences">getPreferences</a></li><li><a href="#getdefaultsharedpreferences">getDefaultSharedPreferences</a></li><li><a href="#getsharedpreferences">getSharedPreferences</a></li></ul></li><li><a href="#%E6%9E%B6%E6%9E%84">架构</a></li><li><a href="#apply--commit">apply / commit</a></li><li><a href="#%E6%B3%A8%E6%84%8F">注意</a></li></ul></li><li><a href="#%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6">消息机制</a><ul><li><a href="#handler-%E6%9C%BA%E5%88%B6">Handler 机制</a></li><li><a href="#%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86">工作原理</a><ul><li><a href="#threadlocal">ThreadLocal</a></li><li><a href="#messagequeue">MessageQueue</a></li><li><a href="#looper">Looper</a></li><li><a href="#handler">Handler</a></li></ul></li></ul></li><li><a href="#%E7%BA%BF%E7%A8%8B%E5%BC%82%E6%AD%A5">线程异步</a><ul><li><a href="#asynctask">AsyncTask</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-2">基本使用</a></li><li><a href="#%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86-1">工作原理</a></li></ul></li><li><a href="#handlerthread">HandlerThread</a></li><li><a href="#intentservice">IntentService</a></li><li><a href="#%E7%BA%BF%E7%A8%8B%E6%B1%A0">线程池</a></li></ul></li><li><a href="#recyclerview-%E4%BC%98%E5%8C%96">RecyclerView 优化</a></li><li><a href="#webview">Webview</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-3">基本使用</a><ul><li><a href="#webview-1">WebView</a></li><li><a href="#websettings">WebSettings</a></li><li><a href="#webviewclient">WebViewClient</a></li><li><a href="#webchromeclient">WebChromeClient</a></li></ul></li><li><a href="#webview-%E5%8A%A0%E8%BD%BD%E4%BC%98%E5%8C%96">Webview 加载优化</a></li><li><a href="#%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F">内存泄漏</a></li></ul></li></ul>        <h1 id="Activity">          <a href="#Activity" class="heading-link"><i class="fas fa-link"></i></a><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h1>              <h2 id="生命周期">          <a href="#生命周期" class="heading-link"><i class="fas fa-link"></i></a><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2>      <p><img src="http://gityuan.com/images/lifecycle/activity.png"></p><ul><li><p>Activity A 启动另一个Activity B，回调如下:<br>Activity A 的onPause() → Activity B的onCreate() → onStart() → onResume() → Activity A的onStop()；如果B是透明主题又或则是个DialogActivity，则不会回调A的onStop；</p></li><li><p>使用onSaveInstanceState（）保存简单，轻量级的UI状态</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">lateinit <span class="token keyword">var</span> textView<span class="token operator">:</span> <span class="token class-name">TextView</span><span class="token keyword">var</span> gameState<span class="token operator">:</span> <span class="token class-name">String</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>override fun <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> <span class="token class-name">Bundle</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>    gameState <span class="token operator">=</span> savedInstanceState<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token constant">GAME_STATE_KEY</span><span class="token punctuation">)</span>    <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>    textView <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>text_view<span class="token punctuation">)</span><span class="token punctuation">}</span>override fun <span class="token function">onRestoreInstanceState</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> <span class="token class-name">Bundle</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    textView<span class="token punctuation">.</span>text <span class="token operator">=</span> savedInstanceState<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token constant">TEXT_VIEW_KEY</span><span class="token punctuation">)</span><span class="token punctuation">}</span>override fun <span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span>outState<span class="token operator">:</span> <span class="token class-name">Bundle</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    outState<span class="token operator">?</span><span class="token punctuation">.</span>run <span class="token punctuation">{</span>        <span class="token function">putString</span><span class="token punctuation">(</span><span class="token constant">GAME_STATE_KEY</span><span class="token punctuation">,</span> gameState<span class="token punctuation">)</span>        <span class="token function">putString</span><span class="token punctuation">(</span><span class="token constant">TEXT_VIEW_KEY</span><span class="token punctuation">,</span> textView<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span>outState<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>        <h2 id="启动模式">          <a href="#启动模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#启动模式" class="headerlink" title="启动模式"></a>启动模式</h2>      <div class="table-container"><table><thead><tr><th>LaunchMode</th><th>说明</th></tr></thead><tbody><tr><td>standard</td><td>系统在启动它的任务中创建 activity 的新实例</td></tr><tr><td>singleTop</td><td>如果activity的实例已存在于当前任务的顶部，则系统通过调用其onNewIntent()，否则会创建新实例</td></tr><tr><td>singleTask</td><td>系统创建新 task 并在 task 的根目录下实例化 activity。但如果 activity 的实例已存在于单独的任务中，则调用其 onNewIntent() 方法，其上面的实例会被移除栈。一次只能存在一个 activity 实例</td></tr><tr><td>singleInstance</td><td>相同 singleTask，activity始终是其task的唯一成员; 任何由此开始的activity 都在一个单独的 task 中打开</td></tr><tr><td>&nbsp;</td><td></td></tr></tbody></table></div><!-- | 使用Intent标志 | 说明                      |----------|-----|| FLAG_ACTIVITY_NEW_TASK | 同 singleTask || FLAG_ACTIVITY_SINGLE_TOP | 同 singleTop || FLAG_ACTIVITY_CLEAR_TOP | 如果正在启动的 activity 已在当前 task中 运行，则不会启动该activity 的新实例，而是销毁其上的 activity，并调用其 onNewIntent() | -->        <h2 id="启动过程">          <a href="#启动过程" class="heading-link"><i class="fas fa-link"></i></a><a href="#启动过程" class="headerlink" title="启动过程"></a>启动过程</h2>      <p><img src="https://img-blog.csdn.net/20180427173504903"></p><p><code>ActivityThread.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Activity</span> <span class="token function">performLaunchActivity</span><span class="token punctuation">(</span><span class="token class-name">ActivityClientRecord</span> r<span class="token punctuation">,</span> <span class="token class-name">Intent</span> customIntent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token class-name">ActivityInfo</span> aInfo <span class="token operator">=</span> r<span class="token punctuation">.</span>activityInfo<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>packageInfo <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//step 1: 创建LoadedApk对象</span>        r<span class="token punctuation">.</span>packageInfo <span class="token operator">=</span> <span class="token function">getPackageInfo</span><span class="token punctuation">(</span>aInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">,</span> r<span class="token punctuation">.</span>compatInfo<span class="token punctuation">,</span>                <span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token constant">CONTEXT_INCLUDE_CODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//component初始化过程</span>    <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ClassLoader</span> cl <span class="token operator">=</span> r<span class="token punctuation">.</span>packageInfo<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//step 2: 创建Activity对象</span>    <span class="token class-name">Activity</span> activity <span class="token operator">=</span> mInstrumentation<span class="token punctuation">.</span><span class="token function">newActivity</span><span class="token punctuation">(</span>cl<span class="token punctuation">,</span> component<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">//step 3: 创建Application对象</span>    <span class="token class-name">Application</span> app <span class="token operator">=</span> r<span class="token punctuation">.</span>packageInfo<span class="token punctuation">.</span><span class="token function">makeApplication</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> mInstrumentation<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>activity <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//step 4: 创建ContextImpl对象</span>        <span class="token class-name">Context</span> appContext <span class="token operator">=</span> <span class="token function">createBaseContextForActivity</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> activity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CharSequence</span> title <span class="token operator">=</span> r<span class="token punctuation">.</span>activityInfo<span class="token punctuation">.</span><span class="token function">loadLabel</span><span class="token punctuation">(</span>appContext<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Configuration</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span>mCompatConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//step5: 将Application/ContextImpl都attach到Activity对象</span>        activity<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>appContext<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getInstrumentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>token<span class="token punctuation">,</span>                r<span class="token punctuation">.</span>ident<span class="token punctuation">,</span> app<span class="token punctuation">,</span> r<span class="token punctuation">.</span>intent<span class="token punctuation">,</span> r<span class="token punctuation">.</span>activityInfo<span class="token punctuation">,</span> title<span class="token punctuation">,</span> r<span class="token punctuation">.</span>parent<span class="token punctuation">,</span>                r<span class="token punctuation">.</span>embeddedID<span class="token punctuation">,</span> r<span class="token punctuation">.</span>lastNonConfigurationInstances<span class="token punctuation">,</span> config<span class="token punctuation">,</span>                r<span class="token punctuation">.</span>referrer<span class="token punctuation">,</span> r<span class="token punctuation">.</span>voiceInteractor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">int</span> theme <span class="token operator">=</span> r<span class="token punctuation">.</span>activityInfo<span class="token punctuation">.</span><span class="token function">getThemeResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>theme <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            activity<span class="token punctuation">.</span><span class="token function">setTheme</span><span class="token punctuation">(</span>theme<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        activity<span class="token punctuation">.</span>mCalled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">isPersistable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//step 6: 执行回调onCreate</span>            mInstrumentation<span class="token punctuation">.</span><span class="token function">callActivityOnCreate</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> r<span class="token punctuation">.</span>state<span class="token punctuation">,</span> r<span class="token punctuation">.</span>persistentState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            mInstrumentation<span class="token punctuation">.</span><span class="token function">callActivityOnCreate</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> r<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        r<span class="token punctuation">.</span>activity <span class="token operator">=</span> activity<span class="token punctuation">;</span>        r<span class="token punctuation">.</span>stopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>r<span class="token punctuation">.</span>activity<span class="token punctuation">.</span>mFinished<span class="token punctuation">)</span> <span class="token punctuation">{</span>            activity<span class="token punctuation">.</span><span class="token function">performStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//执行回调onStart</span>            r<span class="token punctuation">.</span>stopped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>r<span class="token punctuation">.</span>activity<span class="token punctuation">.</span>mFinished<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//执行回调onRestoreInstanceState</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">isPersistable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>state <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> r<span class="token punctuation">.</span>persistentState <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mInstrumentation<span class="token punctuation">.</span><span class="token function">callActivityOnRestoreInstanceState</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> r<span class="token punctuation">.</span>state<span class="token punctuation">,</span>                            r<span class="token punctuation">.</span>persistentState<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>state <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mInstrumentation<span class="token punctuation">.</span><span class="token function">callActivityOnRestoreInstanceState</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> r<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        r<span class="token punctuation">.</span>paused <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        mActivities<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>token<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> activity<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="Fragment">          <a href="#Fragment" class="heading-link"><i class="fas fa-link"></i></a><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h1>              <h2 id="特点">          <a href="#特点" class="heading-link"><i class="fas fa-link"></i></a><a href="#特点" class="headerlink" title="特点"></a>特点</h2>      <ul><li>Fragment 解决 Activity 间的切换不流畅，轻量切换</li><li>可以从 startActivityForResult 中接收到返回结果，但是View不能</li><li>只能在 Activity 保存其状态（用户离开 Activity）之前使用 commit() 提交事务。如果您试图在该时间点后提交，则会引发异常。 这是因为如需恢复 Activity，则提交后的状态可能会丢失。 对于丢失提交无关紧要的情况，请使用 commitAllowingStateLoss()。</li></ul>        <h2 id="生命周期-1">          <a href="#生命周期-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#生命周期-1" class="headerlink" title="生命周期"></a>生命周期</h2>      <p><img src="https://developer.android.google.cn/images/fragment_lifecycle.png"><img src="https://developer.android.google.cn/images/activity_fragment_lifecycle.png">  </p>        <h2 id="与Activity通信">          <a href="#与Activity通信" class="heading-link"><i class="fas fa-link"></i></a><a href="#与Activity通信" class="headerlink" title="与Activity通信"></a>与Activity通信</h2>      <p>执行此操作的一个好方法是，在片段内定义一个回调接口，并要求宿主 Activity 实现它。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FragmentA</span> <span class="token keyword">extends</span> <span class="token class-name">ListFragment</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">// Container Activity must implement this interface</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OnArticleSelectedListener</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onArticleSelected</span><span class="token punctuation">(</span><span class="token class-name">Uri</span> articleUri<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FragmentA</span> <span class="token keyword">extends</span> <span class="token class-name">ListFragment</span> <span class="token punctuation">{</span>    <span class="token class-name">OnArticleSelectedListener</span> mListener<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAttach</span><span class="token punctuation">(</span><span class="token class-name">Activity</span> activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onAttach</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            mListener <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">OnArticleSelectedListener</span><span class="token punctuation">)</span> activity<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassCastException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassCastException</span><span class="token punctuation">(</span>activity<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="Service">          <a href="#Service" class="heading-link"><i class="fas fa-link"></i></a><a href="#Service" class="headerlink" title="Service"></a>Service</h1>      <p>Service 分为两种工作状态，一种是启动状态，主要用于执行后台计算；另一种是绑定状态，主要用于其他组件和 Service 的交互。</p>        <h2 id="启动过程-1">          <a href="#启动过程-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#启动过程-1" class="headerlink" title="启动过程"></a>启动过程</h2>      <p><img src="http://gityuan.com/images/android-service/am/Seq_start_service.png"></p><p><code>ActivityThread.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@UnsupportedAppUsage</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleCreateService</span><span class="token punctuation">(</span><span class="token class-name">CreateServiceData</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ···    <span class="token class-name">LoadedApk</span> packageInfo <span class="token operator">=</span> <span class="token function">getPackageInfoNoCheck</span><span class="token punctuation">(</span>            data<span class="token punctuation">.</span>info<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">,</span> data<span class="token punctuation">.</span>compatInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Service</span> service <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ClassLoader</span> cl <span class="token operator">=</span> packageInfo<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service <span class="token operator">=</span> packageInfo<span class="token punctuation">.</span><span class="token function">getAppFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">instantiateService</span><span class="token punctuation">(</span>cl<span class="token punctuation">,</span> data<span class="token punctuation">.</span>info<span class="token punctuation">.</span>name<span class="token punctuation">,</span> data<span class="token punctuation">.</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     ···    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>localLOGV<span class="token punctuation">)</span> <span class="token class-name">Slog</span><span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"Creating service "</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>info<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ContextImpl</span> context <span class="token operator">=</span> <span class="token class-name">ContextImpl</span><span class="token punctuation">.</span><span class="token function">createAppContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> packageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">setOuterContext</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Application</span> app <span class="token operator">=</span> packageInfo<span class="token punctuation">.</span><span class="token function">makeApplication</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> mInstrumentation<span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>info<span class="token punctuation">.</span>name<span class="token punctuation">,</span> data<span class="token punctuation">.</span>token<span class="token punctuation">,</span> app<span class="token punctuation">,</span>                <span class="token class-name">ActivityManager</span><span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mServices<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>token<span class="token punctuation">,</span> service<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">ActivityManager</span><span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serviceDoneExecuting</span><span class="token punctuation">(</span>                    data<span class="token punctuation">.</span>token<span class="token punctuation">,</span> <span class="token constant">SERVICE_DONE_EXECUTING_ANON</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> e<span class="token punctuation">.</span><span class="token function">rethrowFromSystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     ··· <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="绑定过程">          <a href="#绑定过程" class="heading-link"><i class="fas fa-link"></i></a><a href="#绑定过程" class="headerlink" title="绑定过程"></a>绑定过程</h2>      <p><img src="http://gityuan.com/images/ams/bind_service.jpg"></p><p><code>ActivityThread.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleBindService</span><span class="token punctuation">(</span><span class="token class-name">BindServiceData</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Service</span> s <span class="token operator">=</span> mServices<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    ···    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            data<span class="token punctuation">.</span>intent<span class="token punctuation">.</span><span class="token function">setExtrasClassLoader</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            data<span class="token punctuation">.</span>intent<span class="token punctuation">.</span><span class="token function">prepareToEnterProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">.</span>rebind<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">IBinder</span> binder <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">onBind</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">ActivityManager</span><span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">publishService</span><span class="token punctuation">(</span>                            data<span class="token punctuation">.</span>token<span class="token punctuation">,</span> data<span class="token punctuation">.</span>intent<span class="token punctuation">,</span> binder<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    s<span class="token punctuation">.</span><span class="token function">onRebind</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">ActivityManager</span><span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serviceDoneExecuting</span><span class="token punctuation">(</span>                            data<span class="token punctuation">.</span>token<span class="token punctuation">,</span> <span class="token constant">SERVICE_DONE_EXECUTING_ANON</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> ex<span class="token punctuation">.</span><span class="token function">rethrowFromSystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         ···    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="生命周期-2">          <a href="#生命周期-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#生命周期-2" class="headerlink" title="生命周期"></a>生命周期</h2>      <p><img src="https://upload-images.jianshu.io/upload_images/944365-cf5c1a9d2dddaaca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/456/format/webp" style=""></p><div class="table-container"><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>START_NOT_STICKY</td><td>如果系统在 onStartCommand() 返回后终止服务，则除非有挂起 Intent 要传递，否则系统不会重建服务。这是最安全的选项，可以避免在不必要时以及应用能够轻松重启所有未完成的作业时运行服务</td></tr><tr><td>START_STICKY</td><td>如果系统在 onStartCommand() 返回后终止服务，则会重建服务并调用 onStartCommand()，但不会重新传递最后一个 Intent。相反，除非有挂起 Intent 要启动服务（在这种情况下，将传递这些 Intent ），否则系统会通过空 Intent 调用 onStartCommand()。这适用于不执行命令、但无限期运行并等待作业的媒体播放器（或类似服务</td></tr><tr><td>START_REDELIVER_INTENT</td><td>如果系统在 onStartCommand() 返回后终止服务，则会重建服务，并通过传递给服务的最后一个 Intent 调用 onStartCommand()。任何挂起 Intent 均依次传递。这适用于主动执行应该立即恢复的作业（例如下载文件）的服务</td></tr></tbody></table></div>        <h2 id="启用前台服务">          <a href="#启用前台服务" class="heading-link"><i class="fas fa-link"></i></a><a href="#启用前台服务" class="headerlink" title="启用前台服务"></a>启用前台服务</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token keyword">uses</span><span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.FOREGROUND_SERVICE"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Notification</span> notification <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Notification</span><span class="token punctuation">(</span>icon<span class="token punctuation">,</span> text<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Intent</span> notificationIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">ExampleActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PendingIntent</span> pendingIntent <span class="token operator">=</span> <span class="token class-name">PendingIntent</span><span class="token punctuation">.</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> notificationIntent<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>notification<span class="token punctuation">.</span><span class="token function">setLatestEventInfo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> title<span class="token punctuation">,</span> mmessage<span class="token punctuation">,</span> pendingIntent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">startForeground</span><span class="token punctuation">(</span><span class="token constant">ONGOING_NOTIFICATION_ID</span><span class="token punctuation">,</span> notification<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="BroadcastReceiver">          <a href="#BroadcastReceiver" class="heading-link"><i class="fas fa-link"></i></a><a href="#BroadcastReceiver" class="headerlink" title="BroadcastReceiver"></a>BroadcastReceiver</h1>      <p>target 26 之后，无法在 AndroidManifest 显示声明大部分广播，除了一部分必要的广播，如：</p><ul><li>ACTION_BOOT_COMPLETED</li><li>ACTION_TIME_SET</li><li>ACTION_LOCALE_CHANGED<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalBroadcastManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerReceiver</span><span class="token punctuation">(</span>receiver<span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>        <h2 id="注册过程">          <a href="#注册过程" class="heading-link"><i class="fas fa-link"></i></a><a href="#注册过程" class="headerlink" title="注册过程"></a>注册过程</h2>      <p><img src="http://gityuan.com/images/ams/send_broadcast.jpg"></p>        <h1 id="ContentProvider">          <a href="#ContentProvider" class="heading-link"><i class="fas fa-link"></i></a><a href="#ContentProvider" class="headerlink" title="ContentProvider"></a>ContentProvider</h1>      <p>ContentProvider 管理对结构化数据集的访问。它们封装数据，并提供用于定义数据安全性的机制。 内容提供程序是连接一个进程中的数据与另一个进程中运行的代码的标准界面。</p><p>ContentProvider 无法被用户感知，对于一个 ContentProvider 组件来说，它的内部需要实现增删该查这四种操作，它的内部维持着一份数据集合，这个数据集合既可以是数据库实现，也可以是其他任何类型，如 List 和 Map，内部的 insert、delete、update、query 方法需要处理好线程同步，因为这几个方法是在 Binder 线程池中被调用的。</p><p>ContentProvider 通过 Binder 向其他组件乃至其他应用提供数据。当 ContentProvider 所在的进程启动时，ContentProvider 会同时启动并发布到 AMS 中，需要注意的是，这个时候 ContentProvider 的 onCreate 要先于 Application 的 onCreate 而执行。</p>        <h2 id="基本使用">          <a href="#基本使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Queries the user dictionary and returns results</span>mCursor <span class="token operator">=</span> <span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>    <span class="token class-name">UserDictionary<span class="token punctuation">.</span>Words</span><span class="token punctuation">.</span><span class="token constant">CONTENT_URI</span><span class="token punctuation">,</span>   <span class="token comment">// The content URI of the words table</span>    mProjection<span class="token punctuation">,</span>                        <span class="token comment">// The columns to return for each row</span>    mSelectionClause                    <span class="token comment">// Selection criteria</span>    mSelectionArgs<span class="token punctuation">,</span>                     <span class="token comment">// Selection criteria</span>    mSortOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// The sort order for the returned rows</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Installer</span> <span class="token keyword">extends</span> <span class="token class-name">ContentProvider</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Cursor</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Uri</span> uri<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> projection<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> selection<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> selectionArgs<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> sortOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Uri</span> uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Uri</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Uri</span> uri<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ContentValues</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Uri</span> uri<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> selection<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> selectionArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Uri</span> uri<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ContentValues</span> values<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> selection<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> selectionArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>ContentProvider 和 sql 在实现上有什么区别?</p><ul><li>ContentProvider 屏蔽了数据存储的细节，内部实现透明化，用户只需关心 uri 即可(是否匹配)</li><li>ContentProvider 能实现不同 app 的数据共享，sql 只能是自己程序才能访问</li><li>Contentprovider 还能增删本地的文件,xml等信息</li></ul></blockquote>        <h1 id="数据存储">          <a href="#数据存储" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h1>      <div class="table-container"><table><thead><tr><th>存储方式</th><th>说明</th></tr></thead><tbody><tr><td>SharedPreferences</td><td>在键值对中存储私有原始数据</td></tr><tr><td>内部存储</td><td>在设备内存中存储私有数据</td></tr><tr><td>外部存储</td><td>在共享的外部存储中存储公共数据</td></tr><tr><td>SQLite 数据库</td><td>在私有数据库中存储结构化数据</td></tr></tbody></table></div>        <h1 id="View">          <a href="#View" class="heading-link"><i class="fas fa-link"></i></a><a href="#View" class="headerlink" title="View"></a>View</h1>      <p><img src="https://user-gold-cdn.xitu.io/2019/6/12/16b4a8a388f3a91a?imageslim" style=""><br>ViewRoot 对应于 ViewRootImpl 类，它是连接 WindowManager 和 DecorView 的纽带，View 的三大流程均是通过 ViewRoot 来完成的。在 ActivityThread 中，当 Activity 对象被创建完毕后，会将 DecorView 添加到 Window 中，同时会创建 ViewRootImpl 对象，并将 ViewRootImpl 对象和 DecorView 建立关联</p><p>View 的整个绘制流程可以分为以下三个阶段：</p><ul><li>measure: 判断是否需要重新计算 View 的大小，需要的话则计算</li><li>layout: 判断是否需要重新计算 View 的位置，需要的话则计算</li><li>draw: 判断是否需要重新绘制 View，需要的话则重绘制</li></ul><p><img src="https://img-blog.csdn.net/20180510164327114"></p>        <h2 id="MeasureSpec">          <a href="#MeasureSpec" class="heading-link"><i class="fas fa-link"></i></a><a href="#MeasureSpec" class="headerlink" title="MeasureSpec"></a>MeasureSpec</h2>      <p>MeasureSpec表示的是一个32位的整形值，它的高2位表示测量模式SpecMode，低30位表示某种测量模式下的规格大小SpecSize。MeasureSpec 是 View 类的一个静态内部类，用来说明应该如何测量这个 View</p><div class="table-container"><table><thead><tr><th>Mode</th><th>说明</th></tr></thead><tbody><tr><td>UNSPECIFIED</td><td>不指定测量模式, 父视图没有限制子视图的大小，子视图可以是想要的任何尺寸，通常用于系统内部，应用开发中很少用到。</td></tr><tr><td>EXACTLY</td><td>精确测量模式，视图宽高指定为 match_parent 或具体数值时生效，表示父视图已经决定了子视图的精确大小，这种模式下 View 的测量值就是 SpecSize 的值</td></tr><tr><td>AT_MOST</td><td>最大值测量模式，当视图的宽高指定为 wrap_content 时生效，此时子视图的尺寸可以是不超过父视图允许的最大尺寸的任何尺寸</td></tr></tbody></table></div><p>对于 DecorView 而言，它的MeasureSpec 由窗口尺寸和其自身的 LayoutParams 共同决定；对于普通的 View，它的 MeasureSpec 由父视图的 MeasureSpec 和其自身的 LayoutParams 共同决定</p><div class="table-container"><table><thead><tr><th>childLayoutParams/parentSpecMode</th><th>EXACTLY</th><th>AT_MOST</th></tr></thead><tbody><tr><td>dp/px</td><td>EXACTLY(childSize)</td><td>EXACTLY(childSize)</td></tr><tr><td>match_parent</td><td>EXACTLY(childSize)</td><td>AT_MOST(parentSize)</td></tr><tr><td>wrap_content</td><td>AT_MOST(parentSize)</td><td>AT_MOST(parentSize)</td></tr></tbody></table></div><p>直接继承 View 的控件需要重写 onMeasure 方法并设置 wrap_content 时的自身大小，因为 View 在布局中使用 wrap_content，那么它的 specMode 是 AT_MOST 模式，在这种模式下，它的宽/高等于父容器当前剩余的空间大小，就相当于使用 match_parent。这解决方式如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onMeasure</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> widthSpecMode <span class="token operator">=</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> widthSpecSize <span class="token operator">=</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> heightSpecMode <span class="token operator">=</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span>heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> heightSpecSize <span class="token operator">=</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span>heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 在 wrap_content 的情况下指定内部宽/高(mWidth 和 mHeight`)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>widthSpecMode <span class="token operator">==</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token constant">AT_MOST</span> <span class="token operator">&amp;&amp;</span> heightSpecMode <span class="token operator">==</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token constant">AT_MOST</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span>mWidth<span class="token punctuation">,</span> mHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>widthSpecMode <span class="token operator">==</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token constant">AT_MOST</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setMeasureDimension</span><span class="token punctuation">(</span>mWidth<span class="token punctuation">,</span> heightSpecSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>heightSpecMode <span class="token operator">==</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token constant">AT_MOST</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setMeasureDimension</span><span class="token punctuation">(</span>widthSpecSize<span class="token punctuation">,</span> mHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="MotionEvent">          <a href="#MotionEvent" class="heading-link"><i class="fas fa-link"></i></a><a href="#MotionEvent" class="headerlink" title="MotionEvent"></a>MotionEvent</h2>      <div class="table-container"><table><thead><tr><th>事件</th><th>说明</th></tr></thead><tbody><tr><td>ACTION_DOWN</td><td>手指刚接触到屏幕</td></tr><tr><td>ACTION_MOVE</td><td>手指在屏幕上移动</td></tr><tr><td>ACTION_UP</td><td>手机从屏幕上松开的一瞬间</td></tr><tr><td>ACTION_CANCEL</td><td>触摸事件取消</td></tr></tbody></table></div><p>点击屏幕后松开，事件序列为 DOWN -&gt; UP，点击屏幕滑动松开，事件序列为 DOWN -&gt; MOVE -&gt; …&gt; MOVE -&gt; UP。</p><p><code>getX/getY</code> 返回相对于当前View左上角的坐标，<code>getRawX/getRawY</code> 返回相对于屏幕左上角的坐标</p><p>TouchSlop是系统所能识别出的被认为滑动的最小距离，不同设备值可能不相同，可通过 <code>ViewConfiguration.get(getContext()).getScaledTouchSlop()</code> 获取。</p>        <h2 id="VelocityTracker">          <a href="#VelocityTracker" class="heading-link"><i class="fas fa-link"></i></a><a href="#VelocityTracker" class="headerlink" title="VelocityTracker"></a>VelocityTracker</h2>      <p><strong>VelocityTracker</strong> 可用于追踪手指在滑动中的速度：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">view<span class="token punctuation">.</span><span class="token function">setOnTouchListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnTouchListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouch</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">,</span> <span class="token class-name">MotionEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">VelocityTracker</span> velocityTracker <span class="token operator">=</span> <span class="token class-name">VelocityTracker</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        velocityTracker<span class="token punctuation">.</span><span class="token function">addMovement</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>        velocityTracker<span class="token punctuation">.</span><span class="token function">computeCurrentVelocity</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> xVelocity <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> velocityTracker<span class="token punctuation">.</span><span class="token function">getXVelocity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> yVelocity <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> velocityTracker<span class="token punctuation">.</span><span class="token function">getYVelocity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        velocityTracker<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        velocityTracker<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="GestureDetector">          <a href="#GestureDetector" class="heading-link"><i class="fas fa-link"></i></a><a href="#GestureDetector" class="headerlink" title="GestureDetector"></a>GestureDetector</h2>      <p><strong>GestureDetector</strong> 辅助检测用户的单击、滑动、长按、双击等行为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">GestureDetector</span> mGestureDetector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GestureDetector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">GestureDetector<span class="token punctuation">.</span>OnGestureListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onDown</span><span class="token punctuation">(</span><span class="token class-name">MotionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onShowPress</span><span class="token punctuation">(</span><span class="token class-name">MotionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onSingleTapUp</span><span class="token punctuation">(</span><span class="token class-name">MotionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onScroll</span><span class="token punctuation">(</span><span class="token class-name">MotionEvent</span> e1<span class="token punctuation">,</span> <span class="token class-name">MotionEvent</span> e2<span class="token punctuation">,</span> <span class="token keyword">float</span> distanceX<span class="token punctuation">,</span> <span class="token keyword">float</span> distanceY<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLongPress</span><span class="token punctuation">(</span><span class="token class-name">MotionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onFling</span><span class="token punctuation">(</span><span class="token class-name">MotionEvent</span> e1<span class="token punctuation">,</span> <span class="token class-name">MotionEvent</span> e2<span class="token punctuation">,</span> <span class="token keyword">float</span> velocityX<span class="token punctuation">,</span> <span class="token keyword">float</span> velocityY<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mGestureDetector<span class="token punctuation">.</span><span class="token function">setOnDoubleTapListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OnDoubleTapListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onSingleTapConfirmed</span><span class="token punctuation">(</span><span class="token class-name">MotionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onDoubleTap</span><span class="token punctuation">(</span><span class="token class-name">MotionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onDoubleTapEvent</span><span class="token punctuation">(</span><span class="token class-name">MotionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 解决长按屏幕后无法拖动的问题</span>mGestureDetector<span class="token punctuation">.</span><span class="token function">setIsLongpressEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>imageView<span class="token punctuation">.</span><span class="token function">setOnTouchListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnTouchListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouch</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">,</span> <span class="token class-name">MotionEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mGestureDetector<span class="token punctuation">.</span><span class="token function">onTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是监听滑动相关，建议在 <code>onTouchEvent</code> 中实现，如果要监听双击，那么就使用 <code>GestureDectector</code>。</p>        <h2 id="Scroller">          <a href="#Scroller" class="heading-link"><i class="fas fa-link"></i></a><a href="#Scroller" class="headerlink" title="Scroller"></a>Scroller</h2>      <p>弹性滑动对象，用于实现 View 的弹性滑动，<strong>Scroller</strong> 本身无法让 View 弹性滑动，需要和 View 的 <code>computeScroll</code> 方法配合使用。<code>startScroll</code> 方法是无法让 View 滑动的，<code>invalidate</code> 会导致 View 重绘，重回后会在 <code>draw</code> 方法中又会去调用 <code>computeScroll</code> 方法，<code>computeScroll</code> 方法又会去向 Scroller 获取当前的 scrollX 和 scrollY，然后通过 <code>scrollTo</code> 方法实现滑动，接着又调用 <code>postInvalidate</code> 方法如此反复。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Scroller</span> mScroller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scroller</span><span class="token punctuation">(</span>mContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">smoothScrollTo</span><span class="token punctuation">(</span><span class="token keyword">int</span> destX<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> scrollX <span class="token operator">=</span> <span class="token function">getScrollX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> delta <span class="token operator">=</span> destX <span class="token operator">-</span> scrollX<span class="token punctuation">;</span>    <span class="token comment">// 1000ms 内滑向 destX，效果就是慢慢滑动</span>    mScroller<span class="token punctuation">.</span><span class="token function">startScroll</span><span class="token punctuation">(</span>scrollX<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> delta<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">computeScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mScroller<span class="token punctuation">.</span><span class="token function">computeScrollOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scrollTo</span><span class="token punctuation">(</span>mScroller<span class="token punctuation">.</span><span class="token function">getCurrX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mScroller<span class="token punctuation">.</span><span class="token function">getCurrY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">postInvalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="View-的滑动">          <a href="#View-的滑动" class="heading-link"><i class="fas fa-link"></i></a><a href="#View-的滑动" class="headerlink" title="View 的滑动"></a>View 的滑动</h2>      <ul><li><p><code>scrollTo/scrollBy</code><br>适合对 View 内容的滑动。<code>scrollBy</code> 实际上也是调用了 <code>scrollTo</code> 方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mScrollX <span class="token operator">!=</span> x <span class="token operator">||</span> mScrollY <span class="token operator">!=</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> oldX <span class="token operator">=</span> mScrollX<span class="token punctuation">;</span>        <span class="token keyword">int</span> oldY <span class="token operator">=</span> mScrollY<span class="token punctuation">;</span>        mScrollX <span class="token operator">=</span> x<span class="token punctuation">;</span>        mScrollY <span class="token operator">=</span> y<span class="token punctuation">;</span>        <span class="token function">invalidateParentCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">onScrollChanged</span><span class="token punctuation">(</span>mScrollX<span class="token punctuation">,</span> mScrollY<span class="token punctuation">,</span> oldX<span class="token punctuation">,</span> oldY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">awakenScrollBars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">postInvalidateOnAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scrollBy</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scrollTo</span><span class="token punctuation">(</span>mScrollX <span class="token operator">+</span> x<span class="token punctuation">,</span> mScrollY <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mScrollX的值等于 View 的左边缘和 View 内容左边缘在水平方向的距离，mScrollY的值等于 View 上边缘和 View 内容上边缘在竖直方向的距离。<code>scrollTo</code> 和 <code>scrollBy</code> 只能改变 View 内容的位置而不能改变 View 在布局中的位置。</p></li><li><p>使用动画<br>操作简单，主要适用于没有交互的 View 和实现复杂的动画效果。</p></li><li><p>改变布局参数<br>操作稍微复杂，适用于有交互的 View.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ViewGroup<span class="token punctuation">.</span>MarginLayoutParams</span> params <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ViewGroup<span class="token punctuation">.</span>MarginLayoutParams</span><span class="token punctuation">)</span> view<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span>width <span class="token operator">+=</span> <span class="token number">100</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span>leftMargin <span class="token operator">+=</span> <span class="token number">100</span><span class="token punctuation">;</span>view<span class="token punctuation">.</span><span class="token function">requestLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//或者 view.setLayoutParams(params);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>        <h2 id="View-的事件分发">          <a href="#View-的事件分发" class="heading-link"><i class="fas fa-link"></i></a><a href="#View-的事件分发" class="headerlink" title="View 的事件分发"></a>View 的事件分发</h2>      <p>点击事件达到顶级 View(一般是一个 ViewGroup)，会调用 ViewGroup 的 dispatchTouchEvent 方法，如果顶级 ViewGroup 拦截事件即 onInterceptTouchEvent 返回 true，则事件由 ViewGroup 处理，这时如果 ViewGroup 的 mOnTouchListener 被设置，则 onTouch 会被调用，否则 onTouchEvent 会被调用。也就是说如果都提供的话，onTouch 会屏蔽掉 onTouchEvent。在 onTouchEvent 中，如果设置了 mOnClickListenser，则 onClick 会被调用。如果顶级 ViewGroup 不拦截事件，则事件会传递给它所在的点击事件链上的子 View，这时子 View 的 dispatchTouchEvent 会被调用。如此循环。</p><p><img src="https://user-gold-cdn.xitu.io/2019/7/19/16c08654e36be140?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" style=""></p><p><img src="https://user-gold-cdn.xitu.io/2019/7/19/16c086493dc70018?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" style=""></p><ul><li><p>ViewGroup 默认不拦截任何事件。ViewGroup 的 onInterceptTouchEvent 方法默认返回 false。</p></li><li><p>View 没有 onInterceptTouchEvent 方法，一旦有点击事件传递给它，onTouchEvent 方法就会被调用。</p></li><li><p>View 在可点击状态下，onTouchEvent 默认会消耗事件。</p></li><li><p>ACTION_DOWN 被拦截了，onInterceptTouchEvent 方法执行一次后，就会留下记号（mFirstTouchTarget == null）那么往后的 ACTION_MOVE 和 ACTION_UP 都会拦截。`</p></li></ul>        <h2 id="在-Activity-中获取某个-View-的宽高">          <a href="#在-Activity-中获取某个-View-的宽高" class="heading-link"><i class="fas fa-link"></i></a><a href="#在-Activity-中获取某个-View-的宽高" class="headerlink" title="在 Activity 中获取某个 View 的宽高"></a>在 Activity 中获取某个 View 的宽高</h2>      <ul><li>Activity/View#onWindowFocusChanged<pre class="line-numbers language-none"><code class="language-none">// 此时View已经初始化完毕// 当Activity的窗口得到焦点和失去焦点时均会被调用一次// 如果频繁地进行onResume和onPause，那么onWindowFocusChanged也会被频繁地调用public void onWindowFocusChanged(boolean hasFocus) {    super.onWindowFocusChanged(hasFocus);    if (hasFocus) {        int width = view.getMeasureWidth();        int height = view.getMeasuredHeight();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>view.post(runnable)<pre class="line-numbers language-none"><code class="language-none">// 通过post可以将一个runnable投递到消息队列的尾部，// 然后等待Looper调用次runnable的时候，View也已经初// 始化好了protected void onStart() {    super.onStart();    view.post(new Runnable() {        @Override        public void run() {            int width = view.getMeasuredWidth();            int height = view.getMeasuredHeight();        }    });}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>ViewTreeObserver<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 当View树的状态发生改变或者View树内部的View的可见// 性发生改变时，onGlobalLayout方法将被回调</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ViewTreeObserver</span> observer <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">getViewTreeObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    observer<span class="token punctuation">.</span><span class="token function">addOnGlobalLayoutListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OnGlobalLayoutListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"deprecation"</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onGlobalLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            view<span class="token punctuation">.</span><span class="token function">getViewTreeObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeGlobalOnLayoutListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> width <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> height <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>        <h2 id="Draw-的基本流程">          <a href="#Draw-的基本流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#Draw-的基本流程" class="headerlink" title="Draw 的基本流程"></a>Draw 的基本流程</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 绘制基本上可以分为六个步骤</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">// 步骤一：绘制View的背景</span>    <span class="token function">drawBackground</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">// 步骤二：如果需要的话，保持canvas的图层，为fading做准备</span>    saveCount <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getSaveCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    canvas<span class="token punctuation">.</span><span class="token function">saveLayer</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> top <span class="token operator">+</span> length<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">// 步骤三：绘制View的内容</span>    <span class="token function">onDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">// 步骤四：绘制View的子View</span>    <span class="token function">dispatchDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">// 步骤五：如果需要的话，绘制View的fading边缘并恢复图层</span>    canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> top <span class="token operator">+</span> length<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    canvas<span class="token punctuation">.</span><span class="token function">restoreToCount</span><span class="token punctuation">(</span>saveCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">// 步骤六：绘制View的装饰(例如滚动条等等)</span>    <span class="token function">onDrawForeground</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="自定义-View">          <a href="#自定义-View" class="heading-link"><i class="fas fa-link"></i></a><a href="#自定义-View" class="headerlink" title="自定义 View"></a>自定义 View</h2>      <ul><li>继承 View 重写 <code>onDraw</code> 方法</li></ul><p>主要用于实现一些不规则的效果，静态或者动态地显示一些不规则的图形，即重写 <code>onDraw</code> 方法。采用这种方式需要自己支持 wrap_content，并且 padding 也需要自己处理。</p><ul><li>继承 ViewGroup 派生特殊的 Layout</li></ul><p>主要用于实现自定义布局，采用这种方式需要合适地处理 ViewGroup 的测量、布局两个过程，并同时处理子元素的测量和布局过程。</p><ul><li>继承特定的 View</li></ul><p>用于扩张某种已有的View的功能</p><ul><li>继承特定的 ViewGroup</li></ul><p>用于扩张某种已有的ViewGroup的功能</p>        <h1 id="进程">          <a href="#进程" class="heading-link"><i class="fas fa-link"></i></a><a href="#进程" class="headerlink" title="进程"></a>进程</h1>      <p>进程（Process） 是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。</p><p>当某个应用组件启动且该应用没有运行其他任何组件时，Android 系统会使用单个执行线程为应用启动新的 Linux 进程。默认情况下，同一应用的所有组件在相同的进程和线程（称为“主”线程）中运行。</p><p>各类组件元素的清单文件条目<code>&lt;activity&gt;</code>、<code>&lt;service&gt;</code>、<code>&lt;receiver&gt;</code> 和 <code>&lt;provider&gt;</code>—均支持 android:process 属性，此属性可以指定该组件应在哪个进程运行。</p>        <h2 id="进程生命周期">          <a href="#进程生命周期" class="heading-link"><i class="fas fa-link"></i></a><a href="#进程生命周期" class="headerlink" title="进程生命周期"></a>进程生命周期</h2>      <p><strong>1、前台进程</strong></p><ul><li>托管用户正在交互的 Activity（已调用 Activity 的 <code>onResume()</code> 方法）</li><li>托管某个 Service，后者绑定到用户正在交互的 Activity</li><li>托管正在“前台”运行的 Service（服务已调用 <code>startForeground()</code>）</li><li>托管正执行一个生命周期回调的 Service（<code>onCreate()</code>、<code>onStart()</code> 或 <code>onDestroy()</code>）</li><li>托管正执行其 <code>onReceive()</code> 方法的 BroadcastReceiver</li></ul><p><strong>2、可见进程</strong>  </p><ul><li>托管不在前台、但仍对用户可见的 Activity（已调用其 <code>onPause()</code> 方法）。例如，如果 re前台 Activity 启动了一个对话框，允许在其后显示上一 Activity，则有可能会发生这种情况。</li><li>托管绑定到可见（或前台）Activity 的 Service</li></ul><p><strong>3、服务进程</strong>  </p><ul><li>正在运行已使用 startService() 方法启动的服务且不属于上述两个更高类别进程的进程。</li></ul><p><strong>4、后台进程</strong></p><ul><li>包含目前对用户不可见的 Activity 的进程（已调用 Activity 的 <code>onStop()</code> 方法）。通常会有很多后台进程在运行，因此它们会保存在 LRU （最近最少使用）列表中，以确保包含用户最近查看的 Activity 的进程最后一个被终止。</li></ul><p><strong>5、空进程</strong></p><ul><li>不含任何活动应用组件的进程。保留这种进程的的唯一目的是用作缓存，以缩短下次在其中运行组件所需的启动时间。 为使总体系统资源在进程缓存和底层内核缓存之间保持平衡，系统往往会终止这些进程。\</li></ul>        <h2 id="多进程">          <a href="#多进程" class="heading-link"><i class="fas fa-link"></i></a><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2>      <p>如果注册的四大组件中的任意一个组件时用到了多进程，运行该组件时，都会创建一个新的 Application 对象。对于多进程重复创建 Application 这种情况，只需要在该类中对当前进程加以判断即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"MyApplication"</span><span class="token punctuation">,</span> <span class="token function">getProcessName</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Process</span><span class="token punctuation">.</span><span class="token function">myPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 根据进程 ID 获取进程名     * @param pid 进程id     * @return 进程名     */</span>    <span class="token keyword">public</span>  <span class="token class-name">String</span> <span class="token function">getProcessName</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ActivityManager</span> am <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ActivityManager</span><span class="token punctuation">)</span><span class="token function">getSystemService</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token constant">ACTIVITY_SERVICE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ActivityManager<span class="token punctuation">.</span>RunningAppProcessInfo</span><span class="token punctuation">&gt;</span></span> processInfoList <span class="token operator">=</span> am<span class="token punctuation">.</span><span class="token function">getRunningAppProcesses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>processInfoList <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ActivityManager<span class="token punctuation">.</span>RunningAppProcessInfo</span> processInfo <span class="token operator">:</span> processInfoList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>processInfo<span class="token punctuation">.</span>pid <span class="token operator">==</span> pid<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> processInfo<span class="token punctuation">.</span>processName<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一般来说，使用多进程会造成以下几个方面的问题：</p><ul><li>静态成员和单例模式完全失效</li><li>线程同步机制完全失效</li><li>SharedPreferences 的可靠性下降</li><li>Application 会多次创建</li></ul></blockquote>        <h2 id="进程存活">          <a href="#进程存活" class="heading-link"><i class="fas fa-link"></i></a><a href="#进程存活" class="headerlink" title="进程存活"></a>进程存活</h2>              <h3 id="OOM-ADJ">          <a href="#OOM-ADJ" class="heading-link"><i class="fas fa-link"></i></a><a href="#OOM-ADJ" class="headerlink" title="OOM_ADJ"></a>OOM_ADJ</h3>      <div class="table-container"><table><thead><tr><th>ADJ级别</th><th>取值</th><th>解释</th></tr></thead><tbody><tr><td>UNKNOWN_ADJ</td><td>16</td><td>一般指将要会缓存进程，无法获取确定值</td></tr><tr><td>CACHED_APP_MAX_ADJ</td><td>15</td><td>不可见进程的adj最大值</td></tr><tr><td>CACHED_APP_MIN_ADJ</td><td>9</td><td>不可见进程的adj最小值</td></tr><tr><td>SERVICE_B_AD</td><td>8</td><td>B List 中的 Service（较老的、使用可能性更小）</td></tr><tr><td>PREVIOUS_APP_ADJ</td><td>7</td><td>上一个App的进程(往往通过按返回键)</td></tr><tr><td>HOME_APP_ADJ</td><td>6</td><td>Home进程</td></tr><tr><td>SERVICE_ADJ</td><td>5</td><td>服务进程(Service process)</td></tr><tr><td>HEAVY_WEIGHT_APP_ADJ</td><td>4</td><td>后台的重量级进程，system/rootdir/init.rc 文件中设置</td></tr><tr><td>BACKUP_APP_ADJ</td><td>3</td><td>备份进程</td></tr><tr><td>PERCEPTIBLE_APP_ADJ</td><td>2</td><td>可感知进程，比如后台音乐播放</td></tr><tr><td>VISIBLE_APP_ADJ</td><td>1</td><td>可见进程(Visible process)</td></tr><tr><td>FOREGROUND_APP_ADJ</td><td>0</td><td>前台进程（Foreground process)</td></tr><tr><td>PERSISTENT_SERVICE_ADJ</td><td>-11</td><td>关联着系统或persistent进程</td></tr><tr><td>PERSISTENT_PROC_ADJ</td><td>-12</td><td>系统 persistent 进程，比如telephony</td></tr><tr><td>SYSTEM_ADJ</td><td>-16</td><td>系统进程</td></tr><tr><td>NATIVE_ADJ</td><td>-17</td><td>native进程（不被系统管理）</td></tr></tbody></table></div>        <h3 id="进程被杀情况">          <a href="#进程被杀情况" class="heading-link"><i class="fas fa-link"></i></a><a href="#进程被杀情况" class="headerlink" title="进程被杀情况"></a>进程被杀情况</h3>      <p><img src="https://pic3.zhimg.com/80/18b6bfb1bf54433619a7122c3a8e606e_hd.png"></p>        <h3 id="进程保活方案">          <a href="#进程保活方案" class="heading-link"><i class="fas fa-link"></i></a><a href="#进程保活方案" class="headerlink" title="进程保活方案"></a>进程保活方案</h3>      <ul><li>开启一个像素的 Activity</li><li>使用前台服务</li><li>多进程相互唤醒</li><li>JobSheduler 唤醒</li><li>粘性服务 &amp; 与系统服务捆绑</li></ul>        <h1 id="Parcelable-接口">          <a href="#Parcelable-接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#Parcelable-接口" class="headerlink" title="Parcelable 接口"></a>Parcelable 接口</h1>      <p>只要实现了 Parcelable 接口，一个类的对象就可以实现序列化并可以通过 Intent 和 Binder 传递。</p>        <h2 id="使用示例">          <a href="#使用示例" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Parcel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Parcelable</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Parcelable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> userId<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">Parcel</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>        userId <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Creator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token constant">CREATOR</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Creator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">createFromParcel</span><span class="token punctuation">(</span><span class="token class-name">Parcel</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">newArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">describeContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeToParcel</span><span class="token punctuation">(</span><span class="token class-name">Parcel</span> dest<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dest<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userId<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="方法说明">          <a href="#方法说明" class="heading-link"><i class="fas fa-link"></i></a><a href="#方法说明" class="headerlink" title="方法说明"></a>方法说明</h2>      <p>Parcel 内部包装了可序列化的数据，可以在 Binder 中自由传输。序列化功能由 <code>writeToParcel</code> 方法完成，最终是通过 Parcel 中的一系列 write 方法完成。反序列化功能由 CREATOR 来完成，通过 Parcel 的一系列 read 方法来完成反序列化过程。</p><div class="table-container"><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>createFromParcel(Parcel in)</td><td>从序列化后的对象中创建原始对象</td></tr><tr><td>newArray(int size)</td><td>创建指定长度的原始对象数组</td></tr><tr><td>User(Parcel in)</td><td>从序列化后的对象中创建原始对象</td></tr><tr><td>writeToParcel(Parcel dest, int flags)</td><td>将当前对象写入序列化结构中，其中 flags 标识有两种值：0 或者 1。为 1 时标识当前对象需要作为返回值返回，不能立即释放资源，几乎所有情况都为 0</td></tr><tr><td>describeContents</td><td>返回当前对象的内容描述。如果含有文件描述符，返回 1，否则返回 0，几乎所有情况都返回 0</td></tr></tbody></table></div>        <h2 id="Parcelable-与-Serializable-对比">          <a href="#Parcelable-与-Serializable-对比" class="heading-link"><i class="fas fa-link"></i></a><a href="#Parcelable-与-Serializable-对比" class="headerlink" title="Parcelable 与 Serializable 对比"></a>Parcelable 与 Serializable 对比</h2>      <ul><li>Serializable 使用 I/O 读写存储在硬盘上，而 Parcelable 是直接在内存中读写</li><li>Serializable 会使用反射，序列化和反序列化过程需要大量 I/O 操作， Parcelable 自已实现封送和解封（marshalled &amp;unmarshalled）操作不需要用反射，数据也存放在 Native 内存中，效率要快很多</li></ul>        <h1 id="IPC">          <a href="#IPC" class="heading-link"><i class="fas fa-link"></i></a><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h1>      <p>IPC 即 Inter-Process Communication (进程间通信)。Android 基于 Linux，而 Linux 出于安全考虑，不同进程间不能之间操作对方的数据，这叫做“进程隔离”。</p><blockquote><p>在 Linux 系统中，虚拟内存机制为每个进程分配了线性连续的内存空间，操作系统将这种虚拟内存空间映射到物理内存空间，每个进程有自己的虚拟内存空间，进而不能操作其他进程的内存空间，只有操作系统才有权限操作物理内存空间。 进程隔离保证了每个进程的内存安全。</p></blockquote>        <h2 id="IPC方式">          <a href="#IPC方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#IPC方式" class="headerlink" title="IPC方式"></a>IPC方式</h2>      <div class="table-container"><table><thead><tr><th>名称</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>Bundle</td><td>简单易用</td><td>只能传输 Bundle 支持的数据类型</td><td>四大组件间的进程间通信</td></tr><tr><td>文件共享</td><td>简单易用</td><td>不适合高并发场景，并且无法做到进程间即时通信</td><td>无并发访问情形，交换简单的数据实时性不高的场景</td></tr><tr><td>AIDL</td><td>功能强大，支持一对多并发通信，支持实时通信</td><td>使用稍复杂，需要处理好线程同步</td><td>一对多通信且有 RPC 需求</td></tr><tr><td>Messenger</td><td>功能一般，支持一对多串行通信，支持实时通信</td><td>不能很处理高并发清醒，不支持 RPC，数据通过 Message 进行传输，因此只能传输 Bundle 支持的数据类型</td><td>低并发的一对多即时通信，无RPC需求，或者无需返回结果的RPC需求</td></tr><tr><td>ContentProvider</td><td>在数据源访问方面功能强大，支持一对多并发数据共享，可通过 Call 方法扩展其他操作</td><td>可以理解为受约束的 AIDL，主要提供数据源的 CRUD 操作</td><td>一对多的进程间数据共享</td></tr><tr><td>Socket</td><td>可以通过网络传输字节流，支持一对多并发实时通信</td><td>实现细节稍微有点烦琐，不支持直接的RPC</td><td>网络数据交换</td></tr></tbody></table></div>        <h2 id="Binder">          <a href="#Binder" class="heading-link"><i class="fas fa-link"></i></a><a href="#Binder" class="headerlink" title="Binder"></a>Binder</h2>      <p>Binder 是 Android 中的一个类，实现了 IBinder 接口。从 IPC 角度来说，Binder 是 Android 中的一种扩进程通信方方式。从 Android 应用层来说，Binder 是客户端和服务器端进行通信的媒介，当 bindService 的时候，服务端会返回一个包含了服务端业务调用的 Binder 对象。</p><p>Binder 相较于传统 IPC 来说更适合于Android系统，具体原因的包括如下三点：</p><ul><li>Binder 本身是 C/S 架构的，这一点更符合 Android 系统的架构</li><li>性能上更有优势：管道，消息队列，Socket 的通讯都需要两次数据拷贝，而 Binder 只需要一次。要知道，对于系统底层的 IPC 形式，少一次数据拷贝，对整体性能的影响是非常之大的</li><li>安全性更好：传统 IPC 形式，无法得到对方的身份标识（UID/GID)，而在使用 Binder IPC 时，这些身份标示是跟随调用过程而自动传递的。Server 端很容易就可以知道 Client 端的身份，非常便于做安全检查</li></ul><p>示例：</p><ul><li><strong>新建AIDL接口文件</strong></li></ul><p><code>RemoteService.aidl</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>mystudyapplication3</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">IRemoteService</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>系统会自动生成 <code>IRemoteService.java</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * This file is auto-generated.  DO NOT MODIFY. */</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>mystudyapplication3</span><span class="token punctuation">;</span><span class="token comment">// Declare any non-default types here with import statements</span><span class="token comment">//import com.example.mystudyapplication3.IUserBean;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRemoteService</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IInterface</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * Local-side IPC implementation stub class.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Stub</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Binder</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>mystudyapplication3<span class="token punctuation">.</span></span>IRemoteService</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> <span class="token constant">DESCRIPTOR</span> <span class="token operator">=</span> <span class="token string">"com.example.mystudyapplication3.IRemoteService"</span><span class="token punctuation">;</span>        <span class="token comment">/**         * Construct the stub at attach it to the interface.         */</span>        <span class="token keyword">public</span> <span class="token class-name">Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachInterface</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">DESCRIPTOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/**         * Cast an IBinder object into an com.example.mystudyapplication3.IRemoteService interface,         * generating a proxy if needed.         */</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>mystudyapplication3<span class="token punctuation">.</span></span>IRemoteService</span> <span class="token function">asInterface</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IBinder</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IInterface</span> iin <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">queryLocalInterface</span><span class="token punctuation">(</span><span class="token constant">DESCRIPTOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>iin <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>iin <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>mystudyapplication3<span class="token punctuation">.</span></span>IRemoteService</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>mystudyapplication3<span class="token punctuation">.</span></span>IRemoteService</span><span class="token punctuation">)</span> iin<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>mystudyapplication3<span class="token punctuation">.</span></span>IRemoteService<span class="token punctuation">.</span>Stub<span class="token punctuation">.</span>Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IBinder</span> <span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTransact</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcel</span> data<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcel</span> reply<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>RemoteException</span> <span class="token punctuation">{</span>            <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> descriptor <span class="token operator">=</span> <span class="token constant">DESCRIPTOR</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token constant">INTERFACE_TRANSACTION</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    reply<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">case</span> <span class="token class-name">TRANSACTION_getUserId</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    data<span class="token punctuation">.</span><span class="token function">enforceInterface</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> _result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    reply<span class="token punctuation">.</span><span class="token function">writeNoException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    reply<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>_result<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onTransact</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> data<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>mystudyapplication3<span class="token punctuation">.</span></span>IRemoteService</span> <span class="token punctuation">{</span>            <span class="token keyword">private</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IBinder</span> mRemote<span class="token punctuation">;</span>            <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IBinder</span> remote<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mRemote <span class="token operator">=</span> remote<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IBinder</span> <span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mRemote<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> <span class="token function">getInterfaceDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token constant">DESCRIPTOR</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>RemoteException</span> <span class="token punctuation">{</span>                <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcel</span> _data <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcel</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcel</span> _reply <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcel</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> _result<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    _data<span class="token punctuation">.</span><span class="token function">writeInterfaceToken</span><span class="token punctuation">(</span><span class="token constant">DESCRIPTOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    mRemote<span class="token punctuation">.</span><span class="token function">transact</span><span class="token punctuation">(</span><span class="token class-name">Stub<span class="token punctuation">.</span>TRANSACTION_getUserId</span><span class="token punctuation">,</span> _data<span class="token punctuation">,</span> _reply<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    _reply<span class="token punctuation">.</span><span class="token function">readException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    _result <span class="token operator">=</span> _reply<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    _reply<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    _data<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> _result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token class-name">TRANSACTION_getUserId</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IBinder</span><span class="token punctuation">.</span><span class="token constant">FIRST_CALL_TRANSACTION</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>RemoteException</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>DESCRIPTOR</td><td>Binder 的唯一标识，一般用当前的 Binder 的类名表示</td></tr><tr><td>asInterface(IBinder obj)</td><td>将服务端的 Binder 对象成客户端所需的 AIDL 接口类型对象，这种转换过程是区分进程的，如果位于同一进程，返回的就是 Stub 对象本身，否则返回的是系统封装后的 Stub.proxy 对象。</td></tr><tr><td>asBinder</td><td>用于返回当前 Binder 对象</td></tr><tr><td>onTransact</td><td>运行在服务端中的 Binder 线程池中，远程请求会通过系统底层封装后交由此方法来处理</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>定向 tag</th><th>含义</th></tr></thead><tbody><tr><td>in</td><td>数据只能由客户端流向服务端，服务端将会收到客户端对象的完整数据，客户端对象不会因为服务端对传参的修改而发生变动。</td></tr><tr><td>out</td><td>数据只能由服务端流向客户端，服务端将会收到客户端对象，该对象不为空，但是它里面的字段为空，但是在服务端对该对象作任何修改之后客户端的传参对象都会同步改动。</td></tr><tr><td>inout</td><td>服务端将会接收到客户端传来对象的完整信息，并且客户端将会同步服务端对该对象的任何变动。</td></tr></tbody></table></div>        <h3 id="流程">          <a href="#流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#流程" class="headerlink" title="流程"></a>流程</h3>      <p><img src="http://gityuan.com/images/binder/binder_start_service/binder_ipc_arch.jpg"></p>        <h2 id="AIDL-通信">          <a href="#AIDL-通信" class="heading-link"><i class="fas fa-link"></i></a><a href="#AIDL-通信" class="headerlink" title="AIDL 通信"></a>AIDL 通信</h2>      <p>Android Interface Definition Language</p><p>使用示例：</p><ul><li><strong>新建AIDL接口文件</strong><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// RemoteService.aidl</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>mystudyapplication3</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">IRemoteService</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>创建远程服务</strong><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoteService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> mId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Binder</span> binder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IRemoteService<span class="token punctuation">.</span>Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mId<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">IBinder</span> <span class="token function">onBind</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mId <span class="token operator">=</span> <span class="token number">1256</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> binder<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>声明远程服务</strong><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>service    android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">".RemoteService"</span>    android<span class="token operator">:</span>process<span class="token operator">=</span><span class="token string">":aidl"</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><strong>绑定远程服务</strong><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TAG</span> <span class="token operator">=</span> <span class="token string">"wzq"</span><span class="token punctuation">;</span>    <span class="token class-name">IRemoteService</span> iRemoteService<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ServiceConnection</span> mConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">,</span> <span class="token class-name">IBinder</span> service<span class="token punctuation">)</span> <span class="token punctuation">{</span>            iRemoteService <span class="token operator">=</span> <span class="token class-name">IRemoteService<span class="token punctuation">.</span>Stub</span><span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>iRemoteService<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            iRemoteService <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">bindService</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">RemoteService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mConnection<span class="token punctuation">,</span> <span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token constant">BIND_AUTO_CREATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>        <h2 id="Messenger">          <a href="#Messenger" class="heading-link"><i class="fas fa-link"></i></a><a href="#Messenger" class="headerlink" title="Messenger"></a>Messenger</h2>      <p>Messenger可以在不同进程中传递 Message 对象，在Message中放入我们需要传递的数据，就可以轻松地实现数据的进程间传递了。Messenger 是一种轻量级的 IPC 方案，底层实现是 AIDL。</p>        <h1 id="Window-WindowManager">          <a href="#Window-WindowManager" class="heading-link"><i class="fas fa-link"></i></a><a href="#Window-WindowManager" class="headerlink" title="Window / WindowManager"></a>Window / WindowManager</h1>              <h2 id="Window-概念与分类">          <a href="#Window-概念与分类" class="heading-link"><i class="fas fa-link"></i></a><a href="#Window-概念与分类" class="headerlink" title="Window 概念与分类"></a>Window 概念与分类</h2>      <p>Window 是一个抽象类，它的具体实现是 PhoneWindow。WindowManager 是外界访问 Window 的入口，Window 的具体实现位于 WindowManagerService 中，WindowManager 和 WindowManagerService 的交互是一个 IPC 过程。Android 中所有的视图都是通过 Window 来呈现，因此 Window 实际是 View 的直接管理者。</p><div class="table-container"><table><thead><tr><th>Window 类型</th><th>说明</th><th>层级</th></tr></thead><tbody><tr><td>Application Window</td><td>对应着一个 Activity</td><td>1~99</td></tr><tr><td>Sub Window</td><td>不能单独存在，只能附属在父 Window 中，如 Dialog 等</td><td>1000~1999</td></tr><tr><td>System Window</td><td>需要权限声明，如 Toast 和 系统状态栏等</td><td>2000~2999</td></tr></tbody></table></div>        <h2 id="Window-的内部机制">          <a href="#Window-的内部机制" class="heading-link"><i class="fas fa-link"></i></a><a href="#Window-的内部机制" class="headerlink" title="Window 的内部机制"></a>Window 的内部机制</h2>      <p>Window 是一个抽象的概念，每一个 Window 对应着一个 View 和一个 ViewRootImpl。Window 实际是不存在的，它是以 View 的形式存在。对 Window 的访问必须通过 WindowManager，WindowManager 的实现类是 WindowManagerImpl：</p><p><code>WindowManagerImpl.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addView</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">View</span> view<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">ViewGroup<span class="token punctuation">.</span>LayoutParams</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">applyDefaultToken</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>    mGlobal<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> params<span class="token punctuation">,</span> mContext<span class="token punctuation">.</span><span class="token function">getDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mParentWindow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateViewLayout</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">View</span> view<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">ViewGroup<span class="token punctuation">.</span>LayoutParams</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">applyDefaultToken</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>    mGlobal<span class="token punctuation">.</span><span class="token function">updateViewLayout</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeView</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mGlobal<span class="token punctuation">.</span><span class="token function">removeView</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>WindowManagerImpl 没有直接实现 Window 的三大操作，而是全部交给 WindowManagerGlobal 处理，WindowManagerGlobal 以工厂的形式向外提供自己的实例：</p><p><code>WindowManagerGlobal.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 添加</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addView</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">,</span> <span class="token class-name">ViewGroup<span class="token punctuation">.</span>LayoutParams</span> params<span class="token punctuation">,</span>        <span class="token class-name">Display</span> display<span class="token punctuation">,</span> <span class="token class-name">Window</span> parentWindow<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ···    <span class="token comment">// 子 Window 的话需要调整一些布局参数</span>    <span class="token keyword">final</span> <span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span> wparams <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">)</span> params<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parentWindow <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        parentWindow<span class="token punctuation">.</span><span class="token function">adjustLayoutParamsForSubWindow</span><span class="token punctuation">(</span>wparams<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        ···    <span class="token punctuation">}</span>    <span class="token class-name">ViewRootImpl</span> root<span class="token punctuation">;</span>    <span class="token class-name">View</span> panelParentView <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 新建一个 ViewRootImpl，并通过其 setView 来更新界面完成 Window 的添加过程</span>        ···        root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ViewRootImpl</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> display<span class="token punctuation">)</span><span class="token punctuation">;</span>        view<span class="token punctuation">.</span><span class="token function">setLayoutParams</span><span class="token punctuation">(</span>wparams<span class="token punctuation">)</span><span class="token punctuation">;</span>        mViews<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>        mRoots<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        mParams<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>wparams<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// do this last because it fires off messages to start doing things</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            root<span class="token punctuation">.</span><span class="token function">setView</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> wparams<span class="token punctuation">,</span> panelParentView<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// BadTokenException or InvalidDisplayException, clean up.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">removeViewLocked</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 删除</span><span class="token annotation punctuation">@UnsupportedAppUsage</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeView</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">,</span> <span class="token keyword">boolean</span> immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ···    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">findViewLocked</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">View</span> curView <span class="token operator">=</span> mRoots<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">removeViewLocked</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> immediate<span class="token punctuation">)</span><span class="token punctuation">;</span>        ···    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">removeViewLocked</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">boolean</span> immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ViewRootImpl</span> root <span class="token operator">=</span> mRoots<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">View</span> view <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">getView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">InputMethodManager</span> imm <span class="token operator">=</span> <span class="token class-name">InputMethodManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>imm <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            imm<span class="token punctuation">.</span><span class="token function">windowDismissed</span><span class="token punctuation">(</span>mViews<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getWindowToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> deferred <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">die</span><span class="token punctuation">(</span>immediate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        view<span class="token punctuation">.</span><span class="token function">assignParent</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>deferred<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mDyingViews<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 更新</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateViewLayout</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">,</span> <span class="token class-name">ViewGroup<span class="token punctuation">.</span>LayoutParams</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ···    <span class="token keyword">final</span> <span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span> wparams <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">)</span>params<span class="token punctuation">;</span>    view<span class="token punctuation">.</span><span class="token function">setLayoutParams</span><span class="token punctuation">(</span>wparams<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">findViewLocked</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ViewRootImpl</span> root <span class="token operator">=</span> mRoots<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        mParams<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        mParams<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> wparams<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">setLayoutParams</span><span class="token punctuation">(</span>wparams<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 ViewRootImpl 中最终会通过 WindowSession 来完成 Window 的添加、更新、删除工作，mWindowSession 的类型是 IWindowSession，是一个 Binder 对象，真正地实现类是 Session，是一个 IPC 过程。</p>        <h2 id="Window-的创建过程">          <a href="#Window-的创建过程" class="heading-link"><i class="fas fa-link"></i></a><a href="#Window-的创建过程" class="headerlink" title="Window 的创建过程"></a>Window 的创建过程</h2>              <h3 id="Activity-的-Window-创建过程">          <a href="#Activity-的-Window-创建过程" class="heading-link"><i class="fas fa-link"></i></a><a href="#Activity-的-Window-创建过程" class="headerlink" title="Activity 的 Window 创建过程"></a>Activity 的 Window 创建过程</h3>      <p>在 Activity 的创建过程中，最终会由 ActivityThread 的 performLaunchActivity() 来完成整个启动过程，该方法内部会通过类加载器创建 Activity 的实例对象，并调用 attach 方法关联一系列上下文环境变量。在 Activity 的 attach 方法里，系统会创建所属的 Window 对象并设置回调接口，然后在 Activity 的 setContentView 方法中将视图附属在 Window 上：</p><p><code>Activity.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ActivityThread</span> aThread<span class="token punctuation">,</span>        <span class="token class-name">Instrumentation</span> instr<span class="token punctuation">,</span> <span class="token class-name">IBinder</span> token<span class="token punctuation">,</span> <span class="token keyword">int</span> ident<span class="token punctuation">,</span>        <span class="token class-name">Application</span> application<span class="token punctuation">,</span> <span class="token class-name">Intent</span> intent<span class="token punctuation">,</span> <span class="token class-name">ActivityInfo</span> info<span class="token punctuation">,</span>        <span class="token class-name">CharSequence</span> title<span class="token punctuation">,</span> <span class="token class-name">Activity</span> parent<span class="token punctuation">,</span> <span class="token class-name">String</span> id<span class="token punctuation">,</span>        <span class="token class-name">NonConfigurationInstances</span> lastNonConfigurationInstances<span class="token punctuation">,</span>        <span class="token class-name">Configuration</span> config<span class="token punctuation">,</span> <span class="token class-name">String</span> referrer<span class="token punctuation">,</span> <span class="token class-name">IVoiceInteractor</span> voiceInteractor<span class="token punctuation">,</span>        <span class="token class-name">Window</span> window<span class="token punctuation">,</span> <span class="token class-name">ActivityConfigCallback</span> activityConfigCallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">attachBaseContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    mFragments<span class="token punctuation">.</span><span class="token function">attachHost</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token comment">/*parent*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhoneWindow</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> window<span class="token punctuation">,</span> activityConfigCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>    mWindow<span class="token punctuation">.</span><span class="token function">setWindowControllerCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mWindow<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mWindow<span class="token punctuation">.</span><span class="token function">setOnWindowDismissedCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mWindow<span class="token punctuation">.</span><span class="token function">getLayoutInflater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPrivateFactory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span>softInputMode <span class="token operator">!=</span> <span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">.</span><span class="token constant">SOFT_INPUT_STATE_UNSPECIFIED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mWindow<span class="token punctuation">.</span><span class="token function">setSoftInputMode</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>softInputMode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span>uiOptions <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mWindow<span class="token punctuation">.</span><span class="token function">setUiOptions</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>uiOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ···<span class="token punctuation">}</span>···<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token annotation punctuation">@LayoutRes</span> <span class="token keyword">int</span> layoutResID<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setContentView</span><span class="token punctuation">(</span>layoutResID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initWindowDecorActionBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>PhoneWindow.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token keyword">int</span> layoutResID<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mContentParent <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果没有 DecorView，就创建</span>        <span class="token function">installDecor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        mContentParent<span class="token punctuation">.</span><span class="token function">removeAllViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    mLayoutInflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>layoutResID<span class="token punctuation">,</span> mContentParent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Callback</span> cb <span class="token operator">=</span> <span class="token function">getCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cb <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isDestroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 回调 Activity 的 onContentChanged 方法通知 Activity 视图已经发生改变</span>        cb<span class="token punctuation">.</span><span class="token function">onContentChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候 DecorView 还没有被 WindowManager 正式添加。在 ActivityThread 的 handleResumeActivity 方法中，首先会调用 Activity 的 onResume 方法，接着调用 Activity 的 makeVisible()，完成 DecorView 的添加和显示过程：</p><p><code>Activity.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">makeVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mWindowAdded<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ViewManager</span> wm <span class="token operator">=</span> <span class="token function">getWindowManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wm<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>mDecor<span class="token punctuation">,</span> <span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mWindowAdded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    mDecor<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span><span class="token class-name">View</span><span class="token punctuation">.</span><span class="token constant">VISIBLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="Dialog-的-Window-创建过程">          <a href="#Dialog-的-Window-创建过程" class="heading-link"><i class="fas fa-link"></i></a><a href="#Dialog-的-Window-创建过程" class="headerlink" title="Dialog 的 Window 创建过程"></a>Dialog 的 Window 创建过程</h3>      <p>Dialog 的 Window 的创建过程和 Activity 类似，创建同样是通过 PolicyManager 的 makeNewWindow 方法完成的，创建后的对象实际就是 PhoneWindow。当 Dialog 被关闭时，会通过 WindowManager 来移除 DecorView：mWindowManager.removeViewImmediate(mDecor)。</p><p><code>Dialog.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Dialog</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token annotation punctuation">@StyleRes</span> <span class="token keyword">int</span> themeResId<span class="token punctuation">,</span> <span class="token keyword">boolean</span>      createContextThemeWrapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ···    mWindowManager <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WindowManager</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getSystemService</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token constant">WINDOW_SERVICE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Window</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhoneWindow</span><span class="token punctuation">(</span>mContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    mWindow <span class="token operator">=</span> w<span class="token punctuation">;</span>    w<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    w<span class="token punctuation">.</span><span class="token function">setOnWindowDismissedCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    w<span class="token punctuation">.</span><span class="token function">setOnWindowSwipeDismissedCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mCancelable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    w<span class="token punctuation">.</span><span class="token function">setWindowManager</span><span class="token punctuation">(</span>mWindowManager<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    w<span class="token punctuation">.</span><span class="token function">setGravity</span><span class="token punctuation">(</span><span class="token class-name">Gravity</span><span class="token punctuation">.</span><span class="token constant">CENTER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mListenersHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListenersHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>普通 Dialog 必须采用 Activity 的 Context，采用 Application 的 Context 就会报错，是因为应用 token 所导致，应用 token 一般只有 Activity 拥有。系统 Window 比较特殊，不需要 token。</p>        <h3 id="Toast-的-Window-创建过程">          <a href="#Toast-的-Window-创建过程" class="heading-link"><i class="fas fa-link"></i></a><a href="#Toast-的-Window-创建过程" class="headerlink" title="Toast 的 Window 创建过程"></a>Toast 的 Window 创建过程</h3>      <p>Toast 属于系统 Window ，由于其具有定时取消功能，所以系统采用了 Handler。Toast 的内部有两类 IPC 过程，第一类是 Toast 访问 NotificationManagerService，第二类是 NotificationManagerService 回调 Toast 里的 TN 接口。</p><p>Toast 内部的视图由两种方式，一种是系统默认的样式，另一种是 setView 指定一个自定义 View，它们都对应 Toast 的一个内部成员 mNextView。</p><p><code>Toast.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mNextView <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"setView must have been called"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">INotificationManager</span> service <span class="token operator">=</span> <span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> pkg <span class="token operator">=</span> mContext<span class="token punctuation">.</span><span class="token function">getOpPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TN</span> tn <span class="token operator">=</span> mTN<span class="token punctuation">;</span>    tn<span class="token punctuation">.</span>mNextView <span class="token operator">=</span> mNextView<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        service<span class="token punctuation">.</span><span class="token function">enqueueToast</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> tn<span class="token punctuation">,</span> mDuration<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Empty</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>···<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    mTN<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>NotificationManagerService.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">showNextToastLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ToastRecord</span> record <span class="token operator">=</span> mToastQueue<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">record</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">DBG</span><span class="token punctuation">)</span> <span class="token class-name">Slog</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"Show pkg="</span> <span class="token operator">+</span> record<span class="token punctuation">.</span>pkg <span class="token operator">+</span> <span class="token string">" callback="</span> <span class="token operator">+</span> record<span class="token punctuation">.</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            record<span class="token punctuation">.</span>callback<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">scheduleTimeoutLocked</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Slog</span><span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"Object died trying to show notification "</span> <span class="token operator">+</span> record<span class="token punctuation">.</span>callback                    <span class="token operator">+</span> <span class="token string">" in package "</span> <span class="token operator">+</span> record<span class="token punctuation">.</span>pkg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// remove it from the list and let the process die</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> mToastQueue<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mToastQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">keepProcessAliveLocked</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mToastQueue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                record <span class="token operator">=</span> mToastQueue<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                record <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>···<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">scheduleTimeoutLocked</span><span class="token punctuation">(</span><span class="token class-name">ToastRecord</span> r<span class="token punctuation">,</span> <span class="token keyword">boolean</span> immediate<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Message</span> m <span class="token operator">=</span> <span class="token class-name">Message</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span>mHandler<span class="token punctuation">,</span> <span class="token constant">MESSAGE_TIMEOUT</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> delay <span class="token operator">=</span> immediate <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>duration <span class="token operator">==</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token constant">LENGTH_LONG</span> <span class="token operator">?</span> <span class="token constant">LONG_DELAY</span> <span class="token operator">:</span> <span class="token constant">SHORT_DELAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mHandler<span class="token punctuation">.</span><span class="token function">removeCallbacksAndMessages</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    mHandler<span class="token punctuation">.</span><span class="token function">sendMessageDelayed</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="Bitmap">          <a href="#Bitmap" class="heading-link"><i class="fas fa-link"></i></a><a href="#Bitmap" class="headerlink" title="Bitmap"></a>Bitmap</h1>      <p><img src="https://upload-images.jianshu.io/upload_images/2618044-cd996dd172cce293.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" style=""></p>        <h2 id="配置信息与压缩方式">          <a href="#配置信息与压缩方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置信息与压缩方式" class="headerlink" title="配置信息与压缩方式"></a>配置信息与压缩方式</h2>      <p><strong>Bitmap 中有两个内部枚举类：</strong></p><ul><li>Config 是用来设置颜色配置信息</li><li>CompressFormat 是用来设置压缩方式</li></ul><div class="table-container"><table><thead><tr><th>Config</th><th>单位像素所占字节数</th><th>解析</th></tr></thead><tbody><tr><td>Bitmap.Config.ALPHA_8</td><td>1</td><td>颜色信息只由透明度组成，占8位</td></tr><tr><td>Bitmap.Config.ARGB_4444</td><td>2</td><td>颜色信息由rgba四部分组成，每个部分都占4位，总共占16位</td></tr><tr><td>Bitmap.Config.ARGB_8888</td><td>4</td><td>颜色信息由rgba四部分组成，每个部分都占8位，总共占32位。是Bitmap默认的颜色配置信息，也是最占空间的一种配置</td></tr><tr><td>Bitmap.Config.RGB_565</td><td>2</td><td>颜色信息由rgb三部分组成，R占5位，G占6位，B占5位，总共占16位</td></tr><tr><td>RGBA_F16</td><td>8</td><td>Android 8.0 新增（更丰富的色彩表现HDR）</td></tr><tr><td>HARDWARE</td><td>Special</td><td>Android 8.0 新增 （Bitmap直接存储在graphic memory）</td></tr></tbody></table></div><blockquote><p>通常我们优化 Bitmap 时，当需要做性能优化或者防止 OOM，我们通常会使用 Bitmap.Config.RGB_565 这个配置，因为 Bitmap.Config.ALPHA_8 只有透明度，显示一般图片没有意义，Bitmap.Config.ARGB_4444 显示图片不清楚， Bitmap.Config.ARGB_8888 占用内存最多。</p></blockquote><div class="table-container"><table><thead><tr><th>CompressFormat</th><th>解析</th></tr></thead><tbody><tr><td>Bitmap.CompressFormat.JPEG</td><td>表示以 JPEG 压缩算法进行图像压缩，压缩后的格式可以是 <code>.jpg</code> 或者 <code>.jpeg</code>，是一种有损压缩</td></tr><tr><td>Bitmap.CompressFormat.PNG</td><td>颜色信息由 rgba 四部分组成，每个部分都占 4 位，总共占 16 位</td></tr><tr><td>Bitmap.Config.ARGB_8888</td><td>颜色信息由 rgba 四部分组成，每个部分都占 8 位，总共占 32 位。是 Bitmap 默认的颜色配置信息，也是最占空间的一种配置</td></tr><tr><td>Bitmap.Config.RGB_565</td><td>颜色信息由 rgb 三部分组成，R 占 5 位，G 占 6 位，B 占 5 位，总共占 16 位</td></tr></tbody></table></div>        <h2 id="常用操作">          <a href="#常用操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2>              <h3 id="裁剪、缩放、旋转、移动">          <a href="#裁剪、缩放、旋转、移动" class="heading-link"><i class="fas fa-link"></i></a><a href="#裁剪、缩放、旋转、移动" class="headerlink" title="裁剪、缩放、旋转、移动"></a>裁剪、缩放、旋转、移动</h3>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Matrix</span> matrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Matrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 缩放 </span>matrix<span class="token punctuation">.</span><span class="token function">postScale</span><span class="token punctuation">(</span><span class="token number">0.8f</span><span class="token punctuation">,</span> <span class="token number">0.9f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 左旋，参数为正则向右旋</span>matrix<span class="token punctuation">.</span><span class="token function">postRotate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 平移, 在上一次修改的基础上进行再次修改 set 每次操作都是最新的 会覆盖上次的操作</span>matrix<span class="token punctuation">.</span><span class="token function">postTranslate</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 裁剪并执行以上操作</span><span class="token class-name">Bitmap</span> bitmap <span class="token operator">=</span> <span class="token class-name">Bitmap</span><span class="token punctuation">.</span><span class="token function">createBitmap</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> source<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> source<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> matrix<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>````<span class="token operator">&gt;</span> 虽然<span class="token class-name">Matrix</span>还可以调用postSkew方法进行倾斜操作，但是却不可以在此时创建<span class="token class-name">Bitmap</span>时使用。### <span class="token class-name">Bitmap</span>与<span class="token class-name">Drawable</span>转换```java<span class="token comment">// Drawable -&gt; Bitmap</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Bitmap</span> <span class="token function">drawableToBitmap</span><span class="token punctuation">(</span><span class="token class-name">Drawable</span> drawable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Bitmap</span> bitmap <span class="token operator">=</span> <span class="token class-name">Bitmap</span><span class="token punctuation">.</span><span class="token function">createBitmap</span><span class="token punctuation">(</span>drawable<span class="token punctuation">.</span><span class="token function">getIntrinsicWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> drawable<span class="token punctuation">.</span><span class="token function">getIntrinsicHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> drawable<span class="token punctuation">.</span><span class="token function">getOpacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">PixelFormat</span><span class="token punctuation">.</span><span class="token constant">OPAQUE</span> <span class="token operator">?</span> <span class="token class-name">Bitmap<span class="token punctuation">.</span>Config</span><span class="token punctuation">.</span><span class="token constant">ARGB_8888</span> <span class="token operator">:</span> <span class="token class-name">Bitmap<span class="token punctuation">.</span>Config</span><span class="token punctuation">.</span><span class="token constant">RGB_565</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Canvas</span> canvas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Canvas</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>    drawable<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> drawable<span class="token punctuation">.</span><span class="token function">getIntrinsicWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> drawable<span class="token punctuation">.</span><span class="token function">getIntrinsicHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    drawable<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bitmap<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// Bitmap -&gt; Drawable</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Drawable</span> <span class="token function">bitmapToDrawable</span><span class="token punctuation">(</span><span class="token class-name">Resources</span> resources<span class="token punctuation">,</span> <span class="token class-name">Bitmap</span> bm<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Drawable</span> drawable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitmapDrawable</span><span class="token punctuation">(</span>resources<span class="token punctuation">,</span> bm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> drawable<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="保存与释放">          <a href="#保存与释放" class="heading-link"><i class="fas fa-link"></i></a><a href="#保存与释放" class="headerlink" title="保存与释放"></a>保存与释放</h3>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Bitmap</span> bitmap <span class="token operator">=</span> <span class="token class-name">BitmapFactory</span><span class="token punctuation">.</span><span class="token function">decodeResource</span><span class="token punctuation">(</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token function">getFilesDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"test.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token class-name">FileOutputStream</span> outputStream<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    bitmap<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span><span class="token class-name">Bitmap<span class="token punctuation">.</span>CompressFormat</span><span class="token punctuation">.</span><span class="token constant">JPEG</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    outputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//释放bitmap的资源，这是一个不可逆转的操作</span>bitmap<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="图片压缩">          <a href="#图片压缩" class="heading-link"><i class="fas fa-link"></i></a><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h3>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Bitmap</span> <span class="token function">compressImage</span><span class="token punctuation">(</span><span class="token class-name">Bitmap</span> image<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>image <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">ByteArrayOutputStream</span> baos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        image<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span><span class="token class-name">Bitmap<span class="token punctuation">.</span>CompressFormat</span><span class="token punctuation">.</span><span class="token constant">JPEG</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> baos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayInputStream</span> isBm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Bitmap</span> bitmap <span class="token operator">=</span> <span class="token class-name">BitmapFactory</span><span class="token punctuation">.</span><span class="token function">decodeStream</span><span class="token punctuation">(</span>isBm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bitmap<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OutOfMemoryError</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>baos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                baos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="BitmapFactory">          <a href="#BitmapFactory" class="heading-link"><i class="fas fa-link"></i></a><a href="#BitmapFactory" class="headerlink" title="BitmapFactory"></a>BitmapFactory</h2>              <h3 id="Bitmap创建流程">          <a href="#Bitmap创建流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#Bitmap创建流程" class="headerlink" title="Bitmap创建流程"></a>Bitmap创建流程</h3>      <p><img src="https://upload-images.jianshu.io/upload_images/2618044-9c2046ca5054da05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" style=""></p>        <h3 id="Option类">          <a href="#Option类" class="heading-link"><i class="fas fa-link"></i></a><a href="#Option类" class="headerlink" title="Option类"></a>Option类</h3>      <div class="table-container"><table><thead><tr><th>常用方法</th><th>说明</th></tr></thead><tbody><tr><td>boolean inJustDecodeBounds</td><td>如果设置为true，不获取图片，不分配内存，但会返回图片的高度宽度信息</td></tr><tr><td>int inSampleSize</td><td>图片缩放的倍数</td></tr><tr><td>int outWidth</td><td>获取图片的宽度值</td></tr><tr><td>int outHeight</td><td>获取图片的高度值</td></tr><tr><td>int inDensity</td><td>用于位图的像素压缩比</td></tr><tr><td>int inTargetDensity</td><td>用于目标位图的像素压缩比（要生成的位图）</td></tr><tr><td>byte[] inTempStorage</td><td>创建临时文件，将图片存储</td></tr><tr><td>boolean inScaled</td><td>设置为true时进行图片压缩，从inDensity到inTargetDensity</td></tr><tr><td>boolean inDither</td><td>如果为true,解码器尝试抖动解码</td></tr><tr><td>Bitmap.Config inPreferredConfig</td><td>设置解码器这个值是设置色彩模式，默认值是ARGB_8888，在这个模式下，一个像素点占用4bytes空间，一般对透明度不做要求的话，一般采用RGB_565模式，这个模式下一个像素点占用2bytes</td></tr><tr><td>String outMimeType</td><td>设置解码图像</td></tr><tr><td>boolean inPurgeable</td><td>当存储Pixel的内存空间在系统内存不足时是否可以被回收</td></tr><tr><td>boolean inInputShareable</td><td>inPurgeable为true情况下才生效，是否可以共享一个InputStream</td></tr><tr><td>boolean inPreferQualityOverSpeed</td><td>为true则优先保证Bitmap质量其次是解码速度</td></tr><tr><td>boolean inMutable</td><td>配置Bitmap是否可以更改，比如：在Bitmap上隔几个像素加一条线段</td></tr><tr><td>int inScreenDensity</td><td>当前屏幕的像素密度</td></tr></tbody></table></div>        <h3 id="基本使用-1">          <a href="#基本使用-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BitmapFactory<span class="token punctuation">.</span>Options</span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitmapFactory<span class="token punctuation">.</span>Options</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    options<span class="token punctuation">.</span>inJustDecodeBounds <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// 设置inJustDecodeBounds为true后，再使用decodeFile()等方法，并不会真正的分配空间，即解码出来的Bitmap为null，但是可计算出原始图片的宽度和高度，即options.outWidth和options.outHeight</span>    <span class="token class-name">BitmapFactory</span><span class="token punctuation">.</span><span class="token function">decodeFileDescriptor</span><span class="token punctuation">(</span>fis<span class="token punctuation">.</span><span class="token function">getFD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> srcWidth <span class="token operator">=</span> options<span class="token punctuation">.</span>outWidth<span class="token punctuation">;</span>    <span class="token keyword">float</span> srcHeight <span class="token operator">=</span> options<span class="token punctuation">.</span>outHeight<span class="token punctuation">;</span>    <span class="token keyword">int</span> inSampleSize <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>srcHeight <span class="token operator">&gt;</span> height <span class="token operator">||</span> srcWidth <span class="token operator">&gt;</span> width<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>srcWidth <span class="token operator">&gt;</span> srcHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inSampleSize <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>srcHeight <span class="token operator">/</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            inSampleSize <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>srcWidth <span class="token operator">/</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    options<span class="token punctuation">.</span>inJustDecodeBounds <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    options<span class="token punctuation">.</span>inSampleSize <span class="token operator">=</span> inSampleSize<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">BitmapFactory</span><span class="token punctuation">.</span><span class="token function">decodeFileDescriptor</span><span class="token punctuation">(</span>fis<span class="token punctuation">.</span><span class="token function">getFD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="内存回收">          <a href="#内存回收" class="heading-link"><i class="fas fa-link"></i></a><a href="#内存回收" class="headerlink" title="内存回收"></a>内存回收</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>bitmap <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>bitmap<span class="token punctuation">.</span><span class="token function">isRecycled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment">// 回收并且置为null</span>    bitmap<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     bitmap <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Bitmap 类的构造方法都是私有的，所以开发者不能直接 new 出一个 Bitmap 对象，只能通过 BitmapFactory 类的各种静态方法来实例化一个 Bitmap。仔细查看 BitmapFactory 的源代码可以看到，生成 Bitmap 对象最终都是通过 JNI 调用方式实现的。所以，加载 Bitmap 到内存里以后，是包含两部分内存区域的。简单的说，一部分是Java 部分的，一部分是 C 部分的。这个 Bitmap 对象是由 Java 部分分配的，不用的时候系统就会自动回收了，但是那个对应的 C 可用的内存区域，虚拟机是不能直接回收的，这个只能调用底层的功能释放。所以需要调用 recycle() 方法来释放 C 部分的内存。从 Bitmap 类的源代码也可以看到，recycle() 方法里也的确是调用了 JNI 方法了的。</p>        <h1 id="屏幕适配">          <a href="#屏幕适配" class="heading-link"><i class="fas fa-link"></i></a><a href="#屏幕适配" class="headerlink" title="屏幕适配"></a>屏幕适配</h1>              <h2 id="单位">          <a href="#单位" class="heading-link"><i class="fas fa-link"></i></a><a href="#单位" class="headerlink" title="单位"></a>单位</h2>      <ul><li><p>dpi<br>每英寸像素数(dot per inch)  </p></li><li><p>dp<br>密度无关像素 - 一种基于屏幕物理密度的抽象单元。 这些单位相对于 160 dpi 的屏幕，因此一个 dp 是 160 dpi 屏幕上的一个 px。 dp 与像素的比率将随着屏幕密度而变化，但不一定成正比。为不同设备的 UI 元素的实际大小提供了一致性。</p></li><li><p>sp<br>与比例无关的像素 - 这与 dp 单位类似，但它也可以通过用户的字体大小首选项进行缩放。建议在指定字体大小时使用此单位，以便根据屏幕密度和用户偏好调整它们。</p><pre class="line-numbers language-none"><code class="language-none">dpi = px / inchdensity = dpi / 160dp = px / density<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>        <h2 id="头条适配方案">          <a href="#头条适配方案" class="heading-link"><i class="fas fa-link"></i></a><a href="#头条适配方案" class="headerlink" title="头条适配方案"></a>头条适配方案</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setCustomDensity</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Activity</span> activity<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span> <span class="token class-name">Application</span> application<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">DisplayMetrics</span> appDisplayMetrics <span class="token operator">=</span> application<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sNoncompatDensity <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sNoncompatDensity <span class="token operator">=</span> appDisplayMetrics<span class="token punctuation">.</span>density<span class="token punctuation">;</span>        sNoncompatScaledDensity <span class="token operator">=</span> appDisplayMetrics<span class="token punctuation">.</span>scaledDensity<span class="token punctuation">;</span>        <span class="token comment">// 监听字体切换</span>        application<span class="token punctuation">.</span><span class="token function">registerComponentCallbacks</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ComponentCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onConfigurationChanged</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> newConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>newConfig <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> newConfig<span class="token punctuation">.</span>fontScale <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    sNoncompatScaledDensity <span class="token operator">=</span> application<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>scaledDensity<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLowMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 适配后的dpi将统一为360dpi</span>    <span class="token keyword">final</span> <span class="token keyword">float</span> targetDensity <span class="token operator">=</span> appDisplayMetrics<span class="token punctuation">.</span>widthPixels <span class="token operator">/</span> <span class="token number">360</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">float</span> targetScaledDensity <span class="token operator">=</span> targetDensity <span class="token operator">*</span> <span class="token punctuation">(</span>sNoncompatScaledDensity <span class="token operator">/</span> sNoncompatDensity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> targetDensityDpi <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">160</span> <span class="token operator">*</span> targetDensity<span class="token punctuation">)</span><span class="token punctuation">;</span>    appDisplayMetrics<span class="token punctuation">.</span>density <span class="token operator">=</span> targetDensity<span class="token punctuation">;</span>    appDisplayMetrics<span class="token punctuation">.</span>scaledDensity <span class="token operator">=</span> targetScaledDensity<span class="token punctuation">;</span>    appDisplayMetrics<span class="token punctuation">.</span>densityDpi <span class="token operator">=</span> targetDensityDpi<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">DisplayMetrics</span> activityDisplayMetrics <span class="token operator">=</span> activity<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    activityDisplayMetrics<span class="token punctuation">.</span>density <span class="token operator">=</span> targetDensity<span class="token punctuation">;</span>    activityDisplayMetrics<span class="token punctuation">.</span>scaledDensity <span class="token operator">=</span> targetScaledDensity<span class="token punctuation">;</span>    activityDisplayMetrics<span class="token punctuation">.</span>densityDpi <span class="token operator">=</span> targetDensityDpi<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="刘海屏适配">          <a href="#刘海屏适配" class="heading-link"><i class="fas fa-link"></i></a><a href="#刘海屏适配" class="headerlink" title="刘海屏适配"></a>刘海屏适配</h2>      <ul><li>Android P 刘海屏适配方案</li></ul><p>Android P 支持最新的全面屏以及为摄像头和扬声器预留空间的凹口屏幕。通过全新的 DisplayCutout 类，可以确定非功能区域的位置和形状，这些区域不应显示内容。要确定这些凹口屏幕区域是否存在及其位置，使用 getDisplayCutout() 函数。</p><div class="table-container"><table><thead><tr><th>DisplayCutout 类方法</th><th>说明</th></tr></thead><tbody><tr><td>getBoundingRects()</td><td>返回Rects的列表，每个Rects都是显示屏上非功能区域的边界矩形</td></tr><tr><td>getSafeInsetLeft ()</td><td>返回安全区域距离屏幕左边的距离，单位是px</td></tr><tr><td>getSafeInsetRight ()</td><td>返回安全区域距离屏幕右边的距离，单位是px</td></tr><tr><td>getSafeInsetTop ()</td><td>返回安全区域距离屏幕顶部的距离，单位是px</td></tr><tr><td>getSafeInsetBottom()</td><td>返回安全区域距离屏幕底部的距离，单位是px</td></tr></tbody></table></div><p>Android P 中 WindowManager.LayoutParams 新增了一个布局参数属性 layoutInDisplayCutoutMode：</p><div class="table-container"><table><thead><tr><th>模式</th><th>模式说明</th></tr></thead><tbody><tr><td>LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT</td><td>只有当DisplayCutout完全包含在系统栏中时，才允许窗口延伸到DisplayCutout区域。 否则，窗口布局不与DisplayCutout区域重叠。</td></tr><tr><td>LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER</td><td>该窗口决不允许与DisplayCutout区域重叠。</td></tr><tr><td>LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES</td><td>该窗口始终允许延伸到屏幕短边上的DisplayCutout区域。</td></tr></tbody></table></div><ul><li>Android P 之前的刘海屏适配</li></ul><p>不同厂商的刘海屏适配方案不尽相同，需分别查阅各自的开发者文档。</p>        <h1 id="Context">          <a href="#Context" class="heading-link"><i class="fas fa-link"></i></a><a href="#Context" class="headerlink" title="Context"></a>Context</h1>      <p>Context 本身是一个抽象类，是对一系列系统服务接口的封装，包括：内部资源、包、类加载、I/O操作、权限、主线程、IPC 和组件启动等操作的管理。ContextImpl, Activity, Service, Application 这些都是 Context 的直接或间接子类, 关系如下:</p><p><img src="http://gityuan.com/images/context/context.jpg"></p><p>ContextWrapper是代理Context的实现，简单地将其所有调用委托给另一个Context（mBase）。</p><p>Application、Activity、Service通过<code>attach() </code>调用父类ContextWrapper的<code>attachBaseContext()</code>, 从而设置父类成员变量 mBase 为 ContextImpl 对象, ContextWrapper 的核心工作都是交给 mBase(ContextImpl) 来完成，这样可以子类化 Context 以修改行为而无需更改原始 Context。</p>        <h1 id="SharedPreferences">          <a href="#SharedPreferences" class="heading-link"><i class="fas fa-link"></i></a><a href="#SharedPreferences" class="headerlink" title="SharedPreferences"></a>SharedPreferences</h1>      <p>SharedPreferences 采用key-value（键值对）形式, 主要用于轻量级的数据存储, 尤其适合保存应用的配置参数, 但不建议使用 SharedPreferences 来存储大规模的数据, 可能会降低性能.</p><p>SharedPreferences采用xml文件格式来保存数据, 该文件所在目录位于 <code>/data/data/&lt;package name&gt;/shared_prefs</code>，如：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version='1.0' encoding='utf-8' standalone='yes' ?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>https://github.com/JasonWu1111/Android-Review<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>从Android N开始, 创建的 SP 文件模式, 不允许 <code>MODE_WORLD_READABLE</code> 和 <code>MODE_WORLD_WRITEABLE</code> 模块, 否则会直接抛出异常 SecurityException。 <code>MODE_MULTI_PROCESS</code> 这种多进程的方式也是 Google 不推荐的方式, 后续同样会不再支持。</p><p>当设置 MODE_MULTI_PROCESS 模式, 则每次 getSharedPreferences 过程, 会检查 SP 文件上次修改时间和文件大小, 一旦所有修改则会重新从磁盘加载文件。</p>        <h2 id="获取方式">          <a href="#获取方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h2>              <h3 id="getPreferences">          <a href="#getPreferences" class="heading-link"><i class="fas fa-link"></i></a><a href="#getPreferences" class="headerlink" title="getPreferences"></a>getPreferences</h3>      <p>Activity.getPreferences(mode): 以当前 Activity 的类名作为 SP 的文件名. 即 xxxActivity.xml<br><code>Activity.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">SharedPreferences</span> <span class="token function">getPreferences</span><span class="token punctuation">(</span><span class="token keyword">int</span> mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">getSharedPreferences</span><span class="token punctuation">(</span><span class="token function">getLocalClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>        <h3 id="getDefaultSharedPreferences">          <a href="#getDefaultSharedPreferences" class="heading-link"><i class="fas fa-link"></i></a><a href="#getDefaultSharedPreferences" class="headerlink" title="getDefaultSharedPreferences"></a>getDefaultSharedPreferences</h3>      <p>PreferenceManager.getDefaultSharedPreferences(Context): 以包名加上 _preferences 作为文件名, 以 MODE_PRIVATE 模式创建 SP 文件. 即 packgeName_preferences.xml.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SharedPreferences</span> <span class="token function">getDefaultSharedPreferences</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> context<span class="token punctuation">.</span><span class="token function">getSharedPreferences</span><span class="token punctuation">(</span><span class="token function">getDefaultSharedPreferencesName</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token function">getDefaultSharedPreferencesMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="getSharedPreferences">          <a href="#getSharedPreferences" class="heading-link"><i class="fas fa-link"></i></a><a href="#getSharedPreferences" class="headerlink" title="getSharedPreferences"></a>getSharedPreferences</h3>      <p>直接调用 Context.getSharedPreferences(name, mode)，所有的方法最终都是调用到如下方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ContextImpl</span> <span class="token keyword">extends</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> mSharedPrefsPaths<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SharedPreferences</span> <span class="token function">getSharedPreferences</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">File</span> file<span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">ContextImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mSharedPrefsPaths <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mSharedPrefsPaths <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//先从mSharedPrefsPaths查询是否存在相应文件</span>            file <span class="token operator">=</span> mSharedPrefsPaths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//如果文件不存在, 则创建新的文件 </span>                file <span class="token operator">=</span> <span class="token function">getSharedPreferencesPath</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                mSharedPrefsPaths<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token keyword">return</span> <span class="token function">getSharedPreferences</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="架构">          <a href="#架构" class="heading-link"><i class="fas fa-link"></i></a><a href="#架构" class="headerlink" title="架构"></a>架构</h2>      <p><img src="http://gityuan.com/images/sp/shared_preference.jpg"></p><p>SharedPreferences 与 Editor 只是两个接口. SharedPreferencesImpl 和 EditorImpl 分别实现了对应接口。另外, ContextImpl 记录着 SharedPreferences 的重要数据。</p><p><code>putxxx()</code> 操作把数据写入到EditorImpl.mModified；</p><p><code>apply()/commit()</code> 操作先调用 commitToMemory(), 将数据同步到 SharedPreferencesImpl 的 mMap, 并保存到 MemoryCommitResult 的 mapToWriteToDisk，再调用 enqueueDiskWrite(), 写入到磁盘文件; 先之前把原有数据保存到 .bak 为后缀的文件,用于在写磁盘的过程出现任何异常可恢复数据;</p><p><code>getxxx()</code> 操作从 SharedPreferencesImpl.mMap 读取数据.</p>        <h2 id="apply-commit">          <a href="#apply-commit" class="heading-link"><i class="fas fa-link"></i></a><a href="#apply-commit" class="headerlink" title="apply / commit"></a>apply / commit</h2>      <ul><li>apply 没有返回值, commit 有返回值能知道修改是否提交成功  </li><li>apply 是将修改提交到内存，再异步提交到磁盘文件，而 commit 是同步的提交到磁盘文件</li><li>多并发的提交 commit 时，需等待正在处理的 commit 数据更新到磁盘文件后才会继续往下执行，从而降低效率; 而 apply 只是原子更新到内存，后调用 apply 函数会直接覆盖前面内存数据，从一定程度上提高很多效率。</li></ul>        <h2 id="注意">          <a href="#注意" class="heading-link"><i class="fas fa-link"></i></a><a href="#注意" class="headerlink" title="注意"></a>注意</h2>      <ul><li>强烈建议不要在 sp 里面存储特别大的 key/value，有助于减少卡顿 / anr</li><li>不要高频地使用 apply，尽可能地批量提交</li><li>不要使用 MODE_MULTI_PROCESS</li><li>高频写操作的 key 与高频读操作的 key 可以适当地拆分文件，由于减少同步锁竞争</li><li>不要连续多次 edit()，应该获取一次获取 edit()，然后多次执行 putxxx()，减少内存波动</li></ul>        <h1 id="消息机制">          <a href="#消息机制" class="heading-link"><i class="fas fa-link"></i></a><a href="#消息机制" class="headerlink" title="消息机制"></a>消息机制</h1>              <h2 id="Handler-机制">          <a href="#Handler-机制" class="heading-link"><i class="fas fa-link"></i></a><a href="#Handler-机制" class="headerlink" title="Handler 机制"></a>Handler 机制</h2>      <p>Handler 有两个主要用途：（1）安排 Message 和 runnables 在将来的某个时刻执行; （2）将要在不同于自己的线程上执行的操作排入队列。(在多个线程并发更新UI的同时保证线程安全。)</p><p>Android 规定访问 UI 只能在主线程中进行，因为 Android 的 UI 控件不是线程安全的，多线程并发访问会导致 UI 控件处于不可预期的状态。为什么系统不对 UI 控件的访问加上锁机制？缺点有两个：加锁会让 UI 访问的逻辑变得复杂；其次锁机制会降低 UI 访问的效率。如果子线程访问 UI，那么程序就会抛出异常。ViewRootImpl 对UI操作做了验证，这个验证工作是由 ViewRootImpl的 <code>checkThread</code> 方法完成：</p><p><code>ViewRootImpl.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">checkThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mThread <span class="token operator">!=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CalledFromWrongThreadException</span><span class="token punctuation">(</span>                <span class="token string">"Only the original thread that created a view hierarchy can touch its views."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Message：Handler 接收和处理的消息对象</li><li>MessageQueue：Message 的队列，先进先出，每一个线程最多可以拥有一个</li><li>Looper：消息泵，是 MessageQueue 的管理者，会不断从 MessageQueue 中取出消息，并将消息分给对应的 Handler 处理，每个线程只有一个 Looper。</li></ul><p>Handler 创建的时候会采用当前线程的 Looper 来构造消息循环系统，需要注意的是，线程默认是没有 Looper 的，直接使用 Handler 会报错，如果需要使用 Handler 就必须为线程创建 Looper，因为默认的 UI 主线程，也就是 ActivityThread，ActivityThread 被创建的时候就会初始化 Looper，这也是在主线程中默认可以使用 Handler 的原因。</p>        <h2 id="工作原理">          <a href="#工作原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2>              <h3 id="ThreadLocal">          <a href="#ThreadLocal" class="heading-link"><i class="fas fa-link"></i></a><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3>      <p>ThreadLocal 是一个线程内部的数据存储类，通过它可以在指定的线程中存储数据，其他线程则无法获取。Looper、ActivityThread 以及 AMS 中都用到了 ThreadLocal。当不同线程访问同一个ThreadLocal 的 get方法，ThreadLocal 内部会从各自的线程中取出一个数组，然后再从数组中根据当前 ThreadLcoal 的索引去查找对应的value值。<br><code>ThreadLocal.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>···<span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ThreadLocalMap<span class="token punctuation">.</span>Entry</span> e <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>            <span class="token class-name">T</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="MessageQueue">          <a href="#MessageQueue" class="heading-link"><i class="fas fa-link"></i></a><a href="#MessageQueue" class="headerlink" title="MessageQueue"></a>MessageQueue</h3>      <p>MessageQueue主要包含两个操作：插入和读取。读取操作本身会伴随着删除操作，插入和读取对应的方法分别是 <code>enqueueMessage</code> 和 <code>next</code>。MessageQueue 内部实现并不是用的队列，实际上通过一个单链表的数据结构来维护消息列表。next 方法是一个无限循环的方法，如果消息队列中没有消息，那么 next 方法会一直阻塞。当有新消息到来时，next 方法会放回这条消息并将其从单链表中移除。</p><p><code>MessageQueue.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">enqueueMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">,</span> <span class="token keyword">long</span> when<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ···    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ···        msg<span class="token punctuation">.</span><span class="token function">markInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>when <span class="token operator">=</span> when<span class="token punctuation">;</span>        <span class="token class-name">Message</span> p <span class="token operator">=</span> mMessages<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> needWake<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> when <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> when <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>when<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// New head, wake up the event queue if blocked.</span>            msg<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>            mMessages <span class="token operator">=</span> msg<span class="token punctuation">;</span>            needWake <span class="token operator">=</span> mBlocked<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// Inserted within the middle of the queue.  Usually we don't have to wake</span>            <span class="token comment">// up the event queue unless there is a barrier at the head of the queue</span>            <span class="token comment">// and the message is the earliest asynchronous message in the queue.</span>            needWake <span class="token operator">=</span> mBlocked <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>target <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">.</span><span class="token function">isAsynchronous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Message</span> prev<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                prev <span class="token operator">=</span> p<span class="token punctuation">;</span>                p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> when <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>when<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>needWake <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span><span class="token function">isAsynchronous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    needWake <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            msg<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment">// invariant: p == prev.next</span>            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> msg<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// We can assume mPtr != 0 because mQuitting is false.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>needWake<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">nativeWake</span><span class="token punctuation">(</span>mPtr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>···<span class="token class-name">Message</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// Return here if the message loop has already quit and been disposed.</span>    <span class="token comment">// This can happen if the application tries to restart a looper after quit</span>    <span class="token comment">// which is not supported.</span>    ···    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ···        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// Try to retrieve the next message.  Return if found.</span>            <span class="token keyword">final</span> <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">SystemClock</span><span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Message</span> prevMsg <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token class-name">Message</span> msg <span class="token operator">=</span> mMessages<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">.</span>target <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span>                <span class="token keyword">do</span> <span class="token punctuation">{</span>                    prevMsg <span class="token operator">=</span> msg<span class="token punctuation">;</span>                    msg <span class="token operator">=</span> msg<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>msg<span class="token punctuation">.</span><span class="token function">isAsynchronous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">&lt;</span> msg<span class="token punctuation">.</span>when<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// Next message is not ready.  Set a timeout to wake up when it is ready.</span>                    nextPollTimeoutMillis <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>when <span class="token operator">-</span> now<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment">// Got a message.</span>                    mBlocked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>prevMsg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        prevMsg<span class="token punctuation">.</span>next <span class="token operator">=</span> msg<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        mMessages <span class="token operator">=</span> msg<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    msg<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">DEBUG</span><span class="token punctuation">)</span> <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"Returning message: "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                    msg<span class="token punctuation">.</span><span class="token function">markInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> msg<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">// No more messages.</span>                nextPollTimeoutMillis <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ···        <span class="token punctuation">}</span>        <span class="token comment">// Run the idle handlers.</span>        <span class="token comment">// We only ever reach this code block during the first iteration.</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pendingIdleHandlerCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token class-name">IdleHandler</span> idler <span class="token operator">=</span> mPendingIdleHandlers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            mPendingIdleHandlers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// release the reference to the handler</span>            <span class="token keyword">boolean</span> keep <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                keep <span class="token operator">=</span> idler<span class="token punctuation">.</span><span class="token function">queueIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">wtf</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"IdleHandler threw exception"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keep<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mIdleHandlers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>idler<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// Reset the idle handler count to 0 so we do not run them again.</span>        pendingIdleHandlerCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// While calling an idle handler, a new message could have been delivered</span>        <span class="token comment">// so go back and look again for a pending message without waiting.</span>        nextPollTimeoutMillis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="Looper">          <a href="#Looper" class="heading-link"><i class="fas fa-link"></i></a><a href="#Looper" class="headerlink" title="Looper"></a>Looper</h3>      <p>Looper 会不停地从 MessageQueue 中 查看是否有新消息，如果有新消息就会立刻处理，否则会一直阻塞。<br><code>Looper.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Looper</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> quitAllowed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageQueue</span><span class="token punctuation">(</span>quitAllowed<span class="token punctuation">)</span><span class="token punctuation">;</span>    mThread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可通过 Looper.prepare() 为当前线程创建一个 Looper：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token string">"Thread#2"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Handler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了 prepare 方法外，Looper 还提供了 <code>prepareMainLooper</code> 方法，主要是给 ActivityThread 创建 Looper 使用，本质也是通过 prepare 方法实现的。由于主线程的 Looper 比较特殊，所以 Looper 提供了一个 getMainLooper 方法来获取主线程的 Looper。</p><p>Looper 提供了 <code>quit</code> 和 <code>quitSafely</code> 来退出一个 Looper，二者的区别是：<code>quit</code> 会直接退出 Looper，而 <code>quitSafly</code> 只是设定一个退出标记，然后把消息队列中的已有消息处理完毕后才安全地退出。Looper 退出后，通过 Handler 发送的消息会失败，这个时候 Handler 的 send 方法会返回 false。因此在不需要的时候应终止 Looper。</p><p><code>Looper.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">Looper</span> me <span class="token operator">=</span> <span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>me <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"No Looper; Looper.prepare() wasn't called on this thread."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token class-name">MessageQueue</span> queue <span class="token operator">=</span> me<span class="token punctuation">.</span>mQueue<span class="token punctuation">;</span>    ···    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Message</span> msg <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// might block</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// No message indicates that the message queue is quitting.</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ···        <span class="token keyword">try</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">dispatchMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            dispatchEnd <span class="token operator">=</span> needEndTime <span class="token operator">?</span> <span class="token class-name">SystemClock</span><span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>traceTag <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Trace</span><span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>traceTag<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        ···        msg<span class="token punctuation">.</span><span class="token function">recycleUnchecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>loop 方法是一个死循环，唯一跳出循环的方式是 MessageQueue 的 next 方法返回了null。当 Looper 的 quit 方法被调用时，Looper就会调用 MessageQueue 的 quit 或者 qutiSafely 方法来通知消息队列退出，当消息队列被标记为退出状态时，它的 next 方法就会返回 null。loop 方法会调用 MessageQueue 的 next 方法来获取新消息，而 next 是一个阻塞操作，当没有消息时，next 会一直阻塞，导致 loop 方法一直阻塞。Looper 处理这条消息： msg.target.dispatchMessage(msg)，这里的 msg.target 是发送这条消息的 Handler 对象。</p>        <h3 id="Handler">          <a href="#Handler" class="heading-link"><i class="fas fa-link"></i></a><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h3>      <p>Handler 的工作主要包含消息的发送和接收的过程。消息的发送可以通过 post/send 的一系列方法实现，post 最终也是通过send来实现的。</p><p><img src="https://img-blog.csdnimg.cn/20181220142659447"></p>        <h1 id="线程异步">          <a href="#线程异步" class="heading-link"><i class="fas fa-link"></i></a><a href="#线程异步" class="headerlink" title="线程异步"></a>线程异步</h1>      <p>线程（thread） 是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。</p><p>应用启动时，系统会为应用创建一个名为“主线程”的执行线程( UI 线程)。 此线程非常重要，因为它负责将事件分派给相应的用户界面小部件，其中包括绘图事件。 此外，它也是应用与 Android UI 工具包组件（来自 <code>android.widget</code> 和 <code>android.view</code> 软件包的组件）进行交互的线程。</p><p>系统不会为每个组件实例创建单独的线程。运行于同一进程的所有组件均在 UI 线程中实例化，并且对每个组件的系统调用均由该线程进行分派。 因此，响应系统回调的方法（例如，报告用户操作的 onKeyDown() 或生命周期回调方法）始终在进程的 UI 线程中运行。</p><p>Android 的单线程模式必须遵守两条规则:</p><ul><li>不要阻塞 UI 线程</li><li>不要在 UI 线程之外访问 Android UI 工具包</li></ul><p>为解决此问题，Android 提供了几种途径来从其他线程访问 UI 线程:</p><ul><li><code>Activity.runOnUiThread(Runnable)</code></li><li><code>View.post(Runnable)</code></li><li><code>View.postDelayed(Runnable, long)</code></li></ul>        <h2 id="AsyncTask">          <a href="#AsyncTask" class="heading-link"><i class="fas fa-link"></i></a><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h2>      <p>AsyncTask 封装了 Thread 和 Handler，并不适合特别耗时的后台任务，对于特别耗时的任务来说，建议使用线程池。</p>        <h3 id="基本使用-2">          <a href="#基本使用-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本使用-2" class="headerlink" title="基本使用"></a>基本使用</h3>      <div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>onPreExecute()</td><td>异步任务执行前调用，用于做一些准备工作</td></tr><tr><td>doInBackground(Params…params)</td><td>用于执行异步任务，此方法中可以通过 publishProgress 方法来更新任务的进度，publishProgress 会调用 onProgressUpdate 方法</td></tr><tr><td>onProgressUpdate</td><td>在主线程中执行，后台任务的执行进度发生改变时调用</td></tr><tr><td>onPostExecute</td><td>在主线程中执行，在异步任务执行之后</td></tr></tbody></table></div><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">AsyncTask</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DownloadTask</span> <span class="token keyword">extends</span> <span class="token class-name">AsyncTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onPreExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onPreExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Boolean</span> <span class="token function">doInBackground</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> strings<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onProgressUpdate</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onProgressUpdate</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onPostExecute</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span> aBoolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onPostExecute</span><span class="token punctuation">(</span>aBoolean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>异步任务的实例必须在 UI 线程中创建，即 AsyncTask 对象必须在UI线程中创建。</li><li>execute(Params… params)方法必须在UI线程中调用。</li><li>不要手动调用 onPreExecute()，doInBackground()，onProgressUpdate()，onPostExecute() 这几个方法。</li><li>不能在 doInBackground() 中更改UI组件的信息。</li><li>一个任务实例只能执行一次，如果执行第二次将会抛出异常。</li><li>execute() 方法会让同一个进程中的 AsyncTask 串行执行，如果需要并行，可以调用 executeOnExcutor 方法。</li></ul>        <h3 id="工作原理-1">          <a href="#工作原理-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h3>      <p><code>AsyncTask.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@MainThread</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">AsyncTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Params</span><span class="token punctuation">,</span> <span class="token class-name">Progress</span><span class="token punctuation">,</span> <span class="token class-name">Result</span><span class="token punctuation">&gt;</span></span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Params</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">executeOnExecutor</span><span class="token punctuation">(</span>sDefaultExecutor<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@MainThread</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">AsyncTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Params</span><span class="token punctuation">,</span> <span class="token class-name">Progress</span><span class="token punctuation">,</span> <span class="token class-name">Result</span><span class="token punctuation">&gt;</span></span> <span class="token function">executeOnExecutor</span><span class="token punctuation">(</span><span class="token class-name">Executor</span> exec<span class="token punctuation">,</span>        <span class="token class-name">Params</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mStatus <span class="token operator">!=</span> <span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>mStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token constant">RUNNING</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Cannot execute task:"</span>                        <span class="token operator">+</span> <span class="token string">" the task is already running."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token constant">FINISHED</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Cannot execute task:"</span>                        <span class="token operator">+</span> <span class="token string">" the task has already been executed "</span>                        <span class="token operator">+</span> <span class="token string">"(a task can be executed only once)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    mStatus <span class="token operator">=</span> <span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token constant">RUNNING</span><span class="token punctuation">;</span>    <span class="token function">onPreExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mWorker<span class="token punctuation">.</span>mParams <span class="token operator">=</span> params<span class="token punctuation">;</span>    exec<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>mFuture<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sDefaultExecutor 是一个串行的线程池，一个进程中的所有的 AsyncTask 全部在该线程池中执行。AysncTask 中有两个线程池（SerialExecutor 和 THREAD_POOL_EXECUTOR）和一个 Handler（InternalHandler），其中线程池 SerialExecutor 用于任务的排队，THREAD_POOL_EXECUTOR 用于真正地执行任务，InternalHandler 用于将执行环境从线程池切换到主线程。</p><p><code>AsyncTask.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Handler</span> <span class="token function">getMainHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">AsyncTask</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sHandler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InternalHandler</span><span class="token punctuation">(</span><span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sHandler<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InternalHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">InternalHandler</span><span class="token punctuation">(</span><span class="token class-name">Looper</span> looper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>looper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"unchecked"</span><span class="token punctuation">,</span> <span class="token string">"RawUseOfParameterizedType"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">AsyncTaskResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AsyncTaskResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> msg<span class="token punctuation">.</span>obj<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token constant">MESSAGE_POST_RESULT</span><span class="token operator">:</span>                <span class="token comment">// There is only one result</span>                result<span class="token punctuation">.</span>mTask<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>mData<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token constant">MESSAGE_POST_PROGRESS</span><span class="token operator">:</span>                result<span class="token punctuation">.</span>mTask<span class="token punctuation">.</span><span class="token function">onProgressUpdate</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>mData<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">Result</span> <span class="token function">postResult</span><span class="token punctuation">(</span><span class="token class-name">Result</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span><span class="token constant">MESSAGE_POST_RESULT</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">AsyncTaskResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Result</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    message<span class="token punctuation">.</span><span class="token function">sendToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="HandlerThread">          <a href="#HandlerThread" class="heading-link"><i class="fas fa-link"></i></a><a href="#HandlerThread" class="headerlink" title="HandlerThread"></a>HandlerThread</h2>      <p>HandlerThread 集成了 Thread，却和普通的 Thread 有显著的不同。普通的 Thread 主要用于在 run 方法中执行一个耗时任务，而 HandlerThread 在内部创建了消息队列，外界需要通过 Handler 的消息方式通知 HanderThread 执行一个具体的任务。</p><p><code>HandlerThread.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    mTid <span class="token operator">=</span> <span class="token class-name">Process</span><span class="token punctuation">.</span><span class="token function">myTid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mLooper <span class="token operator">=</span> <span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Process</span><span class="token punctuation">.</span><span class="token function">setThreadPriority</span><span class="token punctuation">(</span>mPriority<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">onLooperPrepared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mTid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="IntentService">          <a href="#IntentService" class="heading-link"><i class="fas fa-link"></i></a><a href="#IntentService" class="headerlink" title="IntentService"></a>IntentService</h2>      <p>IntentService 可用于执行后台耗时的任务，当任务执行后会自动停止，由于其是 Service 的原因，它的优先级比单纯的线程要高，所以 IntentService 适合执行一些高优先级的后台任务。在实现上，IntentService 封装了 HandlerThread 和 Handler。</p><p><code>IntentService.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// TODO: It would be nice to have an option to hold a partial wakelock</span>    <span class="token comment">// during processing, and to have a static startService(Context, Intent)</span>    <span class="token comment">// method that would launch the service &amp; hand off a wakelock.</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HandlerThread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandlerThread</span><span class="token punctuation">(</span><span class="token string">"IntentService["</span> <span class="token operator">+</span> mName <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mServiceLooper <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mServiceHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceHandler</span><span class="token punctuation">(</span>mServiceLooper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>IntentService 第一次启动时，会在 onCreatea 方法中创建一个 HandlerThread，然后使用的 Looper 来构造一个 Handler 对象 mServiceHandler，这样通过 mServiceHandler 发送的消息最终都会在 HandlerThread 中执行。每次启动 IntentService，它的 onStartCommand 方法就会调用一次，onStartCommand 中处理每个后台任务的 Intent，onStartCommand 调用了 onStart 方法：</p><p><code>IntentService.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ServiceHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ServiceHandler</span><span class="token punctuation">(</span><span class="token class-name">Looper</span> looper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>looper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">onHandleIntent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">)</span>msg<span class="token punctuation">.</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">stopSelf</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>···<span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Intent</span> intent<span class="token punctuation">,</span> <span class="token keyword">int</span> startId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Message</span> msg <span class="token operator">=</span> mServiceHandler<span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    msg<span class="token punctuation">.</span>arg1 <span class="token operator">=</span> startId<span class="token punctuation">;</span>    msg<span class="token punctuation">.</span>obj <span class="token operator">=</span> intent<span class="token punctuation">;</span>    mServiceHandler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，IntentService 仅仅是通过 mServiceHandler 发送了一个消息，这个消息会在 HandlerThread 中被处理。mServiceHandler 收到消息后，会将 Intent 对象传递给 onHandlerIntent 方法中处理，执行结束后，通过 stopSelf(int startId) 来尝试停止服务。（stopSelf() 会立即停止服务，而 stopSelf(int startId) 则会等待所有的消息都处理完毕后才终止服务）。</p>        <h2 id="线程池">          <a href="#线程池" class="heading-link"><i class="fas fa-link"></i></a><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2>      <p>线程池的优点有以下：</p><ul><li>重用线程池中的线程，避免因为线程的创建和销毁带来性能开销。</li><li>能有效控制线程池的最大并发数，避免大量的线程之间因互相抢占系统资源而导致的阻塞现象。</li><li>能够对线程进行管理，并提供定时执行以及定间隔循环执行等功能。</li></ul><p>java 中，ThreadPoolExecutor 是线程池的真正实现：</p><p><code>ThreadPoolExecutor.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * Creates a new {@code ThreadPoolExecutor} with the given initial    * parameters.    *    * @param corePoolSize 核心线程数    * @param maximumPoolSize 最大线程数    * @param keepAliveTime 非核心线程闲置的超时时长    * @param unit 用于指定 keepAliveTime 参数的时间单位    * @param 任务队列，通过线程池的 execute 方法提交的 Runnable 对象会存储在这个参数中    * @param threadFactory 线程工厂，用于创建新线程    * @param handler 任务队列已满或者是无法成功执行任务时调用    */</span><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                            <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                            <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                            <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>                            <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> workQueue<span class="token punctuation">,</span>                            <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span>                            <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ···<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th>类型</th><th>创建方法</th><th>说明</th></tr></thead><tbody><tr><td>FixedThreadPool</td><td>Executors.newFixedThreadPool(int nThreads)</td><td>一种线程数量固定的线程池，只有核心线程并且不会被回收，没有超时机制</td></tr><tr><td>CachedThreadPool</td><td>Executors.newCachedThreadPool()</td><td>一种线程数量不定的线程池，只有非核心线程，当线程都处于活动状态时，会创建新线程来处理新任务，否则会利用空闲的线程，超时时长为60s</td></tr><tr><td>ScheduledThreadPool</td><td>Executors.newScheduledThreadPool(int corePoolSize)</td><td>核心线程数是固定的，非核心线程数没有限制，非核心线程闲置时立刻回收，主要用于执行定时任务和固定周期的重复任务</td></tr><tr><td>SingleThreadExecutor</td><td>Executors.newSingleThreadExecutor()</td><td>只有一个核心线程，确保所有任务在同一线程中按顺序执行</td></tr></tbody></table></div>        <h1 id="RecyclerView-优化">          <a href="#RecyclerView-优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#RecyclerView-优化" class="headerlink" title="RecyclerView 优化"></a>RecyclerView 优化</h1>      <ul><li><p>数据处理和视图加载分离：数据的处理逻辑尽可能放在异步处理，onBindViewHolder 方法中只处理数据填充到视图中。</p></li><li><p>数据优化：分页拉取远端数据，对拉取下来的远端数据进行缓存，提升二次加载速度；对于新增或者删除数据通过 DiffUtil 来进行局部刷新数据，而不是一味地全局刷新数据。</p></li></ul><p>示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdapterDiffCallback</span> <span class="token keyword">extends</span> <span class="token class-name">DiffUtil<span class="token punctuation">.</span>Callback</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> mOldList<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> mNewList<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">AdapterDiffCallback</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> oldList<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> newList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mOldList <span class="token operator">=</span> oldList<span class="token punctuation">;</span>        mNewList <span class="token operator">=</span> newList<span class="token punctuation">;</span>        <span class="token class-name">DiffUtil<span class="token punctuation">.</span>DiffResult</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOldListSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mOldList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNewListSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mNewList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">areItemsTheSame</span><span class="token punctuation">(</span><span class="token keyword">int</span> oldItemPosition<span class="token punctuation">,</span> <span class="token keyword">int</span> newItemPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mOldList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>oldItemPosition<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>mNewList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>newItemPosition<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">areContentsTheSame</span><span class="token punctuation">(</span><span class="token keyword">int</span> oldItemPosition<span class="token punctuation">,</span> <span class="token keyword">int</span> newItemPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mOldList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>oldItemPosition<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>mNewList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>newItemPosition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DiffUtil<span class="token punctuation">.</span>DiffResult</span> diffResult <span class="token operator">=</span> <span class="token class-name">DiffUtil</span><span class="token punctuation">.</span><span class="token function">calculateDiff</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AdapterDiffCallback</span><span class="token punctuation">(</span>oldList<span class="token punctuation">,</span> newList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>diffResult<span class="token punctuation">.</span><span class="token function">dispatchUpdatesTo</span><span class="token punctuation">(</span>mAdapter<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>布局优化：减少布局层级，简化 ItemView</p></li><li><p>升级 RecycleView 版本到 25.1.0 及以上使用 Prefetch 功能</p></li><li><p>通过重写 RecyclerView.onViewRecycled(holder) 来回收资源</p></li><li><p>如果 Item 高度是固定的话，可以使用 RecyclerView.setHasFixedSize(true); 来避免 requestLayout 浪费资源</p></li><li><p>对 ItemView 设置监听器，不要对每个 Item 都调用 addXxListener，应该大家公用一个 XxListener，根据 ID 来进行不同的操作，优化了对象的频繁创建带来的资源消耗</p></li><li><p>如果多个 RecycledView 的 Adapter 是一样的，比如嵌套的 RecyclerView 中存在一样的 Adapter，可以通过设置 RecyclerView.setRecycledViewPool(pool)，来共用一个 RecycledViewPool。</p></li></ul>        <h1 id="Webview">          <a href="#Webview" class="heading-link"><i class="fas fa-link"></i></a><a href="#Webview" class="headerlink" title="Webview"></a>Webview</h1>              <h2 id="基本使用-3">          <a href="#基本使用-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本使用-3" class="headerlink" title="基本使用"></a>基本使用</h2>              <h3 id="WebView">          <a href="#WebView" class="heading-link"><i class="fas fa-link"></i></a><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h3>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取当前页面的URL</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取当前页面的原始URL(重定向后可能当前url不同)</span><span class="token comment">// 就是http headers的Referer参数，loadUrl时为null</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getOriginalUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取当前页面的标题</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取当前页面的favicon</span><span class="token keyword">public</span> <span class="token class-name">Bitmap</span> <span class="token function">getFavicon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取当前页面的加载进度</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getProgress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通知WebView内核网络状态</span><span class="token comment">// 用于设置JS属性`window.navigator.isOnline`和产生HTML5事件`online/offline`</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNetworkAvailable</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> networkUp<span class="token punctuation">)</span><span class="token comment">// 设置初始缩放比例</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setInitialScale</span><span class="token punctuation">(</span><span class="token keyword">int</span> scaleInPercent<span class="token punctuation">)</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="WebSettings">          <a href="#WebSettings" class="heading-link"><i class="fas fa-link"></i></a><a href="#WebSettings" class="headerlink" title="WebSettings"></a>WebSettings</h3>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">WebSettings</span> settings <span class="token operator">=</span> web<span class="token punctuation">.</span><span class="token function">getSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 存储(storage)</span><span class="token comment">// 启用HTML5 DOM storage API，默认值 false</span>settings<span class="token punctuation">.</span><span class="token function">setDomStorageEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 启用Web SQL Database API，这个设置会影响同一进程内的所有WebView，默认值 false</span><span class="token comment">// 此API已不推荐使用，参考：https://www.w3.org/TR/webdatabase/</span>settings<span class="token punctuation">.</span><span class="token function">setDatabaseEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 启用Application Caches API，必需设置有效的缓存路径才能生效，默认值 false</span><span class="token comment">// 此API已废弃，参考：https://developer.mozilla.org/zh-CN/docs/Web/HTML/Using_the_application_cache</span>settings<span class="token punctuation">.</span><span class="token function">setAppCacheEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> settings<span class="token punctuation">.</span><span class="token function">setAppCachePath</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getCacheDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 定位(location)</span>settings<span class="token punctuation">.</span><span class="token function">setGeolocationEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 是否保存表单数据</span>settings<span class="token punctuation">.</span><span class="token function">setSaveFormData</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 是否当webview调用requestFocus时为页面的某个元素设置焦点，默认值 true</span>settings<span class="token punctuation">.</span><span class="token function">setNeedInitialFocus</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 是否支持viewport属性，默认值 false</span><span class="token comment">// 页面通过`&lt;meta name="viewport" ... /&gt;`自适应手机屏幕</span>settings<span class="token punctuation">.</span><span class="token function">setUseWideViewPort</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 是否使用overview mode加载页面，默认值 false</span><span class="token comment">// 当页面宽度大于WebView宽度时，缩小使页面宽度等于WebView宽度</span>settings<span class="token punctuation">.</span><span class="token function">setLoadWithOverviewMode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 布局算法</span>settings<span class="token punctuation">.</span><span class="token function">setLayoutAlgorithm</span><span class="token punctuation">(</span><span class="token class-name">WebSettings<span class="token punctuation">.</span>LayoutAlgorithm</span><span class="token punctuation">.</span><span class="token constant">NORMAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 是否支持Javascript，默认值false</span>settings<span class="token punctuation">.</span><span class="token function">setJavaScriptEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否支持多窗口，默认值false</span>settings<span class="token punctuation">.</span><span class="token function">setSupportMultipleWindows</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 是否可用Javascript(window.open)打开窗口，默认值 false</span>settings<span class="token punctuation">.</span><span class="token function">setJavaScriptCanOpenWindowsAutomatically</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 资源访问</span>settings<span class="token punctuation">.</span><span class="token function">setAllowContentAccess</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否可访问Content Provider的资源，默认值 true</span>settings<span class="token punctuation">.</span><span class="token function">setAllowFileAccess</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 是否可访问本地文件，默认值 true</span><span class="token comment">// 是否允许通过file url加载的Javascript读取本地文件，默认值 false</span>settings<span class="token punctuation">.</span><span class="token function">setAllowFileAccessFromFileURLs</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 是否允许通过file url加载的Javascript读取全部资源(包括文件,http,https)，默认值 false</span>settings<span class="token punctuation">.</span><span class="token function">setAllowUniversalAccessFromFileURLs</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 资源加载</span>settings<span class="token punctuation">.</span><span class="token function">setLoadsImagesAutomatically</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否自动加载图片</span>settings<span class="token punctuation">.</span><span class="token function">setBlockNetworkImage</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 禁止加载网络图片</span>settings<span class="token punctuation">.</span><span class="token function">setBlockNetworkLoads</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 禁止加载所有网络资源</span><span class="token comment">// 缩放(zoom)</span>settings<span class="token punctuation">.</span><span class="token function">setSupportZoom</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 是否支持缩放</span>settings<span class="token punctuation">.</span><span class="token function">setBuiltInZoomControls</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否使用内置缩放机制</span>settings<span class="token punctuation">.</span><span class="token function">setDisplayZoomControls</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 是否显示内置缩放控件</span><span class="token comment">// 默认文本编码，默认值 "UTF-8"</span>settings<span class="token punctuation">.</span><span class="token function">setDefaultTextEncodingName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>settings<span class="token punctuation">.</span><span class="token function">setDefaultFontSize</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 默认文字尺寸，默认值16，取值范围1-72</span>settings<span class="token punctuation">.</span><span class="token function">setDefaultFixedFontSize</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 默认等宽字体尺寸，默认值16</span>settings<span class="token punctuation">.</span><span class="token function">setMinimumFontSize</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 最小文字尺寸，默认值 8</span>settings<span class="token punctuation">.</span><span class="token function">setMinimumLogicalFontSize</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 最小文字逻辑尺寸，默认值 8</span>settings<span class="token punctuation">.</span><span class="token function">setTextZoom</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 文字缩放百分比，默认值 100</span><span class="token comment">// 字体</span>settings<span class="token punctuation">.</span><span class="token function">setStandardFontFamily</span><span class="token punctuation">(</span><span class="token string">"sans-serif"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 标准字体，默认值 "sans-serif"</span>settings<span class="token punctuation">.</span><span class="token function">setSerifFontFamily</span><span class="token punctuation">(</span><span class="token string">"serif"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 衬线字体，默认值 "serif"</span>settings<span class="token punctuation">.</span><span class="token function">setSansSerifFontFamily</span><span class="token punctuation">(</span><span class="token string">"sans-serif"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 无衬线字体，默认值 "sans-serif"</span>settings<span class="token punctuation">.</span><span class="token function">setFixedFontFamily</span><span class="token punctuation">(</span><span class="token string">"monospace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 等宽字体，默认值 "monospace"</span>settings<span class="token punctuation">.</span><span class="token function">setCursiveFontFamily</span><span class="token punctuation">(</span><span class="token string">"cursive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 手写体(草书)，默认值 "cursive"</span>settings<span class="token punctuation">.</span><span class="token function">setFantasyFontFamily</span><span class="token punctuation">(</span><span class="token string">"fantasy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 幻想体，默认值 "fantasy"</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Build</span><span class="token punctuation">.</span><span class="token constant">VERSION</span><span class="token punctuation">.</span><span class="token constant">SDK_INT</span> <span class="token operator">&gt;=</span> <span class="token class-name">Build</span><span class="token punctuation">.</span><span class="token constant">VERSION_CODES</span><span class="token punctuation">.</span><span class="token constant">KITKAT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 用户是否需要通过手势播放媒体(不会自动播放)，默认值 true</span>    settings<span class="token punctuation">.</span><span class="token function">setMediaPlaybackRequiresUserGesture</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Build</span><span class="token punctuation">.</span><span class="token constant">VERSION</span><span class="token punctuation">.</span><span class="token constant">SDK_INT</span> <span class="token operator">&gt;=</span> <span class="token class-name">Build</span><span class="token punctuation">.</span><span class="token constant">VERSION_CODES</span><span class="token punctuation">.</span><span class="token constant">LOLLIPOP</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 5.0以上允许加载http和https混合的页面(5.0以下默认允许，5.0+默认禁止)</span>    settings<span class="token punctuation">.</span><span class="token function">setMixedContentMode</span><span class="token punctuation">(</span><span class="token class-name">WebSettings</span><span class="token punctuation">.</span><span class="token constant">MIXED_CONTENT_ALWAYS_ALLOW</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Build</span><span class="token punctuation">.</span><span class="token constant">VERSION</span><span class="token punctuation">.</span><span class="token constant">SDK_INT</span> <span class="token operator">&gt;=</span> <span class="token class-name">Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>M</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 是否在离开屏幕时光栅化(会增加内存消耗)，默认值 false</span>    settings<span class="token punctuation">.</span><span class="token function">setOffscreenPreRaster</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNetworkConnected</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 根据cache-control决定是否从网络上取数据</span>    settings<span class="token punctuation">.</span><span class="token function">setCacheMode</span><span class="token punctuation">(</span><span class="token class-name">WebSettings</span><span class="token punctuation">.</span><span class="token constant">LOAD_DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">// 没网，离线加载，优先加载缓存(即使已经过期)</span>    settings<span class="token punctuation">.</span><span class="token function">setCacheMode</span><span class="token punctuation">(</span><span class="token class-name">WebSettings</span><span class="token punctuation">.</span><span class="token constant">LOAD_CACHE_ELSE_NETWORK</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// deprecated</span>settings<span class="token punctuation">.</span><span class="token function">setRenderPriority</span><span class="token punctuation">(</span><span class="token class-name">WebSettings<span class="token punctuation">.</span>RenderPriority</span><span class="token punctuation">.</span><span class="token constant">HIGH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>settings<span class="token punctuation">.</span><span class="token function">setDatabasePath</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getDir</span><span class="token punctuation">(</span><span class="token string">"database"</span><span class="token punctuation">,</span> <span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token constant">MODE_PRIVATE</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>settings<span class="token punctuation">.</span><span class="token function">setGeolocationDatabasePath</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getFilesDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="WebViewClient">          <a href="#WebViewClient" class="heading-link"><i class="fas fa-link"></i></a><a href="#WebViewClient" class="headerlink" title="WebViewClient"></a>WebViewClient</h3>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 拦截页面加载，返回true表示宿主app拦截并处理了该url，否则返回false由当前WebView处理</span><span class="token comment">// 此方法在API24被废弃，不处理POST请求</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">shouldOverrideUrlLoading</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 拦截页面加载，返回true表示宿主app拦截并处理了该url，否则返回false由当前WebView处理</span><span class="token comment">// 此方法添加于API24，不处理POST请求，可拦截处理子frame的非http请求</span><span class="token annotation punctuation">@TargetApi</span><span class="token punctuation">(</span><span class="token class-name">Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>N</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">shouldOverrideUrlLoading</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token class-name">WebResourceRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">shouldOverrideUrlLoading</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 此方法废弃于API21，调用于非UI线程</span><span class="token comment">// 拦截资源请求并返回响应数据，返回null时WebView将继续加载资源</span><span class="token keyword">public</span> <span class="token class-name">WebResourceResponse</span> <span class="token function">shouldInterceptRequest</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 此方法添加于API21，调用于非UI线程</span><span class="token comment">// 拦截资源请求并返回数据，返回null时WebView将继续加载资源</span><span class="token annotation punctuation">@TargetApi</span><span class="token punctuation">(</span><span class="token class-name">Build</span><span class="token punctuation">.</span><span class="token constant">VERSION_CODES</span><span class="token punctuation">.</span><span class="token constant">LOLLIPOP</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">WebResourceResponse</span> <span class="token function">shouldInterceptRequest</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token class-name">WebResourceRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">shouldInterceptRequest</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 页面(url)开始加载</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPageStarted</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Bitmap</span> favicon<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 页面(url)完成加载</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPageFinished</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 将要加载资源(url)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLoadResource</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 这个回调添加于API23，仅用于主框架的导航</span><span class="token comment">// 通知应用导航到之前页面时，其遗留的WebView内容将不再被绘制。</span><span class="token comment">// 这个回调可以用来决定哪些WebView可见内容能被安全地回收，以确保不显示陈旧的内容</span><span class="token comment">// 它最早被调用，以此保证WebView.onDraw不会绘制任何之前页面的内容，随后绘制背景色或需要加载的新内容。</span><span class="token comment">// 当HTTP响应body已经开始加载并体现在DOM上将在随后的绘制中可见时，这个方法会被调用。</span><span class="token comment">// 这个回调发生在文档加载的早期，因此它的资源(css,和图像)可能不可用。</span><span class="token comment">// 如果需要更细粒度的视图更新，查看 postVisualStateCallback(long, WebView.VisualStateCallback).</span><span class="token comment">// 请注意这上边的所有条件也支持 postVisualStateCallback(long ,WebView.VisualStateCallback)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPageCommitVisible</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 此方法废弃于API23</span><span class="token comment">// 主框架加载资源时出错</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceivedError</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token keyword">int</span> errorCode<span class="token punctuation">,</span> <span class="token class-name">String</span> description<span class="token punctuation">,</span> <span class="token class-name">String</span> failingUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 此方法添加于API23</span><span class="token comment">// 加载资源时出错，通常意味着连接不到服务器</span><span class="token comment">// 由于所有资源加载错误都会调用此方法，所以此方法应尽量逻辑简单</span><span class="token annotation punctuation">@TargetApi</span><span class="token punctuation">(</span><span class="token class-name">Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>M</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceivedError</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token class-name">WebResourceRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">WebResourceError</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">isForMainFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">onReceivedError</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> error<span class="token punctuation">.</span><span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> error<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 此方法添加于API23</span><span class="token comment">// 在加载资源(iframe,image,js,css,ajax...)时收到了 HTTP 错误(状态码&gt;=400)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceivedHttpError</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token class-name">WebResourceRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">WebResourceResponse</span> errorResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 是否重新提交表单，默认不重发</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFormResubmission</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token class-name">Message</span> dontResend<span class="token punctuation">,</span> <span class="token class-name">Message</span> resend<span class="token punctuation">)</span> <span class="token punctuation">{</span>    dontResend<span class="token punctuation">.</span><span class="token function">sendToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 通知应用可以将当前的url存储在数据库中，意味着当前的访问url已经生效并被记录在内核当中。</span><span class="token comment">// 此方法在网页加载过程中只会被调用一次，网页前进后退并不会回调这个函数。</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doUpdateVisitedHistory</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isReload<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 加载资源时发生了一个SSL错误，应用必需响应(继续请求或取消请求)</span><span class="token comment">// 处理决策可能被缓存用于后续的请求，默认行为是取消请求</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceivedSslError</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token class-name">SslErrorHandler</span> handler<span class="token punctuation">,</span> <span class="token class-name">SslError</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    handler<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 此方法添加于API21，在UI线程被调用</span><span class="token comment">// 处理SSL客户端证书请求，必要的话可显示一个UI来提供KEY。</span><span class="token comment">// 有三种响应方式：proceed()/cancel()/ignore()，默认行为是取消请求</span><span class="token comment">// 如果调用proceed()或cancel()，Webview 将在内存中保存响应结果且对相同的"host:port"不会再次调用 onReceivedClientCertRequest</span><span class="token comment">// 多数情况下，可通过KeyChain.choosePrivateKeyAlias启动一个Activity供用户选择合适的私钥</span><span class="token annotation punctuation">@TargetApi</span><span class="token punctuation">(</span><span class="token class-name">Build</span><span class="token punctuation">.</span><span class="token constant">VERSION_CODES</span><span class="token punctuation">.</span><span class="token constant">LOLLIPOP</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceivedClientCertRequest</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token class-name">ClientCertRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    request<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 处理HTTP认证请求，默认行为是取消请求</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceivedHttpAuthRequest</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token class-name">HttpAuthHandler</span> handler<span class="token punctuation">,</span> <span class="token class-name">String</span> host<span class="token punctuation">,</span> <span class="token class-name">String</span> realm<span class="token punctuation">)</span> <span class="token punctuation">{</span>    handler<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 通知应用有个已授权账号自动登陆了</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceivedLoginRequest</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token class-name">String</span> realm<span class="token punctuation">,</span> <span class="token class-name">String</span> account<span class="token punctuation">,</span> <span class="token class-name">String</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 给应用一个机会处理按键事件</span><span class="token comment">// 如果返回true，WebView不处理该事件，否则WebView会一直处理，默认返回false</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">shouldOverrideKeyEvent</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token class-name">KeyEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 处理未被WebView消费的按键事件</span><span class="token comment">// WebView总是消费按键事件，除非是系统按键或shouldOverrideKeyEvent返回true</span><span class="token comment">// 此方法在按键事件分派时被异步调用</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onUnhandledKeyEvent</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token class-name">KeyEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onUnhandledKeyEvent</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 通知应用页面缩放系数变化</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onScaleChanged</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token keyword">float</span> oldScale<span class="token punctuation">,</span> <span class="token keyword">float</span> newScale<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="WebChromeClient">          <a href="#WebChromeClient" class="heading-link"><i class="fas fa-link"></i></a><a href="#WebChromeClient" class="headerlink" title="WebChromeClient"></a>WebChromeClient</h3>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获得所有访问历史项目的列表，用于链接着色。</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getVisitedHistory</span><span class="token punctuation">(</span><span class="token class-name">ValueCallback</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// &lt;video /&gt; 控件在未播放时，会展示为一张海报图，HTML中可通过它的'poster'属性来指定。</span><span class="token comment">// 如果未指定'poster'属性，则通过此方法提供一个默认的海报图。</span><span class="token keyword">public</span> <span class="token class-name">Bitmap</span> <span class="token function">getDefaultVideoPoster</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 当全屏的视频正在缓冲时，此方法返回一个占位视图(比如旋转的菊花)。</span><span class="token keyword">public</span> <span class="token class-name">View</span> <span class="token function">getVideoLoadingProgressView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 接收当前页面的加载进度</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onProgressChanged</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token keyword">int</span> newProgress<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 接收文档标题</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceivedTitle</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token class-name">String</span> title<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 接收图标(favicon)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceivedIcon</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token class-name">Bitmap</span> icon<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// Android中处理Touch Icon的方案</span><span class="token comment">// http://droidyue.com/blog/2015/01/18/deal-with-touch-icon-in-android/index.html</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceivedTouchIconUrl</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token keyword">boolean</span> precomposed<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 通知应用当前页进入了全屏模式，此时应用必须显示一个包含网页内容的自定义View</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onShowCustomView</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">,</span> <span class="token class-name">CustomViewCallback</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 通知应用当前页退出了全屏模式，此时应用必须隐藏之前显示的自定义View</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onHideCustomView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 显示一个alert对话框</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onJsAlert</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">JsResult</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 显示一个confirm对话框</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onJsConfirm</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">JsResult</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 显示一个prompt对话框</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onJsPrompt</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">String</span> defaultValue<span class="token punctuation">,</span> <span class="token class-name">JsPromptResult</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 显示一个对话框让用户选择是否离开当前页面</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onJsBeforeUnload</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">JsResult</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 指定源的网页内容在没有设置权限状态下尝试使用地理位置API。</span><span class="token comment">// 从API24开始，此方法只为安全的源(https)调用，非安全的源会被自动拒绝</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onGeolocationPermissionsShowPrompt</span><span class="token punctuation">(</span><span class="token class-name">String</span> origin<span class="token punctuation">,</span> <span class="token class-name">GeolocationPermissions<span class="token punctuation">.</span>Callback</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 当前一个调用 onGeolocationPermissionsShowPrompt() 取消时，隐藏相关的UI。</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onGeolocationPermissionsHidePrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 通知应用打开新窗口</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onCreateWindow</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isDialog<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isUserGesture<span class="token punctuation">,</span> <span class="token class-name">Message</span> resultMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 通知应用关闭窗口</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCloseWindow</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> window<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 请求获取取焦点</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onRequestFocus</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 通知应用网页内容申请访问指定资源的权限(该权限未被授权或拒绝)</span><span class="token annotation punctuation">@TargetApi</span><span class="token punctuation">(</span><span class="token class-name">Build</span><span class="token punctuation">.</span><span class="token constant">VERSION_CODES</span><span class="token punctuation">.</span><span class="token constant">LOLLIPOP</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPermissionRequest</span><span class="token punctuation">(</span><span class="token class-name">PermissionRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    request<span class="token punctuation">.</span><span class="token function">deny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 通知应用权限的申请被取消，隐藏相关的UI。</span><span class="token annotation punctuation">@TargetApi</span><span class="token punctuation">(</span><span class="token class-name">Build</span><span class="token punctuation">.</span><span class="token constant">VERSION_CODES</span><span class="token punctuation">.</span><span class="token constant">LOLLIPOP</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPermissionRequestCanceled</span><span class="token punctuation">(</span><span class="token class-name">PermissionRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 为'&lt;input type="file" /&gt;'显示文件选择器，返回false使用默认处理</span><span class="token annotation punctuation">@TargetApi</span><span class="token punctuation">(</span><span class="token class-name">Build</span><span class="token punctuation">.</span><span class="token constant">VERSION_CODES</span><span class="token punctuation">.</span><span class="token constant">LOLLIPOP</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onShowFileChooser</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> webView<span class="token punctuation">,</span> <span class="token class-name">ValueCallback</span><span class="token operator">&lt;</span><span class="token class-name">Uri</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> filePathCallback<span class="token punctuation">,</span> <span class="token class-name">FileChooserParams</span> fileChooserParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 接收JavaScript控制台消息</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onConsoleMessage</span><span class="token punctuation">(</span><span class="token class-name">ConsoleMessage</span> consoleMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="Webview-加载优化">          <a href="#Webview-加载优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#Webview-加载优化" class="headerlink" title="Webview 加载优化"></a>Webview 加载优化</h2>      <ul><li>使用本地资源替代</li></ul><p>可以 将一些资源文件放在本地的 asset s目录, 然后重 写WebViewClient 的 <code>shouldInterceptRequest</code> 方法，对访问地址进行拦截，当 url 地址命中本地配置的url时，使用本地资源替代，否则就使用网络上的资源。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">mWebview<span class="token punctuation">.</span><span class="token function">setWebViewClient</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebViewClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 设置不用系统浏览器打开,</span>    <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">shouldOverrideUrlLoading</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>              view<span class="token punctuation">.</span><span class="token function">loadUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">WebResourceResponse</span> <span class="token function">shouldInterceptRequest</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 如果命中本地资源, 使用本地资源替代      </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mDataHelper<span class="token punctuation">.</span><span class="token function">hasLocalResource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                      <span class="token class-name">WebResourceResponse</span> response <span class="token operator">=</span> mDataHelper<span class="token punctuation">.</span><span class="token function">getReplacedWebResourceResponse</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                              <span class="token keyword">return</span> response<span class="token punctuation">;</span>            <span class="token punctuation">}</span>              <span class="token punctuation">}</span>              <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">shouldInterceptRequest</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>           <span class="token annotation punctuation">@TargetApi</span><span class="token punctuation">(</span><span class="token constant">VERSION_CODES</span><span class="token punctuation">.</span><span class="token constant">LOLLIPOP</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">WebResourceResponse</span> <span class="token function">shouldInterceptRequest</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span><span class="token class-name">WebResourceRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">String</span> url <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>mDataHelper<span class="token punctuation">.</span><span class="token function">hasLocalResource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token class-name">WebResourceResponse</span> response <span class="token operator">=</span>  mDataHelper<span class="token punctuation">.</span><span class="token function">getReplacedWebResourceResponse</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                              <span class="token keyword">return</span> response<span class="token punctuation">;</span>                      <span class="token punctuation">}</span>              <span class="token punctuation">}</span>              <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">shouldInterceptRequest</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>WebView初始化慢，可以在初始化同时先请求数据，让后端和网络不要闲着。</p></li><li><p>后端处理慢，可以让服务器分trunk输出，在后端计算的同时前端也加载网络静态资源。</p></li><li><p>脚本执行慢，就让脚本在最后运行，不阻塞页面解析。</p></li><li><p>同时，合理的预加载、预缓存可以让加载速度的瓶颈更小。</p></li><li><p>WebView初始化慢，就随时初始化好一个WebView待用。</p></li><li><p>DNS和链接慢，想办法复用客户端使用的域名和链接。</p></li><li><p>脚本执行慢，可以把框架代码拆分出来，在请求页面之前就执行好。</p></li></ul><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2017/9a2f8beb.png"></p>        <h2 id="内存泄漏">          <a href="#内存泄漏" class="heading-link"><i class="fas fa-link"></i></a><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2>      <p>直接 new WebView 并传入 application context 代替在 XML 里面声明以防止 activity 引用被滥用，能解决90+%的 WebView 内存泄漏。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">vWeb <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">WebView</span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>container<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>vWeb<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>销毁 WebView</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>vWeb <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vWeb<span class="token punctuation">.</span><span class="token function">setWebViewClient</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vWeb<span class="token punctuation">.</span><span class="token function">setWebChromeClient</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vWeb<span class="token punctuation">.</span><span class="token function">loadDataWithBaseURL</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"text/html"</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vWeb<span class="token punctuation">.</span><span class="token function">clearHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ViewGroup</span><span class="token punctuation">)</span> vWeb<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeView</span><span class="token punctuation">(</span>vWeb<span class="token punctuation">)</span><span class="token punctuation">;</span>    vWeb<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vWeb <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>知识汇总</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络基础</title>
    <link href="/2023/08/31/docs/android/zhi-shi-hui-zong/ji-suan-ji-wang-luo-ji-chu/"/>
    <url>/2023/08/31/docs/android/zhi-shi-hui-zong/ji-suan-ji-wang-luo-ji-chu/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%9A%84%E5%88%86%E5%B1%82%E7%BB%93%E6%9E%84">网络体系的分层结构</a></li><li><a href="#http-%E7%9B%B8%E5%85%B3">HTTP 相关</a><ul><li><a href="#%E9%80%9A%E7%94%A8%E5%A4%B4%E9%83%A8">通用头部</a></li><li><a href="#%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87">请求报文</a><ul><li><a href="#%E8%AF%B7%E6%B1%82%E8%A1%8C">请求行</a><ul><li><a href="#%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95">请求方法</a></li></ul></li><li><a href="#%E8%AF%B7%E6%B1%82%E5%A4%B4">请求头</a></li><li><a href="#%E8%AF%B7%E6%B1%82%E4%BD%93">请求体</a></li></ul></li><li><a href="#%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87">响应报文</a><ul><li><a href="#%E5%B8%B8%E8%A7%81%E7%8A%B6%E6%80%81%E7%A0%81">常见状态码</a></li><li><a href="#%E5%93%8D%E5%BA%94%E5%A4%B4">响应头</a></li></ul></li><li><a href="#%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6">缓存机制</a></li><li><a href="#http-11">HTTP 1.1</a></li><li><a href="#http-20">HTTP 2.0</a></li><li><a href="#https">HTTPS</a><ul><li><a href="#%E5%8A%A0%E5%AF%86%E5%8E%9F%E7%90%86">加密原理</a></li></ul></li></ul></li><li><a href="#tcpip">TCP/IP</a><ul><li><a href="#%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B">三次握手</a></li><li><a href="#%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B">四次挥手</a></li><li><a href="#tcp-%E4%B8%8E-udp-%E7%9A%84%E5%8C%BA%E5%88%AB">TCP 与 UDP 的区别</a></li></ul></li><li><a href="#socket">Socket</a><ul><li><a href="#%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B">使用示例</a></li></ul></li></ul>        <h1 id="网络体系的分层结构">          <a href="#网络体系的分层结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#网络体系的分层结构" class="headerlink" title="网络体系的分层结构"></a>网络体系的分层结构</h1>      <div class="table-container"><table><thead><tr><th>分层</th><th>说明</th></tr></thead><tbody><tr><td>应用层（HTTP、FTP、DNS、SMTP 等）</td><td>定义了如何包装和解析数据，应用层是 http 协议的话，则会按照协议规定包装数据，如按照请求行、请求头、请求体包装，包装好数据后将数据传至运输层</td></tr><tr><td>运输层（TCP、UDP 等）</td><td>运输层有 TCP 和 UDP 两种，分别对应可靠和不可靠的运输。在这一层，一般都是和 Socket 打交道，Socket 是一组封装的编程调用接口，通过它，我们就能操作 TCP、UDP 进行连接的建立等。这一层指定了把数据送到对应的端口号</td></tr><tr><td>网络层（IP 等）</td><td>这一层IP协议，以及一些路由选择协议等等，所以这一层的指定了数据要传输到哪个IP地址。中间涉及到一些最优线路，路由选择算法等</td></tr><tr><td>数据链路层（ARP）</td><td>负责把 IP 地址解析为 MAC 地址，即硬件地址，这样就找到了对应的唯一的机器</td></tr><tr><td>物理层</td><td>提供二进制流传输服务，也就是真正开始通过传输介质（有线、无线）开始进行数据的传输</td></tr></tbody></table></div>        <h1 id="HTTP-相关">          <a href="#HTTP-相关" class="heading-link"><i class="fas fa-link"></i></a><a href="#HTTP-相关" class="headerlink" title="HTTP 相关"></a>HTTP 相关</h1>              <h2 id="通用头部">          <a href="#通用头部" class="heading-link"><i class="fas fa-link"></i></a><a href="#通用头部" class="headerlink" title="通用头部"></a>通用头部</h2>              <h2 id="请求报文">          <a href="#请求报文" class="heading-link"><i class="fas fa-link"></i></a><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h2>      <p>http 请求由三部分组成，分别是：请求行、请求头、请求体</p>        <h3 id="请求行">          <a href="#请求行" class="heading-link"><i class="fas fa-link"></i></a><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3>      <p>请求行以一个方法符号开头，以空格分开，格式如下：<br><strong>Method Request-URI HTTP-Version CRLF</strong> </p><div class="table-container"><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Method</td><td>请求方法如 post/get</td></tr><tr><td>Request-URI</td><td>资源标识符（请求路径）</td></tr><tr><td>HTTP-Version</td><td>请求的HTTP协议版本</td></tr><tr><td>CRLF</td><td>回车和换行（除了作为结尾的CRLF外，不允许出现单独的CR或LF字符）</td></tr></tbody></table></div>        <h4 id="请求方法">          <a href="#请求方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h4>      <ul><li>HTTP 1.0</li></ul><div class="table-container"><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>GET</td><td>请求获取 Request-URI 所标识的资源</td></tr><tr><td>POST</td><td>在 Request-URI 所标识的资源后附加新的数据</td></tr><tr><td>HEAD</td><td>请求获取由 Request-URI 所标识的资源的响应消息报头</td></tr></tbody></table></div><ul><li>HTTP 1.1 新增</li></ul><div class="table-container"><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>PUT</td><td>请求服务器存储一个资源，并用 Request-URI 作为其标识</td></tr><tr><td>DELETE</td><td>请求服务器删除 Request-URI 所标识的资源</td></tr><tr><td>TRACE</td><td>请求服务器回送收到的请求信息，主要用于测试或诊断</td></tr><tr><td>CONNECT</td><td>保留将来使用</td></tr><tr><td>OPTIONS</td><td>请求查询服务器的性能，或者查询与资源相关的选项和需求</td></tr></tbody></table></div><ul><li>GET &amp; POST 的区别</li></ul><div class="table-container"><table><thead><tr><th>区别</th><th>说明</th></tr></thead><tbody><tr><td>数据传输方式</td><td>GET 请求通过 URL 传输数据，而 POST 的数据通过请求体传输。</td></tr><tr><td>安全性</td><td>POST的数据因为在请求主体内，所以有一定的安全性保证，而 GET 的数据在 URL 中，通过历史记录，缓存很容易查到数据信息。</td></tr><tr><td>数据类型不同</td><td>GET只允许 ASCII 字符，而 POST 无限制</td></tr><tr><td>特性</td><td>GET 是安全无害（只读）且幂等（多次提交等于一次提交），而 POST 是非安全非幂等，可能重复提交表单</td></tr></tbody></table></div>        <h3 id="请求头">          <a href="#请求头" class="heading-link"><i class="fas fa-link"></i></a><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3>      <div class="table-container"><table><thead><tr><th>Header</th><th>解释</th><th>示例</th></tr></thead><tbody><tr><td>Accept</td><td>指定客户端能够接收的内容类型</td><td>Accept: text/plain, text/html,application/json</td></tr><tr><td>Accept-Charset</td><td>浏览器可以接受的字符编码集</td><td>Accept-Charset: iso-8859-5</td></tr><tr><td>Accept-Encoding</td><td>指定浏览器可以支持的web服务器返回内容压缩编码类型。</td><td>Accept-Encoding: compress, gzip</td></tr><tr><td>Accept-Language</td><td>浏览器可接受的语言</td><td>Accept-Language: en,zh</td></tr><tr><td>Accept-Ranges</td><td>可以请求网页实体的一个或者多个子范围字段</td><td>Accept-Ranges: bytes</td></tr><tr><td>Authorization</td><td>HTTP授权的授权证书</td><td>Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</td></tr><tr><td>Cache-Control</td><td>指定请求和响应遵循的缓存机制</td><td>Cache-Control: no-cache</td></tr><tr><td>Connection</td><td>表示是否需要持久连接。（HTTP 1.1默认进行持久连接）</td><td>Connection: close</td></tr><tr><td>Cookie</td><td>HTTP请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器。</td><td>Cookie: $Version=1; Skin=new;</td></tr><tr><td>Content-Length</td><td>请求的内容长度</td><td>Content-Length: 348</td></tr><tr><td>Content-Type</td><td>请求的与实体对应的MIME信息</td><td>Content-Type: application/</td></tr><tr><td>Date</td><td>请求发送的日期和时间</td><td>Date: Tue, 15 Nov 2010 08:12:31 GMT</td></tr><tr><td>Expect</td><td>请求的特定的服务器行为</td><td>Expect: 100-continue</td></tr><tr><td>From</td><td>发出请求的用户的Email</td><td>From: <span class="exturl"><a class="exturl__link" href="mailto:user@email.com">user@email.com</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr><tr><td>Host</td><td>指定请求的服务器的域名和端口号</td><td>Host: <span class="exturl"><a class="exturl__link" href="http://www.zcmhi.com/">www.zcmhi.com</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr><tr><td>If-Match</td><td>只有请求内容与实体相匹配才有效</td><td>If-Match: “737060cd8c284d8af7ad3082f209582d”</td></tr><tr><td>If-Modified-Since</td><td>如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回304代码</td><td>If-Modified-Since: Sat, 29 Oct 2010 19:43:31 GMT</td></tr><tr><td>If-None-Match</td><td>如果内容未改变返回304代码，参数为服务器先前发送的Etag，与服务器回应的Etag比较判断是否改变</td><td>If-None-Match: “737060cd8c284d8af7ad3082f209582d”</td></tr><tr><td>If-Range</td><td>如果实体未改变，服务器发送客户端丢失的部分，否则发送整个实体。参数也为Etag</td><td>If-Range: “737060cd8c284d8af7ad3082f209582d”</td></tr><tr><td>If-Unmodified-Since</td><td>只在实体在指定时间之后未被修改才请求成功</td><td>If-Unmodified-Since: Sat, 29 Oct 2010 19:43:31 GMT</td></tr><tr><td>Max-Forwards</td><td>限制信息通过代理和网关传送的时间</td><td>Max-Forwards: 10</td></tr><tr><td>Pragma</td><td>用来包含实现特定的指令</td><td>Pragma: no-cache</td></tr><tr><td>Proxy-Authorization</td><td>连接到代理的授权证书</td><td>Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</td></tr><tr><td>Range</td><td>只请求实体的一部分，指定范围</td><td>Range: bytes=500-999</td></tr><tr><td>Referer</td><td>先前网页的地址，当前请求网页紧随其后,即来路</td><td>Referer: <span class="exturl"><a class="exturl__link" href="http://www.zcmhi.com/archives">http://www.zcmhi.com/archives</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>…</td></tr><tr><td>TE</td><td>客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息</td><td>TE: trailers,deflate;q=0.5</td></tr><tr><td>Upgrade</td><td>向服务器指定某种传输协议以便服务器进行转换（如果支持）</td><td>Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11</td></tr><tr><td>User-Agent</td><td>User-Agent的内容包含发出请求的用户信息</td><td>User-Agent: Mozilla/5.0 (Linux; X11)</td></tr><tr><td>Via</td><td>通知中间网关或代理服务器地址，通信协议</td><td>Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)</td></tr><tr><td>Warning</td><td>关于消息实体的警告信息</td><td>Warn: 199 Miscellaneous warning</td></tr></tbody></table></div>        <h3 id="请求体">          <a href="#请求体" class="heading-link"><i class="fas fa-link"></i></a><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h3>              <h2 id="响应报文">          <a href="#响应报文" class="heading-link"><i class="fas fa-link"></i></a><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h2>      <ul><li>响应报文</li></ul><div class="table-container"><table><thead><tr><th>名称</th><th>组成</th></tr></thead><tbody><tr><td>状态行</td><td>状态码如 200、协议版本等</td></tr><tr><td>响应头</td><td>即返回的 header</td></tr><tr><td>响应体</td><td>响应的正文数据</td></tr></tbody></table></div>        <h3 id="常见状态码">          <a href="#常见状态码" class="heading-link"><i class="fas fa-link"></i></a><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h3>      <p><strong>2XX 成功</strong></p><ul><li>200 OK，表示从客户端发来的请求在服务器端被正确处理</li><li>204 No content，表示请求成功，但响应报文不含实体的主体部分</li><li>206 Partial Content，进行范围请求</li></ul><p><strong>3XX 重定向</strong></p><ul><li>301 moved permanently，永久性重定向，表示资源已被分配了新的 URL</li><li>302 found，临时性重定向，表示资源临时被分配了新的 URL</li><li>303 see other，表示资源存在着另一个 URL，应使用 GET 方法丁香获取资源</li><li>304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况</li><li>307 temporary redirect，临时重定向，和 302 含义相同</li></ul><p><strong>4XX 客户端错误</strong></p><ul><li>400 bad request，请求报文存在语法错误</li><li>401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息</li><li>403 forbidden，表示对请求资源的访问被服务器拒绝</li><li>404 not found，表示在服务器上没有找到请求的资源</li></ul><p><strong>5XX 服务器错误</strong></p><ul><li>500 internal sever error，表示服务器端在执行请求时发生了错误</li><li>503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求</li></ul>        <h3 id="响应头">          <a href="#响应头" class="heading-link"><i class="fas fa-link"></i></a><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h3>              <h2 id="缓存机制">          <a href="#缓存机制" class="heading-link"><i class="fas fa-link"></i></a><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h2>      <p><img src="https://upload-images.jianshu.io/upload_images/1445840-c3465ef477e24416.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/930/format/webp" style=""></p><ul><li>Cache-control 主要包含以下几个字段：</li></ul><div class="table-container"><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>private</td><td>只有客户端可以缓存</td></tr><tr><td>public</td><td>客户端和代理服务器都可以缓存</td></tr><tr><td>max-age</td><td>缓存的过期时间</td></tr><tr><td>no-cache</td><td>需要使用对比缓存来验证缓存数据，如果服务端确认资源没有更新，则返回304，取本地缓存即可，如果有更新，则返回最新的资源。做对比缓存与 Etag 有关。</td></tr><tr><td>no-store</td><td>这个字段打开，则不会进行缓存，也不会取缓存</td></tr></tbody></table></div><ul><li>Etag：当客户端发送第一次请求时服务端会下发当前请求资源的标识码 Etag ，下次再请求时，客户端则会通过 header 里的 If-None-Match 将这个标识码 Etag 带上，服务端将客户端传来的 Etag 与最新的资源 Etag 做对比，如果一样，则表示资源没有更新，返回304。</li></ul>        <h2 id="HTTP-1-1">          <a href="#HTTP-1-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#HTTP-1-1" class="headerlink" title="HTTP 1.1"></a>HTTP 1.1</h2>      <p>对比 1.0，HTTP 1.1 主要区别主要体现在：</p><ul><li><strong>缓存处理</strong>：在 HTTP 1.0 中主要使用 header 里的 If-Modified-Since，Expires 来做为缓存判断的标准，HTTP1.1 则引入了更多的缓存控制策略例如 Entity tag，If-Unmodified-Since, If-Match, If-None-Match 等更多可供选择的缓存头来控制缓存策略。<br></li><li><strong>带宽优化及网络连接的使用</strong>：HTTP1.1 则在请求头引入了 range 头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），避免带宽浪费。<br></li><li><strong>错误通知管理</strong>：HTTP 1.1 新增了 24 个错误状态响应码，410（Gone）表示服务器上的某个资源被永久性的删除。<br></li><li><strong>Host 头处理</strong>：HTTP 1.1 的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。<br></li><li><strong>长连接</strong>：HTTP 1.1 支持长连接和请求的流水线理，在一个 TCP 连接上可以传送多个 HTTP 请求和响应，减少了建立和关闭连接的消耗和延迟，在HTTP1.1中默认开启Connection：keep-alive。</li></ul>        <h2 id="HTTP-2-0">          <a href="#HTTP-2-0" class="heading-link"><i class="fas fa-link"></i></a><a href="#HTTP-2-0" class="headerlink" title="HTTP 2.0"></a>HTTP 2.0</h2>      <p>Okhttp 支持配置使用 HTTP 2.0 协议，HTTP 2.0 相对于 Http1.x 来说提升是巨大的，主要有以下几点：</p><ul><li><strong>二进制格式</strong>：http1.x 是文本协议，而 http2.0 是二进制以帧为基本单位，是一个二进制协议，一帧中除了包含数据外同时还包含该帧的标识：Stream Identifier，即标识了该帧属于哪个 request，使得网络传输变得十分灵活。<br></li><li><strong>多路复用</strong>：多个请求共用一个 TCP 连接，多个请求可以同时在这个 TCP 连接上并发，一个request 对应一个 id。<br></li><li><strong>header 压缩</strong>：HTTP2.0 使用 encoder 来减少需要传输的 header 大小，通讯双方各自cache一份 header fields 表，避免了重复传输，流量消耗，提高效率。<br></li><li><strong>支持服务端推送</strong></li></ul>        <h2 id="HTTPS">          <a href="#HTTPS" class="heading-link"><i class="fas fa-link"></i></a><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2>      <p>HTTP 的端口号是 80，HTTPS 是 443，HTTPS 需要到 CA 申请证书，一般免费证书很少，需要交费</p><p>SSL 的全称是 Secure Sockets Layer，即安全套接层协议，是为网络通信提供安全及数据完整性的一种安全协议。SSL协议在1994年被Netscape发明，后来各个浏览器均支持 SSL，其最新的版本是 3.0</p><p>TLS 的全称是 Transport Layer Security，即安全传输层协议，最新版本的 TLS是 IETF 制定的一种新的协议，它建立在 SSL 3.0 协议规范之上，是SSL 3.0的后续版本。在 TLS 与SSL 3.0 之间存在着显著的差别，主要是它们所支持的加密算法不同，所以 TLS 与 SSL3.0 不能互操作。虽然 TLS 与 SSL 3.0 在加密算法上不同，但在理解 HTTPS 的过程中，可以把 SSL 和 TLS 看做是同一个协议。</p><p>SSL（Secure Sockets Layer 安全套接层)，及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密。</p>        <h3 id="加密原理">          <a href="#加密原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#加密原理" class="headerlink" title="加密原理"></a>加密原理</h3>      <p>HTTPS 为了兼顾安全与效率，同时使用了对称加密和非对称加密。数据是被对称加密传输的，对称加密过程需要客户端的一个密钥，为了确保能把该密钥安全传输到服务器端，采用非对称加密对该密钥进行加密传输，总的来说，对数据进行对称加密，对称加密所要使用的密钥通过非对称加密传输。</p><p><img src="https://upload-images.jianshu.io/upload_images/627325-dc83fef6ac2e6c88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/648/format/webp" style=""></p>        <h1 id="TCP-IP">          <a href="#TCP-IP" class="heading-link"><i class="fas fa-link"></i></a><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h1>      <p>IP（Internet Protocol）协议提供了主机和主机间的通信，为了完成不同主机的通信，我们需要某种方式来唯一标识一台主机，这个标识，就是著名的 IP 地址。通过IP地址，IP 协议就能够帮我们把一个数据包发送给对方。</p><p>TCP 的全称是 Transmission Control Protocol，TCP 协议在 IP 协议提供的主机间通信功能的基础上，完成这两个主机上进程对进程的通信。</p>        <h2 id="三次握手">          <a href="#三次握手" class="heading-link"><i class="fas fa-link"></i></a><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2>      <p>所谓三次握手(Three-way Handshake)，是指建立一个 TCP 连接时，需要客户端和服务器总共发送3个包。</p><p>三次握手的目的是连接服务器指定端口，建立 TCP 连接，并同步连接双方的序列号和确认号，交换 TCP 窗口大小信息。在 socket 编程中，客户端执行 connect() 时。将触发三次握手。</p><p><img src="https://raw.githubusercontent.com/HIT-Alibaba/interview/master/img/tcp-connection-made-three-way-handshake.png"></p><ul><li>第一次握手(SYN=1, seq=x):</li></ul><p>客户端发送一个 TCP 的 SYN 标志位置 1 的包，指明客户端打算连接的服务器的端口，以及初始序号 X，保存在包头的序列号 (Sequence Number) 字段里。</p><p>发送完毕后，客户端进入 <code>SYN_SEND</code> 状态。</p><ul><li>第二次握手(SYN=1, ACK=1, seq=y, ACKnum=x+1):</li></ul><p>服务器发回确认包(ACK)应答。即 SYN 标志位和 ACK 标志位均为 1。服务器端选择自己 ISN 序列号，放到 Seq 域里，同时将确认序号(Acknowledgement Number)设置为客户的 ISN 加1，即 X+1。 发送完毕后，服务器端进入 <code>SYN_RCVD</code> 状态。</p><ul><li>第三次握手(ACK=1，ACKnum=y+1)</li></ul><p>客户端再次发送确认包(ACK)，SYN 标志位为 0，ACK 标志位为 1，并且把服务器发来 ACK 的序号字段 +1，放在确定字段中发送给对方，并且在数据段放写 ISN 的 +1</p><p>发送完毕后，客户端进入 ESTABLISHED 状态，当服务器端接收到这个包时，也进入 ESTABLISHED 状态，TCP 握手结束。</p>        <h2 id="四次挥手">          <a href="#四次挥手" class="heading-link"><i class="fas fa-link"></i></a><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2>      <p>TCP 的连接的拆除需要发送四个包，因此称为四次挥手(Four-way handshake)，也叫做改进的三次握手。客户端或服务器均可主动发起挥手动作，在 socket 编程中，任何一方执行 close() 操作即可产生挥手操作。</p><p><img src="https://raw.githubusercontent.com/HIT-Alibaba/interview/master/img/tcp-connection-closed-four-way-handshake.png"></p><ul><li>第一次挥手(FIN=1，seq=x)</li></ul><p>假设客户端想要关闭连接，客户端发送一个 FIN 标志位置为1的包，表示自己已经没有数据可以发送了，但是仍然可以接受数据。</p><p>发送完毕后，客户端进入 FIN_WAIT_1 状态。</p><ul><li>第二次挥手(ACK=1，ACKnum=x+1)</li></ul><p>服务器端确认客户端的 FIN 包，发送一个确认包，表明自己接受到了客户端关闭连接的请求，但还没有准备好关闭连接。</p><p>发送完毕后，服务器端进入 CLOSE_WAIT 状态，客户端接收到这个确认包之后，进入 FIN_WAIT_2 状态，等待服务器端关闭连接。</p><ul><li>第三次挥手(FIN=1，seq=y)</li></ul><p>服务器端准备好关闭连接时，向客户端发送结束连接请求，FIN 置为1。</p><p>发送完毕后，服务器端进入 LAST_ACK 状态，等待来自客户端的最后一个ACK。</p><ul><li>第四次挥手(ACK=1，ACKnum=y+1)</li></ul><p>客户端接收到来自服务器端的关闭请求，发送一个确认包，并进入 TIME_WAIT状态，等待可能出现的要求重传的 ACK 包。</p><p>服务器端接收到这个确认包之后，关闭连接，进入 CLOSED 状态。</p><p>客户端等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 CLOSED 状态。</p>        <h2 id="TCP-与-UDP-的区别">          <a href="#TCP-与-UDP-的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#TCP-与-UDP-的区别" class="headerlink" title="TCP 与 UDP 的区别"></a>TCP 与 UDP 的区别</h2>      <div class="table-container"><table><thead><tr><th>区别点</th><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>连接性</td><td>面向连接</td><td>无连接</td></tr><tr><td>可靠性</td><td>可靠</td><td>不可靠</td></tr><tr><td>有序性</td><td>有序</td><td>无序</td></tr><tr><td>面向</td><td>字节流</td><td>报文（保留报文的边界）</td></tr><tr><td>有界性</td><td>有界</td><td>无界</td></tr><tr><td>流量控制</td><td>有（滑动窗口）</td><td>无</td></tr><tr><td>拥塞控制</td><td>有（慢开始、拥塞避免、快重传、快恢复）</td><td>无</td></tr><tr><td>传输速度</td><td>慢</td><td>快</td></tr><tr><td>量级</td><td>重量级</td><td>轻量级</td></tr><tr><td>双工性</td><td>全双工</td><td>一对一、一对多、多对一、多对多</td></tr><tr><td>头部</td><td>大（20-60 字节）</td><td>小（8 字节）</td></tr><tr><td>应用</td><td>文件传输、邮件传输、浏览器等</td><td>即时通讯、视频通话等</td></tr></tbody></table></div>        <h1 id="Socket">          <a href="#Socket" class="heading-link"><i class="fas fa-link"></i></a><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1>      <p>Socket 是一组操作 TCP/UDP 的 API，像 HttpURLConnection 和 Okhttp 这种涉及到比较底层的网络请求发送的，最终当然也都是通过 Socket 来进行网络请求连接发送，而像 Volley、Retrofit 则是更上层的封装。</p>        <h2 id="使用示例">          <a href="#使用示例" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2>      <p>使用 socket 的步骤如下：</p><ul><li>创建 ServerSocket 并监听客户连接；</li><li>使用 Socket 连接服务端；</li><li>通过 Socket.getInputStream()/getOutputStream() 获取输入输出流进行通信。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EchoClient</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Socket</span> mSocket<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token class-name">EchoClient</span><span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建 socket 并连接服务器</span>        mSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 和服务端进行通信</span>        <span class="token class-name">Thread</span> readerThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">readResponse</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        readerThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> mSocket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">InputStream</span> in <span class="token operator">=</span> mSocket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> n<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 由于服务端运行在同一主机，这里我们使用 localhost</span>            <span class="token class-name">EchoClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EchoClient</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9877</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            client<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>知识汇总</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android开源库源码分析</title>
    <link href="/2023/08/31/docs/android/zhi-shi-hui-zong/android-kai-yuan-ku-yuan-ma-fen-xi/"/>
    <url>/2023/08/31/docs/android/zhi-shi-hui-zong/android-kai-yuan-ku-yuan-ma-fen-xi/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#OKHttp">OKHttp</a><ul><li><a href="#OKHttp%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B">OKHttp请求流程</a><ul><li><a href="#%E6%96%B0%E5%BB%BAOKHttpClient%E5%AE%A2%E6%88%B7%E7%AB%AF">新建OKHttpClient客户端</a></li><li><a href="#%E5%90%8C%E6%AD%A5%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B">同步请求流程</a></li><li><a href="#%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B">异步请求流程</a></li></ul></li><li><a href="#%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E7%BC%93%E5%AD%98%E5%A4%84%E7%90%86%E4%B9%8BCacheInterceptor">网络请求缓存处理</a></li><li><a href="#ConnectInterceptor%E4%B9%8B%E8%BF%9E%E6%8E%A5%E6%B1%A0">连接池</a></li></ul></li><li><a href="#Retrofit">Retrofit</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B">基本使用流程</a></li><li><a href="#Retrofit%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B">Retrofit构建过程</a><ul><li><a href="#Retrofit%E6%A0%B8%E5%BF%83%E5%AF%B9%E8%B1%A1%E8%A7%A3%E6%9E%90">Retrofit核心对象解析</a></li><li><a href="#Builder%E5%86%85%E9%83%A8%E6%9E%84%E9%80%A0">Builder内部构造</a></li><li><a href="#%E6%B7%BB%E5%8A%A0baseUrl">添加baseUrl</a></li><li><a href="#%E6%B7%BB%E5%8A%A0GsonConverterFactory">添加GsonConverterFactory</a></li><li><a href="#build%E8%BF%87%E7%A8%8B">build过程</a></li></ul></li><li><a href="#%E5%88%9B%E5%BB%BA%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%8E%A5%E5%8F%A3%E5%AE%9E%E4%BE%8B%E8%BF%87%E7%A8%8B">创建网络请求接口实例过程</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%8E%A5%E5%8F%A3%E7%B1%BB%E5%AE%9E%E4%BE%8B%E5%B9%B6%E6%89%A7%E8%A1%8C%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B">创建网络请求接口类实例并执行请求过程</a></li><li><a href="#Retrofit%E6%BA%90%E7%A0%81%E6%B5%81%E7%A8%8B%E5%9B%BE">Retrofit源码流程图</a></li></ul></li><li><a href="#Glide">Glide</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B-1">基本使用流程</a></li><li><a href="#GlideAppwithcontext%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3">GlideApp.with(context)源码详解</a></li><li><a href="#loadurl%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3">load(url)源码详解</a></li><li><a href="#intoiv%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3">into(iv)源码详解</a></li><li><a href="#%E5%AE%8C%E6%95%B4Glide%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B%E5%9B%BE">完整Glide加载流程图</a></li></ul></li><li><a href="#GreenDao">GreenDao</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B-2">基本使用流程</a></li><li><a href="#GreenDao%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90">GreenDao使用流程分析</a><ul><li><a href="#%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%AE%E5%8A%A9%E7%B1%BB%E5%AF%B9%E8%B1%A1DaoMasterDevOpenHelper">创建数据库帮助类对象DaoMaster.DevOpenHelper</a></li><li><a href="#%E5%88%9B%E5%BB%BADaoMaster%E5%AF%B9%E8%B1%A1">创建DaoMaster对象</a></li><li><a href="#%E5%88%9B%E5%BB%BADaoSession%E5%AF%B9%E8%B1%A1">创建DaoSession对象</a></li><li><a href="#%E6%8F%92%E5%85%A5%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">插入源码分析</a></li><li><a href="#%E6%9F%A5%E8%AF%A2%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">查询源码分析</a></li></ul></li><li><a href="#GreenDao%E6%98%AF%E5%A6%82%E4%BD%95%E4%B8%8EReactiveX%E7%BB%93%E5%90%88">GreenDao是如何与ReactiveX结合？</a></li></ul></li><li><a href="#RxJava">RxJava</a><ul><li><a href="#RxJava%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88">RxJava是什么？</a></li><li><a href="#RxJava%E7%9A%84%E8%AE%A2%E9%98%85%E6%B5%81%E7%A8%8B">RxJava的订阅流程</a><ul><li><a href="#%E5%88%9B%E5%BB%BA%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E8%BF%87%E7%A8%8B">创建被观察者过程</a></li><li><a href="#%E8%AE%A2%E9%98%85%E8%BF%87%E7%A8%8B">订阅过程</a></li></ul></li><li><a href="#RxJava%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%88%87%E6%8D%A2">RxJava的线程切换</a></li></ul></li><li><a href="#LeakCanary">LeakCanary</a><ul><li><a href="#%E5%8E%9F%E7%90%86%E6%A6%82%E8%BF%B0">原理概述</a></li><li><a href="#%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B">简单示例</a></li><li><a href="#%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">源码分析</a></li><li><a href="#LeakCanary%E8%BF%90%E4%BD%9C%E6%B5%81%E7%A8%8B">LeakCanary运作流程</a></li></ul></li><li><a href="#ButterKnife">ButterKnife</a><ul><li><a href="#%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B-1">简单示例</a></li><li><a href="#%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-1">源码分析</a><ul><li><a href="#%E6%A8%A1%E6%9D%BF%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90">模板代码解析</a></li><li><a href="#ButterKnife-%E6%98%AF%E6%80%8E%E6%A0%B7%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E7%9A%84">ButterKnife 是怎样实现代码注入的</a></li><li><a href="#ButterKnife%E6%98%AF%E5%A6%82%E4%BD%95%E5%9C%A8%E7%BC%96%E8%AF%91%E6%97%B6%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E7%9A%84">ButterKnife是如何在编译时生成代码的？</a></li></ul></li></ul></li><li><a href="#Dagger-2">Dagger 2</a><ul><li><a href="#%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86">预备知识</a><ul><li><a href="#@Inject">@Inject</a></li><li><a href="#@Module">@Module</a></li><li><a href="#@Singleton">@Singleton</a></li><li><a href="#@Providers">@Providers</a></li><li><a href="#@Component">@Component</a></li><li><a href="#@Scope">@Scope</a></li><li><a href="#@Qualifier">@Qualifier</a></li><li><a href="#dependencies">dependencies</a></li><li><a href="#@SubComponent">@SubComponent</a></li></ul></li><li><a href="#%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B-2">简单示例</a></li><li><a href="#%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-2">源码分析</a></li></ul></li><li><a href="#EventBus">EventBus</a><ul><li><a href="#%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B-3">简单示例</a></li><li><a href="#%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-3">源码分析</a></li></ul></li></ul>        <h1 id="OKHttp">          <a href="#OKHttp" class="heading-link"><i class="fas fa-link"></i></a><a href="#OKHttp" class="headerlink" title="OKHttp"></a>OKHttp</h1>              <h2 id="OKHttp请求流程">          <a href="#OKHttp请求流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#OKHttp请求流程" class="headerlink" title="OKHttp请求流程"></a>OKHttp请求流程</h2>      <p>OKHttp内部的大致请求流程图如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/976154d56c224d96b33b1ca424e935a2~tplv-k3u1fbpfcp-zoom-1.image" alt="image"></p><p>如下为使用OKHttp进行Get请求的步骤：</p><pre class="line-numbers language-none"><code class="language-none">//1.新建OKHttpClient客户端OkHttpClient client = new OkHttpClient();//新建一个Request对象Request request = new Request.Builder()        .url(url)        .build();//2.Response为OKHttp中的响应Response response = client.newCall(request).execute();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="新建OKHttpClient客户端">          <a href="#新建OKHttpClient客户端" class="heading-link"><i class="fas fa-link"></i></a><a href="#新建OKHttpClient客户端" class="headerlink" title="新建OKHttpClient客户端"></a>新建OKHttpClient客户端</h3>      <pre class="line-numbers language-none"><code class="language-none">OkHttpClient client = new OkHttpClient();public OkHttpClient() {    this(new Builder());}OkHttpClient(Builder builder) {    ....}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，OkHttpClient使用了建造者模式，Builder里面的可配置参数如下：</p><pre class="line-numbers language-none"><code class="language-none">public static final class Builder {    Dispatcher dispatcher;// 分发器    @Nullable Proxy proxy;    List&lt;Protocol&gt; protocols;    List&lt;ConnectionSpec&gt; connectionSpecs;// 传输层版本和连接协议    final List&lt;Interceptor&gt; interceptors = new ArrayList&lt;&gt;();// 拦截器    final List&lt;Interceptor&gt; networkInterceptors = new ArrayList&lt;&gt;();    EventListener.Factory eventListenerFactory;    ProxySelector proxySelector;    CookieJar cookieJar;    @Nullable Cache cache;    @Nullable InternalCache internalCache;// 内部缓存    SocketFactory socketFactory;    @Nullable SSLSocketFactory sslSocketFactory;// 安全套接层socket 工厂，用于HTTPS    @Nullable CertificateChainCleaner certificateChainCleaner;// 验证确认响应证书 适用 HTTPS 请求连接的主机名。    HostnameVerifier hostnameVerifier;// 验证确认响应证书 适用 HTTPS 请求连接的主机名。      CertificatePinner certificatePinner;// 证书锁定，使用CertificatePinner来约束哪些认证机构被信任。    Authenticator proxyAuthenticator;// 代理身份验证    Authenticator authenticator;// 身份验证    ConnectionPool connectionPool;// 连接池    Dns dns;    boolean followSslRedirects; // 安全套接层重定向    boolean followRedirects;// 本地重定向    boolean retryOnConnectionFailure;// 重试连接失败    int callTimeout;    int connectTimeout;    int readTimeout;    int writeTimeout;    int pingInterval;    // 这里是默认配置的构建参数    public Builder() {        dispatcher = new Dispatcher();        protocols = DEFAULT_PROTOCOLS;        connectionSpecs = DEFAULT_CONNECTION_SPECS;        ...    }    // 这里传入自己配置的构建参数    Builder(OkHttpClient okHttpClient) {        this.dispatcher = okHttpClient.dispatcher;        this.proxy = okHttpClient.proxy;        this.protocols = okHttpClient.protocols;        this.connectionSpecs = okHttpClient.connectionSpecs;        this.interceptors.addAll(okHttpClient.interceptors);        this.networkInterceptors.addAll(okHttpClient.networkInterceptors);        ...    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="同步请求流程">          <a href="#同步请求流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#同步请求流程" class="headerlink" title="同步请求流程"></a>同步请求流程</h3>      <pre class="line-numbers language-none"><code class="language-none">Response response = client.newCall(request).execute();/*** Prepares the {@code request} to be executed at   some point in the future.*/@Override public Call newCall(Request request) {    return RealCall.newRealCall(this, request, false /* for web socket */);}// RealCall为真正的请求执行者static RealCall newRealCall(OkHttpClient client, Request originalRequest, boolean forWebSocket) {    // Safely publish the Call instance to the EventListener.    RealCall call = new RealCall(client, originalRequest, forWebSocket);    call.eventListener = client.eventListenerFactory().create(call);    return call;}@Override public Response execute() throws IOException {    synchronized (this) {        // 每个Call只能执行一次        if (executed) throw new IllegalStateException("Already Executed");        executed = true;    }    captureCallStackTrace();    timeout.enter();    eventListener.callStart(this);    try {        // 通知dispatcher已经进入执行状态        client.dispatcher().executed(this);        // 通过一系列的拦截器请求处理和响应处理得到最终的返回结果        Response result = getResponseWithInterceptorChain();        if (result == null) throw new IOException("Canceled");        return result;    } catch (IOException e) {        e = timeoutExit(e);        eventListener.callFailed(this, e);        throw e;    } finally {        // 通知 dispatcher 自己已经执行完毕        client.dispatcher().finished(this);    }}Response getResponseWithInterceptorChain() throws IOException {    // Build a full stack of interceptors.    List&lt;Interceptor&gt; interceptors = new ArrayList&lt;&gt;();    // 在配置 OkHttpClient 时设置的 interceptors；    interceptors.addAll(client.interceptors());    // 负责失败重试以及重定向    interceptors.add(retryAndFollowUpInterceptor);    // 请求时，对必要的Header进行一些添加，接收响应时，移除必要的Header    interceptors.add(new BridgeInterceptor(client.cookieJar()));    // 负责读取缓存直接返回、更新缓存    interceptors.add(new CacheInterceptor(client.internalCache()));    // 负责和服务器建立连接    interceptors.add(new ConnectInterceptor(client));    if (!forWebSocket) {        // 配置 OkHttpClient 时设置的 networkInterceptors        interceptors.addAll(client.networkInterceptors());    }    // 负责向服务器发送请求数据、从服务器读取响应数据    interceptors.add(new CallServerInterceptor(forWebSocket));    Interceptor.Chain chain = new RealInterceptorChain(interceptors, null, null, null, 0,        originalRequest, this, eventListener, client.connectTimeoutMillis(),        client.readTimeoutMillis(), client.writeTimeoutMillis());    // 使用责任链模式开启链式调用    return chain.proceed(originalRequest);}// StreamAllocation 对象，它相当于一个管理类，维护了服务器连接、并发流// 和请求之间的关系，该类还会初始化一个 Socket 连接对象，获取输入/输出流对象。public Response proceed(Request request, StreamAllocation streamAllocation, HttpCodec httpCodec,  RealConnection connection) throws IOException {    ...    // Call the next interceptor in the chain.    // 实例化下一个拦截器对应的RealIterceptorChain对象    RealInterceptorChain next = new RealInterceptorChain(interceptors, streamAllocation, httpCodec,        connection, index + 1, request, call, eventListener, connectTimeout, readTimeout,        writeTimeout);    // 得到当前的拦截器    Interceptor interceptor = interceptors.get(index);    // 调用当前拦截器的intercept()方法，并将下一个拦截器的RealIterceptorChain对象传递下去,最后得到响应    Response response = interceptor.intercept(next);    ...        return response;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="异步请求流程">          <a href="#异步请求流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#异步请求流程" class="headerlink" title="异步请求流程"></a>异步请求流程</h3>      <pre class="line-numbers language-none"><code class="language-none">Request request = new Request.Builder()    .url("http://publicobject.com/helloworld.txt")    .build();client.newCall(request).enqueue(new Callback() {    @Override     public void onFailure(Call call, IOException e) {      e.printStackTrace();    }    @Override     public void onResponse(Call call, Response response) throws IOException {        ...    }    void enqueue(AsyncCall call) {    synchronized (this) {        readyAsyncCalls.add(call);    }    promoteAndExecute();}// 正在准备中的异步请求队列private final Deque&lt;AsyncCall&gt; readyAsyncCalls = new ArrayDeque&lt;&gt;();// 运行中的异步请求private final Deque&lt;AsyncCall&gt; runningAsyncCalls = new ArrayDeque&lt;&gt;();// 同步请求private final Deque&lt;RealCall&gt; runningSyncCalls = new ArrayDeque&lt;&gt;();// Promotes eligible calls from {@link #readyAsyncCalls} to {@link #runningAsyncCalls} and runs// them on the executor service. Must not be called with synchronization because executing calls// can call into user code.private boolean promoteAndExecute() {    assert (!Thread.holdsLock(this));    List&lt;AsyncCall&gt; executableCalls = new ArrayList&lt;&gt;();    boolean isRunning;    synchronized (this) {      for (Iterator&lt;AsyncCall&gt; i = readyAsyncCalls.iterator(); i.hasNext(); ) {        AsyncCall asyncCall = i.next();        // 如果其中的runningAsynCalls不满，且call占用的host小于最大数量，则将call加入到runningAsyncCalls中执行，        // 同时利用线程池执行call；否者将call加入到readyAsyncCalls中。        if (runningAsyncCalls.size() &gt;= maxRequests) break; // Max capacity.        if (runningCallsForHost(asyncCall) &gt;= maxRequestsPerHost) continue; // Host max capacity.        i.remove();        executableCalls.add(asyncCall);        runningAsyncCalls.add(asyncCall);      }      isRunning = runningCallsCount() &gt; 0;    }    for (int i = 0, size = executableCalls.size(); i &lt; size; i++) {      AsyncCall asyncCall = executableCalls.get(i);      asyncCall.executeOn(executorService());    }    return isRunning;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，我们在看看AsynCall的代码。</p><pre class="line-numbers language-none"><code class="language-none">final class AsyncCall extends NamedRunnable {    private final Callback responseCallback;    AsyncCall(Callback responseCallback) {      super("OkHttp %s", redactedUrl());      this.responseCallback = responseCallback;    }    String host() {      return originalRequest.url().host();    }    Request request() {      return originalRequest;    }    RealCall get() {      return RealCall.this;    }    /**     * Attempt to enqueue this async call on {@code    executorService}. This will attempt to clean up     * if the executor has been shut down by reporting    the call as failed.     */    void executeOn(ExecutorService executorService) {      assert (!Thread.holdsLock(client.dispatcher()));      boolean success = false;      try {        executorService.execute(this);        success = true;      } catch (RejectedExecutionException e) {        InterruptedIOException ioException = new InterruptedIOException("executor rejected");        ioException.initCause(e);        eventListener.callFailed(RealCall.this, ioException);        responseCallback.onFailure(RealCall.this, ioException);      } finally {        if (!success) {          client.dispatcher().finished(this); // This call is no longer running!        }      }    }    @Override protected void execute() {      boolean signalledCallback = false;      timeout.enter();      try {        // 跟同步执行一样，最后都会调用到这里        Response response = getResponseWithInterceptorChain();        if (retryAndFollowUpInterceptor.isCanceled()) {          signalledCallback = true;          responseCallback.onFailure(RealCall.this, new   IOException("Canceled"));        } else {          signalledCallback = true;          responseCallback.onResponse(RealCall.this,   response);        }      } catch (IOException e) {        e = timeoutExit(e);        if (signalledCallback) {          // Do not signal the callback twice!          Platform.get().log(INFO, "Callback failure   for " + toLoggableString(), e);        } else {          eventListener.callFailed(RealCall.this, e);          responseCallback.onFailure(RealCall.this, e);        }      } finally {        client.dispatcher().finished(this);      }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的源码可以知道，拦截链的处理OKHttp帮我们默认做了五步拦截处理，其中RetryAndFollowUpInterceptor、BridgeInterceptor、CallServerInterceptor内部的源码很简洁易懂，此处不再多说。</p>        <h2 id="网络请求缓存处理之CacheInterceptor">          <a href="#网络请求缓存处理之CacheInterceptor" class="heading-link"><i class="fas fa-link"></i></a><a href="#网络请求缓存处理之CacheInterceptor" class="headerlink" title="网络请求缓存处理之CacheInterceptor"></a>网络请求缓存处理之CacheInterceptor</h2>      <pre class="line-numbers language-none"><code class="language-none">@Override public Response intercept(Chain chain) throws IOException {    // 根据request得到cache中缓存的response    Response cacheCandidate = cache != null        ? cache.get(chain.request())        : null;    long now = System.currentTimeMillis();    // request判断缓存的策略，是否要使用了网络，缓存或两者都使用    CacheStrategy strategy = new CacheStrategy.Factory(now, chain.request(),     cacheCandidate).get();    Request networkRequest = strategy.networkRequest;    Response cacheResponse = strategy.cacheResponse;    if (cache != null) {      cache.trackResponse(strategy);    }    if (cacheCandidate != null &amp;&amp; cacheResponse == null) {      closeQuietly(cacheCandidate.body()); // The cache   candidate wasn't applicable. Close it.    }    // If we're forbidden from using the network and the cache is insufficient, fail.    if (networkRequest == null &amp;&amp; cacheResponse == null) {      return new Response.Builder()          .request(chain.request())          .protocol(Protocol.HTTP_1_1)          .code(504)          .message("Unsatisfiable Request (only-if-cached)")          .body(Util.EMPTY_RESPONSE)          .sentRequestAtMillis(-1L)          .receivedResponseAtMillis(System.currentTimeMillis())          .build();    }    // If we don't need the network, we're done.    if (networkRequest == null) {      return cacheResponse.newBuilder()          .cacheResponse(stripBody(cacheResponse))          .build();    }    Response networkResponse = null;    try {        // 调用下一个拦截器，决定从网络上来得到response        networkResponse = chain.proceed(networkRequest);    } finally {        // If we're crashing on I/O or otherwise,   don't leak the cache body.        if (networkResponse == null &amp;&amp; cacheCandidate != null) {          closeQuietly(cacheCandidate.body());        }    }    // If we have a cache response too, then we're doing a conditional get.    // 如果本地已经存在cacheResponse，那么让它和网络得到的networkResponse做比较，决定是否来更新缓存的cacheResponse    if (cacheResponse != null) {        if (networkResponse.code() == HTTP_NOT_MODIFIED)   {          Response response = cacheResponse.newBuilder()                  .headers(combine(cacheResponse.headers(), networkResponse.headers()))                  .sentRequestAtMillis(networkResponse.sentRequestAtMillis())                  .receivedResponseAtMillis(networkResponse.receivedResponseAtMillis())                  .cacheResponse(stripBody(cacheResponse))                  .networkResponse(stripBody(networkResponse))              .build();          networkResponse.body().close();              // Update the cache after combining headers but before stripping the          // Content-Encoding header (as performed by initContentStream()).          cache.trackConditionalCacheHit();          cache.update(cacheResponse, response);          return response;        } else {          closeQuietly(cacheResponse.body());        }    }    Response response = networkResponse.newBuilder()        .cacheResponse(stripBody(cacheResponse))        .networkResponse(stripBody(networkResponse))        .build();    if (cache != null) {      if (HttpHeaders.hasBody(response) &amp;&amp; CacheStrategy.isCacheable(response,   networkRequest)) {        // Offer this request to the cache.        // 缓存未经缓存过的response        CacheRequest cacheRequest = cache.put(response);        return cacheWritingResponse(cacheRequest, response);      }      if (HttpMethod.invalidatesCache(networkRequest.method())) {        try {          cache.remove(networkRequest);        } catch (IOException ignored) {          // The cache cannot be written.        }      }    }    return response;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缓存拦截器会根据请求的信息和缓存的响应的信息来判断是否存在缓存可用，如果有可以使用的缓存，那么就返回该缓存给用户，否则就继续使用责任链模式来从服务器中获取响应。当获取到响应的时候，又会把响应缓存到磁盘上面。</p>        <h2 id="ConnectInterceptor之连接池">          <a href="#ConnectInterceptor之连接池" class="heading-link"><i class="fas fa-link"></i></a><a href="#ConnectInterceptor之连接池" class="headerlink" title="ConnectInterceptor之连接池"></a>ConnectInterceptor之连接池</h2>      <pre class="line-numbers language-none"><code class="language-none">@Override public Response intercept(Chain chain) throws IOException {    RealInterceptorChain realChain = (RealInterceptorChain) chain;    Request request = realChain.request();    StreamAllocation streamAllocation = realChain.streamAllocation();    // We need the network to satisfy this request.     Possibly for validating a conditional GET.    boolean doExtensiveHealthChecks = !request.method().equals("GET");    // HttpCodec是对 HTTP 协议操作的抽象，有两个实现：Http1Codec和Http2Codec，顾名思义，它们分别对应 HTTP/1.1 和 HTTP/2 版本的实现。在这个方法的内部实现连接池的复用处理    HttpCodec httpCodec = streamAllocation.newStream(client, chain,     doExtensiveHealthChecks);    RealConnection connection = streamAllocation.connection();    return realChain.proceed(request, streamAllocation, httpCodec, connection);}// Returns a connection to host a new stream. This // prefers the existing connection if it exists,// then the pool, finally building a new connection.// 调用 streamAllocation 的 newStream() 方法的时候，最终会经过一系列// 的判断到达 StreamAllocation 中的 findConnection() 方法private RealConnection findConnection(int   connectTimeout, int readTimeout, int writeTimeout,    int pingIntervalMillis, boolean connectionRetryEnabled) throws IOException {      ...          // Attempt to use an already-allocated connection. We need to be careful here because our      // already-allocated connection may have been restricted from creating new streams.      // 尝试使用已分配的连接，已经分配的连接可能已经被限制创建新的流      releasedConnection = this.connection;      // 释放当前连接的资源，如果该连接已经被限制创建新的流，就返回一个Socket以关闭连接      toClose = releaseIfNoNewStreams();      if (this.connection != null) {        // We had an already-allocated connection and it's good.        result = this.connection;        releasedConnection = null;      }      if (!reportedAcquired) {        // If the connection was never reported acquired, don't report it as released!        // 如果该连接从未被标记为获得，不要标记为发布状态，reportedAcquired 通过 acquire()   方法修改        releasedConnection = null;      }          if (result == null) {        // Attempt to get a connection from the pool.        // 尝试供连接池中获取一个连接        Internal.instance.get(connectionPool, address, this, null);        if (connection != null) {          foundPooledConnection = true;          result = connection;        } else {          selectedRoute = route;        }      }    }    // 关闭连接    closeQuietly(toClose);        if (releasedConnection != null) {      eventListener.connectionReleased(call, releasedConnection);    }    if (foundPooledConnection) {      eventListener.connectionAcquired(call, result);    }    if (result != null) {      // If we found an already-allocated or pooled connection, we're done.      // 如果已经从连接池中获取到了一个连接，就将其返回      return result;    }        // If we need a route selection, make one. This   is a blocking operation.    boolean newRouteSelection = false;    if (selectedRoute == null &amp;&amp; (routeSelection == null || !routeSelection.hasNext())) {      newRouteSelection = true;      routeSelection = routeSelector.next();    }        synchronized (connectionPool) {      if (canceled) throw new IOException("Canceled");          if (newRouteSelection) {        // Now that we have a set of IP addresses,   make another attempt at getting a   connection from        // the pool. This could match due to   connection coalescing.         // 根据一系列的 IP地址从连接池中获取一个链接        List&lt;Route&gt; routes = routeSelection.getAll();        for (int i = 0, size = routes.size(); i &lt; size;i++) {          Route route = routes.get(i);          // 从连接池中获取一个连接          Internal.instance.get(connectionPool, address, this, route);          if (connection != null) {            foundPooledConnection = true;            result = connection;            this.route = route;            break;          }        }      }          if (!foundPooledConnection) {        if (selectedRoute == null) {          selectedRoute = routeSelection.next();        }            // Create a connection and assign it to this allocation immediately. This makes it   possible        // for an asynchronous cancel() to interrupt the handshake we're about to do.        // 在连接池中如果没有该连接，则创建一个新的连接，并将其分配，这样我们就可以在握手之前进行终端        route = selectedRoute;        refusedStreamCount = 0;        result = new RealConnection(connectionPool, selectedRoute);        acquire(result, false);      }    }    // If we found a pooled connection on the 2nd time around, we're done.    if (foundPooledConnection) {    // 如果我们在第二次的时候发现了一个池连接，那么我们就将其返回      eventListener.connectionAcquired(call, result);      return result;    }    // Do TCP + TLS handshakes. This is a blocking     operation.     // 进行 TCP 和 TLS 握手    result.connect(connectTimeout, readTimeout, writeTimeout, pingIntervalMillis,      connectionRetryEnabled, call, eventListener);    routeDatabase().connected(result.route());    Socket socket = null;    synchronized (connectionPool) {      reportedAcquired = true;      // Pool the connection.      // 将该连接放进连接池中      Internal.instance.put(connectionPool, result);      // If another multiplexed connection to the same   address was created concurrently, then      // release this connection and acquire that one.      // 如果同时创建了另一个到同一地址的多路复用连接，释放这个连接并获取那个连接      if (result.isMultiplexed()) {        socket = Internal.instance.deduplicate(connectionPool, address, this);        result = connection;      }    }    closeQuietly(socket);    eventListener.connectionAcquired(call, result);    return result;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从以上的源码分析可知：</p><ul><li>判断当前的连接是否可以使用：流是否已经被关闭，并且已经被限制创建新的流；</li><li>如果当前的连接无法使用，就从连接池中获取一个连接；</li><li>连接池中也没有发现可用的连接，创建一个新的连接，并进行握手，然后将其放到连接池中。</li></ul><p>在从连接池中获取一个连接的时候，使用了 Internal 的 get() 方法。Internal 有一个静态的实例，会在 OkHttpClient 的静态代码快中被初始化。我们会在 Internal 的 get() 中调用连接池的 get() 方法来得到一个连接。并且，从中我们明白了连接复用的一个好处就是省去了进行 TCP 和 TLS 握手的一个过程。因为建立连接本身也是需要消耗一些时间的，连接被复用之后可以提升我们网络访问的效率。</p><p>接下来详细分析下ConnectionPool是如何实现连接管理的。</p><p>OkHttp 的缓存管理分成两个步骤，一边当我们创建了一个新的连接的时候，我们要把它放进缓存里面；另一边，我们还要来对缓存进行清理。在 ConnectionPool 中，当我们向连接池中缓存一个连接的时候，只要调用双端队列的 add() 方法，将其加入到双端队列即可，而清理连接缓存的操作则交给线程池来定时执行。</p><pre class="line-numbers language-none"><code class="language-none">private final Deque&lt;RealConnection&gt; connections = new ArrayDeque&lt;&gt;();void put(RealConnection connection) {assert (Thread.holdsLock(this));    if (!cleanupRunning) {      cleanupRunning = true;      // 使用线程池执行清理任务      executor.execute(cleanupRunnable);    }    // 将新建的连接插入到双端队列中    connections.add(connection);} private final Runnable cleanupRunnable = new Runnable() {@Override public void run() {    while (true) {        // 内部调用 cleanup() 方法来清理无效的连接        long waitNanos = cleanup(System.nanoTime());        if (waitNanos == -1) return;        if (waitNanos &gt; 0) {          long waitMillis = waitNanos / 1000000L;          waitNanos -= (waitMillis * 1000000L);          synchronized (ConnectionPool.this) {            try {              ConnectionPool.this.wait(waitMillis, (int) waitNanos);            } catch (InterruptedException ignored) {            }          }        }    }};long cleanup(long now) {    int inUseConnectionCount = 0;    int idleConnectionCount = 0;    RealConnection longestIdleConnection = null;    long longestIdleDurationNs = Long.MIN_VALUE;    // Find either a connection to evict, or the time that the next eviction is due.    synchronized (this) {        // 遍历所有的连接        for (Iterator&lt;RealConnection&gt; i = connections.iterator(); i.hasNext(); ) {          RealConnection connection = i.next();              // If the connection is in use, keep     searching.          // 遍历所有的连接          if (pruneAndGetAllocationCount(connection, now) &gt; 0) {            inUseConnectionCount++;            continue;          }              idleConnectionCount++;              // If the connection is ready to be     evicted,     we're done.          // 如果找到了一个可以被清理的连接，会尝试去寻找闲置时间最久的连接来释放          long idleDurationNs = now - connection.idleAtNanos;          if (idleDurationNs &gt; longestIdleDurationNs) {            longestIdleDurationNs = idleDurationNs;            longestIdleConnection = connection;          }        }            // maxIdleConnections 表示最大允许的闲置的连接的数量,keepAliveDurationNs表示连接允许存活的最长的时间。        // 默认空闲连接最大数目为5个，keepalive 时间最长为5分钟。        if (longestIdleDurationNs &gt;= this.keepAliveDurationNs            || idleConnectionCount &gt; this.maxIdleConnections) {          // We've found a connection to evict. Remove it from the list, then close it     below (outside          // of the synchronized block).          // 该连接的时长超出了最大的活跃时长或者闲置的连接数量超出了最大允许的范围，直接移除          connections.remove(longestIdleConnection);        } else if (idleConnectionCount &gt; 0) {          // A connection will be ready to evict soon.          // 闲置的连接的数量大于0，停顿指定的时间（等会儿会将其清理掉，现在还不是时候）          return keepAliveDurationNs - longestIdleDurationNs;        } else if (inUseConnectionCount &gt; 0) {          // All connections are in use. It'll be at least the keep alive duration 'til we run again.          // 所有的连接都在使用中，5分钟后再清理          return keepAliveDurationNs;        } else {          // No connections, idle or in use.           // 没有连接          cleanupRunning = false;          return -1;      }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从以上的源码分析可知，首先会对缓存中的连接进行遍历，以寻找一个闲置时间最长的连接，然后根据该连接的闲置时长和最大允许的连接数量等参数来决定是否应该清理该连接。同时注意上面的方法的返回值是一个时间，如果闲置时间最长的连接仍然需要一段时间才能被清理的时候，会返回这段时间的时间差，然后会在这段时间之后再次对连接池进行清理。</p><blockquote><p>经过上面对OKHttp内部工作机制的一系列分析，相信你已经对OKHttp已经有了一个比较深入的了解了。首先，我们会在请求的时候初始化一个Call的实例，然后执行它的execute()方法或enqueue()方法，内部最后都会执行到getResponseWithInterceptorChain()方法，这个方法里面通过拦截器组成的责任链，依次经过用户自定义普通拦截器、重试拦截器、桥接拦截器、缓存拦截器、连接拦截器和用户自定义网络拦截器以及访问服务器拦截器等拦截处理过程，来获取到一个响应并交给用户。</p><p>其中，除了OKHttp的内部请求流程这点之外，缓存和连接这两部分内容也是两个很重要的点，相信经过讲解，大家对这三部分重点内容已经有了自己的理解。</p></blockquote>        <h1 id="Retrofit">          <a href="#Retrofit" class="heading-link"><i class="fas fa-link"></i></a><a href="#Retrofit" class="headerlink" title="Retrofit"></a>Retrofit</h1>              <h2 id="基本使用流程">          <a href="#基本使用流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本使用流程" class="headerlink" title="基本使用流程"></a>基本使用流程</h2>              <h3 id="定义HTTP-API，用于描述请求">          <a href="#定义HTTP-API，用于描述请求" class="heading-link"><i class="fas fa-link"></i></a><a href="#定义HTTP-API，用于描述请求" class="headerlink" title="定义HTTP API，用于描述请求"></a>定义HTTP API，用于描述请求</h3>      <pre class="line-numbers language-none"><code class="language-none">public interface GitHubService {     @GET("users/{user}/repos")     Call&lt;List&lt;Repo&gt;&gt; listRepos(@Path("user") String user);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="创建Retrofit并生成API的实现">          <a href="#创建Retrofit并生成API的实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建Retrofit并生成API的实现" class="headerlink" title="创建Retrofit并生成API的实现"></a>创建Retrofit并生成API的实现</h3>      <blockquote><p>（<strong>注意：</strong> 方法上面的注解表示请求的接口部分，返回类型是请求的返回值类型，方法的参数即是请求的参数）</p></blockquote><pre class="line-numbers language-none"><code class="language-none">// 1.Retrofit构建过程Retrofit retrofit = new Retrofit.Builder().baseUrl("https://api.github.com/").build();// 2.创建网络请求接口类实例过程GitHubService service = retrofit.create(GitHubService.class);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="调用API方法，生成Call，执行请求">          <a href="#调用API方法，生成Call，执行请求" class="heading-link"><i class="fas fa-link"></i></a><a href="#调用API方法，生成Call，执行请求" class="headerlink" title="调用API方法，生成Call，执行请求"></a>调用API方法，生成Call，执行请求</h3>      <pre class="line-numbers language-none"><code class="language-none">// 3.生成并执行请求过程Call&lt;List&lt;Repo&gt;&gt; repos = service.listRepos("octocat");repos.execute() or repos.enqueue()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Retrofit的基本使用流程很简洁，但是简洁并不代表简单，Retrofit为了实现这种简洁的使用流程，内部使用了优秀的架构设计和大量的设计模式，在分析过Retrofit最新版的源码和大量优秀的Retrofit源码分析文章后发现，要想真正理解Retrofit内部的核心源码流程和设计思想，首先，需要对这九大设计模式有一定的了解，如下：</p><pre class="line-numbers language-none"><code class="language-none">1.Retrofit构建过程 建造者模式、工厂方法模式2.创建网络请求接口实例过程外观模式、代理模式、单例模式、策略模式、装饰模式（建造者模式）3.生成并执行请求过程适配器模式（代理模式、装饰模式）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其次，需要对OKHttp源码有一定的了解。让我们按以上流程去深入Retrofit源码内部，领悟它带给我们的<strong>设计之美</strong>。</p>        <h2 id="Retrofit构建过程">          <a href="#Retrofit构建过程" class="heading-link"><i class="fas fa-link"></i></a><a href="#Retrofit构建过程" class="headerlink" title="Retrofit构建过程"></a>Retrofit构建过程</h2>              <h3 id="Retrofit核心对象解析">          <a href="#Retrofit核心对象解析" class="heading-link"><i class="fas fa-link"></i></a><a href="#Retrofit核心对象解析" class="headerlink" title="Retrofit核心对象解析"></a>Retrofit核心对象解析</h3>      <p>首先Retrofit中有一个全局变量非常关键，在V2.5之前的版本，使用的是LinkedHashMap()，它是一个网络请求配置对象，是由网络请求接口中方法注解进行解析后得到的。</p><pre class="line-numbers language-none"><code class="language-none">public final class Retrofit {    // 网络请求配置对象，存储网络请求相关的配置，如网络请求的方法、数据转换器、网络请求适配器、网络请求工厂、基地址等    private final Map&lt;Method, ServiceMethod&lt;?&gt;&gt; serviceMethodCache = new ConcurrentHashMap&lt;&gt;();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Retrofit使用了建造者模式通过内部类Builder类建立一个Retrofit实例，如下：</p><pre class="line-numbers language-none"><code class="language-none">public static final class Builder {    // 平台类型对象（Platform -&gt; Android)    private final Platform platform;    // 网络请求工厂，默认使用OkHttpCall（工厂方法模式）    private @Nullable okhttp3.Call.Factory callFactory;    // 网络请求的url地址    private @Nullable HttpUrl baseUrl;    // 数据转换器工厂的集合    private final List&lt;Converter.Factory&gt; converterFactories = new ArrayList&lt;&gt;();    // 网络请求适配器工厂的集合，默认是ExecutorCallAdapterFactory    private final List&lt;CallAdapter.Factory&gt; callAdapterFactories = new ArrayList&lt;&gt;();    // 回调方法执行器，在 Android 上默认是封装了 handler 的 MainThreadExecutor, 默认作用是：切换线程（子线程 -&gt; 主线程）    private @Nullable Executor callbackExecutor;    // 一个开关，为true则会缓存创建的ServiceMethod    private boolean validateEagerly;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="Builder内部构造">          <a href="#Builder内部构造" class="heading-link"><i class="fas fa-link"></i></a><a href="#Builder内部构造" class="headerlink" title="Builder内部构造"></a>Builder内部构造</h3>      <p>下面看看Builder内部构造做了什么。</p><pre class="line-numbers language-none"><code class="language-none">public static final class Builder {    ...        Builder(Platform platform) {        this.platform = platform;    }        public Builder() {        this(Platform.get());    }        ...    }class Platform {    private static final Platform PLATFORM = findPlatform();        static Platform get() {      return PLATFORM;    }        private static Platform findPlatform() {      try {        // 使用JVM加载类的方式判断是否是Android平台        Class.forName("android.os.Build");        if (Build.VERSION.SDK_INT != 0) {          return new Android();        }      } catch (ClassNotFoundException ignored) {      }      try {        // 同时支持Java平台        Class.forName("java.util.Optional");        return new Java8();      } catch (ClassNotFoundException ignored) {      }      return new Platform();    }static class Android extends Platform {    ...        @Override public Executor defaultCallbackExecutor() {        //切换线程（子线程 -&gt; 主线程）        return new MainThreadExecutor();    }    // 创建默认的网络请求适配器工厂，如果是Android7.0或Java8上，则使    // 用了并发包中的CompletableFuture保证了回调的同步    // 在Retrofit中提供了四种CallAdapterFactory(策略模式)：    // ExecutorCallAdapterFactory（默认）、GuavaCallAdapterFactory、    // va8CallAdapterFactory、RxJavaCallAdapterFactory    @Override List&lt;? extends CallAdapter.Factory&gt; defaultCallAdapterFactories(        @Nullable Executor callbackExecutor) {      if (callbackExecutor == null) throw new AssertionError();      ExecutorCallAdapterFactory executorFactory = new   ExecutorCallAdapterFactory(callbackExecutor);      return Build.VERSION.SDK_INT &gt;= 24        ? asList(CompletableFutureCallAdapterFactory.INSTANCE, executorFactory)        : singletonList(executorFactory);    }        ...    @Override List&lt;? extends Converter.Factory&gt; defaultConverterFactories() {      return Build.VERSION.SDK_INT &gt;= 24          ? singletonList(OptionalConverterFactory.INSTANCE)          : Collections.&lt;Converter.Factory&gt;emptyList();    }    ...        static class MainThreadExecutor implements Executor {            // 获取Android 主线程的Handler         private final Handler handler = new Handler(Looper.getMainLooper());        @Override public void execute(Runnable r) {                    // 在UI线程对网络请求返回数据处理            handler.post(r);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，在Builder内部构造时设置了默认Platform、callAdapterFactories和callbackExecutor。</p>        <h3 id="添加baseUrl">          <a href="#添加baseUrl" class="heading-link"><i class="fas fa-link"></i></a><a href="#添加baseUrl" class="headerlink" title="添加baseUrl"></a>添加baseUrl</h3>      <p>很简单，就是将String类型的url转换为OkHttp的HttpUrl过程如下：</p><pre class="line-numbers language-none"><code class="language-none">/** * Set the API base URL. * * @see #baseUrl(HttpUrl) */public Builder baseUrl(String baseUrl) {    checkNotNull(baseUrl, "baseUrl == null");    return baseUrl(HttpUrl.get(baseUrl));}public Builder baseUrl(HttpUrl baseUrl) {    checkNotNull(baseUrl, "baseUrl == null");    List&lt;String&gt; pathSegments = baseUrl.pathSegments();    if (!"".equals(pathSegments.get(pathSegments.size() - 1))) {      throw new IllegalArgumentException("baseUrl must end in /: " + baseUrl);    }    this.baseUrl = baseUrl;    return this;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="添加GsonConverterFactory">          <a href="#添加GsonConverterFactory" class="heading-link"><i class="fas fa-link"></i></a><a href="#添加GsonConverterFactory" class="headerlink" title="添加GsonConverterFactory"></a>添加GsonConverterFactory</h3>      <p>首先，看到GsonConverterFactory.creat()的源码。</p><pre class="line-numbers language-none"><code class="language-none">public final class GsonConverterFactory extends Converter.Factory {     public static GsonConverterFactory create() {        return create(new Gson());    }            public static GsonConverterFactory create(Gson gson) {        if (gson == null) throw new NullPointerException("gson ==   null");        return new GsonConverterFactory(gson);    }        private final Gson gson;        // 创建了一个含有Gson对象实例的GsonConverterFactory    private GsonConverterFactory(Gson gson) {        this.gson = gson;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，看看addConverterFactory()方法内部。</p><pre class="line-numbers language-none"><code class="language-none">public Builder addConverterFactory(Converter.Factory factory) {    converterFactories.add(checkNotNull(factory, "factory null"));    return this;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可知，这一步是将一个含有Gson对象实例的GsonConverterFactory放入到了数据转换器工厂converterFactories里。</p>        <h3 id="build过程">          <a href="#build过程" class="heading-link"><i class="fas fa-link"></i></a><a href="#build过程" class="headerlink" title="build过程"></a>build过程</h3>      <pre class="line-numbers language-none"><code class="language-none">public Retrofit build() {    if (baseUrl == null) {      throw new IllegalStateException("Base URL required.");    }        okhttp3.Call.Factory callFactory = this.callFactory;    if (callFactory == null) {        // 默认使用okhttp         callFactory = new OkHttpClient();    }        Executor callbackExecutor = this.callbackExecutor;    if (callbackExecutor == null) {        // Android默认的callbackExecutor        callbackExecutor = platform.defaultCallbackExecutor();    }        // Make a defensive copy of the adapters and add the defaultCall adapter.    List&lt;CallAdapter.Factory&gt; callAdapterFactories = new ArrayList&lt;&gt;(this.callAdapterFactories);    // 添加默认适配器工厂在集合尾部    callAdapterFactories.addAll(platform.defaultCallAdapterFactorisca  llbackExecutor));        // Make a defensive copy of the converters.    List&lt;Converter.Factory&gt; converterFactories = new ArrayList&lt;&gt;(        1 + this.converterFactories.size() + platform.defaultConverterFactoriesSize());    // Add the built-in converter factory first. This prevents overriding its behavior but also    // ensures correct behavior when using converters thatconsumeall types.    converterFactories.add(new BuiltInConverters());    converterFactories.addAll(this.converterFactories);    converterFactories.addAll(platform.defaultConverterFactories();        return new Retrofit(callFactory, baseUrl, unmodifiableList(converterFactories),        unmodifiableList(callAdapterFactories), callbackExecutor, validateEagerly);        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，最终我们在Builder类中看到的6大核心对象都已经配置到Retrofit对象中了。</p>        <h2 id="创建网络请求接口实例过程">          <a href="#创建网络请求接口实例过程" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建网络请求接口实例过程" class="headerlink" title="创建网络请求接口实例过程"></a>创建网络请求接口实例过程</h2>      <p>retrofit.create()使用了外观模式和代理模式创建了网络请求的接口实例，我们分析下create方法。</p><pre class="line-numbers language-none"><code class="language-none">public &lt;T&gt; T create(final Class&lt;T&gt; service) {    Utils.validateServiceInterface(service);    if (validateEagerly) {        // 判断是否需要提前缓存ServiceMethod对象        eagerlyValidateMethods(service);    }        // 使用动态代理拿到请求接口所有注解配置后，创建网络请求接口实例    return (T) Proxy.newProxyInstance(service.getClassLoader(), new  Class&lt;?&gt;[] { service },        new InvocationHandler() {          private final Platform platform = Platform.get();          private final Object[] emptyArgs = new Object[0];          @Override public Object invoke(Object proxy, Method method, @Nullable Object[] args)              throws Throwable {            // If the method is a method from Object then defer to normal invocation.            if (method.getDeclaringClass() == Object.class) {              return method.invoke(this, args);            }            if (platform.isDefaultMethod(method)) {              return platform.invokeDefaultMethod(method, service, proxy, args);            }            return loadServiceMethod(method).invoke(args != null ? args : emptyArgs);          }    }); }private void eagerlyValidateMethods(Class&lt;?&gt; service) {  Platform platform = Platform.get();  for (Method method : service.getDeclaredMethods()) {    if (!platform.isDefaultMethod(method)) {      loadServiceMethod(method);    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续看看loadServiceMethod的内部流程</p><pre class="line-numbers language-none"><code class="language-none">ServiceMethod&lt;?&gt; loadServiceMethod(Method method) {    ServiceMethod&lt;?&gt; result = serviceMethodCache.get(method);    if (result != null) return result;    synchronized (serviceMethodCache) {      result = serviceMethodCache.get(method);      if (result == null) {            // 解析注解配置得到了ServiceMethod            result = ServiceMethod.parseAnnotations(this, method);            // 可以看到，最终加入到ConcurrentHashMap缓存中            serviceMethodCache.put(method, result);      }    }    return result;}abstract class ServiceMethod&lt;T&gt; {  static &lt;T&gt; ServiceMethod&lt;T&gt; parseAnnotations(Retrofit retrofit, Method   method) {        // 通过RequestFactory解析注解配置（工厂模式、内部使用了建造者模式）        RequestFactory requestFactory = RequestFactory.parseAnnotations(retrofit, method);            Type returnType = method.getGenericReturnType();        if (Utils.hasUnresolvableType(returnType)) {          throw methodError(method,              "Method return type must not include a type variable or wildcard: %s", returnType);        }        if (returnType == void.class) {          throw methodError(method, "Service methods cannot return void.");        }            // 最终是通过HttpServiceMethod构建的请求方法        return HttpServiceMethod.parseAnnotations(retrofit, method, requestFactory);    }    abstract T invoke(Object[] args);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="请求构造核心流程">          <a href="#请求构造核心流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#请求构造核心流程" class="headerlink" title="请求构造核心流程"></a>请求构造核心流程</h3>      <p>根据RequestFactory#Builder构造方法和parseAnnotations方法的源码，可知的它的作用就是用来解析注解配置的。</p><pre class="line-numbers language-none"><code class="language-none">Builder(Retrofit retrofit, Method method) {    this.retrofit = retrofit;    this.method = method;    // 获取网络请求接口方法里的注释    this.methodAnnotations = method.getAnnotations();    // 获取网络请求接口方法里的参数类型           this.parameterTypes = method.getGenericParameterTypes();    // 获取网络请求接口方法里的注解内容        this.parameterAnnotationsArray = method.getParameterAnnotations();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着看HttpServiceMethod.parseAnnotations()的内部流程。</p><pre class="line-numbers language-none"><code class="language-none">static &lt;ResponseT, ReturnT&gt; HttpServiceMethod&lt;ResponseT, ReturnT&gt; parseAnnotations(      Retrofit retrofit, Method method, RequestFactory requestFactory) {            //1.根据网络请求接口方法的返回值和注解类型，    // 从Retrofit对象中获取对应的网络请求适配器    CallAdapter&lt;ResponseT, ReturnT&gt; callAdapter = createCallAdapter(retrofit,method);        // 得到响应类型    Type responseType = callAdapter.responseType();        ...    //2.根据网络请求接口方法的返回值和注解类型从Retrofit对象中获取对应的数据转换器     Converter&lt;ResponseBody, ResponseT&gt;responseConverter =        createResponseConverter(retrofit,method, responseType);    okhttp3.Call.Factory callFactory = retrofit.callFactory;        return newHttpServiceMethod&lt;&gt;(requestFactory, callFactory, callAdapter,responseConverter);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h4 id="createCallAdapter-retrofit-method">          <a href="#createCallAdapter-retrofit-method" class="heading-link"><i class="fas fa-link"></i></a><a href="#createCallAdapter-retrofit-method" class="headerlink" title="createCallAdapter(retrofit, method)"></a>createCallAdapter(retrofit, method)</h4>      <pre class="line-numbers language-none"><code class="language-none">private static &lt;ResponseT, ReturnT&gt; CallAdapter&lt;ResponseT, ReturnT&gt;     createCallAdapter(      Retrofit retrofit, Method method) {          // 获取网络请求接口里方法的返回值类型    Type returnType = method.getGenericReturnType();        // 获取网络请求接口接口里的注解    Annotation[] annotations = method.getAnnotations();    try {      //noinspection unchecked      return (CallAdapter&lt;ResponseT, ReturnT&gt;)  retrofit.callAdapter(returnType, annotations);    } catch (RuntimeException e) { // Wide exception range because factories are user code.      throw methodError(method, e, "Unable to create call adapter for %s", returnType);    }}  public CallAdapter&lt;?, ?&gt; callAdapter(Type returnType, Annotation[] annotations) {    return nextCallAdapter(null, returnType, annotations);}public CallAdapter&lt;?, ?&gt; nextCallAdapter(@Nullable CallAdapter.Factory skipPast, Type returnType,  Annotation[] annotations) {    ...    int start = callAdapterFactories.indexOf(skipPast) + 1;    // 遍历 CallAdapter.Factory 集合寻找合适的工厂    for (int i = start, count = callAdapterFactories.size(); i &lt;count; i++) {        CallAdapter&lt;?, ?&gt; adapter = callAdapterFactories.get(i).get(returnType, annotations, this);        if (adapter != null) {          return adapter;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h4 id="createResponseConverter-Retrofit-retrofit-Method-method-Type-responseType">          <a href="#createResponseConverter-Retrofit-retrofit-Method-method-Type-responseType" class="heading-link"><i class="fas fa-link"></i></a><a href="#createResponseConverter-Retrofit-retrofit-Method-method-Type-responseType" class="headerlink" title="createResponseConverter(Retrofit retrofit, Method method, Type responseType)"></a>createResponseConverter(Retrofit retrofit, Method method, Type responseType)</h4>      <pre class="line-numbers language-none"><code class="language-none"> private static &lt;ResponseT&gt; Converter&lt;ResponseBody, ResponseT&gt;  createResponseConverter(     Retrofit retrofit, Method method, Type responseType) {   Annotation[] annotations = method.getAnnotations();   try {     return retrofit.responseBodyConverter(responseType,annotations);   } catch (RuntimeException e) { // Wide exception range because    factories are user code.     throw methodError(method, e, "Unable to create converter for%s",   responseType);   }}public &lt;T&gt; Converter&lt;ResponseBody, T&gt; responseBodyConverter(Type type, Annotation[] annotations) {    return nextResponseBodyConverter(null, type, annotations);}public &lt;T&gt; Converter&lt;ResponseBody, T&gt; nextResponseBodyConverter(  @Nullable Converter.Factory skipPast, Type type, Annotation[] annotations) {...int start = converterFactories.indexOf(skipPast) + 1;// 遍历 Converter.Factory 集合并寻找合适的工厂, 这里是GsonResponseBodyConverterfor (int i = start, count = converterFactories.size(); i &lt; count; i++) {  Converter&lt;ResponseBody, ?&gt; converter =      converterFactories.get(i).responseBodyConverter(type, annotations, this);  if (converter != null) {    //noinspection unchecked    return (Converter&lt;ResponseBody, T&gt;) converter;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h4 id="执行HttpServiceMethod的invoke方法">          <a href="#执行HttpServiceMethod的invoke方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#执行HttpServiceMethod的invoke方法" class="headerlink" title="执行HttpServiceMethod的invoke方法"></a>执行HttpServiceMethod的invoke方法</h4>      <pre class="line-numbers language-none"><code class="language-none">@Override ReturnT invoke(Object[] args) {    return callAdapter.adapt(        new OkHttpCall&lt;&gt;(requestFactory, args, callFactory, responseConverter));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最终在adapt中创建了一个ExecutorCallbackCall对象，它是一个装饰者，而在它内部真正去执行网络请求的还是OkHttpCall。</p>        <h2 id="创建网络请求接口类实例并执行请求过程">          <a href="#创建网络请求接口类实例并执行请求过程" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建网络请求接口类实例并执行请求过程" class="headerlink" title="创建网络请求接口类实例并执行请求过程"></a>创建网络请求接口类实例并执行请求过程</h2>              <h3 id="service-listRepos">          <a href="#service-listRepos" class="heading-link"><i class="fas fa-link"></i></a><a href="#service-listRepos" class="headerlink" title="service.listRepos()"></a>service.listRepos()</h3>      <pre class="line-numbers language-none"><code class="language-none">1、Call&lt;List&lt;Repo&gt;&gt; repos = service.listRepos("octocat");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>service对象是动态代理对象Proxy.newProxyInstance()，当调用getCall()时会被 它拦截，然后调用自身的InvocationHandler#invoke()，得到最终的Call对象。</p>        <h3 id="同步执行流程-repos-execute">          <a href="#同步执行流程-repos-execute" class="heading-link"><i class="fas fa-link"></i></a><a href="#同步执行流程-repos-execute" class="headerlink" title="同步执行流程 repos.execute()"></a>同步执行流程 repos.execute()</h3>      <pre class="line-numbers language-none"><code class="language-none">@Override public Response&lt;T&gt; execute() throws IOException {    okhttp3.Call call;    synchronized (this) {      if (executed) throw new IllegalStateException("Already executed.");      executed = true;      if (creationFailure != null) {        if (creationFailure instanceof IOException) {          throw (IOException) creationFailure;        } else if (creationFailure instanceof RuntimeException) {          throw (RuntimeException) creationFailure;        } else {          throw (Error) creationFailure;        }      }      call = rawCall;      if (call == null) {        try {          // 创建一个OkHttp的Request对象请求          call = rawCall = createRawCall();        } catch (IOException | RuntimeException | Error e) {          throwIfFatal(e); //  Do not assign a fatal error to     creationFailure.          creationFailure = e;          throw e;        }      }    }    if (canceled) {      call.cancel();    }    // 调用OkHttpCall的execute()发送网络请求（同步），    // 并解析网络请求返回的数据    return parseResponse(call.execute());}private okhttp3.Call createRawCall() throws IOException {    // 创建 一个okhttp3.Request    okhttp3.Call call =    callFactory.newCall(requestFactory.create(args));    if (call == null) {      throw new NullPointerException("Call.Factory returned null.");    }    return call;}Response&lt;T&gt; parseResponse(okhttp3.Response rawResponse) throws IOException {    ResponseBody rawBody = rawResponse.body();         // Remove the body's source (the only stateful object) so we can   pass the response along.    rawResponse = rawResponse.newBuilder()        .body(new NoContentResponseBody(rawBody.contentType(), rawBody.contentLength()))        .build();            // 根据响应返回的状态码进行处理        int code = rawResponse.code();    if (code &lt; 200 || code &gt;= 300) {      try {        // Buffer the entire body to avoid future I/O.        ResponseBody bufferedBody = Utils.buffer(rawBody);        return Response.error(bufferedBody, rawResponse);      } finally {        rawBody.close();      }    }        if (code == 204 || code == 205) {      rawBody.close();      return Response.success(null, rawResponse);    }                ExceptionCatchingResponseBody catchingBody = new ExceptionCatchingResponseBody(rawBody);    try {      // 将响应体转为Java对象      T body = responseConverter.convert(catchingBody);            return Response.success(body, rawResponse);    } catch (RuntimeException e) {      // If the underlying source threw an exception, propagate that     rather than indicating it was      // a runtime exception.      catchingBody.throwIfCaught();      throw e;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="异步请求流程-reponse-enqueque">          <a href="#异步请求流程-reponse-enqueque" class="heading-link"><i class="fas fa-link"></i></a><a href="#异步请求流程-reponse-enqueque" class="headerlink" title="异步请求流程 reponse.enqueque"></a>异步请求流程 reponse.enqueque</h3>      <pre class="line-numbers language-none"><code class="language-none">@Override public void enqueue(final Callback&lt;T&gt; callback) {    // 使用静态代理 delegate进行异步请求     delegate.enqueue(new Callback&lt;T&gt;() {      @Override       public void onResponse(Call&lt;T&gt; call, finalResponse&lt;T&gt;response) {        // 线程切换，在主线程显示结果        callbackExecutor.execute(new Runnable() {            @Override              public void run() {            if (delegate.isCanceled()) {              callback.onFailure(ExecutorCallbackCall.this, newIOException("Canceled"));            } else {              callback.onResponse(ExecutorCallbackCall.this,respons);            }          }        });      }      @Override       public void onFailure(Call&lt;T&gt; call, final Throwable t) {        callbackExecutor.execute(new Runnable() {          @Override public void run() {            callback.onFailure(ExecutorCallbackCall.this, t);          }        });      }    });}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看看 delegate.enqueue 内部流程。</p><pre class="line-numbers language-none"><code class="language-none">@Override public void enqueue(final Callback&lt;T&gt; callback) {       okhttp3.Call call;    Throwable failure;    synchronized (this) {      if (executed) throw new IllegalStateException("Already executed.");      executed = true;      call = rawCall;      failure = creationFailure;      if (call == null &amp;&amp; failure == null) {        try {          // 创建OkHttp的Request对象，再封装成OkHttp.call          // 方法同发送同步请求，此处上面已分析          call = rawCall = createRawCall();         } catch (Throwable t) {          failure = creationFailure = t;        }      }@Override public void enqueue(final Callback&lt;T&gt; callback) {  checkNotNull(callback, "callback == null");  okhttp3.Call call;  Throwable failure;  ...  call.enqueue(new okhttp3.Callback() {    @Override public void onResponse(okhttp3.Call call, okhttp3.Response rawResponse) {      Response&lt;T&gt; response;      try {        // 此处上面已分析        response = parseResponse(rawResponse);      } catch (Throwable e) {        throwIfFatal(e);        callFailure(e);        return;      }      try {        callback.onResponse(OkHttpCall.this, response);      } catch (Throwable t) {        t.printStackTrace();      }    }    @Override public void onFailure(okhttp3.Call call, IOException e) {      callFailure(e);    }    private void callFailure(Throwable e) {      try {        callback.onFailure(OkHttpCall.this, e);      } catch (Throwable t) {        t.printStackTrace();      }    }  });}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="Retrofit源码流程图">          <a href="#Retrofit源码流程图" class="heading-link"><i class="fas fa-link"></i></a><a href="#Retrofit源码流程图" class="headerlink" title="Retrofit源码流程图"></a>Retrofit源码流程图</h2>      <p>建议大家自己主动配合着Retrofit最新版的源码一步步去彻底地认识它，只有这样，你才能看到它真实的内心，附上一张Retrofit源码流程图，要注意的是，这是V2.5之前版本的流程，但是，在看完上面的源码分析后，我们知道，主体流程是没有变化的。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ab58d6242cc4fae96cd73eb198e325a~tplv-k3u1fbpfcp-zoom-1.image" alt="image"></p><blockquote><p>从本质上来说，Retrofit虽然只是一个RESTful 的HTTP 网络请求框架的封装库。但是，它内部通过 大量的设计模式 封装了 OkHttp，让使用者感到它非常简洁、易懂。它内部主要是用动态代理的方式，动态将网络请求接口的注解解析成HTTP请求，最后执行请求的过程。</p></blockquote>        <h1 id="Glide">          <a href="#Glide" class="heading-link"><i class="fas fa-link"></i></a><a href="#Glide" class="headerlink" title="Glide"></a>Glide</h1>              <h2 id="基本使用流程-1">          <a href="#基本使用流程-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本使用流程-1" class="headerlink" title="基本使用流程"></a>基本使用流程</h2>      <p>Glide最基本的使用流程就是下面这行代码，其它所有扩展的额外功能都是以其建造者链式调用的基础上增加的。</p><pre class="line-numbers language-none"><code class="language-none">GlideApp.with(context).load(url).into(iv);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中的GlideApp是注解处理器自动生成的，要使用GlideApp，必须先配置应用的AppGlideModule模块，里面可以为空配置，也可以根据实际情况添加指定配置。</p><pre class="line-numbers language-none"><code class="language-none">@GlideModulepublic class MyAppGlideModule extends AppGlideModule {    @Override    public void applyOptions(Context context, GlideBuilder builder) {        // 实际使用中根据情况可以添加如下配置        &lt;!--builder.setDefaultRequestOptions(new RequestOptions().format(DecodeFormat.PREFER_RGB_565));--&gt;        &lt;!--int memoryCacheSizeBytes = 1024 * 1024 * 20;--&gt;        &lt;!--builder.setMemoryCache(new LruResourceCache(memoryCacheSizeBytes));--&gt;        &lt;!--int bitmapPoolSizeBytes = 1024 * 1024 * 30;--&gt;        &lt;!--builder.setBitmapPool(new LruBitmapPool(bitmapPoolSizeBytes));--&gt;        &lt;!--int diskCacheSizeBytes = 1024 * 1024 * 100;--&gt;        &lt;!--builder.setDiskCache(new InternalCacheDiskCacheFactory(context, diskCacheSizeBytes));--&gt;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，本文将针对Glide的最新源码版本V4.8.0对Glide加载网络图片的流程进行详细地分析与讲解，力争做到让读者朋友们知其然也知其所以然。</p>        <h2 id="GlideApp-with-context-源码详解">          <a href="#GlideApp-with-context-源码详解" class="heading-link"><i class="fas fa-link"></i></a><a href="#GlideApp-with-context-源码详解" class="headerlink" title="GlideApp.with(context)源码详解"></a>GlideApp.with(context)源码详解</h2>      <p>首先，用这份Glide框架图让我们对Glide的总体框架有一个初步的了解。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2478933d44534c2fabb6466049b9f3b7~tplv-k3u1fbpfcp-zoom-1.image" alt="image"></p><p>从GlideApp.with这行代码开始，内部主线执行流程如下。</p>        <h3 id="GlideApp-with">          <a href="#GlideApp-with" class="heading-link"><i class="fas fa-link"></i></a><a href="#GlideApp-with" class="headerlink" title="GlideApp#with"></a>GlideApp#with</h3>      <pre class="line-numbers language-none"><code class="language-none">return (GlideRequests) Glide.with(context);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h3 id="Glide-with">          <a href="#Glide-with" class="heading-link"><i class="fas fa-link"></i></a><a href="#Glide-with" class="headerlink" title="Glide#with"></a>Glide#with</h3>      <pre class="line-numbers language-none"><code class="language-none">return getRetriever(context).get(context);return Glide.get(context).getRequestManagerRetriever();// 外部使用了双重检锁的同步方式确保同一时刻只执一次Glide的初始化checkAndInitializeGlide(context);initializeGlide(context);// 最终执行到Glide的另一个重载方法initializeGlide(context, new GlideBuilder());@SuppressWarnings("deprecation")  private static void initializeGlide(@NonNull Context   context, @NonNull GlideBuilder builder) {    Context applicationContext =     context.getApplicationContext();    // 1、获取前面应用中带注解的GlideModule    GeneratedAppGlideModule annotationGeneratedModule =     getAnnotationGeneratedGlideModules();    // 2、如果GlideModule为空或者可配置manifest里面的标志为true，则获取manifest里面    // 配置的GlideModule模块（manifestModules）。    List&lt;com.bumptech.glide.module.GlideModule&gt;     manifestModules = Collections.emptyList();    if (annotationGeneratedModule == null ||     annotationGeneratedModule.isManifestParsingEnabled(    )) {      manifestModules = new   ManifestParser(applicationContext).parse();    }    ...    RequestManagerRetriever.RequestManagerFactory     factory =        annotationGeneratedModule != null            ? annotationGeneratedModule.getRequestManag    erFactory() : null;    builder.setRequestManagerFactory(factory);    for (com.bumptech.glide.module.GlideModule module :     manifestModules) {      module.applyOptions(applicationContext, builder);    }    if (annotationGeneratedModule != null) {      annotationGeneratedModule.applyOptions(applicatio  nContext, builder);    }    // 3、初始化各种配置信息    Glide glide = builder.build(applicationContext);    // 4、把manifestModules以及annotationGeneratedModule里面的配置信息放到builder    // 里面（applyOptions）替换glide默认组件（registerComponents）    for (com.bumptech.glide.module.GlideModule module :     manifestModules) {      module.registerComponents(applicationContext,   glide, glide.registry);    }    if (annotationGeneratedModule != null) {      annotationGeneratedModule.registerComponents(appl  icationContext, glide, glide.registry);    }    applicationContext.registerComponentCallbacks(glide    );    Glide.glide = glide;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="GlideBuilder-build">          <a href="#GlideBuilder-build" class="heading-link"><i class="fas fa-link"></i></a><a href="#GlideBuilder-build" class="headerlink" title="GlideBuilder#build"></a>GlideBuilder#build</h3>      <pre class="line-numbers language-none"><code class="language-none">@NonNull  Glide build(@NonNull Context context) {    // 创建请求图片线程池sourceExecutor    if (sourceExecutor == null) {      sourceExecutor =   GlideExecutor.newSourceExecutor();    }    // 创建硬盘缓存线程池diskCacheExecutor    if (diskCacheExecutor == null) {      diskCacheExecutor =   GlideExecutor.newDiskCacheExecutor();    }    // 创建动画线程池animationExecutor    if (animationExecutor == null) {      animationExecutor =   GlideExecutor.newAnimationExecutor();    }    if (memorySizeCalculator == null) {      memorySizeCalculator = new   MemorySizeCalculator.Builder(context).build();    }    if (connectivityMonitorFactory == null) {      connectivityMonitorFactory = new   DefaultConnectivityMonitorFactory();    }    if (bitmapPool == null) {      // 依据设备的屏幕密度和尺寸设置各种pool的size      int size =   memorySizeCalculator.getBitmapPoolSize();      if (size &gt; 0) {        // 创建图片线程池LruBitmapPool，缓存所有被释放的bitmap        // 缓存策略在API大于19时，为SizeConfigStrategy，小于为AttributeStrategy。        // 其中SizeConfigStrategy是以bitmap的size和config为key，value为bitmap的HashMap        bitmapPool = new LruBitmapPool(size);      } else {        bitmapPool = new BitmapPoolAdapter();      }    }    // 创建对象数组缓存池LruArrayPool，默认4M    if (arrayPool == null) {      arrayPool = new   LruArrayPool(memorySizeCalculator.getArrayPoolSiz  eInBytes());    }    // 创建LruResourceCache，内存缓存    if (memoryCache == null) {      memoryCache = new   LruResourceCache(memorySizeCalculator.getMemoryCa  cheSize());    }    if (diskCacheFactory == null) {      diskCacheFactory = new   InternalCacheDiskCacheFactory(context);    }    // 创建任务和资源管理引擎（线程池，内存缓存和硬盘缓存对象）    if (engine == null) {      engine =          new Engine(              memoryCache,              diskCacheFactory,              diskCacheExecutor,              sourceExecutor,              GlideExecutor.newUnlimitedSourceExecutor(  ),              GlideExecutor.newAnimationExecutor(),              isActiveResourceRetentionAllowed);    }        RequestManagerRetriever requestManagerRetriever =    new RequestManagerRetriever(requestManagerFactory);    return new Glide(        context,        engine,        memoryCache,        bitmapPool,        arrayPool,        requestManagerRetriever,        connectivityMonitorFactory,        logLevel,        defaultRequestOptions.lock(),        defaultTransitionOptions);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="Glide-Glide构造方法">          <a href="#Glide-Glide构造方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#Glide-Glide构造方法" class="headerlink" title="Glide#Glide构造方法"></a>Glide#Glide构造方法</h3>      <pre class="line-numbers language-none"><code class="language-none">Glide(...) {    ...    // 注册管理任务执行对象的类(Registry)    // Registry是一个工厂，而其中所有注册的对象都是一个工厂员工，当任务分发时，    // 根据当前任务的性质，分发给相应员工进行处理    registry = new Registry();        ...        // 这里大概有60余次的append或register员工组件（解析器、编解码器、工厂类、转码类等等组件）    registry    .append(ByteBuffer.class, new ByteBufferEncoder())    .append(InputStream.class, new StreamEncoder(arrayPool))        // 根据给定子类产出对应类型的target（BitmapImageViewTarget / DrawableImageViewTarget)    ImageViewTargetFactory imageViewTargetFactory = new ImageViewTargetFactory();        glideContext =        new GlideContext(            context,            arrayPool,            registry,            imageViewTargetFactory,            defaultRequestOptions,            defaultTransitionOptions,            engine,            logLevel);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="RequestManagerRetriever-get">          <a href="#RequestManagerRetriever-get" class="heading-link"><i class="fas fa-link"></i></a><a href="#RequestManagerRetriever-get" class="headerlink" title="RequestManagerRetriever#get"></a>RequestManagerRetriever#get</h3>      <pre class="line-numbers language-none"><code class="language-none">@NonNullpublic RequestManager get(@NonNull Context context) {  if (context == null) {    throw new IllegalArgumentException("You cannot start a load on a null Context");  } else if (Util.isOnMainThread() &amp;&amp; !(context instanceof Application)) {    // 如果当前线程是主线程且context不是Application走相应的get重载方法    if (context instanceof FragmentActivity) {      return get((FragmentActivity) context);    } else if (context instanceof Activity) {      return get((Activity) context);    } else if (context instanceof ContextWrapper) {      return get(((ContextWrapper) context).getBaseContext());    }  }  // 否则直接将请求与ApplicationLifecycle关联  return getApplicationManager(context);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里总结一下，对于当前传入的context是application或当前线程是子线程时，请求的生命周期和ApplicationLifecycle关联，否则，context是FragmentActivity或Fragment时，在当前组件添加一个SupportFragment（SupportRequestManagerFragment），context是Activity时，在当前组件添加一个Fragment(RequestManagerFragment)。</p>        <h3 id="GlideApp-with小结">          <a href="#GlideApp-with小结" class="heading-link"><i class="fas fa-link"></i></a><a href="#GlideApp-with小结" class="headerlink" title="GlideApp#with小结"></a>GlideApp#with小结</h3>      <ol><li><p>初始化各式各样的配置信息（包括缓存，请求线程池，大小，图片格式等等）以及glide对象。</p></li><li><p>将glide请求和application/SupportFragment/Fragment的生命周期绑定在一块。</p></li></ol>        <h3 id="with方法的执行流程">          <a href="#with方法的执行流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#with方法的执行流程" class="headerlink" title="with方法的执行流程"></a>with方法的执行流程</h3>      <p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a307a034fea446a486c4f988849751a0~tplv-k3u1fbpfcp-zoom-1.image" alt="image"></p>        <h2 id="load-url-源码详解">          <a href="#load-url-源码详解" class="heading-link"><i class="fas fa-link"></i></a><a href="#load-url-源码详解" class="headerlink" title="load(url)源码详解"></a>load(url)源码详解</h2>              <h3 id="GlideRequest-RequestManager-load">          <a href="#GlideRequest-RequestManager-load" class="heading-link"><i class="fas fa-link"></i></a><a href="#GlideRequest-RequestManager-load" class="headerlink" title="GlideRequest(RequestManager)#load"></a>GlideRequest(RequestManager)#load</h3>      <pre class="line-numbers language-none"><code class="language-none">return (GlideRequest&lt;Drawable&gt;) super.load(string);return asDrawable().load(string);// 1、asDrawable部分return (GlideRequest&lt;Drawable&gt;) super.asDrawable();return as(Drawable.class);// 最终返回了一个GlideRequest（RequestManager的子类）return new GlideRequest&lt;&gt;(glide, this, resourceClass, context);// 2、load部分return (GlideRequest&lt;TranscodeType&gt;) super.load(string);return loadGeneric(string);@NonNullprivate RequestBuilder&lt;TranscodeType&gt; loadGeneric(@Nullable Object model) {    // model则为设置的url    this.model = model;    // 记录url已设置    isModelSet = true;    return this;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，load这部分的源码很简单，就是给GlideRequest（RequestManager）设置了要请求的mode（url），并记录了url已设置的状态。</p>        <h3 id="load方法的执行流程">          <a href="#load方法的执行流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#load方法的执行流程" class="headerlink" title="load方法的执行流程"></a>load方法的执行流程</h3>      <p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/33114794d81a421ea4345806826919b7~tplv-k3u1fbpfcp-zoom-1.image" alt="image"></p>        <h2 id="into-iv-源码详解">          <a href="#into-iv-源码详解" class="heading-link"><i class="fas fa-link"></i></a><a href="#into-iv-源码详解" class="headerlink" title="into(iv)源码详解"></a>into(iv)源码详解</h2>      <p>真正复杂的地方要开始了。</p>        <h3 id="RequestBuilder-into">          <a href="#RequestBuilder-into" class="heading-link"><i class="fas fa-link"></i></a><a href="#RequestBuilder-into" class="headerlink" title="RequestBuilder.into"></a>RequestBuilder.into</h3>      <pre class="line-numbers language-none"><code class="language-none"> @NonNullpublic ViewTarget&lt;ImageView, TranscodeType&gt;   into(@NonNull ImageView view) {  Util.assertMainThread();  Preconditions.checkNotNull(view);  RequestOptions requestOptions =     this.requestOptions;  if (!requestOptions.isTransformationSet()      &amp;&amp; requestOptions.isTransformationAllowed()      &amp;&amp; view.getScaleType() != null) {    // Clone in this method so that if we use this   RequestBuilder to load into a View and then    // into a different target, we don't retain the   transformation applied based on the previous    // View's scale type.    switch (view.getScaleType()) {      // 这个RequestOptions里保存了要设置的scaleType，Glide自身封装了CenterCrop、CenterInside、      // FitCenter、CenterInside四种规格。      case CENTER_CROP:        requestOptions =   requestOptions.clone().optionalCenterCrop();        break;      case CENTER_INSIDE:        requestOptions =   requestOptions.clone().optionalCenterInside()  ;        break;      case FIT_CENTER:      case FIT_START:      case FIT_END:        requestOptions =   requestOptions.clone().optionalFitCenter();        break;      case FIT_XY:        requestOptions =   requestOptions.clone().optionalCenterInside()  ;        break;      case CENTER:      case MATRIX:      default:        // Do nothing.    }  }  // 注意，这个transcodeClass是指的drawable或bitmap  return into(      glideContext.buildImageViewTarget(view,     transcodeClass),      /*targetListener=*/ null,      requestOptions);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="GlideContext-buildImageViewTarget">          <a href="#GlideContext-buildImageViewTarget" class="heading-link"><i class="fas fa-link"></i></a><a href="#GlideContext-buildImageViewTarget" class="headerlink" title="GlideContext#buildImageViewTarget"></a>GlideContext#buildImageViewTarget</h3>      <pre class="line-numbers language-none"><code class="language-none">return imageViewTargetFactory.buildTarget(imageView, transcodeClass);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h3 id="ImageViewTargetFactory-buildTarget">          <a href="#ImageViewTargetFactory-buildTarget" class="heading-link"><i class="fas fa-link"></i></a><a href="#ImageViewTargetFactory-buildTarget" class="headerlink" title="ImageViewTargetFactory#buildTarget"></a>ImageViewTargetFactory#buildTarget</h3>      <pre class="line-numbers language-none"><code class="language-none">@NonNull@SuppressWarnings("unchecked")public &lt;Z&gt; ViewTarget&lt;ImageView, Z&gt;   buildTarget(@NonNull ImageView view,    @NonNull Class&lt;Z&gt; clazz) {  // 返回展示Bimtap/Drawable资源的目标对象  if (Bitmap.class.equals(clazz)) {    return (ViewTarget&lt;ImageView, Z&gt;) new   BitmapImageViewTarget(view);  } else if (Drawable.class.isAssignableFrom(clazz))     {    return (ViewTarget&lt;ImageView, Z&gt;) new   DrawableImageViewTarget(view);  } else {    throw new IllegalArgumentException(        "Unhandled class: " + clazz + ", try   .as*(Class).transcode(ResourceTranscoder)");  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，Glide内部只维护了两种target，一种是BitmapImageViewTarget，另一种则是DrawableImageViewTarget，接下来继续深入。</p>        <h3 id="RequestBuilder-into-1">          <a href="#RequestBuilder-into-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#RequestBuilder-into-1" class="headerlink" title="RequestBuilder#into"></a>RequestBuilder#into</h3>      <pre class="line-numbers language-none"><code class="language-none">private &lt;Y extends Target&lt;TranscodeType&gt;&gt; Y into(      @NonNull Y target,      @Nullable RequestListener&lt;TranscodeType&gt;   targetListener,      @NonNull RequestOptions options) {    Util.assertMainThread();    Preconditions.checkNotNull(target);    if (!isModelSet) {      throw new IllegalArgumentException("You must call   #load() before calling #into()");    }    options = options.autoClone();    // 分析1.建立请求    Request request = buildRequest(target,     targetListener, options);    Request previous = target.getRequest();    if (request.isEquivalentTo(previous)        &amp;&amp; !isSkipMemoryCacheWithCompletePreviousReques    t(options, previous)) {      request.recycle();      // If the request is completed, beginning again   will ensure the result is re-delivered,      // triggering RequestListeners and Targets. If   the request is failed, beginning again will      // restart the request, giving it another chance   to complete. If the request is already      // running, we can let it continue running   without interruption.      if (!Preconditions.checkNotNull(previous).isRunni  ng()) {        // Use the previous request rather than the new     one to allow for optimizations like skipping        // setting placeholders, tracking and     un-tracking Targets, and obtaining View     dimensions        // that are done in the individual Request.        previous.begin();      }      return target;    }        requestManager.clear(target);    target.setRequest(request);    // 分析2.真正追踪请求的地方    requestManager.track(target, request);    return target;}// 分析1private Request buildRequest(      Target&lt;TranscodeType&gt; target,      @Nullable RequestListener&lt;TranscodeType&gt;   targetListener,      RequestOptions requestOptions) {    return buildRequestRecursive(        target,        targetListener,        /*parentCoordinator=*/ null,        transitionOptions,        requestOptions.getPriority(),        requestOptions.getOverrideWidth(),        requestOptions.getOverrideHeight(),        requestOptions);}// 分析1private Request buildRequestRecursive(      Target&lt;TranscodeType&gt; target,      @Nullable RequestListener&lt;TranscodeType&gt;   targetListener,      @Nullable RequestCoordinator parentCoordinator,      TransitionOptions&lt;?, ? super TranscodeType&gt;   transitionOptions,      Priority priority,      int overrideWidth,      int overrideHeight,      RequestOptions requestOptions) {    // Build the ErrorRequestCoordinator first if     necessary so we can update parentCoordinator.    ErrorRequestCoordinator errorRequestCoordinator =     null;    if (errorBuilder != null) {      // 创建errorRequestCoordinator（异常处理对象）      errorRequestCoordinator = new   ErrorRequestCoordinator(parentCoordinator);      parentCoordinator = errorRequestCoordinator;    }    // 递归建立缩略图请求    Request mainRequest =        buildThumbnailRequestRecursive(            target,            targetListener,            parentCoordinator,            transitionOptions,            priority,            overrideWidth,            overrideHeight,            requestOptions);    if (errorRequestCoordinator == null) {      return mainRequest;    }    ...        Request errorRequest =     errorBuilder.buildRequestRecursive(        target,        targetListener,        errorRequestCoordinator,        errorBuilder.transitionOptions,        errorBuilder.requestOptions.getPriority(),        errorOverrideWidth,        errorOverrideHeight,        errorBuilder.requestOptions);    errorRequestCoordinator.setRequests(mainRequest,     errorRequest);    return errorRequestCoordinator;}// 分析1private Request buildThumbnailRequestRecursive(      Target&lt;TranscodeType&gt; target,      RequestListener&lt;TranscodeType&gt; targetListener,      @Nullable RequestCoordinator parentCoordinator,      TransitionOptions&lt;?, ? super TranscodeType&gt; transitionOptions,      Priority priority,      int overrideWidth,      int overrideHeight,      RequestOptions requestOptions) {    if (thumbnailBuilder != null) {      // Recursive case: contains a potentially recursive thumbnail request builder.            ...      ThumbnailRequestCoordinator coordinator = new ThumbnailRequestCoordinator(parentCoordinator);      // 获取一个正常请求对象      Request fullRequest =          obtainRequest(              target,              targetListener,              requestOptions,              coordinator,              transitionOptions,              priority,              overrideWidth,              overrideHeight);      isThumbnailBuilt = true;      // Recursively generate thumbnail requests.      // 使用递归的方式建立一个缩略图请求对象      Request thumbRequest =          thumbnailBuilder.buildRequestRecursive(              target,              targetListener,              coordinator,              thumbTransitionOptions,              thumbPriority,              thumbOverrideWidth,              thumbOverrideHeight,              thumbnailBuilder.requestOptions);      isThumbnailBuilt = false;      // coordinator（ThumbnailRequestCoordinator）是作为两者的协调者，      // 能够同时加载缩略图和正常的图的请求      coordinator.setRequests(fullRequest, thumbRequest);      return coordinator;    } else if (thumbSizeMultiplier != null) {      // Base case: thumbnail multiplier generates a thumbnail request, but cannot recurse.      // 当设置了缩略的比例thumbSizeMultiplier(0 ~  1)时，      // 不需要递归建立缩略图请求      ThumbnailRequestCoordinator coordinator = new ThumbnailRequestCoordinator(parentCoordinator);      Request fullRequest =          obtainRequest(              target,              targetListener,              requestOptions,              coordinator,              transitionOptions,              priority,              overrideWidth,              overrideHeight);      RequestOptions thumbnailOptions = requestOptions.clone()          .sizeMultiplier(thumbSizeMultiplier);      Request thumbnailRequest =          obtainRequest(              target,              targetListener,              thumbnailOptions,              coordinator,              transitionOptions,              getThumbnailPriority(priority),              overrideWidth,              overrideHeight);      coordinator.setRequests(fullRequest, thumbnailRequest);      return coordinator;    } else {      // Base case: no thumbnail.      // 没有缩略图请求时，直接获取一个正常图请求      return obtainRequest(          target,          targetListener,          requestOptions,          parentCoordinator,          transitionOptions,          priority,          overrideWidth,          overrideHeight);    }}private Request obtainRequest(      Target&lt;TranscodeType&gt; target,      RequestListener&lt;TranscodeType&gt; targetListener,      RequestOptions requestOptions,      RequestCoordinator requestCoordinator,      TransitionOptions&lt;?, ? super TranscodeType&gt;   transitionOptions,      Priority priority,      int overrideWidth,      int overrideHeight) {    // 最终实际返回的是一个SingleRequest对象（将制定的资源加载进对应的Target    return SingleRequest.obtain(        context,        glideContext,        model,        transcodeClass,        requestOptions,        overrideWidth,        overrideHeight,        priority,        target,        targetListener,        requestListeners,        requestCoordinator,        glideContext.getEngine(),        transitionOptions.getTransitionFactory());}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上源码分析可知，我们在分析1处的buildRequest()方法里建立了请求，且最多可同时进行缩略图和正常图的请求，最后，调用了requestManager.track(target, request)方法，接着看看track里面做了什么。</p>        <h3 id="RequestManager-track">          <a href="#RequestManager-track" class="heading-link"><i class="fas fa-link"></i></a><a href="#RequestManager-track" class="headerlink" title="RequestManager#track"></a>RequestManager#track</h3>      <pre class="line-numbers language-none"><code class="language-none">// 分析2void track(@NonNull Target&lt;?&gt; target, @NonNull Request request) {    // 加入一个target目标集合(Set)    targetTracker.track(target);        requestTracker.runRequest(request);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="RequestTracker-runRequest">          <a href="#RequestTracker-runRequest" class="heading-link"><i class="fas fa-link"></i></a><a href="#RequestTracker-runRequest" class="headerlink" title="RequestTracker#runRequest"></a>RequestTracker#runRequest</h3>      <pre class="line-numbers language-none"><code class="language-none">/*** Starts tracking the given request.*/// 分析2public void runRequest(@NonNull Request request) {    requests.add(request);    if (!isPaused) {      // 如果不是暂停状态则开始请求      request.begin();    } else {      request.clear();      if (Log.isLoggable(TAG, Log.VERBOSE)) {        Log.v(TAG, "Paused, delaying request");      }      // 否则清空请求，加入延迟请求队列（为了对这些请求维持一个强引用，使用了ArrayList实现）      pendingRequests.add(request);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="SingleRequest-begin">          <a href="#SingleRequest-begin" class="heading-link"><i class="fas fa-link"></i></a><a href="#SingleRequest-begin" class="headerlink" title="SingleRequest#begin"></a>SingleRequest#begin</h3>      <pre class="line-numbers language-none"><code class="language-none">// 分析2@Overridepublic void begin() {    ...    if (model == null) {      ...    // model（url）为空，回调加载失败    onLoadFailed(new GlideException("Received null   model"), logLevel);    return;  }  if (status == Status.RUNNING) {    throw new IllegalArgumentException("Cannot   restart a running request");  }   if (status == Status.COMPLETE) {    onResourceReady(resource,   DataSource.MEMORY_CACHE);    return;  }  status = Status.WAITING_FOR_SIZE;  if (Util.isValidDimensions(overrideWidth, overrideHeight)) {    // 当使用override() API为图片指定了一个固定的宽高时直接执行onSizeReady，    // 最终的核心处理位于onSizeReady    onSizeReady(overrideWidth, overrideHeight);  } else {    // 根据imageView的宽高算出图片的宽高，最终也会走到onSizeReady    target.getSize(this);  }  if ((status == Status.RUNNING || status ==     Status.WAITING_FOR_SIZE)      &amp;&amp; canNotifyStatusChanged()) {    // 预先加载设置的缩略图    target.onLoadStarted(getPlaceholderDrawable());  }  if (IS_VERBOSE_LOGGABLE) {    logV("finished run method in " +   LogTime.getElapsedMillis(startTime));  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从requestManager.track(target, request)开始，最终会执行到SingleRequest#begin()方法的onSizeReady，可以猜到（因为后面只做了预加载缩略图的处理），真正的请求就是从这里开始的，咱们进去一探究竟~</p>        <h3 id="SingleRequest-onSizeReady">          <a href="#SingleRequest-onSizeReady" class="heading-link"><i class="fas fa-link"></i></a><a href="#SingleRequest-onSizeReady" class="headerlink" title="SingleRequest#onSizeReady"></a>SingleRequest#onSizeReady</h3>      <pre class="line-numbers language-none"><code class="language-none">// 分析2@Overridepublic void onSizeReady(int width, int height) {  stateVerifier.throwIfRecycled();    ...    status = Status.RUNNING;  float sizeMultiplier =     requestOptions.getSizeMultiplier();  this.width = maybeApplySizeMultiplier(width,     sizeMultiplier);  this.height = maybeApplySizeMultiplier(height,     sizeMultiplier);  ...    // 根据给定的配置进行加载，engine是一个负责加载、管理活跃和缓存资源的引擎类  loadStatus = engine.load(      glideContext,      model,      requestOptions.getSignature(),      this.width,      this.height,      requestOptions.getResourceClass(),      transcodeClass,      priority,      requestOptions.getDiskCacheStrategy(),      requestOptions.getTransformations(),      requestOptions.isTransformationRequired(),      requestOptions.isScaleOnlyOrNoTransform(),      requestOptions.getOptions(),      requestOptions.isMemoryCacheable(),      requestOptions.getUseUnlimitedSourceGeneratorsP    ool(),      requestOptions.getUseAnimationPool(),      requestOptions.getOnlyRetrieveFromCache(),      this);  ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>终于看到Engine类了，感觉距离成功不远了，继续~</p>        <h3 id="Engine-load">          <a href="#Engine-load" class="heading-link"><i class="fas fa-link"></i></a><a href="#Engine-load" class="headerlink" title="Engine#load"></a>Engine#load</h3>      <pre class="line-numbers language-none"><code class="language-none">public &lt;R&gt; LoadStatus load(    GlideContext glideContext,    Object model,    Key signature,    int width,    int height,    Class&lt;?&gt; resourceClass,    Class&lt;R&gt; transcodeClass,    Priority priority,    DiskCacheStrategy diskCacheStrategy,    Map&lt;Class&lt;?&gt;, Transformation&lt;?&gt;&gt; transformations,    boolean isTransformationRequired,    boolean isScaleOnlyOrNoTransform,    Options options,    boolean isMemoryCacheable,    boolean useUnlimitedSourceExecutorPool,    boolean useAnimationPool,    boolean onlyRetrieveFromCache,    ResourceCallback cb) {    ...  // 先从弱引用中查找，如果有的话回调onResourceReady并直接返回  EngineResource&lt;?&gt; active = loadFromActiveResources(key, isMemoryCacheable);  if (active != null) {    cb.onResourceReady(active,   DataSource.MEMORY_CACHE);    if (VERBOSE_IS_LOGGABLE) {      logWithTimeAndKey("Loaded resource from active     resources", startTime, key);    }    return null;  }  // 没有再从内存中查找,有的话会取出并放到ActiveResources（内部维护的弱引用缓存map）里面  EngineResource&lt;?&gt; cached = loadFromCache(key,     isMemoryCacheable);  if (cached != null) {    cb.onResourceReady(cached,   DataSource.MEMORY_CACHE);    if (VERBOSE_IS_LOGGABLE) {      logWithTimeAndKey("Loaded resource from cache",     startTime, key);    }    return null;  }  EngineJob&lt;?&gt; current = jobs.get(key,     onlyRetrieveFromCache);  if (current != null) {    current.addCallback(cb);    if (VERBOSE_IS_LOGGABLE) {      logWithTimeAndKey("Added to existing load",     startTime, key);    }    return new LoadStatus(cb, current);  }  // 如果内存中没有，则创建engineJob（decodejob的回调类，管理下载过程以及状态）  EngineJob&lt;R&gt; engineJob =      engineJobFactory.build(          key,          isMemoryCacheable,          useUnlimitedSourceExecutorPool,          useAnimationPool,          onlyRetrieveFromCache);  // 创建解析工作对象  DecodeJob&lt;R&gt; decodeJob =      decodeJobFactory.build(          glideContext,          model,          key,          signature,          width,          height,          resourceClass,          transcodeClass,          priority,          diskCacheStrategy,          transformations,          isTransformationRequired,          isScaleOnlyOrNoTransform,          onlyRetrieveFromCache,          options,          engineJob);  // 放在Jobs内部维护的HashMap中  jobs.put(key, engineJob);  // 关注点8 后面分析会用到  // 注册ResourceCallback接口  engineJob.addCallback(cb);  // 内部开启线程去请求  engineJob.start(decodeJob);  if (VERBOSE_IS_LOGGABLE) {    logWithTimeAndKey("Started new load", startTime,   key);  }  return new LoadStatus(cb, engineJob);}public void start(DecodeJob&lt;R&gt; decodeJob) {    this.decodeJob = decodeJob;    // willDecodeFromCache方法内部根据不同的阶段stage，如果是RESOURCE_CACHE/DATA_CACHE则返回true，使用diskCacheExecutor，否则调用getActiveSourceExecutor，内部会根据相应的条件返回sourceUnlimitedExecutor/animationExecutor/sourceExecutor    GlideExecutor executor =       decodeJob.willDecodeFromCache()        ? diskCacheExecutor        : getActiveSourceExecutor();    executor.execute(decodeJob);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，最终Engine(引擎)类内部会执行到自身的start方法，它会根据不同的配置采用不同的线程池使用diskCacheExecutor/sourceUnlimitedExecutor/animationExecutor/sourceExecutor来执行最终的解码任务decodeJob。</p>        <h3 id="DecodeJob-run">          <a href="#DecodeJob-run" class="heading-link"><i class="fas fa-link"></i></a><a href="#DecodeJob-run" class="headerlink" title="DecodeJob#run"></a>DecodeJob#run</h3>      <pre class="line-numbers language-none"><code class="language-none">runWrapped();private void runWrapped() {    switch (runReason) {      case INITIALIZE:        stage = getNextStage(Stage.INITIALIZE);        // 关注点1        currentGenerator = getNextGenerator();        // 关注点2 内部会调用相应Generator的startNext()        runGenerators();        break;      case SWITCH_TO_SOURCE_SERVICE:        runGenerators();        break;      case DECODE_DATA:        // 关注点3 将获取的数据解码成对应的资源        decodeFromRetrievedData();        break;      default:        throw new IllegalStateException("Unrecognized     run reason: " + runReason);    }}// 关注点1，完整情况下，会异步依次生成这里的ResourceCacheGenerator、DataCacheGenerator和SourceGenerator对象，并在之后执行其中的startNext()private DataFetcherGenerator getNextGenerator() {    switch (stage) {      case RESOURCE_CACHE:        return new ResourceCacheGenerator(decodeHelper, this);      case DATA_CACHE:        return new DataCacheGenerator(decodeHelper, this);      case SOURCE:        return new SourceGenerator(decodeHelper, this);      case FINISHED:        return null;      default:        throw new IllegalStateException("Unrecognized     stage: " + stage);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="SourceGenerator-startNext">          <a href="#SourceGenerator-startNext" class="heading-link"><i class="fas fa-link"></i></a><a href="#SourceGenerator-startNext" class="headerlink" title="SourceGenerator#startNext"></a>SourceGenerator#startNext</h3>      <pre class="line-numbers language-none"><code class="language-none">// 关注点2@Overridepublic boolean startNext() {  // dataToCache数据不为空的话缓存到硬盘（第一执行该方法是不会调用的）  if (dataToCache != null) {    Object data = dataToCache;    dataToCache = null;    cacheData(data);  }  if (sourceCacheGenerator != null &amp;&amp;     sourceCacheGenerator.startNext()) {    return true;  }  sourceCacheGenerator = null;  loadData = null;  boolean started = false;  while (!started &amp;&amp; hasNextModelLoader()) {    // 关注点4 getLoadData()方法内部会在modelLoaders里面找到ModelLoder对象    // （每个Generator对应一个ModelLoader），    // 并使用modelLoader.buildLoadData方法返回一个loadData列表    loadData =   helper.getLoadData().get(loadDataListIndex++);    if (loadData != null        &amp;&amp; (helper.getDiskCacheStrategy().isDataCache  able(loadData.fetcher.getDataSource())        || helper.hasLoadPath(loadData.fetcher.getDat  aClass()))) {      started = true;      // 关注点6 通过loadData对象的fetcher对象（有关注点3的分析可知其实现类为HttpUrlFetcher）的      // loadData方法来获取图片数据      loadData.fetcher.loadData(helper.getPriority(),     this);    }  }  return started;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="DecodeHelper-getLoadData">          <a href="#DecodeHelper-getLoadData" class="heading-link"><i class="fas fa-link"></i></a><a href="#DecodeHelper-getLoadData" class="headerlink" title="DecodeHelper#getLoadData"></a>DecodeHelper#getLoadData</h3>      <pre class="line-numbers language-none"><code class="language-none">List&lt;LoadData&lt;?&gt;&gt; getLoadData() {    if (!isLoadDataSet) {      isLoadDataSet = true;      loadData.clear();      List&lt;ModelLoader&lt;Object, ?&gt;&gt; modelLoaders =   glideContext.getRegistry().getModelLoaders(model)  ;      //noinspection ForLoopReplaceableByForEach to   improve perf      for (int i = 0, size = modelLoaders.size(); i &lt;   size; i++) {        ModelLoader&lt;Object, ?&gt; modelLoader =     modelLoaders.get(i);        // 注意：这里最终是通过HttpGlideUrlLoader的buildLoadData获取到实际的loadData对象        LoadData&lt;?&gt; current =            modelLoader.buildLoadData(model, width,     height, options);        if (current != null) {          loadData.add(current);        }      }    }    return loadData;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="HttpGlideUrlLoader-buildLoadData">          <a href="#HttpGlideUrlLoader-buildLoadData" class="heading-link"><i class="fas fa-link"></i></a><a href="#HttpGlideUrlLoader-buildLoadData" class="headerlink" title="HttpGlideUrlLoader#buildLoadData"></a>HttpGlideUrlLoader#buildLoadData</h3>      <pre class="line-numbers language-none"><code class="language-none">@Overridepublic LoadData&lt;InputStream&gt; buildLoadData(@NonNull   GlideUrl model, int width, int height,    @NonNull Options options) {  // GlideUrls memoize parsed URLs so caching them     saves a few object instantiations and time  // spent parsing urls.  GlideUrl url = model;  if (modelCache != null) {    url = modelCache.get(model, 0, 0);    if (url == null) {      // 关注点5      modelCache.put(model, 0, 0, model);      url = model;    }  }  int timeout = options.get(TIMEOUT);  // 注意，这里创建了一个DataFetcher的实现类HttpUrlFetcher  return new LoadData&lt;&gt;(url, new HttpUrlFetcher(url,     timeout));}// 关注点5public void put(A model, int width, int height, B value) {    ModelKey&lt;A&gt; key = ModelKey.get(model, width,     height);    // 最终是通过LruCache来缓存对应的值，key是一个ModelKey对象（由model、width、height三个属性组成）    cache.put(key, value);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从这里的分析，我们明白了HttpUrlFetcher实际上就是最终的请求执行者，而且，我们知道了Glide会使用LruCache来对解析后的url来进行缓存，以便后续可以省去解析url的时间。</p>        <h3 id="HttpUrlFetcher-loadData">          <a href="#HttpUrlFetcher-loadData" class="heading-link"><i class="fas fa-link"></i></a><a href="#HttpUrlFetcher-loadData" class="headerlink" title="HttpUrlFetcher#loadData"></a>HttpUrlFetcher#loadData</h3>      <pre class="line-numbers language-none"><code class="language-none">@Overridepublic void loadData(@NonNull Priority priority,    @NonNull DataCallback&lt;? super InputStream&gt;   callback) {  long startTime = LogTime.getLogTime();  try {    // 关注点6    // loadDataWithRedirects内部是通过HttpURLConnection网络请求数据    InputStream result =   loadDataWithRedirects(glideUrl.toURL(), 0, null,   glideUrl.getHeaders());    // 请求成功回调onDataReady()    callback.onDataReady(result);  } catch (IOException e) {    if (Log.isLoggable(TAG, Log.DEBUG)) {      Log.d(TAG, "Failed to load data for url", e);    }    callback.onLoadFailed(e);  } finally {    if (Log.isLoggable(TAG, Log.VERBOSE)) {      Log.v(TAG, "Finished http url fetcher fetch in     " + LogTime.getElapsedMillis(startTime));    }  }}private InputStream loadDataWithRedirects(URL url, int redirects, URL lastUrl,  Map&lt;String, String&gt; headers) throws IOException {        ...    urlConnection.connect();    // Set the stream so that it's closed in cleanup to avoid resource leaks. See #2352.    stream = urlConnection.getInputStream();    if (isCancelled) {      return null;    }    final int statusCode = urlConnection.getResponseCode();    // 只要是2xx形式的状态码则判断为成功    if (isHttpOk(statusCode)) {      // 从urlConnection中获取资源流      return getStreamForSuccessfulRequest(urlConnection);    } else if (isHttpRedirect(statusCode)) {          ...            // 重定向请求      return loadDataWithRedirects(redirectUrl, redirects + 1, url,   headers);    } else if (statusCode == INVALID_STATUS_CODE) {      throw new HttpException(statusCode);    } else {      throw new HttpException(urlConnection.getResponseMessage(),   statusCode);    }}private InputStream getStreamForSuccessfulRequest(HttpURLConnection urlConnection)  throws IOException {    if (TextUtils.isEmpty(urlConnection.getContentEncoding())) {      int contentLength = urlConnection.getContentLength();      stream = ContentLengthInputStream.obtain(urlConnection.getInputStr  eam(), contentLength);    } else {      if (Log.isLoggable(TAG, Log.DEBUG)) {        Log.d(TAG, "Got non empty content encoding: " +     urlConnection.getContentEncoding());      }      stream = urlConnection.getInputStream();    }    return stream;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在HttpUrlFetcher#loadData方法的loadDataWithRedirects里面，Glide通过原生的HttpURLConnection进行请求后，并调用getStreamForSuccessfulRequest()方法获取到了最终的图片流。</p>        <h3 id="DecodeJob-run-1">          <a href="#DecodeJob-run-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#DecodeJob-run-1" class="headerlink" title="DecodeJob#run"></a>DecodeJob#run</h3>      <p>在我们通过HtttpUrlFetcher的loadData()方法请求得到对应的流之后，我们还必须对流进行处理得到最终我们想要的资源。这里我们回到第10步DecodeJob#run方法的关注点3处，这行代码将会对流进行解码。</p><pre class="line-numbers language-none"><code class="language-none">decodeFromRetrievedData();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来，继续看看他内部的处理。</p><pre class="line-numbers language-none"><code class="language-none">private void decodeFromRetrievedData() {    if (Log.isLoggable(TAG, Log.VERBOSE)) {      logWithTimeAndKey("Retrieved data", startFetchTime,          "data: " + currentData              + ", cache key: " + currentSourceKey              + ", fetcher: " + currentFetcher);    }    Resource&lt;R&gt; resource = null;    try {      //  核心代码       // 从数据中解码得到资源      resource = decodeFromData(currentFetcher, currentData,   currentDataSource);    } catch (GlideException e) {      e.setLoggingDetails(currentAttemptingKey, currentDataSource);      throwables.add(e);    }    if (resource != null) {      // 关注点8       // 编码和发布最终得到的Resource&lt;Bitmap&gt;对象      notifyEncodeAndRelease(resource, currentDataSource);    } else {      runGenerators();    }} private &lt;Data&gt; Resource&lt;R&gt; decodeFromData(DataFetcher&lt;?&gt; fetcher, Data data,  DataSource dataSource) throws GlideException {    try {      if (data == null) {        return null;      }      long startTime = LogTime.getLogTime();      // 核心代码      // 进一步包装了解码方法      Resource&lt;R&gt; result = decodeFromFetcher(data, dataSource);      if (Log.isLoggable(TAG, Log.VERBOSE)) {        logWithTimeAndKey("Decoded result " + result, startTime);      }      return result;    } finally {      fetcher.cleanup();    }}@SuppressWarnings("unchecked")private &lt;Data&gt; Resource&lt;R&gt; decodeFromFetcher(Data data, DataSource dataSource)  throws GlideException {    LoadPath&lt;Data, ?, R&gt; path = decodeHelper.getLoadPath((Class&lt;Data&gt;) data.getClass());    // 核心代码    // 将解码任务分发给LoadPath    return runLoadPath(data, dataSource, path);}private &lt;Data, ResourceType&gt; Resource&lt;R&gt; runLoadPath(Data data, DataSource dataSource,  LoadPath&lt;Data, ResourceType, R&gt; path) throws GlideException {    Options options = getOptionsWithHardwareConfig(dataSource);    // 将数据进一步包装    DataRewinder&lt;Data&gt; rewinder =     glideContext.getRegistry().getRewinder(data);    try {      // ResourceType in DecodeCallback below is required for   compilation to work with gradle.      // 核心代码      // 将解码任务分发给LoadPath      return path.load(          rewinder, options, width, height, new   DecodeCallback&lt;ResourceType&gt;(dataSource));    } finally {      rewinder.cleanup();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="LoadPath-load">          <a href="#LoadPath-load" class="heading-link"><i class="fas fa-link"></i></a><a href="#LoadPath-load" class="headerlink" title="LoadPath#load"></a>LoadPath#load</h3>      <pre class="line-numbers language-none"><code class="language-none">public Resource&lt;Transcode&gt; load(DataRewinder&lt;Data&gt; rewinder, @NonNull Options options, int width,  int height, DecodePath.DecodeCallback&lt;ResourceType&gt; decodeCallback) throws GlideException {List&lt;Throwable&gt; throwables = Preconditions.checkNotNull(listPool.acquire());try {  // 核心代码  return loadWithExceptionList(rewinder, options, width, height, decodeCallback, throwables);} finally {  listPool.release(throwables);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>}</p><pre class="line-numbers language-none"><code class="language-none">private Resource&lt;Transcode&gt; loadWithExceptionList(DataRewinder&lt;Data&gt; rewinder,      @NonNull Options options,      int width, int height, DecodePath.DecodeCallback&lt;ResourceType&gt;   decodeCallback,      List&lt;Throwable&gt; exceptions) throws GlideException {    Resource&lt;Transcode&gt; result = null;    //noinspection ForLoopReplaceableByForEach to improve perf    for (int i = 0, size = decodePaths.size(); i &lt; size; i++) {      DecodePath&lt;Data, ResourceType, Transcode&gt; path =   decodePaths.get(i);      try {        // 核心代码        // 将解码任务又进一步分发给DecodePath的decode方法去解码        result = path.decode(rewinder, width, height, options,     decodeCallback);      } catch (GlideException e) {        exceptions.add(e);      }      if (result != null) {        break;      }    }    if (result == null) {      throw new GlideException(failureMessage, new   ArrayList&lt;&gt;(exceptions));    }    return result;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="DecodePath-decode">          <a href="#DecodePath-decode" class="heading-link"><i class="fas fa-link"></i></a><a href="#DecodePath-decode" class="headerlink" title="DecodePath#decode"></a>DecodePath#decode</h3>      <pre class="line-numbers language-none"><code class="language-none">public Resource&lt;Transcode&gt; decode(DataRewinder&lt;DataType&gt; rewinder,     int width, int height,      @NonNull Options options, DecodeCallback&lt;ResourceType&gt; callback)   throws GlideException {    // 核心代码    // 继续调用DecodePath的decodeResource方法去解析出数据    Resource&lt;ResourceType&gt; decoded = decodeResource(rewinder, width,     height, options);    Resource&lt;ResourceType&gt; transformed =     callback.onResourceDecoded(decoded);    return transcoder.transcode(transformed, options);}@NonNullprivate Resource&lt;ResourceType&gt; decodeResource(DataRewinder&lt;DataType&gt;   rewinder, int width,    int height, @NonNull Options options) throws GlideException {  List&lt;Throwable&gt; exceptions =     Preconditions.checkNotNull(listPool.acquire());  try {    // 核心代码    return decodeResourceWithList(rewinder, width, height, options,   exceptions);  } finally {    listPool.release(exceptions);  }}@NonNullprivate Resource&lt;ResourceType&gt;   decodeResourceWithList(DataRewinder&lt;DataType&gt; rewinder, int width,    int height, @NonNull Options options, List&lt;Throwable&gt; exceptions)   throws GlideException {  Resource&lt;ResourceType&gt; result = null;  //noinspection ForLoopReplaceableByForEach to improve perf  for (int i = 0, size = decoders.size(); i &lt; size; i++) {    ResourceDecoder&lt;DataType, ResourceType&gt; decoder = decoders.get(i);    try {      DataType data = rewinder.rewindAndGet();      if (decoder.handles(data, options)) {        // 获取包装的数据        data = rewinder.rewindAndGet();        // 核心代码         // 根据DataType和ResourceType的类型分发给不同的解码器Decoder        result = decoder.decode(data, width, height, options);      }    } catch (IOException | RuntimeException | OutOfMemoryError e) {      if (Log.isLoggable(TAG, Log.VERBOSE)) {        Log.v(TAG, "Failed to decode data for " + decoder, e);      }      exceptions.add(e);    }    if (result != null) {      break;    }  }  if (result == null) {    throw new GlideException(failureMessage, new   ArrayList&lt;&gt;(exceptions));  }  return result;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，经过一连串的嵌套调用，最终执行到了decoder.decode()这行代码，decode是一个ResourceDecoder&lt;DataType, ResourceType&gt;接口（资源解码器），根据不同的DataType和ResourceType它会有不同的实现类，这里的实现类是ByteBufferBitmapDecoder，接下来让我们来看看这个解码器内部的解码流程。</p>        <h3 id="ByteBufferBitmapDecoder-decode">          <a href="#ByteBufferBitmapDecoder-decode" class="heading-link"><i class="fas fa-link"></i></a><a href="#ByteBufferBitmapDecoder-decode" class="headerlink" title="ByteBufferBitmapDecoder#decode"></a>ByteBufferBitmapDecoder#decode</h3>      <pre class="line-numbers language-none"><code class="language-none">/** * Decodes {@link android.graphics.Bitmap Bitmaps} from {@link    java.nio.ByteBuffer ByteBuffers}. */public class ByteBufferBitmapDecoder implements     ResourceDecoder&lt;ByteBuffer, Bitmap&gt; {    ...  @Override  public Resource&lt;Bitmap&gt; decode(@NonNull ByteBuffer source, int width,   int height,      @NonNull Options options)      throws IOException {    InputStream is = ByteBufferUtil.toStream(source);    // 核心代码    return downsampler.decode(is, width, height, options);  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，最终是使用了一个downsampler，它是一个压缩器，主要是对流进行解码，压缩，圆角等处理。</p>        <h3 id="DownSampler-decode">          <a href="#DownSampler-decode" class="heading-link"><i class="fas fa-link"></i></a><a href="#DownSampler-decode" class="headerlink" title="DownSampler#decode"></a>DownSampler#decode</h3>      <pre class="line-numbers language-none"><code class="language-none">public Resource&lt;Bitmap&gt; decode(InputStream is, int outWidth, int outHeight,  Options options) throws IOException {    return decode(is, outWidth, outHeight, options, EMPTY_CALLBACKS);} @SuppressWarnings({"resource", "deprecation"})public Resource&lt;Bitmap&gt; decode(InputStream is, int requestedWidth, int requestedHeight,      Options options, DecodeCallbacks callbacks) throws IOException {    Preconditions.checkArgument(is.markSupported(), "You must provide an     InputStream that supports"        + " mark()");    ...    try {      // 核心代码      Bitmap result = decodeFromWrappedStreams(is, bitmapFactoryOptions,          downsampleStrategy, decodeFormat, isHardwareConfigAllowed,   requestedWidth,          requestedHeight, fixBitmapToRequestedDimensions, callbacks);      // 关注点7         // 解码得到Bitmap对象后，包装成BitmapResource对象返回，      // 通过内部的get方法得到Resource&lt;Bitmap&gt;对象      return BitmapResource.obtain(result, bitmapPool);    } finally {      releaseOptions(bitmapFactoryOptions);      byteArrayPool.put(bytesForOptions);    }}private Bitmap decodeFromWrappedStreams(InputStream is,      BitmapFactory.Options options, DownsampleStrategy downsampleStrategy,      DecodeFormat decodeFormat, boolean isHardwareConfigAllowed, int requestedWidth,      int requestedHeight, boolean fixBitmapToRequestedDimensions,      DecodeCallbacks callbacks) throws IOException {        // 省去计算压缩比例等一系列非核心逻辑    ...        // 核心代码    Bitmap downsampled = decodeStream(is, options, callbacks, bitmapPool);    callbacks.onDecodeComplete(bitmapPool, downsampled);    ...    // Bimtap旋转处理    ...        return rotated;}private static Bitmap decodeStream(InputStream is,     BitmapFactory.Options options,      DecodeCallbacks callbacks, BitmapPool bitmapPool) throws   IOException {        ...        TransformationUtils.getBitmapDrawableLock().lock();    try {      // 核心代码      result = BitmapFactory.decodeStream(is, null, options);    } catch (IllegalArgumentException e) {      ...    } finally {      TransformationUtils.getBitmapDrawableLock().unlock();    }    if (options.inJustDecodeBounds) {      is.reset();    }    return result;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从以上源码流程我们知道，最后是在DownSampler的decodeStream()方法中使用了BitmapFactory.decodeStream()来得到Bitmap对象。然后，我们来分析下图片时如何显示的，我们回到步骤19的DownSampler#decode方法，看到关注点7，这里是将Bitmap包装成BitmapResource对象返回，通过内部的get方法可以得到Resource对象，再回到步骤15的DecodeJob#run方法，这是使用了notifyEncodeAndRelease()方法对Resource对象进行了发布。</p>        <h3 id="DecodeJob-notifyEncodeAndRelease">          <a href="#DecodeJob-notifyEncodeAndRelease" class="heading-link"><i class="fas fa-link"></i></a><a href="#DecodeJob-notifyEncodeAndRelease" class="headerlink" title="DecodeJob#notifyEncodeAndRelease"></a>DecodeJob#notifyEncodeAndRelease</h3>      <pre class="line-numbers language-none"><code class="language-none">private void notifyEncodeAndRelease(Resource&lt;R&gt; resource, DataSource     dataSource) {     ...    notifyComplete(result, dataSource);    ...    }private void notifyComplete(Resource&lt;R&gt; resource, DataSource     dataSource) {    setNotifiedOrThrow();    callback.onResourceReady(resource, dataSource);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从以上EngineJob的源码可知，它实现了DecodeJob.CallBack这个接口。</p><pre class="line-numbers language-none"><code class="language-none">class EngineJob&lt;R&gt; implements DecodeJob.Callback&lt;R&gt;,    Poolable {    ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="EngineJob-onResourceReady">          <a href="#EngineJob-onResourceReady" class="heading-link"><i class="fas fa-link"></i></a><a href="#EngineJob-onResourceReady" class="headerlink" title="EngineJob#onResourceReady"></a>EngineJob#onResourceReady</h3>      <pre class="line-numbers language-none"><code class="language-none">@Overridepublic void onResourceReady(Resource&lt;R&gt; resource, DataSource   dataSource) {  this.resource = resource;  this.dataSource = dataSource;  MAIN_THREAD_HANDLER.obtainMessage(MSG_COMPLETE, this).sendToTarget();}private static class MainThreadCallback implements Handler.Callback{    ...    @Override    public boolean handleMessage(Message message) {      EngineJob&lt;?&gt; job = (EngineJob&lt;?&gt;) message.obj;      switch (message.what) {        case MSG_COMPLETE:          // 核心代码          job.handleResultOnMainThread();          break;        ...      }      return true;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从以上源码可知，通过主线程Handler对象进行切换线程，然后在主线程调用了handleResultOnMainThread这个方法。</p><pre class="line-numbers language-none"><code class="language-none">@Syntheticvoid handleResultOnMainThread() {  ...  //noinspection ForLoopReplaceableByForEach to improve perf  for (int i = 0, size = cbs.size(); i &lt; size; i++) {    ResourceCallback cb = cbs.get(i);    if (!isInIgnoredCallbacks(cb)) {      engineResource.acquire();      cb.onResourceReady(engineResource, dataSource);    }  }   ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里又通过一个循环调用了所有ResourceCallback的方法，让我们回到步骤9处Engine#load方法的关注点8这行代码，这里对ResourceCallback进行了注册，在步骤8出SingleRequest#onSizeReady方法里的engine.load中，我们看到最后一个参数，传入的是this，可以明白，engineJob.addCallback(cb)这里的cb的实现类就是SingleRequest。接下来，让我们看看SingleRequest的onResourceReady方法。</p>        <h3 id="SingleRequest-onResourceReady">          <a href="#SingleRequest-onResourceReady" class="heading-link"><i class="fas fa-link"></i></a><a href="#SingleRequest-onResourceReady" class="headerlink" title="SingleRequest#onResourceReady"></a>SingleRequest#onResourceReady</h3>      <pre class="line-numbers language-none"><code class="language-none">/** * A callback method that should never be invoked directly. */@SuppressWarnings("unchecked")@Overridepublic void onResourceReady(Resource&lt;?&gt; resource, DataSource   dataSource) {  ...    // 从Resource&lt;Bitmap&gt;中得到Bitmap对象  Object received = resource.get();    ...    onResourceReady((Resource&lt;R&gt;) resource, (R) received, dataSource);}private void onResourceReady(Resource&lt;R&gt; resource, R resultDataSource dataSource) {    ...    try {      ...      if (!anyListenerHandledUpdatingTarget) {        Transition&lt;? super R&gt; animation =            animationFactory.build(dataSource, isFirstResource);        // 核心代码        target.onResourceReady(result, animation);      }    } finally {      isCallingCallbacks = false;    }    notifyLoadSuccess();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在SingleRequest#onResourceReady方法中又调用了target.onResourceReady(result, animation)方法，这里的target其实就是我们在into方法中建立的那个BitmapImageViewTarget，看到BitmapImageViewTarget类，我们并没有发现onResourceReady方法，但是我们从它的子类ImageViewTarget中发现了onResourceReady方法，从这里继续往下看。</p>        <h3 id="ImageViewTarget-onResourceReady">          <a href="#ImageViewTarget-onResourceReady" class="heading-link"><i class="fas fa-link"></i></a><a href="#ImageViewTarget-onResourceReady" class="headerlink" title="ImageViewTarget#onResourceReady"></a>ImageViewTarget#onResourceReady</h3>      <pre class="line-numbers language-none"><code class="language-none">public abstract class ImageViewTarget&lt;Z&gt; extends ViewTarget&lt;ImageView, Z&gt;implements Transition.ViewAdapter {    ...    @Override    public void onResourceReady(@NonNull Z resource, @Nullable       Transition&lt;? super Z&gt; transition) {      if (transition == null || !transition.transition(resource, this))   {        // 核心代码        setResourceInternal(resource);      } else {        maybeUpdateAnimatable(resource);      }    }     ...        private void setResourceInternal(@Nullable Z resource) {        // Order matters here. Set the resource first to make sure that the         Drawable has a valid and        // non-null Callback before starting it.        // 核心代码        setResource(resource);        maybeUpdateAnimatable(resource);    }        // 核心代码    protected abstract void setResource(@Nullable Z resource);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们在回到BitmapImageViewTarget的setResource方法中，终于看到Bitmap被设置到了当前的imageView上了。</p><pre class="line-numbers language-none"><code class="language-none">public class BitmapImageViewTarget extends ImageViewTarget&lt;Bitmap&gt; {    ...            @Override    protected void setResource(Bitmap resource) {      view.setImageBitmap(resource);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里，我们的分析就结束了，从以上的分析可知，Glide将大部分的逻辑处理都放在了最后一个into方法中，里面经过了20多个分析步骤才将请求图片流、解码出图片，到最终设置到对应的imageView上。</p>        <h2 id="完整Glide加载流程图">          <a href="#完整Glide加载流程图" class="heading-link"><i class="fas fa-link"></i></a><a href="#完整Glide加载流程图" class="headerlink" title="完整Glide加载流程图"></a>完整Glide加载流程图</h2>      <p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9da2924eeab4ef79249b5836fd916da~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><blockquote><p>可以看到，Glide最核心的逻辑都聚集在into()方法中，它里面的设计精巧而复杂，这部分的源码分析非常耗时，但是，如果你真真正正地去一步步去深入其中，你也许在Android进阶之路上将会有顿悟的感觉。</p></blockquote>        <h1 id="GreenDao">          <a href="#GreenDao" class="heading-link"><i class="fas fa-link"></i></a><a href="#GreenDao" class="headerlink" title="GreenDao"></a>GreenDao</h1>              <h2 id="基本使用流程-2">          <a href="#基本使用流程-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本使用流程-2" class="headerlink" title="基本使用流程"></a>基本使用流程</h2>              <h3 id="导入GreenDao的代码生成插件和库">          <a href="#导入GreenDao的代码生成插件和库" class="heading-link"><i class="fas fa-link"></i></a><a href="#导入GreenDao的代码生成插件和库" class="headerlink" title="导入GreenDao的代码生成插件和库"></a>导入GreenDao的代码生成插件和库</h3>      <pre class="line-numbers language-none"><code class="language-none">// 项目下的build.gradlebuildscript {    ...    dependencies {        classpath 'com.android.tools.build:gradle:2.3.0'        classpath 'org.greenrobot:greendao-gradle-plugin:3.2.1'     }}// app模块下的build.gradleapply plugin: 'com.android.application'apply plugin: 'org.greenrobot.greendao'...dependencies {    ...    compile 'org.greenrobot:greendao:3.2.0' }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="创建一个实体类，这里为HistoryData">          <a href="#创建一个实体类，这里为HistoryData" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建一个实体类，这里为HistoryData" class="headerlink" title="创建一个实体类，这里为HistoryData"></a>创建一个实体类，这里为HistoryData</h3>      <pre class="line-numbers language-none"><code class="language-none">@Entitypublic class HistoryData {    @Id(autoincrement = true)    private Long id;    private long date;    private String data;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="选择ReBuild-Project，HistoryData会被自动添加Set-get方法，并生成整个项目的DaoMaster、DaoSession类，以及与该实体HistoryData对应的HistoryDataDao。">          <a href="#选择ReBuild-Project，HistoryData会被自动添加Set-get方法，并生成整个项目的DaoMaster、DaoSession类，以及与该实体HistoryData对应的HistoryDataDao。" class="heading-link"><i class="fas fa-link"></i></a><a href="#选择ReBuild-Project，HistoryData会被自动添加Set-get方法，并生成整个项目的DaoMaster、DaoSession类，以及与该实体HistoryData对应的HistoryDataDao。" class="headerlink" title="选择ReBuild Project，HistoryData会被自动添加Set/get方法，并生成整个项目的DaoMaster、DaoSession类，以及与该实体HistoryData对应的HistoryDataDao。"></a>选择ReBuild Project，HistoryData会被自动添加Set/get方法，并生成整个项目的DaoMaster、DaoSession类，以及与该实体HistoryData对应的HistoryDataDao。</h3>      <p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/75ea30aea6034e939918d0da2b43c9d9~tplv-k3u1fbpfcp-zoom-1.image" alt="image"></p><pre class="line-numbers language-none"><code class="language-none">@Entitypublic class HistoryData {    @Id(autoincrement = true)    private Long id;    private long date;    private String data;    @Generated(hash = 1371145256)    public HistoryData(Long id, long date, String data) {        this.id = id;        this.date = date;        this.data = data;    }    @Generated(hash = 422767273)    public HistoryData() {    }    public Long getId() {        return this.id;    }    public void setId(Long id) {        this.id = id;    }    public long getDate() {        return this.date;    }    public void setDate(long date) {        this.date = date;    }    public String getData() {        return this.data;    }    public void setData(String data) {        this.data = data;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里点明一下这几个类的作用：</p><ul><li>DaoMaster：所有Dao类的主人，负责整个库的运行，内部的静态抽象子类DevOpenHelper继承并重写了Android的SqliteOpenHelper。</li><li>DaoSession：作为一个会话层的角色，用于生成相应的Dao对象、Dao对象的注册，操作Dao的具体对象。</li><li>xxDao（HistoryDataDao）：生成的Dao对象，用于进行具体的数据库操作。</li></ul>        <h3 id="获取并使用相应的Dao对象进行增删改查操作">          <a href="#获取并使用相应的Dao对象进行增删改查操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#获取并使用相应的Dao对象进行增删改查操作" class="headerlink" title="获取并使用相应的Dao对象进行增删改查操作"></a>获取并使用相应的Dao对象进行增删改查操作</h3>      <pre class="line-numbers language-none"><code class="language-none">DaoMaster.DevOpenHelper devOpenHelper = new DaoMaster.DevOpenHelper(this, Constants.DB_NAME);SQLiteDatabase database = devOpenHelper.getWritableDatabase();DaoMaster daoMaster = new DaoMaster(database);mDaoSession = daoMaster.newSession();HistoryDataDao historyDataDao = daoSession.getHistoryDataDao();// 省略创建historyData的代码...// 增historyDataDao.insert(historyData);// 删historyDataDao.delete(historyData);// 改historyDataDao.update(historyData);// 查List&lt;HistoryData&gt; historyDataList = historyDataDao.loadAll();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本节将会以上述使用流程来对GreenDao的源码进行逐步分析，最后会分析下GreenDao中一些优秀的特性，让大家对GreenDao的理解有更一步的加深。</p>        <h2 id="GreenDao使用流程分析">          <a href="#GreenDao使用流程分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#GreenDao使用流程分析" class="headerlink" title="GreenDao使用流程分析"></a>GreenDao使用流程分析</h2>              <h3 id="创建数据库帮助类对象DaoMaster-DevOpenHelper">          <a href="#创建数据库帮助类对象DaoMaster-DevOpenHelper" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建数据库帮助类对象DaoMaster-DevOpenHelper" class="headerlink" title="创建数据库帮助类对象DaoMaster.DevOpenHelper"></a>创建数据库帮助类对象DaoMaster.DevOpenHelper</h3>      <pre class="line-numbers language-none"><code class="language-none">DaoMaster.DevOpenHelper devOpenHelper = new DaoMaster.DevOpenHelper(this, Constants.DB_NAME);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建GreenDao内部实现的数据库帮助类对象devOpenHelper，核心源码如下：</p><pre class="line-numbers language-none"><code class="language-none">public class DaoMaster extends AbstractDaoMaster {    ...    public static abstract class OpenHelper extends DatabaseOpenHelper {        ...             @Override        public void onCreate(Database db) {            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);            createAllTables(db, false);        }    }        public static class DevOpenHelper extends OpenHelper {            ...                @Override        public void onUpgrade(Database db, int oldVersion, int newVersion) {            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");            dropAllTables(db, true);            onCreate(db);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DevOpenHelper自身实现了更新的逻辑，这里是弃置了所有的表，并且调用了OpenHelper实现的onCreate方法用于创建所有的表，其中DevOpenHelper继承于OpenHelper，而OpenHelper自身又继承于DatabaseOpenHelper，那么，这个DatabaseOpenHelper这个类的作用是什么呢？</p><pre class="line-numbers language-none"><code class="language-none">public abstract class DatabaseOpenHelper extends SQLiteOpenHelper {    ...        // 关注点1    public Database getWritableDb() {        return wrap(getWritableDatabase());    }        public Database getReadableDb() {        return wrap(getReadableDatabase());    }           protected Database wrap(SQLiteDatabase sqLiteDatabase) {        return new StandardDatabase(sqLiteDatabase);    }        ...        // 关注点2    public Database getEncryptedWritableDb(String password) {        EncryptedHelper encryptedHelper = checkEncryptedHelper();        return encryptedHelper.wrap(encryptedHelper.getWritableDatabase(password));    }        public Database getEncryptedReadableDb(String password) {        EncryptedHelper encryptedHelper = checkEncryptedHelper();        return encryptedHelper.wrap(encryptedHelper.getReadableDatabase(password));    }        ...        private class EncryptedHelper extends net.sqlcipher.database.SQLiteOpenHelper {            ...                protected Database wrap(net.sqlcipher.database.SQLiteDatabase     sqLiteDatabase) {            return new EncryptedDatabase(sqLiteDatabase);        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实，DatabaseOpenHelper也是实现了SQLiteOpenHelper的一个帮助类，它内部可以获取到两种不同的数据库类型，一种是标准型的数据库<strong>StandardDatabase</strong>，另一种是加密型的数据库<strong>EncryptedDatabase</strong>，从以上源码可知，它们内部都通过wrap这样一个包装的方法，返回了对应的数据库类型，我们大致看一下StandardDatabase和EncryptedDatabase的内部实现。</p><pre class="line-numbers language-none"><code class="language-none">public class StandardDatabase implements Database {    // 这里的SQLiteDatabase是android.database.sqlite.SQLiteDatabase包下的    private final SQLiteDatabase delegate;    public StandardDatabase(SQLiteDatabase delegate) {        this.delegate = delegate;    }    @Override    public Cursor rawQuery(String sql, String[] selectionArgs) {        return delegate.rawQuery(sql, selectionArgs);    }    @Override    public void execSQL(String sql) throws SQLException {        delegate.execSQL(sql);    }    ...}public class EncryptedDatabaseStatement implements DatabaseStatement     {    // 这里的SQLiteStatement是net.sqlcipher.database.SQLiteStatement包下的    private final SQLiteStatement delegate;    public EncryptedDatabaseStatement(SQLiteStatement delegate) {        this.delegate = delegate;    }    @Override    public void execute() {        delegate.execute();    }        ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>StandardDatabase和EncryptedDatabase这两个类内部都使用了<strong>代理模式</strong>给相同的接口添加了不同的具体实现，StandardDatabase自然是使用的Android包下的SQLiteDatabase，而EncryptedDatabaseStatement为了实现加密数据库的功能，则使用了一个叫做<strong>sqlcipher</strong>的数据库加密三方库，<strong>如果你项目下的数据库需要保存比较重要的数据，则可以使用getEncryptedWritableDb方法来代替getdWritableDb方法对数据库进行加密，这样，我们之后的数据库操作则会以代理模式的形式间接地使用sqlcipher提供的API去操作数据库</strong>。</p>        <h3 id="创建DaoMaster对象">          <a href="#创建DaoMaster对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建DaoMaster对象" class="headerlink" title="创建DaoMaster对象"></a>创建DaoMaster对象</h3>      <pre class="line-numbers language-none"><code class="language-none">SQLiteDatabase database = devOpenHelper.getWritableDatabase();DaoMaster daoMaster = new DaoMaster(database);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>首先，DaoMaster作为所有Dao对象的主人，它内部肯定是需要一个SQLiteDatabase对象的，因此，先由DaoMaster的帮助类对象devOpenHelper的getWritableDatabase方法得到一个标准的数据库类对象database，再由此创建一个DaoMaster对象。</p><pre class="line-numbers language-none"><code class="language-none">public class DaoMaster extends AbstractDaoMaster {    ...    public DaoMaster(SQLiteDatabase db) {        this(new StandardDatabase(db));    }    public DaoMaster(Database db) {        super(db, SCHEMA_VERSION);        registerDaoClass(HistoryDataDao.class);    }        ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在DaoMaster的构造方法中，它首先执行了super(db, SCHEMA_VERSION)方法，即它的父类AbstractDaoMaster的构造方法。</p><pre class="line-numbers language-none"><code class="language-none">public abstract class AbstractDaoMaster {    ...    public AbstractDaoMaster(Database db, int schemaVersion) {        this.db = db;        this.schemaVersion = schemaVersion;        daoConfigMap = new HashMap&lt;Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;, DaoConfig&gt;();    }        protected void registerDaoClass(Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt; daoClass) {        DaoConfig daoConfig = new DaoConfig(db, daoClass);        daoConfigMap.put(daoClass, daoConfig);    }        ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在AbstractDaoMaster对象的构造方法中，除了记录当前的数据库对象db和版本schemaVersion之外，还创建了一个类型为<strong>HashMap<code>&lt;Class&gt;</code>, DaoConfig&gt;()的daoConfigMap对象用于保存每一个DAO对应的数据配置对象DaoConfig，并且Daoconfig对象存储了对应的Dao对象所必需的数据</strong>。最后，在DaoMaster的构造方法中使用了registerDaoClass(HistoryDataDao.class)方法将HistoryDataDao类对象进行了注册，实际上，就是为HistoryDataDao这个Dao对象创建了相应的DaoConfig对象并将它放入daoConfigMap对象中保存起来。</p>        <h3 id="创建DaoSession对象">          <a href="#创建DaoSession对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建DaoSession对象" class="headerlink" title="创建DaoSession对象"></a>创建DaoSession对象</h3>      <pre class="line-numbers language-none"><code class="language-none">mDaoSession = daoMaster.newSession();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在DaoMaster对象中使用了newSession方法新建了一个DaoSession对象。</p><pre class="line-numbers language-none"><code class="language-none">public DaoSession newSession() {    return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在DaoSeesion的构造方法中，又做了哪些事情呢？</p><pre class="line-numbers language-none"><code class="language-none">public class DaoSession extends AbstractDaoSession {    ...    public DaoSession(Database db, IdentityScopeType type, Map&lt;Class&lt;?     extends AbstractDao&lt;?, ?&gt;&gt;, DaoConfig&gt;            daoConfigMap) {        super(db);        historyDataDaoConfig = daoConfigMap.get(HistoryDataDao.class).clone();        historyDataDaoConfig.initIdentityScope(type);        historyDataDao = new HistoryDataDao(historyDataDaoConfig, this);        registerDao(HistoryData.class, historyDataDao);    }        ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，调用了父类AbstractDaoSession的构造方法。</p><pre class="line-numbers language-none"><code class="language-none">public class AbstractDaoSession {    ...    public AbstractDaoSession(Database db) {        this.db = db;        this.entityToDao = new HashMap&lt;Class&lt;?&gt;, AbstractDao&lt;?, ?&gt;&gt;();    }        protected &lt;T&gt; void registerDao(Class&lt;T&gt; entityClass, AbstractDao&lt;T, ?&gt; dao) {        entityToDao.put(entityClass, dao);    }        ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在AbstractDaoSession构造方法里面<strong>创建了一个实体与Dao对象的映射集合</strong>。接下来，在DaoSession的构造方法中还做了2件事：</p><ol><li><p><strong>创建每一个Dao对应的DaoConfig对象</strong>，这里是historyDataDaoConfig，<strong>并且根据IdentityScopeType的类型初始化创建一个相应的IdentityScope</strong>，根据type的不同，它有两种类型，分别是<strong>IdentityScopeObject</strong>和<strong>IdentityScopeLong</strong>，它的作用是根据主键缓存对应的实体数据。当主键是数字类型的时候，如long/Long、int/Integer、short/Short、byte/Byte，则使用IdentityScopeLong缓存实体数据，当主键不是数字类型的时候，则使用IdentityScopeObject缓存实体数据。</p></li><li><p><strong>根据DaoSession对象和每一个Dao对应的DaoConfig对象，创建与之对应的historyDataDao对象</strong>，由于这个项目只创建了一个实体类HistoryData，因此这里只有一个Dao对象historyDataDao，然后就是注册Dao对象，其实就是将实体和对应的Dao对象放入entityToDao这个映射集合中保存起来了。</p></li></ol>        <h3 id="插入源码分析">          <a href="#插入源码分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#插入源码分析" class="headerlink" title="插入源码分析"></a>插入源码分析</h3>      <pre class="line-numbers language-none"><code class="language-none">HistoryDataDao historyDataDao = daoSession.getHistoryDataDao();// 增historyDataDao.insert(historyData);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里首先在会话层DaoSession中获取了我们要操作的Dao对象HistoryDataDao，然后插入了一个我们预先创建好的historyData实体对象。其中HistoryDataDao继承了AbstractDao&lt;HistoryData, Long&gt; 。</p><pre class="line-numbers language-none"><code class="language-none">public class HistoryDataDao extends AbstractDao&lt;HistoryData, Long&gt; {    ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>那么，这个AbstractDao是干什么的呢？</p><pre class="line-numbers language-none"><code class="language-none">public abstract class AbstractDao&lt;T, K&gt; {    ...        public List&lt;T&gt; loadAll() {        Cursor cursor = db.rawQuery(statements.getSelectAll(), null);        return loadAllAndCloseCursor(cursor);    }        ...        public long insert(T entity) {        return executeInsert(entity, statements.getInsertStatement(),     true);    }        ...        public void delete(T entity) {        assertSinglePk();        K key = getKeyVerified(entity);        deleteByKey(key);    }        ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到这里，根据程序员优秀的直觉，大家应该能猜到，AbstractDao是所有Dao对象的基类，它实现了实体数据的操作如增删改查。我们接着分析insert是如何实现的，在AbstractDao的insert方法中又调用了executeInsert这个方法。在这个方法中，第二个参里的statements是一个<strong>TableStatements</strong>对象，它是在AbstractDao初始化构造器时从DaoConfig对象中取出来的，是一个<strong>根据指定的表格创建SQL语句的一个帮助类</strong>。使用statements.getInsertStatement()则是获取了一个插入的语句。而第三个参数则是判断是否是主键的标志。</p><pre class="line-numbers language-none"><code class="language-none">public class TableStatements {    ...    public DatabaseStatement getInsertStatement() {        if (insertStatement == null) {            String sql = SqlUtils.createSqlInsert("INSERT INTO ", tablename, allColumns);            DatabaseStatement newInsertStatement = db.compileStatement(sql);            ...        }        return insertStatement;    }    ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在TableStatements的getInsertStatement方法中，主要做了两件事：</p><ol><li><p><strong>使用SqlUtils创建了插入的sql语句</strong>。</p></li><li><p><strong>根据不同的数据库类型（标准数据库或加密数据库）将sql语句编译成当前数据库对应的语句</strong>。</p></li></ol><p>我们继续往下分析executeInsert的执行流程。</p><pre class="line-numbers language-none"><code class="language-none">private long executeInsert(T entity, DatabaseStatement stmt, boolean setKeyAndAttach) {    long rowId;    if (db.isDbLockedByCurrentThread()) {        rowId = insertInsideTx(entity, stmt);    } else {        db.beginTransaction();        try {            rowId = insertInsideTx(entity, stmt);            db.setTransactionSuccessful();        } finally {            db.endTransaction();        }    }    if (setKeyAndAttach) {        updateKeyAfterInsertAndAttach(entity, rowId, true);    }    return rowId;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里首先是判断数据库是否被当前线程锁定，如果是，则直接插入数据，否则为了避免死锁，则开启一个数据库事务，再进行插入数据的操作。最后如果设置了主键，则在插入数据之后更新主键的值并将对应的实体缓存到相应的identityScope中，这一块的代码流程如下所示：</p><pre class="line-numbers language-none"><code class="language-none">protected void updateKeyAfterInsertAndAttach(T entity, long rowId, boolean lock) {    if (rowId != -1) {        K key = updateKeyAfterInsert(entity, rowId);        attachEntity(key, entity, lock);    } else {       ...    }}protected final void attachEntity(K key, T entity, boolean lock) {    attachEntity(entity);    if (identityScope != null &amp;&amp; key != null) {        if (lock) {            identityScope.put(key, entity);        } else {            identityScope.putNoLock(key, entity);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着，我们还是继续追踪主线流程，在executeInsert这个方法中调用了insertInsideTx进行数据的插入。</p><pre class="line-numbers language-none"><code class="language-none">private long insertInsideTx(T entity, DatabaseStatement stmt) {    synchronized (stmt) {        if (isStandardSQLite) {            SQLiteStatement rawStmt = (SQLiteStatement) stmt.getRawStatement();            bindValues(rawStmt, entity);            return rawStmt.executeInsert();        } else {            bindValues(stmt, entity);            return stmt.executeInsert();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了防止并发，这里使用了悲观锁保证了数据的一致性，在AbstractDao这个类中，大量使用了这种锁保证了它的线程安全性。接着，如果当前是标准数据库，则直接获取stmt这个DatabaseStatement类对应的原始语句进行实体字段属性的绑定和最后的执行插入操作。如果是加密数据库，则直接使用当前的加密数据库所属的插入语句进行实体字段属性的绑定和执行最后的插入操作。其中bindValues这个方法对应的实现类就是我们的HistoryDataDao类。</p><pre class="line-numbers language-none"><code class="language-none">public class HistoryDataDao extends AbstractDao&lt;HistoryData, Long&gt; {    ...    @Override    protected final void bindValues(DatabaseStatement stmt, HistoryData     entity) {        stmt.clearBindings();        Long id = entity.getId();        if (id != null) {            stmt.bindLong(1, id);        }        stmt.bindLong(2, entity.getDate());        String data = entity.getData();        if (data != null) {            stmt.bindString(3, data);        }    }        @Override    protected final void bindValues(SQLiteStatement stmt, HistoryData     entity) {        stmt.clearBindings();        Long id = entity.getId();        if (id != null) {            stmt.bindLong(1, id);        }        stmt.bindLong(2, entity.getDate());        String data = entity.getData();        if (data != null) {            stmt.bindString(3, data);        }    }    ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，这里对HistoryData的所有字段使用对应的数据库语句进行了绑定操作。这里最后再提及一下，<strong>如果当前数据库是加密型时，则会使用最开始提及的DatabaseStatement的加密实现类EncryptedDatabaseStatement应用代理模式去使用sqlcipher这个加密型数据库的insert方法</strong>。</p>        <h3 id="查询源码分析">          <a href="#查询源码分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#查询源码分析" class="headerlink" title="查询源码分析"></a>查询源码分析</h3>      <p>经过对插入源码的分析，相信大家对GreenDao内部的机制已经有了一些自己的理解，由于删除和更新内部的流程比较简单，且与插入源码有异曲同工之妙，这里就不再赘述了。最后再分析下查询的源码，查询的流程调用链较长，所以将它的核心流程源码直接给出。</p><pre class="line-numbers language-none"><code class="language-none">List&lt;HistoryData&gt; historyDataList = historyDataDao.loadAll();public List&lt;T&gt; loadAll() {    Cursor cursor = db.rawQuery(statements.getSelectAll(), null);    return loadAllAndCloseCursor(cursor);}protected List&lt;T&gt; loadAllAndCloseCursor(Cursor cursor) {    try {        return loadAllFromCursor(cursor);    } finally {        cursor.close();    }}protected List&lt;T&gt; loadAllFromCursor(Cursor cursor) {    int count = cursor.getCount();    ...    boolean useFastCursor = false;    if (cursor instanceof CrossProcessCursor) {        window = ((CrossProcessCursor) cursor).getWindow();        if (window != null) {              if (window.getNumRows() == count) {                cursor = new FastCursor(window);                useFastCursor = true;            } else {              ...            }        }    }    if (cursor.moveToFirst()) {        ...        try {            if (!useFastCursor &amp;&amp; window != null &amp;&amp; identityScope != null) {                loadAllUnlockOnWindowBounds(cursor, window, list);            } else {                do {                    list.add(loadCurrent(cursor, 0, false));                } while (cursor.moveToNext());            }        } finally {            ...        }    }    return list;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终，loadAll方法将会调用到loadAllFromCursor这个方法，首先，如果<strong>当前的游标cursor是跨进程的cursor</strong>，并且cursor的行数没有偏差的话，则使用一个加快版的<strong>FastCursor</strong>对象进行游标遍历。接着，不管是执行loadAllUnlockOnWindowBounds这个方法还是直接加载当前的数据列表list.add(loadCurrent(cursor, 0, false))，最后都会调用到这行list.add(loadCurrent(cursor, 0, false))代码，很明显，loadCurrent方法就是加载数据的方法。</p><pre class="line-numbers language-none"><code class="language-none">final protected T loadCurrent(Cursor cursor, int offset, boolean lock) {    if (identityScopeLong != null) {        ...        T entity = lock ? identityScopeLong.get2(key) : identityScopeLong.get2NoLock(key);        if (entity != null) {            return entity;        } else {            entity = readEntity(cursor, offset);            attachEntity(entity);            if (lock) {                identityScopeLong.put2(key, entity);            } else {                identityScopeLong.put2NoLock(key, entity);            }            return entity;        }    } else if (identityScope != null) {        ...        T entity = lock ? identityScope.get(key) : identityScope.getNoLock(key);        if (entity != null) {            return entity;        } else {            entity = readEntity(cursor, offset);            attachEntity(key, entity, lock);            return entity;        }    } else {        ...        T entity = readEntity(cursor, offset);        attachEntity(entity);        return entity;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h4 id="loadCurrent方法内部的执行策略">          <a href="#loadCurrent方法内部的执行策略" class="heading-link"><i class="fas fa-link"></i></a><a href="#loadCurrent方法内部的执行策略" class="headerlink" title="loadCurrent方法内部的执行策略"></a>loadCurrent方法内部的执行策略</h4>      <p><strong>首先，如果有实体数据缓存identityScopeLong/identityScope，则先从缓存中取，如果缓存中没有，会使用该实体对应的Dao对象，这里的是HistoryDataDao，它在内部根据游标取出的数据新建了一个新的HistoryData实体对象返回。</strong></p><pre class="line-numbers language-none"><code class="language-none">@Overridepublic HistoryData readEntity(Cursor cursor, int offset) {    HistoryData entity = new HistoryData( //        cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id        cursor.getLong(offset + 1), // date        cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // data    );    return entity;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>最后，如果是非identityScopeLong缓存类型，即是属于identityScope的情况下，则还会在identityScope中将上面获得的数据进行缓存。如果没有实体数据缓存的话，则直接调用readEntity组装数据返回即可。</strong></p><p>注意：对于GreenDao缓存的特性，可能会出现没有拿到最新数据的bug，因此，如果遇到这种情况，可以使用DaoSession的clear方法删除缓存。</p>        <h2 id="GreenDao是如何与ReactiveX结合？">          <a href="#GreenDao是如何与ReactiveX结合？" class="heading-link"><i class="fas fa-link"></i></a><a href="#GreenDao是如何与ReactiveX结合？" class="headerlink" title="GreenDao是如何与ReactiveX结合？"></a>GreenDao是如何与ReactiveX结合？</h2>      <p>首先，看下与rx结合的使用流程：</p><pre class="line-numbers language-none"><code class="language-none">RxDao&lt;HistoryData, Long&gt; xxDao = daoSession.getHistoryDataDao().rx();xxDao.insert(historyData)        .observerOn(AndroidSchedulers.mainThread())        .subscribe(new Action1&lt;HistoryData&gt;() {            @Override            public void call(HistoryData entity) {                // insert success            }        });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在AbstractDao对象的.rx()方法中，创建了一个默认执行在io线程的rxDao对象。</p><pre class="line-numbers language-none"><code class="language-none">@Experimentalpublic RxDao&lt;T, K&gt; rx() {    if (rxDao == null) {        rxDao = new RxDao&lt;&gt;(this, Schedulers.io());    }    return rxDao;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着分析rxDao的insert方法。</p><pre class="line-numbers language-none"><code class="language-none">@Experimentalpublic Observable&lt;T&gt; insert(final T entity) {    return wrap(new Callable&lt;T&gt;() {        @Override        public T call() throws Exception {            dao.insert(entity);            return entity;        }    });}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>起实质作用的就是这个wrap方法了，在这个方法里面主要是调用了RxUtils.fromCallable(callable)这个方法。</p><pre class="line-numbers language-none"><code class="language-none">@Internalclass RxBase {    ...    protected &lt;R&gt; Observable&lt;R&gt; wrap(Callable&lt;R&gt; callable) {        return wrap(RxUtils.fromCallable(callable));    }    protected &lt;R&gt; Observable&lt;R&gt; wrap(Observable&lt;R&gt; observable) {        if (scheduler != null) {            return observable.subscribeOn(scheduler);        } else {            return observable;        }    }    ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在RxUtils的fromCallable这个方法内部，其实就是<strong>使用defer这个延迟操作符来进行被观察者事件的发送，主要目的就是为了确保Observable被订阅后才执行</strong>。最后，如果调度器scheduler存在的话，将通过外部的wrap方法将执行环境调度到io线程。</p><pre class="line-numbers language-none"><code class="language-none">@Internalclass RxUtils {    @Internal    static &lt;T&gt; Observable&lt;T&gt; fromCallable(final Callable&lt;T&gt; callable) {        return Observable.defer(new Func0&lt;Observable&lt;T&gt;&gt;() {            @Override            public Observable&lt;T&gt; call() {                T result;                try {                    result = callable.call();                } catch (Exception e) {                    return Observable.error(e);                }                return Observable.just(result);            }        });    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在分析完GreenDao的核心源码之后发现，GreenDao作为最好的数据库框架之一，是有一定道理的。</p><p><strong>首先，它通过使用自身的插件配套相应的freemarker模板生成所需的静态代码，避免了反射等消耗性能的操作。</strong></p><p><strong>其次，它内部提供了实体数据的映射缓存机制，能够进一步加快查询速度。对于不同数据库对应的SQL语句，也使用了不同的DataBaseStatement实现类结合代理模式进行了封装，屏蔽了数据库操作等繁琐的细节。</strong></p><p><strong>最后，它使用了sqlcipher提供了加密数据库的功能，在一定程度确保了安全性，同时，结合RxJava，我们便能更简洁地实现异步的数据库操作</strong>。</p></blockquote>        <h1 id="RxJava">          <a href="#RxJava" class="heading-link"><i class="fas fa-link"></i></a><a href="#RxJava" class="headerlink" title="RxJava"></a>RxJava</h1>              <h2 id="RxJava到底是什么？">          <a href="#RxJava到底是什么？" class="heading-link"><i class="fas fa-link"></i></a><a href="#RxJava到底是什么？" class="headerlink" title="RxJava到底是什么？"></a>RxJava到底是什么？</h2>      <p>RxJava是基于Java虚拟机上的响应式扩展库，它通过<strong>使用可观察的序列将异步和基于事件的程序组合起来</strong>。 与此同时，它<strong>扩展了观察者模式来支持数据/事件序列</strong>，并且添加了操作符，这些<strong>操作符允许你声明性地组合序列</strong>，同时抽象出要关注的问题：比如低级线程、同步、线程安全和并发数据结构等。</p><p>从RxJava的官方定义来看，我们如果要想真正地理解RxJava，就必须对它以下两个部分进行深入的分析：</p><ol><li><p><strong>订阅流程</strong></p></li><li><p><strong>线程切换</strong></p></li></ol><p>当然，RxJava操作符的源码也是很不错的学习资源，特别是FlatMap、Zip等操作符的源码，有很多可以借鉴的地方，但是它们内部的实现比较复杂。</p>        <h2 id="RxJava的订阅流程">          <a href="#RxJava的订阅流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#RxJava的订阅流程" class="headerlink" title="RxJava的订阅流程"></a>RxJava的订阅流程</h2>      <p>首先给出RxJava消息订阅的例子：</p><pre class="line-numbers language-none"><code class="language-none">Observable.create(newObservableOnSubscribe&lt;String&gt;() {    @Override    public void subscribe(ObservableEmitter&lt;String&gt;emitter) throws Exception {        emitter.onNext("1");        emitter.onNext("2");        emitter.onNext("3");        emitter.onComplete();    }}).subscribe(new Observer&lt;String&gt;() {    @Override    public void onSubscribe(Disposable d) {        Log.d(TAG, "onSubscribe");    }    @Override    public void onNext(String s) {        Log.d(TAG, "onNext : " + s);    }    @Override    public void onError(Throwable e) {        Log.d(TAG, "onError : " + e.toString());    }    @Override    public void onComplete() {        Log.d(TAG, "onComplete");    }});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，这里首先创建了一个被观察者，然后创建一个观察者订阅了这个被观察者，因此下面分两个部分对RxJava的订阅流程进行分析：</p><ol><li><p><strong>创建被观察者过程</strong></p></li><li><p><strong>订阅过程</strong></p></li></ol>        <h3 id="创建被观察者过程">          <a href="#创建被观察者过程" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建被观察者过程" class="headerlink" title="创建被观察者过程"></a>创建被观察者过程</h3>      <p>首先，上面使用了Observable类的create()方法创建了一个被观察者，看看里面做了什么。</p>        <h4 id="Observable-create">          <a href="#Observable-create" class="heading-link"><i class="fas fa-link"></i></a><a href="#Observable-create" class="headerlink" title="Observable#create()"></a>Observable#create()</h4>      <pre class="line-numbers language-none"><code class="language-none">// 省略一些检测性的注解public static &lt;T&gt; Observable&lt;T&gt; create(ObservableOnSubscribe&lt;T&gt; source) {    ObjectHelper.requireNonNull(source, "source is null");    return RxJavaPlugins.onAssembly(new ObservableCreate&lt;T&gt;(source));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Observable的create()里面实际上是创建了一个新的ObservableCreate对象，同时，把我们定义好的ObservableOnSubscribe对象传入了ObservableCreate对象中，最后调用了RxJavaPlugins.onAssembly()方法。接下来看看这个ObservableCreate是干什么的。</p>        <h4 id="ObservableCreate">          <a href="#ObservableCreate" class="heading-link"><i class="fas fa-link"></i></a><a href="#ObservableCreate" class="headerlink" title="ObservableCreate"></a>ObservableCreate</h4>      <pre class="line-numbers language-none"><code class="language-none">public final class ObservableCreate&lt;T&gt; extends Observable&lt;T&gt; {    final ObservableOnSubscribe&lt;T&gt; source;    public ObservableCreate(ObservableOnSubscribe&lt;T&gt; source) {        this.source = source;    }        ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里仅仅是把ObservableOnSubscribe这个对象保存在ObservableCreate中了。然后看看RxJavaPlugins.onAssembly()这个方法的处理。</p>        <h4 id="RxJavaPlugins-onAssembly">          <a href="#RxJavaPlugins-onAssembly" class="heading-link"><i class="fas fa-link"></i></a><a href="#RxJavaPlugins-onAssembly" class="headerlink" title="RxJavaPlugins#onAssembly()"></a>RxJavaPlugins#onAssembly()</h4>      <pre class="line-numbers language-none"><code class="language-none">public static &lt;T&gt; Observable&lt;T&gt; onAssembly(@NonNull Observable&lt;T&gt; source) {    // 应用hook函数的一些处理，一般用到不到    ...    return source;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终仅仅是把我们的ObservableCreate给返回了。</p>        <h4 id="创建被观察者过程小结">          <a href="#创建被观察者过程小结" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建被观察者过程小结" class="headerlink" title="创建被观察者过程小结"></a>创建被观察者过程小结</h4>      <p>从以上分析可知，Observable.create()方法仅仅是<strong>先将我们自定义的ObservableOnSubscribe对象重新包装成了一个ObservableCreate对象</strong>。</p>        <h3 id="订阅过程">          <a href="#订阅过程" class="heading-link"><i class="fas fa-link"></i></a><a href="#订阅过程" class="headerlink" title="订阅过程"></a>订阅过程</h3>      <p>接着，看看Observable.subscribe()的订阅过程是如何实现的。</p>        <h4 id="Observable-subscribe">          <a href="#Observable-subscribe" class="heading-link"><i class="fas fa-link"></i></a><a href="#Observable-subscribe" class="headerlink" title="Observable#subscribe()"></a>Observable#subscribe()</h4>      <pre class="line-numbers language-none"><code class="language-none">public final void subscribe(Observer&lt;? super T&gt; observer) {    ...        // 1    observer = RxJavaPlugins.onSubscribe(this,observer);        ...        // 2    subscribeActual(observer);        ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在注释1处，在Observable的subscribe()方法内部首先调用了RxJavaPlugins的onSubscribe()方法。</p>        <h4 id="RxJavaPlugins-onSubscribe">          <a href="#RxJavaPlugins-onSubscribe" class="heading-link"><i class="fas fa-link"></i></a><a href="#RxJavaPlugins-onSubscribe" class="headerlink" title="RxJavaPlugins#onSubscribe()"></a>RxJavaPlugins#onSubscribe()</h4>      <pre class="line-numbers language-none"><code class="language-none">public static &lt;T&gt; Observer&lt;? super T&gt; onSubscribe(@NonNull Observable&lt;T&gt; source, @NonNull Observer&lt;? super T&gt; observer) {    // 应用hook函数的一些处理，一般用到不到    ...        return observer;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除去hook应用的逻辑，这里仅仅是将observer返回了。接着来分析下注释2处的subscribeActual()方法，</p>        <h4 id="Observable-subscribeActual">          <a href="#Observable-subscribeActual" class="heading-link"><i class="fas fa-link"></i></a><a href="#Observable-subscribeActual" class="headerlink" title="Observable#subscribeActual()"></a>Observable#subscribeActual()</h4>      <pre class="line-numbers language-none"><code class="language-none">protected abstract void subscribeActual(Observer&lt;? super T&gt; observer);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是一个抽象的方法，很明显，它对应的具体实现类就是我们在第一步创建的ObservableCreate类，接下来看到ObservableCreate的subscribeActual()方法。</p>        <h4 id="ObservableCreate-subscribeActual">          <a href="#ObservableCreate-subscribeActual" class="heading-link"><i class="fas fa-link"></i></a><a href="#ObservableCreate-subscribeActual" class="headerlink" title="ObservableCreate#subscribeActual()"></a>ObservableCreate#subscribeActual()</h4>      <pre class="line-numbers language-none"><code class="language-none">@Overrideprotected void subscribeActual(Observer&lt;? super T&gt; observer) {    // 1    CreateEmitter&lt;T&gt; parent = new CreateEmitter&lt;T&gt;(observer);    // 2    observer.onSubscribe(parent);    try {        // 3        source.subscribe(parent);    } catch (Throwable ex) {        Exceptions.throwIfFatal(ex);        parent.onError(ex);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在注释1处，首先新创建了一个CreateEmitter对象，同时传入了我们自定义的observer对象进去。</p>        <h5 id="CreateEmitter">          <a href="#CreateEmitter" class="heading-link"><i class="fas fa-link"></i></a><a href="#CreateEmitter" class="headerlink" title="CreateEmitter"></a>CreateEmitter</h5>      <pre class="line-numbers language-none"><code class="language-none">static final class CreateEmitter&lt;T&gt;extends AtomicReference&lt;Disposable&gt;implements ObservableEmitter&lt;T&gt;, Disposable {    ...        final Observer&lt;? super T&gt; observer;    CreateEmitter(Observer&lt;? super T&gt; observer) {        this.observer = observer;    }        ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面可以看出，<strong>CreateEmitter通过继承了Java并发包中的原子引用类AtomicReference保证了事件流切断状态Dispose的一致性</strong>（这里不理解的话，看到后面讲解Dispose的时候就明白了），并<strong>实现了ObservableEmitter接口和Disposable接口</strong>，接着我们分析下注释2处的observer.onSubscribe(parent)，这个onSubscribe回调的含义其实就是<strong>告诉观察者已经成功订阅了被观察者</strong>。再看到注释3处的source.subscribe(parent)这行代码，这里的source其实是ObservableOnSubscribe对象，我们看到ObservableOnSubscribe的subscribe()方法。</p>        <h5 id="ObservableOnSubscribe-subscribe">          <a href="#ObservableOnSubscribe-subscribe" class="heading-link"><i class="fas fa-link"></i></a><a href="#ObservableOnSubscribe-subscribe" class="headerlink" title="ObservableOnSubscribe#subscribe()"></a>ObservableOnSubscribe#subscribe()</h5>      <pre class="line-numbers language-none"><code class="language-none">Observable observable = Observable.create(new ObservableOnSubscribe&lt;String&gt;() {    @Override    public voidsubscribe(ObservableEmitter&lt;String&gt; emitter) throws Exception {        emitter.onNext("1");        emitter.onNext("2");        emitter.onNext("3");        emitter.onComplete();    }});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里面使用到了ObservableEmitter的onNext()方法将事件流发送出去，最后调用了onComplete()方法完成了订阅过程。ObservableEmitter是一个抽象类，实现类就是我们传入的CreateEmitter对象，接下来我们看看CreateEmitter的onNext()方法和onComplete()方法的处理。</p>        <h5 id="CreateEmitter-onNext-CreateEmitter-onComplete">          <a href="#CreateEmitter-onNext-CreateEmitter-onComplete" class="heading-link"><i class="fas fa-link"></i></a><a href="#CreateEmitter-onNext-CreateEmitter-onComplete" class="headerlink" title="CreateEmitter#onNext() &amp;&amp; CreateEmitter#onComplete()"></a>CreateEmitter#onNext() &amp;&amp; CreateEmitter#onComplete()</h5>      <pre class="line-numbers language-none"><code class="language-none">static final class CreateEmitter&lt;T&gt;extends AtomicReference&lt;Disposable&gt;implements ObservableEmitter&lt;T&gt;, Disposable {...@Overridepublic void onNext(T t) {    ...        if (!isDisposed()) {        //调用观察者的onNext()        observer.onNext(t);    }}@Overridepublic void onComplete() {    if (!isDisposed()) {        try {            observer.onComplete();        } finally {            dispose();        }    }}...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在CreateEmitter的onNext和onComplete方法中首先都要经过一个<strong>isDisposed</strong>的判断，作用就是看<strong>当前的事件流是否被切断（废弃）掉了</strong>，默认是不切断的，如果想要切断，可以调用Disposable的dispose()方法将此状态设置为切断（废弃）状态。继续看看这个isDisposed内部的处理。</p>        <h5 id="ObservableEmitter-isDisposed">          <a href="#ObservableEmitter-isDisposed" class="heading-link"><i class="fas fa-link"></i></a><a href="#ObservableEmitter-isDisposed" class="headerlink" title="ObservableEmitter#isDisposed()"></a>ObservableEmitter#isDisposed()</h5>      <pre class="line-numbers language-none"><code class="language-none">@Overridepublic boolean isDisposed() {    return DisposableHelper.isDisposed(get());}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意到这里通过get()方法首先从ObservableEmitter的AtomicReference中拿到了保存的Disposable状态。然后交给了DisposableHelper进行判断处理。接下来看看DisposableHelper的处理。</p>        <h5 id="DisposableHelper-isDisposed-DisposableHelper-set">          <a href="#DisposableHelper-isDisposed-DisposableHelper-set" class="heading-link"><i class="fas fa-link"></i></a><a href="#DisposableHelper-isDisposed-DisposableHelper-set" class="headerlink" title="DisposableHelper#isDisposed() &amp;&amp; DisposableHelper#set()"></a>DisposableHelper#isDisposed() &amp;&amp; DisposableHelper#set()</h5>      <pre class="line-numbers language-none"><code class="language-none">public enum DisposableHelper implements Disposable {    DISPOSED;    public static boolean isDisposed(Disposable d) {        // 1        return d == DISPOSED;    }        public static boolean set(AtomicReference&lt;Disposable&gt; field, Disposable d) {        for (;;) {            Disposable current = field.get();            if (current == DISPOSED) {                if (d != null) {                    d.dispose();                }                return false;            }            // 2            if (field.compareAndSet(current, d)) {                if (current != null) {                    current.dispose();                }                return true;            }        }    }        ...        public static boolean dispose(AtomicReference&lt;Disposable&gt; field) {        Disposable current = field.get();        Disposable d = DISPOSED;        if (current != d) {            // ...            current = field.getAndSet(d);            if (current != d) {                if (current != null) {                    current.dispose();                }                return true;            }        }        return false;    }        ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DisposableHelper是一个枚举类，内部只有一个值即DISPOSED, 从上面的分析可知它就是用来<strong>标记事件流被切断（废弃）状态的</strong>。先看到注释2和注释3处的代码<strong>field.compareAndSet(current, d)和field.getAndSet(d)<strong>，这里使用了</strong>原子引用AtomicReference内部包装的<span class="exturl"><a class="exturl__link" href="https://www.jianshu.com/p/ab2c8fce878b">CAS</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>方法处理了标志Disposable的并发读写问题</strong>。最后看到注释3处，将我们传入的CreateEmitter这个原子引用类保存的Dispable状态和DisposableHelper内部的DISPOSED进行比较，如果相等，就证明数据流被切断了。为了更进一步理解Disposed的作用，再来看看CreateEmitter中剩余的关键方法。</p>        <h5 id="CreateEmitter-1">          <a href="#CreateEmitter-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#CreateEmitter-1" class="headerlink" title="CreateEmitter"></a>CreateEmitter</h5>      <pre class="line-numbers language-none"><code class="language-none">@Overridepublic void onNext(T t) {    ...    // 1    if (!isDisposed()) {        observer.onNext(t);    }}@Overridepublic void onError(Throwable t) {    if (!tryOnError(t)) {        // 2        RxJavaPlugins.onError(t);    }}@Overridepublic boolean tryOnError(Throwable t) {    ...    // 3    if (!isDisposed()) {        try {            observer.onError(t);        } finally {            // 4            dispose();        }        return true;    }    return false;}@Overridepublic void onComplete() {    // 5    if (!isDisposed()) {        try {            observer.onComplete();        } finally {            // 6            dispose();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在注释1、3、5处，onNext()和onError()、onComplete()方法首先都会判断事件流是否被切断，如果事件流此时被切断了，那么onNext()和onComplete()则会退出方法体，不做处理，<strong>onError()则会执行到RxJavaPlugins.onError(t)这句代码，内部会直接抛出异常，导致崩溃</strong>。如果事件流没有被切断，那么在onError()和onComplete()内部最终会调用到注释4、6处的这句dispose()代码，将事件流进行切断，由此可知，<strong>onError()和onComplete()只能调用一个，如果先执行的是onComplete()，再调用onError()的话就会导致异常崩溃</strong>。</p>        <h2 id="RxJava的线程切换">          <a href="#RxJava的线程切换" class="heading-link"><i class="fas fa-link"></i></a><a href="#RxJava的线程切换" class="headerlink" title="RxJava的线程切换"></a>RxJava的线程切换</h2>      <p>首先给出RxJava线程切换的例子：</p><pre class="line-numbers language-none"><code class="language-none">Observable.create(new ObservableOnSubscribe&lt;String&gt;() {    @Override    public voidsubscribe(ObservableEmitter&lt;String&gt;emitter) throws Exception {        emitter.onNext("1");        emitter.onNext("2");        emitter.onNext("3");        emitter.onComplete();    }})     .subscribeOn(Schedulers.io())    .observeOn(AndroidSchedulers.mainThread())    .subscribe(new Observer&lt;String&gt;() {        @Override        public void onSubscribe(Disposable d) {            Log.d(TAG, "onSubscribe");        }        @Override        public void onNext(String s) {            Log.d(TAG, "onNext : " + s);        }        @Override        public void onError(Throwable e) {            Log.d(TAG, "onError : " +e.toString());        }        @Override        public void onComplete() {            Log.d(TAG, "onComplete");        }});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，RxJava的线程切换主要<strong>分为subscribeOn()和observeOn()方法</strong>，首先，来分析下subscribeOn()方法。</p>        <h3 id="subscribeOn-Schedulers-io">          <a href="#subscribeOn-Schedulers-io" class="heading-link"><i class="fas fa-link"></i></a><a href="#subscribeOn-Schedulers-io" class="headerlink" title="subscribeOn(Schedulers.io())"></a>subscribeOn(Schedulers.io())</h3>      <p>在Schedulers.io()方法中，我们需要先传入一个Scheduler调度类，这里是传入了一个调度到io子线程的调度类，我们看看这个Schedulers.io()方法内部是怎么构造这个调度器的。</p>        <h3 id="Schedulers-io">          <a href="#Schedulers-io" class="heading-link"><i class="fas fa-link"></i></a><a href="#Schedulers-io" class="headerlink" title="Schedulers#io()"></a>Schedulers#io()</h3>      <pre class="line-numbers language-none"><code class="language-none">static final Scheduler IO;...public static Scheduler io() {    // 1    return RxJavaPlugins.onIoScheduler(IO);}static {    ...    // 2    IO = RxJavaPlugins.initIoScheduler(new IOTask());}static final class IOTask implements Callable&lt;Scheduler&gt; {    @Override    public Scheduler call() throws Exception {        // 3        return IoHolder.DEFAULT;    }}static final class IoHolder {    // 4    static final Scheduler DEFAULT = new IoScheduler();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Schedulers这个类的代码很多，这里我只拿出有关Schedulers.io这个方法涉及的逻辑代码进行讲解。首先，在注释1处，同前面分析的订阅流程的处理一样，只是一个处理hook的逻辑，最终返回的还是传入的这个IO对象。再看到注释2处，<strong>在Schedulers的静态代码块中将IO对象进行了初始化，其实质就是新建了一个IOTask的静态内部类</strong>，在IOTask的call方法中，也就是注释3处，可以了解到使用了静态内部类的方式把创建的IOScheduler对象给返回出去了。绕了这么大圈子，<strong>Schedulers.io方法其实质就是返回了一个IOScheduler对象</strong>。</p>        <h3 id="Observable-subscribeOn">          <a href="#Observable-subscribeOn" class="heading-link"><i class="fas fa-link"></i></a><a href="#Observable-subscribeOn" class="headerlink" title="Observable#subscribeOn()"></a>Observable#subscribeOn()</h3>      <pre class="line-numbers language-none"><code class="language-none">  public final Observable&lt;T&gt; subscribeOn(Scheduler scheduler) {    ...        return RxJavaPlugins.onAssembly(new ObservableSubscribeOn&lt;T&gt;(this, scheduler));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在subscribeOn()方法里面，又将ObservableCreate包装成了一个ObservableSubscribeOn对象。我们关注到ObservableSubscribeOn类。</p>        <h3 id="ObservableSubscribeOn">          <a href="#ObservableSubscribeOn" class="heading-link"><i class="fas fa-link"></i></a><a href="#ObservableSubscribeOn" class="headerlink" title="ObservableSubscribeOn"></a>ObservableSubscribeOn</h3>      <pre class="line-numbers language-none"><code class="language-none">public final class ObservableSubscribeOn&lt;T&gt; extends AbstractObservableWithUpstream&lt;T, T&gt; {    final Scheduler scheduler;    public ObservableSubscribeOn(ObservableSource&lt;T&gt; source, Scheduler scheduler) {        // 1        super(source);        this.scheduler = scheduler;    }    @Override    public void subscribeActual(final Observer&lt;? super T&gt; observer) {        // 2        final SubscribeOnObserver&lt;T&gt; parent = new SubscribeOnObserver&lt;T&gt;(observer);                // 3        observer.onSubscribe(parent);                // 4        parent.setDisposable(scheduler.scheduleDirect(new SubscribeTask(parent)));    }...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，在注释1处，将传进来的source和scheduler保存起来。接着，等到实际订阅的时候，就会执行到这个subscribeActual方法，在注释2处，将我们自定义的Observer包装成了一个SubscribeOnObserver对象。在注释3处，通知观察者订阅了被观察者。在注释4处，内部先创建了一个SubscribeTask对象，来看看它的实现。</p>        <h3 id="ObservableSubscribeOn-SubscribeTask">          <a href="#ObservableSubscribeOn-SubscribeTask" class="heading-link"><i class="fas fa-link"></i></a><a href="#ObservableSubscribeOn-SubscribeTask" class="headerlink" title="ObservableSubscribeOn#SubscribeTask"></a>ObservableSubscribeOn#SubscribeTask</h3>      <pre class="line-numbers language-none"><code class="language-none">final class SubscribeTask implements Runnable {    private final SubscribeOnObserver&lt;T&gt; parent;    SubscribeTask(SubscribeOnObserver&lt;T&gt; parent) {        this.parent = parent;    }    @Override    public void run() {        source.subscribe(parent);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SubscribeTask是ObservableSubscribeOn的内部类，它实质上就是一个任务类，在它的run方法中会执行到source.subscribe(parent)的订阅方法，<strong>这个source其实就是我们在ObservableSubscribeOn构造方法中传进来的ObservableCreate对象</strong>。接下来看看scheduler.scheduleDirect()内部的处理。</p>        <h3 id="Scheduler-scheduleDirect">          <a href="#Scheduler-scheduleDirect" class="heading-link"><i class="fas fa-link"></i></a><a href="#Scheduler-scheduleDirect" class="headerlink" title="Scheduler#scheduleDirect()"></a>Scheduler#scheduleDirect()</h3>      <pre class="line-numbers language-none"><code class="language-none">public Disposable scheduleDirect(@NonNull Runnable run) {    return scheduleDirect(run, 0L, TimeUnit.NANOSECONDS);}public Disposable scheduleDirect(@NonNull Runnable run, long delay, @NonNull TimeUnit unit) {    // 1    final Worker w = createWorker();    // 2    final Runnable decoratedRun = RxJavaPlugins.onSchedule(run);    // 3    DisposeTask task = new DisposeTask(decoratedRun, w);    // 4    w.schedule(task, delay, unit);    return task;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里最后会执行到上面这个scheduleDirect()重载方法。首先，在注释1处，会调用createWorker()方法创建一个工作者对象Worker，它是一个抽象类，这里的实现类就是IoScheduler，下面看看IoScheduler类的createWorker()方法。</p>        <h4 id="IOScheduler-createWorker">          <a href="#IOScheduler-createWorker" class="heading-link"><i class="fas fa-link"></i></a><a href="#IOScheduler-createWorker" class="headerlink" title="IOScheduler#createWorker()"></a>IOScheduler#createWorker()</h4>      <pre class="line-numbers language-none"><code class="language-none">final AtomicReference&lt;CachedWorkerPool&gt; pool;...public IoScheduler(ThreadFactory threadFactory) {    this.threadFactory = threadFactory;    this.pool = new AtomicReference&lt;CachedWorkerPool&gt;(NONE);    start();}...@Overridepublic Worker createWorker() {    // 1    return new EventLoopWorker(pool.get());}static final class EventLoopWorker extends Scheduler.Worker {    ...    EventLoopWorker(CachedWorkerPool pool) {        this.pool = pool;        this.tasks = new CompositeDisposable();        // 2        this.threadWorker = pool.get();    }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，在注释1处调用了pool.get()这个方法，<strong>pool是一个CachedWorkerPool类型的原子引用对象</strong>，它的作用就是<strong>用于缓存工作者对象Worker的</strong>。然后，将得到的CachedWorkerPool传入新创建的EventLoopWorker对象中。重点关注一下注释2处，这里将CachedWorkerPool缓存的threadWorker对象保存起来了。</p><p>下面继续分析3.6处代码段的注释2处的代码，这里又是一个关于hook的封装处理，最终还是返回的当前的Runnable对象。在注释3处新建了一个切断任务DisposeTask将decoratedRun和w对象包装了起来。最后在注释4处调用了工作者的schedule()方法。下面来分析下它内部的处理。</p>        <h4 id="IoScheduler-schedule">          <a href="#IoScheduler-schedule" class="heading-link"><i class="fas fa-link"></i></a><a href="#IoScheduler-schedule" class="headerlink" title="IoScheduler#schedule()"></a>IoScheduler#schedule()</h4>      <pre class="line-numbers language-none"><code class="language-none">@Overridepublic Disposable schedule(@NonNull Runnableaction, long delayTime, @NonNull TimeUnit unit){    ...        return threadWorker.scheduleActual(action,delayTime, unit, tasks);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内部调用了threadWorker的scheduleActual()方法，实际上是调用到了父类NewThreadWorker的scheduleActual()方法，继续看看NewThreadWorker的scheduleActual()方法中做的事情。</p>        <h4 id="NewThreadWorker-scheduleActual">          <a href="#NewThreadWorker-scheduleActual" class="heading-link"><i class="fas fa-link"></i></a><a href="#NewThreadWorker-scheduleActual" class="headerlink" title="NewThreadWorker#scheduleActual()"></a>NewThreadWorker#scheduleActual()</h4>      <pre class="line-numbers language-none"><code class="language-none">public NewThreadWorker(ThreadFactory threadFactory) {    executor = SchedulerPoolFactory.create(threadFactory);}@NonNullpublic ScheduledRunnable scheduleActual(final Runnable run, long delayTime, @NonNull TimeUnit unit, @Nullable DisposableContainer parent) {    Runnable decoratedRun = RxJavaPlugins.onSchedule(run);    // 1    ScheduledRunnable sr = new ScheduledRunnable(decoratedRun, parent);           if (parent != null) {        if (!parent.add(sr)) {            return sr;        }    }    Future&lt;?&gt; f;    try {        // 2        if (delayTime &lt;= 0) {            // 3            f = executor.submit((Callable&lt;Object&gt;)sr);        } else {            // 4            f = executor.schedule((Callable&lt;Object&gt;)sr, delayTime, unit);        }        sr.setFuture(f);    } catch (RejectedExecutionException ex) {        if (parent != null) {            parent.remove(sr);        }        RxJavaPlugins.onError(ex);    }    return sr;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在NewThreadWorker的scheduleActual()方法的内部，在注释1处首先会新建一个ScheduledRunnable对象，将Runnable对象和parent包装起来了，<strong>这里parent是一个DisposableContainer对象，它实际的实现类是CompositeDisposable类，它是一个保存所有事件流是否被切断状态的容器，其内部的实现是使用了RxJava自己定义的一个简单的OpenHashSet类进行存储</strong>。最后注释2处，判断是否设置了延迟时间，如果设置了，则调用线程池的submit()方法立即进行线程切换，否则，调用schedule()方法进行延时执行线程切换。</p>        <h3 id="为什么多次执行subscribeOn-，只有第一次有效？">          <a href="#为什么多次执行subscribeOn-，只有第一次有效？" class="heading-link"><i class="fas fa-link"></i></a><a href="#为什么多次执行subscribeOn-，只有第一次有效？" class="headerlink" title="为什么多次执行subscribeOn()，只有第一次有效？"></a>为什么多次执行subscribeOn()，只有第一次有效？</h3>      <p>从上面的分析，可以很容易了解到<strong>被观察者被订阅时是从最外面的一层（ObservableSubscribeOn）通知到里面的一层（ObservableOnSubscribe）</strong>，当连续执行了到多次subscribeOn()的时候，其实就是先执行倒数第一次的subscribeOn()方法，直到最后一次执行的subscribeOn()方法，这样肯定会覆盖前面的线程切换。</p>        <h3 id="observeOn-AndroidSchedulers-mainThread">          <a href="#observeOn-AndroidSchedulers-mainThread" class="heading-link"><i class="fas fa-link"></i></a><a href="#observeOn-AndroidSchedulers-mainThread" class="headerlink" title="observeOn(AndroidSchedulers.mainThread())"></a>observeOn(AndroidSchedulers.mainThread())</h3>      <pre class="line-numbers language-none"><code class="language-none">public final Observable&lt;T&gt; observeOn(Scheduler scheduler) {    return observeOn(scheduler, false, bufferSize());}public final Observable&lt;T&gt; observeOn(Scheduler scheduler, boolean delayError, int bufferSize) {    ....        return RxJavaPlugins.onAssembly(new ObservableObserveOn&lt;T&gt;(this, scheduler, delayError, bufferSize));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，observeOn()方法内部最终也是返回了一个ObservableObserveOn对象，直接来看看ObservableObserveOn的subscribeActual()方法。</p>        <h3 id="ObservableObserveOn-subscribeActual">          <a href="#ObservableObserveOn-subscribeActual" class="heading-link"><i class="fas fa-link"></i></a><a href="#ObservableObserveOn-subscribeActual" class="headerlink" title="ObservableObserveOn#subscribeActual()"></a>ObservableObserveOn#subscribeActual()</h3>      <pre class="line-numbers language-none"><code class="language-none">@Overrideprotected void subscribeActual(Observer&lt;? super T&gt; observer) {    // 1    if (scheduler instanceof TrampolineScheduler) {        // 2        source.subscribe(observer);    } else {        // 3        Scheduler.Worker w = scheduler.createWorker();        // 4        source.subscribe(new ObserveOnObserver&lt;T&gt;(observer, w, delayError, bufferSize));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，在注释1处，判断指定的调度器是不是TrampolineScheduler，这是一个不进行线程切换，立即执行当前代码的调度器。如果是，则会直接调用ObservableSubscribeOn的subscribe()方法，如果不是，则会在注释3处创建一个工作者对象。然后，在注释4处创建一个新的ObserveOnObserver将SubscribeOnobserver对象包装起来，并传入ObservableSubscribeOn的subscribe()方法进行订阅。接下来看看ObserveOnObserver类的重点方法。</p>        <h3 id="ObserveOnObserver">          <a href="#ObserveOnObserver" class="heading-link"><i class="fas fa-link"></i></a><a href="#ObserveOnObserver" class="headerlink" title="ObserveOnObserver"></a>ObserveOnObserver</h3>      <pre class="line-numbers language-none"><code class="language-none">@Overridepublic void onNext(T t) {    ...    if (sourceMode != QueueDisposable.ASYNC) {        // 1        queue.offer(t);    }    schedule();}@Overridepublic void onError(Throwable t) {    ...    schedule();}@Overridepublic void onComplete() {    ...    schedule();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>去除非主线逻辑的代码，在ObserveOnObserver的onNext()和onError()、onComplete()方法中最后都会调用到schedule()方法。接着看schedule()方法，其中<strong>onNext()还会把消息存放到队列中</strong>。</p>        <h3 id="ObserveOnObserver-schedule">          <a href="#ObserveOnObserver-schedule" class="heading-link"><i class="fas fa-link"></i></a><a href="#ObserveOnObserver-schedule" class="headerlink" title="ObserveOnObserver#schedule()"></a>ObserveOnObserver#schedule()</h3>      <pre class="line-numbers language-none"><code class="language-none">void schedule() {    if (getAndIncrement() == 0) {        worker.schedule(this);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用了worker进行调度ObserveOnObserver这个实现了Runnable的任务。worker就是在AndroidSchedulers.mainThread()中创建的，内部其实就是<strong>使用Handler进行线程切换的</strong>，此处不再赘述了。接着看ObserveOnObserver的run()方法。</p>        <h3 id="ObserveOnObserver-run">          <a href="#ObserveOnObserver-run" class="heading-link"><i class="fas fa-link"></i></a><a href="#ObserveOnObserver-run" class="headerlink" title="ObserveOnObserver#run()"></a>ObserveOnObserver#run()</h3>      <pre class="line-numbers language-none"><code class="language-none">@Overridepublic void run() {    // 1    if (outputFused) {        drainFused();    } else {        // 2        drainNormal();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在注释1处会<strong>先判断outputFused这个标志位，它表示事件流是否被融化掉，默认是false，所以，最后会执行到drainNormal()方法</strong>。接着看看drainNormal()方法内部的处理。</p>        <h3 id="ObserveOnObserver-drainNormal">          <a href="#ObserveOnObserver-drainNormal" class="heading-link"><i class="fas fa-link"></i></a><a href="#ObserveOnObserver-drainNormal" class="headerlink" title="ObserveOnObserver#drainNormal()"></a>ObserveOnObserver#drainNormal()</h3>      <pre class="line-numbers language-none"><code class="language-none">void drainNormal() {    int missed = 1;        final SimpleQueue&lt;T&gt; q = queue;        // 1    final Observer&lt;? super T&gt; a = downstream;        ...        // 2    v = q.poll();        ...    // 3    a.onNext(v);        ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在注释1处，这里的downstream实际上是从外面传进来的SubscribeOnObserver对象。在注释2处将队列中的消息取出来，接着在注释3处调用了SubscribeOnObserver的onNext方法。<strong>最终，会从我们包装类的最外层一直调用到最里面的我们自定义的Observer中的onNext()方法，所以，在observeOn()方法下面的链式代码都会执行到它所指定的线程中，噢，原来如此</strong>。</p><blockquote><p>很多人使用RxJava也已经挺长时间了，但是一直没有去深入去了解过它的内部实现原理，<strong>如今细细品尝，的确是酣畅淋漓</strong>。</p></blockquote>        <h1 id="LeakCanary">          <a href="#LeakCanary" class="heading-link"><i class="fas fa-link"></i></a><a href="#LeakCanary" class="headerlink" title="LeakCanary"></a>LeakCanary</h1>              <h2 id="原理概述">          <a href="#原理概述" class="heading-link"><i class="fas fa-link"></i></a><a href="#原理概述" class="headerlink" title="原理概述"></a>原理概述</h2>      <p>查看Leakcanary官方的github仓库，最重要的便是对<strong>Leakcanary是如何起作用的</strong>（即原理）这一问题进行了阐述，把它翻译成了易于理解的文字，主要分为如下7个步骤：</p><ol><li><p>RefWatcher.watch()创建了一个KeyedWeakReference用于去观察对象。</p></li><li><p>然后，在后台线程中，它会检测引用是否被清除了，并且是否没有触发GC。</p></li><li><p>如果引用仍然没有被清除，那么它将会把堆栈信息保存在文件系统中的.hprof文件里。</p></li><li><p>HeapAnalyzerService被开启在一个独立的进程中，并且HeapAnalyzer使用了HAHA开源库解析了指定时刻的堆栈快照文件heap dump。</p></li><li><p>从heap dump中，HeapAnalyzer根据一个独特的引用key找到了KeyedWeakReference，并且定位了泄露的引用。</p></li><li><p>HeapAnalyzer为了确定是否有泄露，计算了到GC Roots的最短强引用路径，然后建立了导致泄露的链式引用。</p></li><li><p>这个结果被传回到app进程中的DisplayLeakService，然后一个泄露通知便展现出来了。</p></li></ol><p>官方的原理简单来解释就是这样的：<strong>在一个Activity执行完onDestroy()之后，将它放入WeakReference中，然后将这个WeakReference类型的Activity对象与ReferenceQueque关联。这时再从ReferenceQueque中查看是否有没有该对象，如果没有，执行gc，再次查看，还是没有的话则判断发生内存泄露了。最后用HAHA这个开源库去分析dump之后的heap内存。</strong></p>        <h2 id="简单示例">          <a href="#简单示例" class="heading-link"><i class="fas fa-link"></i></a><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2>      <p>下面这段是Leakcanary官方仓库的示例代码：</p><p>首先在你项目app下的build.gradle中配置:</p><pre class="line-numbers language-none"><code class="language-none">dependencies {  debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.2'  releaseImplementation   'com.squareup.leakcanary:leakcanary-android-no-op:1.6.2'  // 可选，如果你使用支持库的fragments的话  debugImplementation   'com.squareup.leakcanary:leakcanary-support-fragment:1.6.2'}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在你的Application中配置:</p><pre class="line-numbers language-none"><code class="language-none">public class WanAndroidApp extends Application {    private RefWatcher refWatcher;        public static RefWatcher getRefWatcher(Context context) {        WanAndroidApp application = (WanAndroidApp)     context.getApplicationContext();        return application.refWatcher;    }    @Override public void onCreate() {      super.onCreate();      if (LeakCanary.isInAnalyzerProcess(this)) {        // 1        return;      }      // 2      refWatcher = LeakCanary.install(this);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在注释1处，会首先判断当前进程是否是Leakcanary专门用于分析heap内存的而创建的那个进程，即HeapAnalyzerService所在的进程，如果是的话，则不进行Application中的初始化功能。如果是当前应用所处的主进程的话，则会执行注释2处的LeakCanary.install(this)进行LeakCanary的安装。只需这样简单的几行代码，我们就可以在应用中检测是否产生了内存泄露了。当然，这样使用只会检测Activity和标准Fragment是否发生内存泄漏，如果要检测V4包的Fragment在执行完onDestroy()之后是否发生内存泄露的话，则需要在Fragment的onDestroy()方法中加上如下两行代码去监视当前的Fragment：</p><pre class="line-numbers language-none"><code class="language-none">RefWatcher refWatcher = WanAndroidApp.getRefWatcher(_mActivity);refWatcher.watch(this);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面的<strong>RefWatcher其实就是一个引用观察者对象，是用于监测当前实例对象的引用状态的</strong>。从以上的分析可以了解到，核心代码就是LeakCanary.install(this)这行代码，接下来，就从这里出发将LeakCanary一步一步进行拆解。</p>        <h2 id="源码分析">          <a href="#源码分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2>              <h3 id="LeakCanary-install">          <a href="#LeakCanary-install" class="heading-link"><i class="fas fa-link"></i></a><a href="#LeakCanary-install" class="headerlink" title="LeakCanary#install()"></a>LeakCanary#install()</h3>      <pre class="line-numbers language-none"><code class="language-none">public static @NonNull RefWatcher install(@NonNull Application application) {  return refWatcher(application).listenerServiceClass(DisplayLeakService.class)      .excludedRefs(AndroidExcludedRefs.createAppDefaults().build())      .buildAndInstall();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在install()方法中的处理，可以分解为如下四步：</p><ol><li><p><strong>refWatcher(application)</strong></p></li><li><p><strong>链式调用listenerServiceClass(DisplayLeakService.class)</strong></p></li><li><p><strong>链式调用excludedRefs(AndroidExcludedRefs.createAppDefaults().build())</strong></p></li><li><p><strong>链式调用buildAndInstall()</strong></p></li></ol><p>首先，我们来看下第一步，这里调用了LeakCanary类的refWatcher方法，如下所示：</p><pre class="line-numbers language-none"><code class="language-none">public static @NonNull AndroidRefWatcherBuilder refWatcher(@NonNull Context context) {  return new AndroidRefWatcherBuilder(context);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后新建了一个AndroidRefWatcherBuilder对象，再看看AndroidRefWatcherBuilder这个类。</p>        <h3 id="AndroidRefWatcherBuilder">          <a href="#AndroidRefWatcherBuilder" class="heading-link"><i class="fas fa-link"></i></a><a href="#AndroidRefWatcherBuilder" class="headerlink" title="AndroidRefWatcherBuilder"></a>AndroidRefWatcherBuilder</h3>      <pre class="line-numbers language-none"><code class="language-none">/** A {@link RefWatcherBuilder} with appropriate Android defaults. */public final class AndroidRefWatcherBuilder extends RefWatcherBuilder&lt;AndroidRefWatcherBuilder&gt; {...    AndroidRefWatcherBuilder(@NonNull Context context) {        this.context = context.getApplicationContext();    }...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在AndroidRefWatcherBuilder的构造方法中仅仅是将外部传入的applicationContext对象保存起来了。<strong>AndroidRefWatcherBuilder是一个适配Android平台的引用观察者构造器对象，它继承了RefWatcherBuilder，RefWatcherBuilder是一个负责建立引用观察者RefWatcher实例的基类构造器</strong>。继续看看RefWatcherBuilder这个类。</p>        <h3 id="RefWatcherBuilder">          <a href="#RefWatcherBuilder" class="heading-link"><i class="fas fa-link"></i></a><a href="#RefWatcherBuilder" class="headerlink" title="RefWatcherBuilder"></a>RefWatcherBuilder</h3>      <pre class="line-numbers language-none"><code class="language-none">public class RefWatcherBuilder&lt;T extends RefWatcherBuilder&lt;T&gt;&gt; {    ...        public RefWatcherBuilder() {        heapDumpBuilder = new HeapDump.Builder();    }    ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在RefWatcher的基类构造器RefWatcherBuilder的构造方法中新建了一个HeapDump的构造器对象。其中<strong>HeapDump就是一个保存heap dump信息的数据结构</strong>。</p><p>接着来分析下install()方法中的链式调用的listenerServiceClass(DisplayLeakService.class)这部分逻辑。</p>        <h3 id="AndroidRefWatcherBuilder-listenerServiceClass">          <a href="#AndroidRefWatcherBuilder-listenerServiceClass" class="heading-link"><i class="fas fa-link"></i></a><a href="#AndroidRefWatcherBuilder-listenerServiceClass" class="headerlink" title="AndroidRefWatcherBuilder#listenerServiceClass()"></a>AndroidRefWatcherBuilder#listenerServiceClass()</h3>      <pre class="line-numbers language-none"><code class="language-none">public @NonNull AndroidRefWatcherBuilder listenerServiceClass(  @NonNull Class&lt;? extends AbstractAnalysisResultService&gt; listenerServiceClass) {    return heapDumpListener(new ServiceHeapDumpListener(context, listenerServiceClass));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，传入了一个DisplayLeakService的Class对象，它的作用是展示泄露分析的结果日志，然后会展示一个用于跳转到显示泄露界面DisplayLeakActivity的通知。在listenerServiceClass()这个方法中新建了一个ServiceHeapDumpListener对象，下面看看它内部的操作。</p>        <h3 id="ServiceHeapDumpListener">          <a href="#ServiceHeapDumpListener" class="heading-link"><i class="fas fa-link"></i></a><a href="#ServiceHeapDumpListener" class="headerlink" title="ServiceHeapDumpListener"></a>ServiceHeapDumpListener</h3>      <pre class="line-numbers language-none"><code class="language-none">public final class ServiceHeapDumpListener implements HeapDump.Listener {    ...        public ServiceHeapDumpListener(@NonNull final Context context,        @NonNull final Class&lt;? extends AbstractAnalysisResultService&gt; listenerServiceClass) {      this.listenerServiceClass = checkNotNull(listenerServiceClass, "listenerServiceClass");      this.context = checkNotNull(context, "context").getApplicationContext();    }        ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到这里仅仅是在ServiceHeapDumpListener中保存了DisplayLeakService的Class对象和application对象。它的作用就是接收一个heap dump去分析。</p><p>然后我们继续看install()方法链式调用.excludedRefs(AndroidExcludedRefs.createAppDefaults().build())的这部分代码。先看AndroidExcludedRefs.createAppDefaults()。</p>        <h3 id="AndroidExcludedRefs-createAppDefaults">          <a href="#AndroidExcludedRefs-createAppDefaults" class="heading-link"><i class="fas fa-link"></i></a><a href="#AndroidExcludedRefs-createAppDefaults" class="headerlink" title="AndroidExcludedRefs#createAppDefaults()"></a>AndroidExcludedRefs#createAppDefaults()</h3>      <pre class="line-numbers language-none"><code class="language-none">public enum AndroidExcludedRefs {    ...    public static @NonNull ExcludedRefs.Builder createAppDefaults() {      return createBuilder(EnumSet.allOf(AndroidExcludedRefs.class));    }        public static @NonNull ExcludedRefs.Builder createBuilder(EnumSet&lt;AndroidExcludedRefs&gt; refs) {      ExcludedRefs.Builder excluded = ExcludedRefs.builder();      for (AndroidExcludedRefs ref : refs) {        if (ref.applies) {          ref.add(excluded);          ((ExcludedRefs.BuilderWithParams) excluded).named(ref.name());        }      }      return excluded;    }        ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先来说下<strong>AndroidExcludedRefs</strong>这个类，它是一个enum类，它<strong>声明了Android SDK和厂商定制的SDK中存在的内存泄露的case</strong>，根据AndroidExcludedRefs这个类的类名就可看出这些case<strong>都会被Leakcanary的监测过滤掉</strong>。目前这个版本是有<strong>46种</strong>这样的<strong>case</strong>被包含在内，后续可能会一直增加。然后EnumSet.allOf(AndroidExcludedRefs.class)这个方法将会返回一个包含AndroidExcludedRefs元素类型的EnumSet。Enum是一个抽象类，在这里具体的实现类是<strong>通用正规型的RegularEnumSet，如果Enum里面的元素个数大于64，则会使用存储大数据量的JumboEnumSet</strong>。最后，在createBuilder这个方法里面构建了一个排除引用的建造器excluded，将各式各样的case分门别类地保存起来再返回出去。</p><p>最后看到链式调用的最后一步buildAndInstall()。</p>        <h3 id="AndroidRefWatcherBuilder-buildAndInstall">          <a href="#AndroidRefWatcherBuilder-buildAndInstall" class="heading-link"><i class="fas fa-link"></i></a><a href="#AndroidRefWatcherBuilder-buildAndInstall" class="headerlink" title="AndroidRefWatcherBuilder#buildAndInstall()"></a>AndroidRefWatcherBuilder#buildAndInstall()</h3>      <pre class="line-numbers language-none"><code class="language-none">private boolean watchActivities = true;private boolean watchFragments = true;public @NonNull RefWatcher buildAndInstall() {    // 1    if (LeakCanaryInternals.installedRefWatcher != null) {      throw new UnsupportedOperationException("buildAndInstall() should only be called once.");    }        // 2    RefWatcher refWatcher = build();    if (refWatcher != DISABLED) {      // 3      LeakCanaryInternals.setEnabledAsync(context, DisplayLeakActivity.class, true);      if (watchActivities) {        // 4        ActivityRefWatcher.install(context, refWatcher);      }      if (watchFragments) {        // 5        FragmentRefWatcher.Helper.install(context, refWatcher);      }    }    // 6    LeakCanaryInternals.installedRefWatcher = refWatcher;    return refWatcher;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，在注释1处，会判断LeakCanaryInternals.installedRefWatcher是否已经被赋值，如果被赋值了，则会抛出异常，警告 buildAndInstall()这个方法应该仅仅只调用一次，在此方法结束时，即在注释6处，该LeakCanaryInternals.installedRefWatcher才会被赋值。再来看注释2处，调用了AndroidRefWatcherBuilder其基类RefWatcherBuilder的build()方法，看看它是如何建造的。</p>        <h3 id="RefWatcherBuilder-build">          <a href="#RefWatcherBuilder-build" class="heading-link"><i class="fas fa-link"></i></a><a href="#RefWatcherBuilder-build" class="headerlink" title="RefWatcherBuilder#build()"></a>RefWatcherBuilder#build()</h3>      <pre class="line-numbers language-none"><code class="language-none">public final RefWatcher build() {    if (isDisabled()) {      return RefWatcher.DISABLED;    }    if (heapDumpBuilder.excludedRefs == null) {      heapDumpBuilder.excludedRefs(defaultExcludedRefs());    }    HeapDump.Listener heapDumpListener = this.heapDumpListener;    if (heapDumpListener == null) {      heapDumpListener = defaultHeapDumpListener();    }    DebuggerControl debuggerControl = this.debuggerControl;    if (debuggerControl == null) {      debuggerControl = defaultDebuggerControl();    }    HeapDumper heapDumper = this.heapDumper;    if (heapDumper == null) {      heapDumper = defaultHeapDumper();    }    WatchExecutor watchExecutor = this.watchExecutor;    if (watchExecutor == null) {      watchExecutor = defaultWatchExecutor();    }    GcTrigger gcTrigger = this.gcTrigger;    if (gcTrigger == null) {      gcTrigger = defaultGcTrigger();    }    if (heapDumpBuilder.reachabilityInspectorClasses == null) {      heapDumpBuilder.reachabilityInspectorClasses(defa  ultReachabilityInspectorClasses());    }    return new RefWatcher(watchExecutor, debuggerControl, gcTrigger, heapDumper, heapDumpListener,        heapDumpBuilder);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，<strong>RefWatcherBuilder包含了以下7个组成部分：</strong></p><ol><li><p><strong>excludedRefs : 记录可以被忽略的泄漏路径</strong>。</p></li><li><p><strong>heapDumpListener : 转储堆信息到hprof文件，并在解析完 hprof 文件后进行回调，最后通知 DisplayLeakService 弹出泄漏提醒</strong>。</p></li><li><p>debuggerControl : 判断是否处于调试模式，调试模式中不会进行内存泄漏检测。为什么呢？因为<strong>在调试过程中可能会保留上一个引用从而导致错误信息上报</strong>。</p></li><li><p><strong>heapDumper : 堆信息转储者，负责dump 内存泄漏处的 heap 信息到 hprof 文件</strong>。</p></li><li><p><strong>watchExecutor : 线程控制器，在 onDestroy() 之后并且在主线程空闲时执行内存泄漏检测</strong>。</p></li><li><p><strong>gcTrigger : 用于 GC，watchExecutor 首次检测到可能的内存泄漏，会主动进行 GC，GC 之后会再检测一次，仍然泄漏的判定为内存泄漏，最后根据heapDump信息生成相应的泄漏引用链</strong>。</p></li><li><p><strong>reachabilityInspectorClasses : 用于要进行可达性检测的类列表。</strong></p></li></ol><p>最后，会使用建造者模式将这些组成部分构建成一个新的RefWatcher并将其返回。</p><p>继续看回到AndroidRefWatcherBuilder的注释3处的 LeakCanaryInternals.setEnabledAsync(context, DisplayLeakActivity.class, true)这行代码。</p>        <h3 id="LeakCanaryInternals-setEnabledAsync">          <a href="#LeakCanaryInternals-setEnabledAsync" class="heading-link"><i class="fas fa-link"></i></a><a href="#LeakCanaryInternals-setEnabledAsync" class="headerlink" title="LeakCanaryInternals#setEnabledAsync()"></a>LeakCanaryInternals#setEnabledAsync()</h3>      <pre class="line-numbers language-none"><code class="language-none">public static void setEnabledAsync(Context context, final Class&lt;?&gt; componentClass,final boolean enabled) {  final Context appContext = context.getApplicationContext();  AsyncTask.THREAD_POOL_EXECUTOR.execute(new Runnable() {    @Override public void run() {      setEnabledBlocking(appContext, componentClass, enabled);    }  });}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里直接使用了<strong>AsyncTask内部自带的THREAD_POOL_EXECUTOR线程池</strong>进行阻塞式地显示DisplayLeakActivity。</p><p>然后再继续看AndroidRefWatcherBuilder的注释4处的代码。</p>        <h3 id="ActivityRefWatcher-install">          <a href="#ActivityRefWatcher-install" class="heading-link"><i class="fas fa-link"></i></a><a href="#ActivityRefWatcher-install" class="headerlink" title="ActivityRefWatcher#install()"></a>ActivityRefWatcher#install()</h3>      <pre class="line-numbers language-none"><code class="language-none">public static void install(@NonNull Context context, @NonNull RefWatcher refWatcher) {    Application application = (Application) context.getApplicationContext();    // 1    ActivityRefWatcher activityRefWatcher = new ActivityRefWatcher(application, refWatcher);        // 2    application.registerActivityLifecycleCallbacks(activityRefWatcher.lifecycleCallbacks);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，在注释1处创建一个自己的activityRefWatcher实例，并在注释2处调用了application的registerActivityLifecycleCallbacks()方法，这样就能够监听activity对应的生命周期事件了。继续看看activityRefWatcher.lifecycleCallbacks里面的操作。</p><pre class="line-numbers language-none"><code class="language-none">private final Application.ActivityLifecycleCallbacks lifecycleCallbacks =    new ActivityLifecycleCallbacksAdapter() {      @Override public void onActivityDestroyed(Activity activity) {          refWatcher.watch(activity);      }};public abstract class ActivityLifecycleCallbacksAdapterimplements Application.ActivityLifecycleCallbacks {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很明显，这里<strong>实现并重写了Application的ActivityLifecycleCallbacks的onActivityDestroyed()方法，这样便能在所有Activity执行完onDestroyed()方法之后调用 refWatcher.watch(activity)这行代码进行内存泄漏的检测了</strong>。</p><p>再看到注释5处的FragmentRefWatcher.Helper.install(context, refWatcher)这行代码，</p>        <h3 id="FragmentRefWatcher-Helper-install">          <a href="#FragmentRefWatcher-Helper-install" class="heading-link"><i class="fas fa-link"></i></a><a href="#FragmentRefWatcher-Helper-install" class="headerlink" title="FragmentRefWatcher.Helper#install()"></a>FragmentRefWatcher.Helper#install()</h3>      <pre class="line-numbers language-none"><code class="language-none">public interface FragmentRefWatcher {    void watchFragments(Activity activity);    final class Helper {          private static final String SUPPORT_FRAGMENT_REF_WATCHER_CLASS_NAME =          "com.squareup.leakcanary.internal.SupportFragmentRefWatcher";          public static void install(Context context, RefWatcher refWatcher) {        List&lt;FragmentRefWatcher&gt; fragmentRefWatchers = new ArrayList&lt;&gt;();            // 1        if (SDK_INT &gt;= O) {          fragmentRefWatchers.add(new AndroidOFragmentRefWatcher(refWatcher));        }            // 2        try {          Class&lt;?&gt; fragmentRefWatcherClass = Class.forName(SUPPORT_FRAGMENT_REF_WATCHER_CLASS_NAME);          Constructor&lt;?&gt; constructor =              fragmentRefWatcherClass.getDeclaredConstructor(RefWatcher.class);          FragmentRefWatcher supportFragmentRefWatcher   =              (FragmentRefWatcher) constructor.newInstance(refWatcher);          fragmentRefWatchers.add(supportFragmentRefWatcher);        } catch (Exception ignored) {        }            if (fragmentRefWatchers.size() == 0) {          return;        }            Helper helper = new Helper(fragmentRefWatchers);            // 3        Application application = (Application) context.getApplicationContext();        application.registerActivityLifecycleCallbacks(helper.activityLifecycleCallbacks);      }          ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里面的逻辑很简单，首先在注释1处将Android标准的Fragment的RefWatcher类，即AndroidOfFragmentRefWatcher添加到新创建的fragmentRefWatchers中。在注释2处<strong>使用反射将leakcanary-support-fragment包下面的SupportFragmentRefWatcher添加进来，如果你在app的build.gradle下没有添加下面这行引用的话，则会拿不到此类，即LeakCanary只会检测Activity和标准Fragment这两种情况</strong>。</p><pre class="line-numbers language-none"><code class="language-none">debugImplementation   'com.squareup.leakcanary:leakcanary-support-fragment:1.6.2'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>继续看到注释3处helper.activityLifecycleCallbacks里面的代码。</p><pre class="line-numbers language-none"><code class="language-none">private final Application.ActivityLifecycleCallbacks activityLifecycleCallbacks =    new ActivityLifecycleCallbacksAdapter() {      @Override public void onActivityCreated(Activity activity, Bundle savedInstanceState) {        for (FragmentRefWatcher watcher : fragmentRefWatchers) {            watcher.watchFragments(activity);        }    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，在Activity执行完onActivityCreated()方法之后，会调用指定watcher的watchFragments()方法，注意，这里的watcher可能有两种，但不管是哪一种，都会使用当前传入的activity获取到对应的FragmentManager/SupportFragmentManager对象，调用它的registerFragmentLifecycleCallbacks()方法，在对应的onDestroyView()和onDestoryed()方法执行完后，分别使用refWatcher.watch(view)和refWatcher.watch(fragment)进行内存泄漏的检测，代码如下所示。</p><pre class="line-numbers language-none"><code class="language-none">@Override public void onFragmentViewDestroyed(FragmentManager fm, Fragment fragment) {    View view = fragment.getView();    if (view != null) {        refWatcher.watch(view);    }}@Overridepublic void onFragmentDestroyed(FragmentManagerfm, Fragment fragment) {    refWatcher.watch(fragment);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，下面到真正关键的地方了，接下来分析refWatcher.watch()这行代码。</p>        <h3 id="RefWatcher-watch">          <a href="#RefWatcher-watch" class="heading-link"><i class="fas fa-link"></i></a><a href="#RefWatcher-watch" class="headerlink" title="RefWatcher#watch()"></a>RefWatcher#watch()</h3>      <pre class="line-numbers language-none"><code class="language-none">public void watch(Object watchedReference, String referenceName) {    if (this == DISABLED) {      return;    }    checkNotNull(watchedReference, "watchedReference");    checkNotNull(referenceName, "referenceName");    final long watchStartNanoTime = System.nanoTime();    // 1    String key = UUID.randomUUID().toString();    // 2    retainedKeys.add(key);    // 3    final KeyedWeakReference reference =        new KeyedWeakReference(watchedReference, key, referenceName, queue);    // 4    ensureGoneAsync(watchStartNanoTime, reference);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到在注释1处<strong>使用随机的UUID保证了每个检测对象对应 key 的唯一性</strong>。在注释2处将生成的key添加到类型为CopyOnWriteArraySet的Set集合中。在注释3处新建了一个自定义的弱引用KeyedWeakReference，看看它内部的实现。</p>        <h3 id="KeyedWeakReference">          <a href="#KeyedWeakReference" class="heading-link"><i class="fas fa-link"></i></a><a href="#KeyedWeakReference" class="headerlink" title="KeyedWeakReference"></a>KeyedWeakReference</h3>      <pre class="line-numbers language-none"><code class="language-none">final class KeyedWeakReference extends WeakReference&lt;Object&gt; {    public final String key;    public final String name;        KeyedWeakReference(Object referent, String key, String name,        ReferenceQueue&lt;Object&gt; referenceQueue) {      // 1      super(checkNotNull(referent, "referent"), checkNotNull(referenceQueue, "referenceQueue"));      this.key = checkNotNull(key, "key");      this.name = checkNotNull(name, "name");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，<strong>在KeyedWeakReference内部，使用了key和name标识了一个被检测的WeakReference对象</strong>。在注释1处，<strong>将弱引用和引用队列 ReferenceQueue 关联起来，如果弱引用reference持有的对象被GC回收，JVM就会把这个弱引用加入到与之关联的引用队列referenceQueue中。即 KeyedWeakReference 持有的 Activity 对象如果被GC回收，该对象就会加入到引用队列 referenceQueue 中</strong>。</p><p>接着回到RefWatcher.watch()里注释4处的ensureGoneAsync()方法。</p>        <h3 id="RefWatcher-ensureGoneAsync">          <a href="#RefWatcher-ensureGoneAsync" class="heading-link"><i class="fas fa-link"></i></a><a href="#RefWatcher-ensureGoneAsync" class="headerlink" title="RefWatcher#ensureGoneAsync()"></a>RefWatcher#ensureGoneAsync()</h3>      <pre class="line-numbers language-none"><code class="language-none">private void ensureGoneAsync(final long watchStartNanoTime, final KeyedWeakReference reference) {    // 1    watchExecutor.execute(new Retryable() {        @Override public Retryable.Result run() {            // 2            return ensureGone(reference watchStartNanoTime);        }    });}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在ensureGoneAsync()方法中，在注释1处使用 watchExecutor 执行了注释2处的 ensureGone 方法，watchExecutor 是 AndroidWatchExecutor 的实例。</p><p>下面看看watchExecutor内部的逻辑。</p>        <h3 id="AndroidWatchExecutor">          <a href="#AndroidWatchExecutor" class="heading-link"><i class="fas fa-link"></i></a><a href="#AndroidWatchExecutor" class="headerlink" title="AndroidWatchExecutor"></a>AndroidWatchExecutor</h3>      <pre class="line-numbers language-none"><code class="language-none">public final class AndroidWatchExecutor implements WatchExecutor {    ...        public AndroidWatchExecutor(long initialDelayMillis)     {      mainHandler = new Handler(Looper.getMainLooper());      HandlerThread handlerThread = new HandlerThread(LEAK_CANARY_THREAD_NAME);      handlerThread.start();      // 1      backgroundHandler = new Handler(handlerThread.getLooper());      this.initialDelayMillis = initialDelayMillis;      maxBackoffFactor = Long.MAX_VALUE / initialDelayMillis;    }        @Override public void execute(@NonNull Retryable retryable) {      // 2      if (Looper.getMainLooper().getThread() == Thread.currentThread()) {        waitForIdle(retryable, 0);      } else {        postWaitForIdle(retryable, 0);      }    }        ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在注释1处<strong>AndroidWatchExecutor的构造方法</strong>中，注意到这里<strong>使用HandlerThread的looper新建了一个backgroundHandler</strong>，后面会用到。在注释2处，会判断当前线程是否是主线程，如果是，则直接调用waitForIdle()方法，如果不是，则调用postWaitForIdle()，来看看这个方法。</p><pre class="line-numbers language-none"><code class="language-none">private void postWaitForIdle(final Retryable retryable, final int failedAttempts) {  mainHandler.post(new Runnable() {    @Override public void run() {      waitForIdle(retryable, failedAttempts);    }  });}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很清晰，这里使用了在构造方法中用主线程looper构造的mainHandler进行post，那么waitForIdle()最终也会在主线程执行。接着看看waitForIdle()的实现。</p><pre class="line-numbers language-none"><code class="language-none">private void waitForIdle(final Retryable retryable,     final int failedAttempts) {  Looper.myQueue().addIdleHandler(new MessageQueue.IdleHandler() {    @Override public boolean queueIdle() {      postToBackgroundWithDelay(retryable, failedAttempts);      return false;    }  });}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里<strong>MessageQueue.IdleHandler()回调方法的作用是当 looper 空闲的时候，会回调 queueIdle 方法，利用这个机制我们可以实现第三方库的延迟初始化</strong>，然后执行内部的postToBackgroundWithDelay()方法。接下来看看它的实现。</p><pre class="line-numbers language-none"><code class="language-none">private void postToBackgroundWithDelay(final Retryable retryable, final int failedAttempts) {  long exponentialBackoffFactor = (long) Math.min(Math.pow(2, failedAttempts),     maxBackoffFactor);  // 1  long delayMillis = initialDelayMillis * exponentialBackoffFactor;  // 2  backgroundHandler.postDelayed(new Runnable() {    @Override public void run() {      // 3      Retryable.Result result = retryable.run();      // 4      if (result == RETRY) {        postWaitForIdle(retryable, failedAttempts +   1);      }    }  }, delayMillis);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先看到注释4处，可以明白，postToBackgroundWithDelay()是一个递归方法，如果result 一直等于RETRY的话，则会一直执行postWaitForIdle()方法。在回到注释1处，这里initialDelayMillis 的默认值是 5s，因此delayMillis就是5s。在注释2处，使用了在构造方法中用HandlerThread的looper新建的backgroundHandler进行异步延时执行retryable的run()方法。这个run()方法里执行的就是RefWatcher的ensureGoneAsync()方法中注释2处的ensureGone()这行代码，继续看它内部的逻辑。</p>        <h3 id="RefWatcher-ensureGone">          <a href="#RefWatcher-ensureGone" class="heading-link"><i class="fas fa-link"></i></a><a href="#RefWatcher-ensureGone" class="headerlink" title="RefWatcher#ensureGone()"></a>RefWatcher#ensureGone()</h3>      <pre class="line-numbers language-none"><code class="language-none">Retryable.Result ensureGone(final KeyedWeakReference reference, final long watchStartNanoTime) {    long gcStartNanoTime = System.nanoTime();    long watchDurationMs = NANOSECONDS.toMillis(gcStartNanoTime -     watchStartNanoTime);    // 1    removeWeaklyReachableReferences();    // 2    if (debuggerControl.isDebuggerAttached()) {      // The debugger can create false leaks.      return RETRY;    }        // 3    if (gone(reference)) {      return DONE;    }        // 4    gcTrigger.runGc();    removeWeaklyReachableReferences();        // 5    if (!gone(reference)) {      long startDumpHeap = System.nanoTime();      long gcDurationMs = NANOSECONDS.toMillis(startDumpHeap - gcStartNanoTime);      File heapDumpFile = heapDumper.dumpHeap();      if (heapDumpFile == RETRY_LATER) {        // Could not dump the heap.        return RETRY;      }            long heapDumpDurationMs = NANOSECONDS.toMillis(System.nanoTime() - startDumpHeap);      HeapDump heapDump = heapDumpBuilder.heapDumpFile(heapDumpFile).referenceKey(reference.key)          .referenceName(reference.name)          .watchDurationMs(watchDurationMs)          .gcDurationMs(gcDurationMs)          .heapDumpDurationMs(heapDumpDurationMs)          .build();      heapdumpListener.analyze(heapDump);    }    return DONE;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在注释1处，执行了removeWeaklyReachableReferences()这个方法，接下来分析下它的含义。</p><pre class="line-numbers language-none"><code class="language-none">private void removeWeaklyReachableReferences() {    KeyedWeakReference ref;    while ((ref = (KeyedWeakReference) queue.poll()) != null) {        retainedKeys.remove(ref.key);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用了while循环遍历 ReferenceQueue ，并从 retainedKeys中移除对应的Reference。</p><p>再看到注释2处，<strong>当Android设备处于debug状态时，会直接返回RETRY进行延时重试检测的操作</strong>。在注释3处，看看gone(reference)这个方法的逻辑。</p><pre class="line-numbers language-none"><code class="language-none">private boolean gone(KeyedWeakReference reference) {    return !retainedKeys.contains(reference.key);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里会<strong>判断 retainedKeys 集合中是否还含有 reference，若没有，证明已经被回收了，若含有，可能已经发生内存泄露（或Gc还没有执行回收）</strong>。前面的分析中我们知道了 <strong>reference 被回收的时候，会被加进 referenceQueue 里面，然后我们会调用removeWeaklyReachableReferences()遍历 referenceQueue 移除掉 retainedKeys 里面的 refrence</strong>。</p><p>接着看到注释4处，执行了gcTrigger的runGc()方法进行垃圾回收，然后使用了removeWeaklyReachableReferences()方法移除已经被回收的引用。这里再深入地分析下runGc()的实现。</p><pre class="line-numbers language-none"><code class="language-none">GcTrigger DEFAULT = new GcTrigger() {    @Override public void runGc() {      // Code taken from AOSP FinalizationTest:      // https://android.googlesource.com/platform/libc  ore/+/master/support/src/test/java/libcore/      // java/lang/ref/FinalizationTester.java      // System.gc() does not garbage collect every   time. Runtime.gc() is      // more likely to perform a gc.      Runtime.getRuntime().gc();      enqueueReferences();      System.runFinalization();    }    private void enqueueReferences() {      // Hack. We don't have a programmatic way to wait   for the reference queue daemon to move      // references to the appropriate queues.      try {        Thread.sleep(100);      } catch (InterruptedException e) {        throw new AssertionError();      }    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里并没有使用System.gc()方法进行回收，因为<strong>system.gc()并不会每次都执行</strong>。而是<strong>从AOSP中拷贝一段GC回收的代码，从而相比System.gc()更能够保证垃圾回收的工作</strong>。</p><p>最后分析下注释5处的代码处理。首先会判断activity是否被回收，如果还没有被回收，则证明发生内存泄露，进行if判断里面的操作。在里面先调用堆信息转储者heapDumper的dumpHeap()生成相应的 hprof 文件。这里的heapDumper是一个HeapDumper接口，具体的实现是AndroidHeapDumper。我们分析下AndroidHeapDumper的dumpHeap()方法是如何生成hprof文件的。</p><pre class="line-numbers language-none"><code class="language-none">public File dumpHeap() {    File heapDumpFile = leakDirectoryProvider.newHeapDumpFile();    if (heapDumpFile == RETRY_LATER) {        return RETRY_LATER;    }    ...        try {      Debug.dumpHprofData(heapDumpFile.getAbsolutePath());      ...            return heapDumpFile;    } catch (Exception e) {      ...      // Abort heap dump      return RETRY_LATER;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的核心操作就是<strong>调用了Android SDK的API Debug.dumpHprofData() 来生成 hprof 文件</strong>。</p><p>如果这个文件等于RETRY_LATER则表示生成失败，直接返回RETRY进行延时重试检测的操作。如果不等于的话，则表示生成成功，最后会<strong>执行heapdumpListener的analyze()对新创建的HeapDump对象进行泄漏分析</strong>。由前面对AndroidRefWatcherBuilder的listenerServiceClass()的分析可知，heapdumpListener的实现 就是ServiceHeapDumpListener，接着看到ServiceHeapDumpListener的analyze方法。</p>        <h3 id="ServiceHeapDumpListener-analyze">          <a href="#ServiceHeapDumpListener-analyze" class="heading-link"><i class="fas fa-link"></i></a><a href="#ServiceHeapDumpListener-analyze" class="headerlink" title="ServiceHeapDumpListener#analyze()"></a>ServiceHeapDumpListener#analyze()</h3>      <pre class="line-numbers language-none"><code class="language-none">@Override public void analyze(@NonNull HeapDump heapDump) {    checkNotNull(heapDump, "heapDump");    HeapAnalyzerService.runAnalysis(context, heapDump, listenerServiceClass);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，这里<strong>执行了HeapAnalyzerService的runAnalysis()方法，为了避免降低app进程的性能或占用内存，这里将HeapAnalyzerService设置在了一个独立的进程中</strong>。接着继续分析runAnalysis()方法里面的处理。</p><pre class="line-numbers language-none"><code class="language-none">public final class HeapAnalyzerService extends ForegroundServiceimplements AnalyzerProgressListener {    ...    public static void runAnalysis(Context context, HeapDump heapDump,    Class&lt;? extends AbstractAnalysisResultService&gt; listenerServiceClass) {        ...                ContextCompat.startForegroundService(context, intent);    }    ...        @Override protected void onHandleIntentInForeground(@Nullable Intent intent) {        ...        // 1        HeapAnalyzer heapAnalyzer =            new HeapAnalyzer(heapDump.excludedRefs, this, heapDump.reachabilityInspectorClasses);        // 2        AnalysisResult result = heapAnalyzer.checkForLeak(heapDump.heapDumpFile, heapDump.referenceKey,        heapDump.computeRetainedHeapSize);                // 3        AbstractAnalysisResultService.sendResultToListener(this, listenerClassName, heapDump, result);    }        ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的HeapAnalyzerService实质是一个类型为IntentService的ForegroundService，执行startForegroundService()之后，会回调onHandleIntentInForeground()方法。注释1处，首先会新建一个<strong>HeapAnalyzer</strong>对象，顾名思义，它就是<strong>根据RefWatcher生成的heap dumps信息来分析被怀疑的泄漏是否是真的</strong>。在注释2处，然后会<strong>调用它的checkForLeak()方法去使用haha库解析 hprof文件</strong>，如下所示：</p><pre class="line-numbers language-none"><code class="language-none">public @NonNull AnalysisResult checkForLeak(@NonNull File heapDumpFile,  @NonNull String referenceKey,  boolean computeRetainedSize) {    ...        try {    listener.onProgressUpdate(READING_HEAP_DUMP_FILE);    // 1    HprofBuffer buffer = new MemoryMappedFileBuffer(heapDumpFile);      // 2    HprofParser parser = new HprofParser(buffer);    listener.onProgressUpdate(PARSING_HEAP_DUMP);    Snapshot snapshot = parser.parse();      listener.onProgressUpdate(DEDUPLICATING_GC_ROOTS);    // 3    deduplicateGcRoots(snapshot);    listener.onProgressUpdate(FINDING_LEAKING_REF);      // 4    Instance leakingRef = findLeakingReference(referenceKey, snapshot);    // 5    if (leakingRef == null) {        return noLeak(since(analysisStartNanoTime));    }      // 6    return findLeakTrace(analysisStartNanoTime, snapshot, leakingRef, computeRetainedSize);    } catch (Throwable e) {    return failure(e, since(analysisStartNanoTime));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在注释1处，会新建一个<strong>内存映射缓存文件buffer</strong>。在注释2处，会<strong>使用buffer新建一个HprofParser解析器去解析出对应的引用内存快照文件snapshot</strong>。在注释3处，<strong>为了减少在Android 6.0版本中重复GCRoots带来的内存压力的影响，使用deduplicateGcRoots()删除了gcRoots中重复的根对象RootObj</strong>。在注释4处，<strong>调用了findLeakingReference()方法将传入的referenceKey和snapshot对象里面所有类实例的字段值对应的keyCandidate进行比较，如果没有相等的，则表示没有发生内存泄漏</strong>，直接调用注释5处的代码返回一个没有泄漏的分析结果AnalysisResult对象。<strong>如果找到了相等的，则表示发生了内存泄漏</strong>，执行注释6处的代码findLeakTrace()方法返回一个有泄漏分析结果的AnalysisResult对象。</p><p>最后，来分析下HeapAnalyzerService中注释3处的AbstractAnalysisResultService.sendResultToListener()方法，很明显，这里AbstractAnalysisResultService的实现类就是我们刚开始分析的用于展示泄漏路径信息的DisplayLeakService对象。在里面直接<strong>创建一个由PendingIntent构建的泄漏通知用于供用户点击去展示详细的泄漏界面DisplayLeakActivity</strong>。核心代码如下所示：</p><pre class="line-numbers language-none"><code class="language-none">public class DisplayLeakService extends AbstractAnalysisResultService {    @Override    protected final void onHeapAnalyzed(@NonNull AnalyzedHeap analyzedHeap) {            ...                boolean resultSaved = false;        boolean shouldSaveResult = result.leakFound || result.failure != null;        if (shouldSaveResult) {            heapDump = renameHeapdump(heapDump);            // 1            resultSaved = saveResult(heapDump, result);        }                if (!shouldSaveResult) {            ...            showNotification(null, contentTitle, contentText);        } else if (resultSaved) {            ...            // 2            PendingIntent pendingIntent =                DisplayLeakActivity.createPendingIntent(this, heapDump.referenceKey);            ...                        showNotification(pendingIntent, contentTitle, contentText);        } else {             onAnalysisResultFailure(getString(R.string.leak_canary_could_not_save_text));        }        ...}@Override protected final void onAnalysisResultFailure(String failureMessage) {    super.onAnalysisResultFailure(failureMessage);    String failureTitle = getString(R.string.leak_canary_result_failure_title);    showNotification(null, failureTitle, failureMessage);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，只要当分析的堆信息文件保存成功之后，即在注释1处返回的resultSaved为true时，才会执行注释2处的逻辑，即创建一个供用户点击跳转到DisplayLeakActivity的延时通知。</p>        <h2 id="LeakCanary运作流程">          <a href="#LeakCanary运作流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#LeakCanary运作流程" class="headerlink" title="LeakCanary运作流程"></a>LeakCanary运作流程</h2>      <p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d0363331db824e7ab342e4bd74702a93~tplv-k3u1fbpfcp-zoom-1.image" alt="image"></p><blockquote><p>性能优化一直是Android中进阶和深入的方向之一，而内存泄漏一直是性能优化中比较重要的一部分，Android Studio自身提供了MAT等工具去分析内存泄漏，但是分析起来比较耗时耗力，因而才诞生了LeakCanary，它的使用非常简单，但是经过对它的深入分析之后，才发现，<strong>简单的API后面往往藏着许多复杂的逻辑处理，尝试去领悟它们，你可能会发现不一样的世界</strong>。</p></blockquote>        <h1 id="ButterKnife">          <a href="#ButterKnife" class="heading-link"><i class="fas fa-link"></i></a><a href="#ButterKnife" class="headerlink" title="ButterKnife"></a>ButterKnife</h1>              <h2 id="简单示例-1">          <a href="#简单示例-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#简单示例-1" class="headerlink" title="简单示例"></a>简单示例</h2>      <p>首先看一下ButterKnife的基本使用，如下所示：</p><pre class="line-numbers language-none"><code class="language-none">public class CollectFragment extends BaseRootFragment&lt;CollectPresenter&gt; implements CollectContract.View {    @BindView(R.id.normal_view)    SmartRefreshLayout mRefreshLayout;    @BindView(R.id.collect_recycler_view)    RecyclerView mRecyclerView;    @BindView(R.id.collect_floating_action_btn)    FloatingActionButton mFloatingActionButton;        @Nullable    @Override    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        View view = inflater.inflate(getLayoutId(), container, false);        unBinder = ButterKnife.bind(this, view);        initView();        return view;    }        @OnClick({R.id.collect_floating_action_btn})    void onClick(View view) {        switch (view.getId()) {            case R.id.collect_floating_action_btn:                mRecyclerView.smoothScrollToPosition(0);                break;            default:                break;        }    }            @Override    public void onDestroyView() {        super.onDestroyView();        if (unBinder != null &amp;&amp; unBinder != Unbinder.EMPTY) {            unBinder.unbind();            unBinder = null;        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，我们使用了@BindView()替代了findViewById()方法，然后使用了@OnClick替代了setOnClickListener()方法。ButterKnife的初期版本是通过使用注解+反射这样的运行时解析的方式实现上述功能的，后面，为了改善性能，便使用了<strong>注解+APT编译时解析技术并从中生成配套模板代码的方式</strong>来实现。</p><p>在开始分析之前，可能有同学对APT不是很了解，这里普及一下，APT是Annotation Processing Tool的缩写，即注解处理工具。它的使用步骤通常为如下三个步骤：</p><ol><li><p>**首先，声明注解的生命周期为CLASS，即@Retention(CLASS)**。</p></li><li><p><strong>然后，通过继承AbstractProcessor自定义一个注解处理器</strong>。</p></li><li><p><strong>最后，在编译的时候，编译器会扫描所有带有你要处理的注解的类，最后再调用AbstractProcessor的process方法，对注解进行处理</strong>。</p></li></ol><p>下面，正式来解剖一下ButterKnife的心脏。</p>        <h2 id="源码分析-1">          <a href="#源码分析-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h2>              <h3 id="模板代码解析">          <a href="#模板代码解析" class="heading-link"><i class="fas fa-link"></i></a><a href="#模板代码解析" class="headerlink" title="模板代码解析"></a>模板代码解析</h3>      <p>首先，在编写好上述的示例代码之后，调用 gradle build 命令，在app/build/generated/source/apt下将可以找到APT为我们生产的配套模板代码CollectFragment_ViewBinding，如下所示：</p><pre class="line-numbers language-none"><code class="language-none">public class CollectFragment_ViewBinding implements Unbinder {    private CollectFragment target;        private View view2131230812;        @UiThread    public CollectFragment_ViewBinding(final CollectFragment target, View source) {      this.target = target;          View view;      // 1      target.mRefreshLayout = Utils.findRequiredViewAsType(source, R.id.normal_view, "field 'mRefreshLayout'", SmartRefreshLayout.class);      target.mRecyclerView = Utils.findRequiredViewAsType(source, R.id.collect_recycler_view, "field 'mRecyclerView'", RecyclerView.class);      view = Utils.findRequiredView(source, R.id.collect_floating_action_btn, "field 'mFloatingActionButton' and method 'onClick'");      target.mFloatingActionButton = Utils.castView(view, R.id.collect_floating_action_btn, "field 'mFloatingActionButton'", FloatingActionButton.class);      view2131230812 = view;      // 2      view.setOnClickListener(new DebouncingOnClickListener() {        @Override        public void doClick(View p0) {          target.onClick(p0);        }      });    }        @Override    @CallSuper    public void unbind() {      CollectFragment target = this.target;      if (target == null) throw newIllegalStateException("Bindings already     cleared.");      this.target = null;          target.mRefreshLayout = null;      target.mRecyclerView = null;      target.mFloatingActionButton = null;          view2131230812.setOnClickListener(null);      view2131230812 = null;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成的配套模板CollectFragment_ViewBinding中，在注释1处，使用了ButterKnife内部的工具类Utils的findRequiredViewAsType()方法来寻找控件。在注释2处，使用了view的setOnClickListener()方法来添加了一个去抖动的DebouncingOnClickListener，这样便可以防止重复点击，在重写的doClick()方法内部，直接调用了CollectFragment的onClick方法。最后，再深入看下Utils的findRequiredViewAsType()方法内部的实现。</p><pre class="line-numbers language-none"><code class="language-none">public static &lt;T&gt; T findRequiredViewAsType(View source, @IdRes int id, String who,  Class&lt;T&gt; cls) {    // 1    View view = findRequiredView(source, id, who);    // 2    return castView(view, id, who, cls);}public static View findRequiredView(View source, @IdRes int id, String who) {    View view = source.findViewById(id);    if (view != null) {        return view;    }        ...}public static &lt;T&gt; T castView(View view, @IdRes int id, String who, Class&lt;T&gt; cls) {    try {        return cls.cast(view);    } catch (ClassCastException e) {        ...    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在注释1处，<strong>最终也是通过View的findViewById()方法找到相应的控件</strong>，在注释2处，<strong>通过相应Class对象的cast方法强转成对应的控件类型</strong>。</p>        <h3 id="ButterKnife-是怎样实现代码注入的">          <a href="#ButterKnife-是怎样实现代码注入的" class="heading-link"><i class="fas fa-link"></i></a><a href="#ButterKnife-是怎样实现代码注入的" class="headerlink" title="ButterKnife 是怎样实现代码注入的"></a>ButterKnife 是怎样实现代码注入的</h3>      <p>接下来，为了使用这套模板代码，我们必须调用ButterKnife的bind()方法实现代码注入，即自动帮我们执行重复繁琐的findViewById和setOnClicklistener操作。下面我们来分析下bind()方法是如何实现注入的。</p><pre class="line-numbers language-none"><code class="language-none">@NonNull @UiThreadpublic static Unbinder bind(@NonNull Object target, @NonNull View source) {    return createBinding(target, source);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在bind()方法中调用了createBinding()，</p><pre class="line-numbers language-none"><code class="language-none">@NonNull @UiThreadpublic static Unbinder bind(@NonNull Object target, @NonNull View source) {    Class&lt;?&gt; targetClass = target.getClass();    // 1    Constructor&lt;? extends Unbinder&gt; constructor = findBindingConstructorForClass(targetClass);    if (constructor == null) {        return Unbinder.EMPTY;    }        try {        // 2        return constructor.newInstance(target, source);    // 3    } catch (IllegalAccessException e) {    ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，在注释1处，通过 findBindingConstructorForClass() 方法从 Class 中查找 constructor，这里constructor即上文生成的CollectFragment_ViewBinding类。然后，在注释2处，<strong>利用反射来新建 constructor 对象</strong>。最后，如果新建 constructor 对象失败，则会在注释3后面捕获一系列对应的异常进行自定义异常抛出处理。</p><p>下面，来详细分析下 findBindingConstructorForClass() 方法的实现逻辑。</p><pre class="line-numbers language-none"><code class="language-none">@VisibleForTestingstatic final Map&lt;Class&lt;?&gt;, Constructor&lt;? extends Unbinder&gt;&gt; BINDINGS = new LinkedHashMap&lt;&gt;();@Nullable @CheckResult @UiThreadprivate static Constructor&lt;? extends Unbinder&gt; findBindingConstructorForClass(Class&lt;?&gt; cls) {    // 1    Constructor&lt;? extends Unbinder&gt; bindingCtor = BINDINGS.get(cls);    if (bindingCtor != null || BINDINGS.containsKey(cls)) {        return bindingCtor;    }        // 2    String clsName = cls.getName();    if (clsName.startsWith("android.") || clsName.startsWith("java.")    || clsName.startsWith("androidx.")) {        return null;    }        try {        // 3        Class&lt;?&gt; bindingClass = cls.getClassLoader().loadClass(clsName + "_ViewBinding");        bindingCtor = (Constructor&lt;? extends Unbinder&gt;) bindingClass.getConstructor(cls, View.class);    } catch (ClassNotFoundException e) {        // 4        bindingCtor = findBindingConstructorForClass(cls.getSuperclass());    } catch (NoSuchMethodException e) {        throw new RuntimeException("Unable to find binding constructor for " + clsName, e);    }        // 5    BINDINGS.put(cls, bindingCtor);    return bindingCtor;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里，我把多余的log代码删除并把代码格式优化了一下，可以看到，findBindingConstructorForClass() 这个方法中的逻辑瞬间清晰不少，这里<strong>建议以后大家自己在分析源码的时候可以进行这样的优化重整</strong>，会带来不少好处。</p><p>重新看到 findBindingConstructorForClass() 方法，在注释1处，我们首先从缓存BINDINGS中获取CollectFragment类对象对应的模块类CollectFragment_ViewBinding的构造器对象，这里的BINDINGS是一个LinkedHashMap对象，它保存了上述两者的映射关系。在注释2处，如果是 android，androidx，java 原生的文件，不进行处理。在注释3处，先<strong>通过CollectFragment类对象的类加载器加载出对应的模块类CollectFragment_ViewBinding的类对象</strong>，再通过自身的getConstructor()方法获得相应的构造对象。如果在步骤3中加载不出对应的模板类对象，则会在注释4处使用类似递归的方法重新执行findBindingConstructorForClass()方法。最后，如果找到了bindingCtor模板构造对象，则将它保存在BINDINGS这个LinkedHashMap对象中。</p><p><strong>这里总结一下findBindingConstructorForClass()方法的处理：</strong></p><ol><li><p><strong>首先从缓存BINDINGS中获取CollectFragment类对象对应的模块类CollectFragment_ViewBinding的构造器对象，获取不到，则继续执行下面的操作</strong>。</p></li><li><p><strong>如果不是android，androidx，java 原生的文件，再进行后面的处理</strong>。</p></li><li><p><strong>通过CollectFragment类对象的类加载器加载出对应的模块类CollectFragment_ViewBinding的类对象，再通过自身的getConstructor()方法获得相应的构造对象，如果获取不到，会抛出异常，在异常的处理中，我们会从当前 class 文件的父类中再去查找。如果找到了，最后会将bindingCtor对象缓存进在BINDINGS对象中</strong>。</p></li></ol>        <h3 id="ButterKnife是如何在编译时生成代码的？">          <a href="#ButterKnife是如何在编译时生成代码的？" class="heading-link"><i class="fas fa-link"></i></a><a href="#ButterKnife是如何在编译时生成代码的？" class="headerlink" title="ButterKnife是如何在编译时生成代码的？"></a>ButterKnife是如何在编译时生成代码的？</h3>      <p>在编译的时候，ButterKnife会通过自定义的注解处理器ButterKnifeProcessor的process方法，对编译器扫描到的要处理的类中的注解进行处理，然后，<strong>通过javapoet这个库来动态生成绑定事件或者控件的模板代码</strong>，最后在运行的时候，直接调用bind方法完成绑定即可。</p><p>首先，先来分析下ButterKnifeProcessor的重写的入口方法init()。</p><pre class="line-numbers language-none"><code class="language-none">@Override public synchronized void init(ProcessingEnvironment env) {    super.init(env);    String sdk = env.getOptions().get(OPTION_SDK_INT);    if (sdk != null) {        try {            this.sdk = Integer.parseInt(sdk);        } catch (NumberFormatException e) {           ...        }    }    typeUtils = env.getTypeUtils();    filer = env.getFiler();    ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，<strong>ProcessingEnviroment对象提供了两大工具类 typeUtils和filer。typeUtils的作用是用来处理TypeMirror，而Filer则是用来创建生成辅助文件</strong>。</p><p>接着，再来看看被重写的getSupportedAnnotationTypes()方法，这个方法的作用主要是用于指定ButterknifeProcessor注册了哪些注解的。</p><pre class="line-numbers language-none"><code class="language-none">@Override public Set&lt;String&gt; getSupportedAnnotationTypes() {    Set&lt;String&gt; types = new LinkedHashSet&lt;&gt;();    for (Class&lt;? extends Annotation&gt; annotation : getSupportedAnnotations()) {    types.add(annotation.getCanonicalName());    }    return types;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里面首先创建了一个LinkedHashSet对象，然后将getSupportedAnnotations()方法返回的支持注解集合进行遍历一一并添加到types中返回。</p><p>接着看下getSupportedAnnotations()方法，</p><pre class="line-numbers language-none"><code class="language-none">private Set&lt;Class&lt;? extends Annotation&gt;&gt; getSupportedAnnotations() {    Set&lt;Class&lt;? extends Annotation&gt;&gt; annotations = new LinkedHashSet&lt;&gt;();    annotations.add(BindAnim.class);    annotations.add(BindArray.class);    annotations.add(BindBitmap.class);    annotations.add(BindBool.class);    annotations.add(BindColor.class);    annotations.add(BindDimen.class);    annotations.add(BindDrawable.class);    annotations.add(BindFloat.class);    annotations.add(BindFont.class);    annotations.add(BindInt.class);    annotations.add(BindString.class);    annotations.add(BindView.class);    annotations.add(BindViews.class);    annotations.addAll(LISTENERS);    return annotations;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，这里注册了一系列的Bindxxx注解类和监听列表LISTENERS，接着看一下LISTENERS中包含的监听方法：</p><pre class="line-numbers language-none"><code class="language-none">private static final List&lt;Class&lt;? extends Annotation&gt;&gt; LISTENERS = Arrays.asList(    OnCheckedChanged.class,     OnClick.class,     OnEditorAction.class,     OnFocusChange.class,     OnItemClick.class,     OnItemLongClick.class,     OnItemSelected.class,     OnLongClick.class,     OnPageChange.class,     OnTextChanged.class,     OnTouch.class );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，来分析下整个ButterKnifeProcessor中最关键的方法process()。</p><pre class="line-numbers language-none"><code class="language-none">@Override public boolean process(Set&lt;? extends TypeElement&gt; elements, RoundEnvironment env) {    // 1    Map&lt;TypeElement, BindingSet&gt; bindingMap = findAndParseTargets(env);    for (Map.Entry&lt;TypeElement, BindingSet&gt; entry : bindingMap.entrySet()) {        TypeElement typeElement = entry.getKey();        BindingSet binding = entry.getValue();        // 2        JavaFile javaFile = binding.brewJava(sdk, debuggable);        try {            javaFile.writeTo(filer);        } catch (IOException e) {           ...        }    }    return false;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，在注释1处通过<strong>findAndParseTargets()方法</strong>，知名见义，它应该就是<strong>找到并解析注解目标的关键方法</strong>了，继续看看它内部的处理：</p><pre class="line-numbers language-none"><code class="language-none">private Map&lt;TypeElement, BindingSet&gt; findAndParseTargets(RoundEnvironment env) {    Map&lt;TypeElement, BindingSet.Builder&gt; builderMap = new LinkedHashMap&lt;&gt;();    Set&lt;TypeElement&gt; erasedTargetNames = new LinkedHashSet&lt;&gt;();    // 1、一系列处理每一个@Bindxxx元素的for循环代码块    ...    // Process each @BindView element.    for (Element element : env.getElementsAnnotatedWith(BindView.class)) {        try {        // 2        parseBindView(element, builderMap, erasedTargetNames);        } catch (Exception e) {            logParsingError(element, BindView.class, e);        }    }    // Process each @BindViews element.    ...    // Process each annotation that corresponds to a listener.    for (Class&lt;? extends Annotation&gt; listener : LISTENERS) {        findAndParseListener(env, listener, builderMap, erasedTargetNames);    }    // 2    Deque&lt;Map.Entry&lt;TypeElement, BindingSet.Builder&gt;&gt; entries =        new ArrayDeque&lt;&gt;(builderMap.entrySet());    Map&lt;TypeElement, BindingSet&gt; bindingMap = new LinkedHashMap&lt;&gt;();    while (!entries.isEmpty()) {        Map.Entry&lt;TypeElement, BindingSet.Builder&gt; entry = entries.removeFirst();        TypeElement type = entry.getKey();        BindingSet.Builder builder = entry.getValue();        TypeElement parentType = findParentType(type, erasedTargetNames);        if (parentType == null) {            bindingMap.put(type, builder.build());        } else {            BindingSet parentBinding = bindingMap.get(parentType);            if (parentBinding != null) {                builder.setParent(parentBinding);                bindingMap.put(type, builder.build());            } else {            entries.addLast(entry);            }        }    }    return bindingMap;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>findAndParseTargets()方法的代码非常多，这里尽可能做了精简。首先，在注释1处，<strong>扫描并处理所有具有@Bindxxx注解和符合LISTENERS监听方法集合的代码，然后在每一个@Bindxxx对应的for循环代码中的parseBindxxx()或findAndParseListener()方法中将解析出的信息放入builderMap这个LinkedHashMap对象中</strong>，其中builderMap是一个key为TypeElement，value为BindingSet.Builder的映射集合，这个 BindSet 是指<strong>的一个类型请求的所有绑定的集合</strong>。在注释3处，首先使用上面的builderMap对象去构建了一个entries对象，它是一个双向队列，能实现两端存取的操作。接着，又新建了一个key为TypeElement，value为BindingSet的LinkedHashMap对象，最后使用了一个while循环从entries的第一个元素开始，这里会判断当前元素类型是否有父类，如果没有，直接构建builder放入bindingMap中，如果有，则将parentBinding添加到BindingSet.Builder这个建造者对象中，然后再创建BindingSet再添加到bindingMap中。</p><p>接着，分析下注释2处parseBindView是如何对每一个@BindView注解的元素进行处理。</p><pre class="line-numbers language-none"><code class="language-none">private void parseBindView(Element element, Map&lt;TypeElement, BindingSet.Builder&gt; builderMap,  Set&lt;TypeElement&gt; erasedTargetNames) {    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();    // 1、首先验证生成的常见代码限制    ...    // 2、验证目标类型是否继承自View。    ...        // 3    int id = element.getAnnotation(BindView.class).value();    BindingSet.Builder builder = builderMap.get(enclosingElement);    Id resourceId = elementToId(element, BindView.class, id);    if (builder != null) {        String existingBindingName = builder.findExistingBindingName(resourceId);        if (existingBindingName != null) {            ...            return;        }    } else {        // 4        builder = getOrCreateBindingBuilder(builderMap, enclosingElement);    }    String name = simpleName.toString();    TypeName type = TypeName.get(elementType);    boolean required = isFieldRequired(element);    // 5    builder.addField(resourceId, new     FieldViewBinding(name, type, required));    // Add the type-erased version to the valid binding targets set.    erasedTargetNames.add(enclosingElement);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，在注释1、2处均是一些验证处理操作，如果不符合则会return。然后，看到注释3处，这里获取了BindView要绑定的View的id，然后先从builderMap中获取BindingSet.Builder对象，如果存在，直接return。如果不存在，则会在注释4处的 getOrCreateBindingBuilder()方法生成一个。看一下getOrCreateBindingBuilder()方法:</p><pre class="line-numbers language-none"><code class="language-none">private BindingSet.Builder getOrCreateBindingBuilder(  Map&lt;TypeElement, BindingSet.Builder&gt; builderMap, TypeElement enclosingElement) {    BindingSet.Builder builder = builderMap.get(enclosingElement);    if (builder == null) {        builder = BindingSet.newBuilder(enclosingElement);        builderMap.put(enclosingElement, builder);    }    return builder;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，这里会再次从buildMap中获取BindingSet.Builder对象，如果没有则直接调用BindingSet的newBuilder()方法新建一个BindingSet.Builder对象并保存在builderMap中，然后，再将新建的builder对象返回。</p><p>回到parseBindView()方法的注释5处，这里根据view的信息生成一个FieldViewBinding，最后添加到上边生成的builder对象中。</p><p>最后，再回到我们的process()方法中，现在<strong>所有的绑定的集合数据都放在了bindingMap对象中，这里使用for循环取出每一个BindingSet对象，调用它的brewJava()方法</strong>，看看它内部的处理：</p><pre class="line-numbers language-none"><code class="language-none">JavaFile brewJava(int sdk, boolean debuggable) {    TypeSpec bindingConfiguration = createType(sdk, debuggable);    return JavaFile.builder(bindingClassName.packageName(), bindingConfiguration)    .addFileComment("Generated code from Butter Knife. Do not modify!")    .build();}private TypeSpec createType(int sdk, boolean debuggable) {    TypeSpec.Builder result = TypeSpec.classBuilder(bindingClassName.simpleName())    .addModifiers(PUBLIC);    if (isFinal) {        result.addModifiers(FINAL);    }    if (parentBinding != null) {        result.superclass(parentBinding.bindingClassName);    } else {        result.addSuperinterface(UNBINDER);    }    if (hasTargetField()) {        result.addField(targetTypeName, "target", PRIVATE);    }    if (isView) {        result.addMethod(createBindingConstructorForView());    } else if (isActivity) {        result.addMethod(createBindingConstructorForActivity());    } else if (isDialog) {        result.addMethod(createBindingConstructorForDialog());    }    if (!constructorNeedsView()) {        // Add a delegating constructor with a target type + view signature for reflective use.        result.addMethod(createBindingViewDelegateConstructor());    }    result.addMethod(createBindingConstructor(sdk, debuggable));    if (hasViewBindings() || parentBinding == null) {        result.addMethod(createBindingUnbindMethod(result));    }    return result.build();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在createType()方法里面使用了java中的javapoet技术生成了一个bindingConfiguration对象，很显然，它里面<strong>保存了所有的绑定配置信息。然后，通过javapoet的builder构造器将上面得到的bindingConfiguration对象构建生成一个JavaFile对象，最终，通过javaFile.writeTo(filer)生成了java源文件</strong>。</p><blockquote><p>从上面的源码分析来看，ButterKnife的执行流程总体可以分为如下两步：</p></blockquote><ol><li><p><strong>在编译的时候扫描注解，并通过自定义的ButterKnifeProcessor做相应的处理解析得到bindingMap对象，最后，调用 javapoet 库生成java模板代码</strong>。</p></li><li><p><strong>当我们调用 ButterKnife的bind()方法的时候，它会根据类的全限定类型，找到相应的模板代码，并在其中完成 findViewById 和 setOnClick ，setOnLongClick 等操作</strong>。</p></li></ol>        <h1 id="Dagger-2">          <a href="#Dagger-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#Dagger-2" class="headerlink" title="Dagger 2"></a>Dagger 2</h1>              <h2 id="预备知识">          <a href="#预备知识" class="heading-link"><i class="fas fa-link"></i></a><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2>              <h3 id="Inject">          <a href="#Inject" class="heading-link"><i class="fas fa-link"></i></a><a href="#Inject" class="headerlink" title="@Inject"></a>@Inject</h3>      <p>告诉dagger这个字段或类需要依赖注入，然后在需要依赖的地方使用这个注解，dagger会自动生成这个构造器的实例。</p>        <h4 id="获取所需依赖：">          <a href="#获取所需依赖：" class="heading-link"><i class="fas fa-link"></i></a><a href="#获取所需依赖：" class="headerlink" title="获取所需依赖："></a>获取所需依赖：</h4>      <ul><li>全局变量注入</li><li>方法注入</li></ul>        <h4 id="提供所需实例：">          <a href="#提供所需实例：" class="heading-link"><i class="fas fa-link"></i></a><a href="#提供所需实例：" class="headerlink" title="提供所需实例："></a>提供所需实例：</h4>      <ul><li>构造器注入（如果有多个构造函数，只能注解一个，否则编译报错）</li></ul>        <h3 id="Module">          <a href="#Module" class="heading-link"><i class="fas fa-link"></i></a><a href="#Module" class="headerlink" title="@Module"></a>@Module</h3>      <p>类注解，表示此类的方法是提供依赖的，它告诉dagger在哪可以找到依赖。用于不能用@Inject提供依赖的地方，如第三方库提供的类，基本数据类型等不能修改源码的情况。</p><p>注意：<strong>Dagger2会优先在@Module注解的类上查找依赖，没有的情况才会去查询类的@Inject构造方法</strong></p>        <h3 id="Singleton">          <a href="#Singleton" class="heading-link"><i class="fas fa-link"></i></a><a href="#Singleton" class="headerlink" title="@Singleton"></a>@Singleton</h3>      <p>声明这是一个单例，<strong>在确保只有一个Component并且不再重新build()之后，对象只会被初始化一次，之后的每次都会被注入相同的对象</strong>，它就是一个内置的作用域。</p><p>对于@Singleton，大家可能会产生一些误解，这里详细阐述下：</p><ul><li>Singleton容易给人造成一种误解就是用Singleton注解后在整个Java代码中都是单例，但<strong>实际上他和Scope一样，只是在同一个Component是单例</strong>。也就是说，如果重新调用了component的build（）方法，即使使用了Singleton注解了，但仍然获取的是不同的对象。</li><li>它表明了**@Singleton注解只是声明了这是一个单例，为的只是提高代码可读性，其实真正控制对象生命周期的还是Component<strong>。同理，自定义的@ActivityScope 、@ApplicationScope也仅仅是一个声明的作用，</strong>真正控制对象生命周期的还是Component**。</li></ul>        <h3 id="Providers">          <a href="#Providers" class="heading-link"><i class="fas fa-link"></i></a><a href="#Providers" class="headerlink" title="@Providers"></a>@Providers</h3>      <p>只在@Module中使用，用于提供构造好的实例。一般与@Singleton搭配，用单例方法的形式对外提供依赖,是一种替代@Inject注解构造方法的方式。</p><p>注意：</p><ul><li>使用了@Providers的方法应使用provide作为前缀，使用了@Module的类应使用Module作为后缀。</li><li><strong>如果@Providers方法或@Inject构造方法有参数，要保证它能够被dagger获取到，比如通过其它@Providers方法或者@Inject注解构造器的形式得到</strong>。</li></ul>        <h3 id="Component">          <a href="#Component" class="heading-link"><i class="fas fa-link"></i></a><a href="#Component" class="headerlink" title="@Component"></a>@Component</h3>      <p><strong>@Component作为Dagger2的容器总管，它拥有着@Inject与@Module的所有依赖。同时，它也是一枚注射器，用于获取所需依赖和提供所需依赖的桥梁</strong>。这里的桥梁即指@Inject和@Module（或@Inject构造方法）之间的桥梁。定义时需要列出响应的Module组成，此外，还可以使用dependencies继承父Component。</p>        <h4 id="Component与Module的区别：">          <a href="#Component与Module的区别：" class="heading-link"><i class="fas fa-link"></i></a><a href="#Component与Module的区别：" class="headerlink" title="Component与Module的区别："></a>Component与Module的区别：</h4>      <p>Component既是注射器也是一个容器总管，而module则是作为容器总管Component的子容器，实质是一个用于提供依赖的模块。</p>        <h3 id="Scope">          <a href="#Scope" class="heading-link"><i class="fas fa-link"></i></a><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h3>      <p>注解作用域，通过自定义注解<strong>限定对象作用范围，增强可读性</strong>。</p><p>@Scope有两种常用的使用场景：</p><ul><li><strong>模拟Singleton代表全局单例，与Component生命周期关联</strong>。</li><li><strong>模拟局部单例，如登录到退出登录期间</strong>。</li></ul>        <h3 id="Qualifier">          <a href="#Qualifier" class="heading-link"><i class="fas fa-link"></i></a><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h3>      <p>限定符，利用它<strong>定义注解类以用于区分类的不同实例</strong>。例如：2个方法返回不同的Person对象，比如说小明和小华，为了区分，使用@Qualifier定义的注解类。</p>        <h3 id="dependencies">          <a href="#dependencies" class="heading-link"><i class="fas fa-link"></i></a><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h3>      <p>使用它表示ChildComponent依赖于FatherComponent，如下所示：</p><pre class="line-numbers language-none"><code class="language-none">@Component(modules = ChildModule.class, dependencies = FatherComponent.class)public interface ChildComponent {    ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="SubComponent">          <a href="#SubComponent" class="heading-link"><i class="fas fa-link"></i></a><a href="#SubComponent" class="headerlink" title="@SubComponent"></a>@SubComponent</h3>      <p>表示是一个子@Component，它能<strong>将应用的不同部分封装起来，用来替代@Dependencies</strong>。</p>        <h2 id="简单示例-2">          <a href="#简单示例-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#简单示例-2" class="headerlink" title="简单示例"></a>简单示例</h2>              <h3 id="首先，创建一个BaseActivityComponent的Subcomponent：">          <a href="#首先，创建一个BaseActivityComponent的Subcomponent：" class="heading-link"><i class="fas fa-link"></i></a><a href="#首先，创建一个BaseActivityComponent的Subcomponent：" class="headerlink" title="首先，创建一个BaseActivityComponent的Subcomponent："></a>首先，创建一个BaseActivityComponent的Subcomponent：</h3>      <pre class="line-numbers language-none"><code class="language-none">@Subcomponent(modules = {AndroidInjectionModule.class})public interface BaseActivityComponent extends AndroidInjector&lt;BaseActivity&gt; {    @Subcomponent.Builder    abstract class BaseBuilder extends AndroidInjector.Builder&lt;BaseActivity&gt;{    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里必须要注解成@Subcomponent.Builder表示是顶级@Subcomponent的内部类。AndroidInjector.Builder的泛型指定了BaseActivity，即表示每一个继承于BaseActivity的Activity都继承于同一个子组件（BaseActivityComponent）。</p>        <h3 id="然后，创建一个将会导入Subcomponent的公有Module。">          <a href="#然后，创建一个将会导入Subcomponent的公有Module。" class="heading-link"><i class="fas fa-link"></i></a><a href="#然后，创建一个将会导入Subcomponent的公有Module。" class="headerlink" title="然后，创建一个将会导入Subcomponent的公有Module。"></a>然后，创建一个将会导入Subcomponent的公有Module。</h3>      <pre class="line-numbers language-none"><code class="language-none">// 1@Module(subcomponents = {BaseActivityComponent.class})public abstract class AbstractAllActivityModule {    @ContributesAndroidInjector(modules = MainActivityModule.class)    abstract MainActivity contributesMainActivityInjector();    @ContributesAndroidInjector(modules = SplashActivityModule.class)    abstract SplashActivity contributesSplashActivityInjector();        // 一系列的对应Activity的contributesxxxActivityInjector    ...    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在注释1处用subcomponents来表示开放全部依赖给AbstractAllActivityModule，使用Subcomponent的重要原因是它将应用的不同部分封装起来了。**@AppComponent负责维护共享的数据和对象，而不同处则由各自的@Subcomponent维护**。</p>        <h3 id="接着，配置项目的Application。">          <a href="#接着，配置项目的Application。" class="heading-link"><i class="fas fa-link"></i></a><a href="#接着，配置项目的Application。" class="headerlink" title="接着，配置项目的Application。"></a>接着，配置项目的Application。</h3>      <pre class="line-numbers language-none"><code class="language-none">public class WanAndroidApp extends Application implements HasActivityInjector {    // 3    @Inject    DispatchingAndroidInjector&lt;Activity&gt; mAndroidInjector;    private static volatile AppComponent appComponent;        @Override    public void onCreate() {        super.onCreate();                ...        // 1        appComponent = DaggerAppComponent.builder()            .build();        // 2        appComponent.inject(this);                ...            }        ...        // 4    @Override    public AndroidInjector&lt;Activity&gt; activityInjector() {        return mAndroidInjector;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，在注释1处，使用AppModule模块和httpModule模块构建出AppComponent的实现类DaggerAppComponent。这里看一下AppComponent的配置代码：</p><pre class="line-numbers language-none"><code class="language-none">@Singleton@Component(modules = {AndroidInjectionModule.class,        AndroidSupportInjectionModule.class,        AbstractAllActivityModule.class,        AbstractAllFragmentModule.class,        AbstractAllDialogFragmentModule.class}    )public interface AppComponent {    /**     * 注入WanAndroidApp实例     *     * @param wanAndroidApp WanAndroidApp     */    void inject(WanAndroidApp wanAndroidApp);        ...    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，AppComponent依赖了AndroidInjectionModule模块，它包含了一些基础配置的绑定设置，如activityInjectorFactories、fragmentInjectorFactories等等，而AndroidSupportInjectionModule模块显然就是多了一个supportFragmentInjectorFactories的绑定设置，activityInjectorFactories的内容如所示：</p><pre class="line-numbers language-none"><code class="language-none">@Beta@Modulepublic abstract class AndroidInjectionModule {    @Multibinds    abstract Map&lt;Class&lt;? extends Activity&gt;, AndroidInjector.Factory&lt;? extends Activity&gt;&gt;        activityInjectorFactories();        @Multibinds    abstract Map&lt;Class&lt;? extends Fragment&gt;, AndroidInjector.Factory&lt;? extends Fragment&gt;&gt;        fragmentInjectorFactories();        ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着，下面依赖的AbstractAllActivityModule、 AbstractAllFragmentModule、AbstractAllDialogFragmentModule则是为项目的所有Activity、Fragment、DialogFragment提供的统一基类抽象Module，这里看下AbstractAllActivityModule的配置：</p><pre class="line-numbers language-none"><code class="language-none">@Module(subcomponents = {BaseActivityComponent.class})public abstract class AbstractAllActivityModule {    @ContributesAndroidInjector(modules = MainActivityModule.class)    abstract MainActivity contributesMainActivityInjector();    @ContributesAndroidInjector(modules = SplashActivityModule.class)    abstract SplashActivity contributesSplashActivityInjector();        ...    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，项目下的所有xxxActiviity都有对应的contributesxxxActivityInjector()方法提供实例注入。并且，注意到AbstractAllActivityModule这个模块依赖的 subcomponents为BaseActivityComponent，前面说过了，每一个继承于BaseActivity的Activity都继承于BaseActivityComponent这一个subcomponents。同理，AbstractAllFragmentModule与AbstractAllDialogFragmentModule也是类似的实现模式，如下所示：</p><pre class="line-numbers language-none"><code class="language-none">// 1@Module(c = BaseFragmentComponent.class)public abstract class AbstractAllFragmentModule {    @ContributesAndroidInjector(modules = CollectFragmentModule.class)    abstract CollectFragment contributesCollectFragmentInject();    @ContributesAndroidInjector(modules = KnowledgeFragmentModule.class)    abstract KnowledgeHierarchyFragment contributesKnowledgeHierarchyFragmentInject();        ...    }// 2@Module(subcomponents = BaseDialogFragmentComponent.class)public abstract class AbstractAllDialogFragmentModule {    @ContributesAndroidInjector(modules = SearchDialogFragmentModule.class)    abstract SearchDialogFragment contributesSearchDialogFragmentInject();    @ContributesAndroidInjector(modules = UsageDialogFragmentModule.class)    abstract UsageDialogFragment contributesUsageDialogFragmentInject();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到注释1和注释2处的代码，AbstractAllFragmentModule和AbstractAllDialogFragmentModule的subcomponents为BaseFragmentComponent、BaseDialogFragmentComponent，很显然，同AbstractAllActivityModule的子组件BaseActivityComponent一样，它们都是作为一个通用的子组件。</p><p>然后，回到我们配置项目下的Application下面的注释2处的代码，在这里使用了第一步Dagger为我们构建的DaggerAppComponent对象将当期的Application实例注入了进去，交给了Dagger这个依赖大管家去管理。最终，<strong>Dagger2内部创建的mAndroidInjector对象会在注释3处的地方进行实例赋值。在注释4处，实现HasActivityInjector接口，重写activityInjector()方法，将我们上面得到的mAndroidInjector对象返回</strong>。这里的mAndroidInjector是一个类型为DispatchingAndroidInjector的对象，可以这样理解它：它能够执行Android框架下的核心成员如Activity、Fragment的成员注入，在我们项目下的Application中将DispatchingAndroidInjector的泛型指定为Activity就说明它承担起了所有Activity成员依赖的注入。那么，如何指定某一个Activity能被纳入DispatchingAndroidInjector这个所有Activity的依赖总管的口袋中呢？接着看使用步骤4。</p>        <h3 id="最后，将目标Activity纳入Activity依赖分配总管DispatchingAndroidInjector的囊中。">          <a href="#最后，将目标Activity纳入Activity依赖分配总管DispatchingAndroidInjector的囊中。" class="heading-link"><i class="fas fa-link"></i></a><a href="#最后，将目标Activity纳入Activity依赖分配总管DispatchingAndroidInjector的囊中。" class="headerlink" title="最后，将目标Activity纳入Activity依赖分配总管DispatchingAndroidInjector的囊中。"></a>最后，将目标Activity纳入Activity依赖分配总管DispatchingAndroidInjector的囊中。</h3>      <p>很简单，只需在目标Activity的onCreate()方法前的super.onCreate(savedInstanceState)前配置一行代码 AndroidInjection.inject(this)，如下所示：</p><pre class="line-numbers language-none"><code class="language-none">public abstract class BaseActivity&lt;T extends AbstractPresenter&gt; extends AbstractSimpleActivity implements    AbstractView {    ...    @Inject    protected T mPresenter;            @Override    protected void onCreate(@Nullable Bundle savedInstanceState) {        AndroidInjection.inject(this);        super.onCreate(savedInstanceState);    }    ...    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用了@Inject表明了需要注入mPresenter实例，然后，我们需要在具体的Presenter类的构造方法上使用@Inject提供基于当前构造方法的mPresenter实例，如下所示：</p><pre class="line-numbers language-none"><code class="language-none">public class MainPresenter extends BasePresenter&lt;MainContract.View&gt; implements MainContract.Presenter {    ...    @Inject    MainPresenter(DataManager dataManager) {        super(dataManager);        this.mDataManager = dataManager;    }    ...    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的使用流程中，有三个关键的核心实现是我们需要了解的，如下所示：</p><ul><li>1、appComponent = DaggerAppComponent.builder().build()这句代码如何构建出DaggerAPPComponent的？</li><li>2、appComponent.inject(this)是如何将mAndroidInjector实例赋值给当前的Application的？</li><li>3、在目标Activity下的AndroidInjection.inject(this)这句代码是如何将当前Activity对象纳入依赖分配总管DispatchingAndroidInjector囊中的呢？</li></ul><p>下面我们逐个地来探索其中的奥妙~</p>        <h2 id="源码分析-2">          <a href="#源码分析-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#源码分析-2" class="headerlink" title="源码分析"></a>源码分析</h2>              <h3 id="DaggerAppComponent-builder-build-是如何构建出DaggerAPPComponent的？">          <a href="#DaggerAppComponent-builder-build-是如何构建出DaggerAPPComponent的？" class="heading-link"><i class="fas fa-link"></i></a><a href="#DaggerAppComponent-builder-build-是如何构建出DaggerAPPComponent的？" class="headerlink" title="DaggerAppComponent.builder().build()是如何构建出DaggerAPPComponent的？"></a>DaggerAppComponent.builder().build()是如何构建出DaggerAPPComponent的？</h3>      <p>首先，看到DaggerAppComponent的builder()方法：</p><pre class="line-numbers language-none"><code class="language-none">public static Builder builder() {    return new Builder();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>里面直接返回了一个新建的Builder静态内部类对象，看看它的构造方法中做了什么：</p><pre class="line-numbers language-none"><code class="language-none">public static final class Builder {    private Builder() {}        ...    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看来，Builder的默认构造方法什么也没有做，那么，真正的实现肯定在Builder对象的build()方法中，接着看到build()方法。</p><pre class="line-numbers language-none"><code class="language-none">public static final class Builder {    ...     public AppComponent build() {         return new DaggerAppComponent(this);    }    ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Builder的build()方法中直接返回了新建的DaggerAppComponent对象。下面，看看DaggerAppComponent的构造方法:</p><pre class="line-numbers language-none"><code class="language-none">private DaggerAppComponent(Builder builder) {    initialize(builder);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在DaggerAppComponent的构造方法中调用了initialize方法，顾名思义，它就是真正初始化项目全局依赖配置的地方了，下面，来看看它内部的实现：</p><pre class="line-numbers language-none"><code class="language-none">private void initialize(final Builder builder) {    // 1    this.mainActivitySubcomponentBuilderProvider =        new Provider&lt;            AbstractAllActivityModule_ContributesMainActivityInjector.MainActivitySubcomponent                .Builder&gt;() {        @Override        public AbstractAllActivityModule_ContributesMainActivityInjector.MainActivitySubcomponent                .Builder            get() {                // 2                return new MainActivitySubcomponentBuilder();            }        };    // 一系列xxxActivitySubcomponentBuilderProvider的创建赋值代码块    ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在注释1处，新建了一个mainActivit的子组件构造器实例提供者Provider。在注释2处，使用匿名内部类的方式重写了该Provider的get()方法，返回一个新创建好的MainActivitySubcomponentBuilder对象。很显然，它就是负责创建管理MAinActivity中所需依赖的Subcomponent建造者。接下来重点来分析下MainActivitySubcomponentBuilder这个类的作用。</p><pre class="line-numbers language-none"><code class="language-none">// 1private final class MainActivitySubcomponentBuilder  extends AbstractAllActivityModule_ContributesMainActivityInjector.MainActivitySubcomponent      .Builder {    private MainActivity seedInstance;        @Override    public AbstractAllActivityModule_ContributesMainActivityInjector.MainActivitySubcomponent        build() {      if (seedInstance == null) {        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");      }      // 2      return new MainActivitySubcomponentImpl(this);    }        @Override    public void seedInstance(MainActivity arg0) {      // 3      this.seedInstance = Preconditions.checkNotNull(arg0);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，在注释1处，MainActivitySubcomponentBuilder继承了AbstractAllActivityModule_ContributesMainActivityInjector内部的子组件MainActivitySubcomponent的内部的子组件建造者类Builder，如下所示：</p><pre class="line-numbers language-none"><code class="language-none">@Subcomponent(modules = MainActivityModule.class)public interface MainActivitySubcomponent extends AndroidInjector&lt;MainActivity&gt; {    @Subcomponent.Builder    abstract class Builder extends    AndroidInjector.Builder&lt;MainActivity&gt; {}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，这个子组件建造者Builder又继承了AndroidInjector的抽象内部类Builder，那么，这个AndroidInjector到底是什么呢？</p><p>顾名思义，<strong>AndroidInjector</strong>是一个Android注射器，它<strong>为每一个具体的子类型，即核心Android类型Activity和Fragment执行成员注入。</strong></p><p>接下来分析下AndroidInjector的内部实现，源码如下所示：</p><pre class="line-numbers language-none"><code class="language-none">public interface AndroidInjector&lt;T&gt; {    void inject(T instance);        // 1    interface Factory&lt;T&gt; {        AndroidInjector&lt;T&gt; create(T instance);    }        // 2    abstract class Builder&lt;T&gt; implements AndroidInjector.Factory&lt;T&gt; {        @Override        public final AndroidInjector&lt;T&gt; create(T instance) {            seedInstance(instance);            return build();        }            @BindsInstance        public abstract void seedInstance(T instance);            public abstract AndroidInjector&lt;T&gt; build();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在注释1处，使用了抽象工厂模式，用来创建一个具体的Activity或Fragment类型的AndroidInjector实例。注释2处，Builder实现了AndroidInjector.Factory，它是一种Subcomponent.Builder的通用实现模式，在重写的create()方法中，进行了实例保存seedInstance()和具体Android核心类型的构建。</p><p>接着，我们回到MainActivitySubcomponentBuilder类，可以看到，它实现了AndroidInjector.Builder的seedInstance()和build()方法。在注释3处首先播种了MainActivity的实例，然后 在注释2处新建了一个MainActivitySubcomponentImpl对象返回。我们看看MainActivitySubcomponentImpl这个类是如何将mPresenter依赖注入的，相关源码如下：</p><pre class="line-numbers language-none"><code class="language-none">private final class MainActivitySubcomponentImpl    implements AbstractAllActivityModule_ContributesMainActivityInjector    .MainActivitySubcomponent {          private MainPresenter getMainPresenter() {        // 2        return MainPresenter_Factory.newMainPresenter(        DaggerAppComponent.this.provideDataManagerProvider.get());    }    @Override    public void inject(MainActivity arg0) {        // 1        injectMainActivity(arg0);    }    private MainActivity injectMainActivity(MainActivity instance) {        // 3        BaseActivity_MembersInjector        .injectMPresenter(instance, getMainPresenter());        return instance;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在注释1处，MainActivitySubcomponentImpl实现了AndroidInjector接口的inject()方法，<strong>在injectMainActivity()首先调用getMainPresenter()方法从MainPresenter_Factory工厂类中新建了一个MainPresenter对象</strong>。我们看看MainPresenter的newMainPresenter()方法：</p><pre class="line-numbers language-none"><code class="language-none">public static MainPresenter newMainPresenter(DataManager dataManager) {    return new MainPresenter(dataManager);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里直接新建了一个MainPresenter。然后我们回到MainActivitySubcomponentImpl类的注释3处，继续调用了<strong>BaseActivity_MembersInjector的injectMPresenter()方法</strong>，顾名思义，可以猜到，它是BaseActivity的成员注射器，继续看看injectMPresenter()内部：</p><pre class="line-numbers language-none"><code class="language-none">public static &lt;T extends AbstractPresenter&gt; void injectMPresenter(  BaseActivity&lt;T&gt; instance, T mPresenter) {    instance.mPresenter = mPresenter;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，这里直接将需要的mPresenter实例赋值给了BaseActivity的mPresenter，当然，这里其实是指的BaseActivity的子类MainActivity，其它的xxxActivity的依赖管理机制都是如此。</p>        <h3 id="appComponent-inject-this-是如何将mAndroidInjector实例赋值给当前的Application的？">          <a href="#appComponent-inject-this-是如何将mAndroidInjector实例赋值给当前的Application的？" class="heading-link"><i class="fas fa-link"></i></a><a href="#appComponent-inject-this-是如何将mAndroidInjector实例赋值给当前的Application的？" class="headerlink" title="appComponent.inject(this)是如何将mAndroidInjector实例赋值给当前的Application的？"></a>appComponent.inject(this)是如何将mAndroidInjector实例赋值给当前的Application的？</h3>      <p>我们继续查看appComponent的inject()方法：</p><pre class="line-numbers language-none"><code class="language-none">@Overridepublic void inject(WanAndroidApp wanAndroidApp) {  injectWanAndroidApp(wanAndroidApp);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在inject()方法里调用了injectWanAndroidApp()，继续查看injectWanAndroidApp()方法：</p><pre class="line-numbers language-none"><code class="language-none">private WanAndroidApp injectWanAndroidApp(WanAndroidApp instance) {    WanAndroidApp_MembersInjector.injectMAndroidInjector(        instance,        getDispatchingAndroidInjectorOfActivity());    return instance;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，执行getDispatchingAndroidInjectorOfActivity()方法得到了一个Activity类型的DispatchingAndroidInjector对象，继续查看getDispatchingAndroidInjectorOfActivity()方法：</p><pre class="line-numbers language-none"><code class="language-none">private DispatchingAndroidInjector&lt;Activity&gt; getDispatchingAndroidInjectorOfActivity() {    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(    getMapOfClassOfAndProviderOfFactoryOf());}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在getDispatchingAndroidInjectorOfActivity()方法里面，首先调用了getMapOfClassOfAndProviderOfFactoryOf()方法，我们看到这个方法：</p><pre class="line-numbers language-none"><code class="language-none">private Map&lt;Class&lt;? extends Activity&gt;, Provider&lt;AndroidInjector.Factory&lt;? extends Activity&gt;&gt;&gt;  getMapOfClassOfAndProviderOfFactoryOf() {    return MapBuilder        .&lt;Class&lt;? extends Activity&gt;, Provider&lt;AndroidInjector.Factory&lt;? extends Activity&gt;&gt;&gt;        newMapBuilder(8)        .put(MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider)        .put(SplashActivity.class, (Provider) splashActivitySubcomponentBuilderProvider)        .put(ArticleDetailActivity.class,            (Provider) articleDetailActivitySubcomponentBuilderProvider)        .put(KnowledgeHierarchyDetailActivity.class,            (Provider) knowledgeHierarchyDetailActivitySubcomponentBuilderProvider)        .put(LoginActivity.class, (Provider) loginActivitySubcomponentBuilderProvider)        .put(RegisterActivity.class, (Provider) registerActivitySubcomponentBuilderProvider)        .put(AboutUsActivity.class, (Provider) aboutUsActivitySubcomponentBuilderProvider)        .put(SearchListActivity.class, (Provider) searchListActivitySubcomponentBuilderProvider)        .build();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，这里新建了一个建造者模式实现的MapBuilder，并且同时制定了固定容量为8，将项目下使用了AndroidInjection.inject(mActivity)方法的8个Activity对应的xxxActivitySubcomponentBuilderProvider保存起来。</p><p>我们再回到getDispatchingAndroidInjectorOfActivity()方法，这里将上面得到的Map容器传入了DispatchingAndroidInjector_Factory的newDispatchingAndroidInjector()方法中，这里应该就是新建DispatchingAndroidInjector的地方了。我们点进去看看：</p><pre class="line-numbers language-none"><code class="language-none">public static &lt;T&gt; DispatchingAndroidInjector&lt;T&gt; newDispatchingAndroidInjector(  Map&lt;Class&lt;? extends T&gt;, Provider&lt;AndroidInjector.Factory&lt;? extends T&gt;&gt;&gt; injectorFactories) {    return new DispatchingAndroidInjector&lt;T&gt;(injectorFactories);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，果然新建了一个DispatchingAndroidInjector对象。继续看看DispatchingAndroidInjector的构造方法：</p><pre class="line-numbers language-none"><code class="language-none">@InjectDispatchingAndroidInjector(  Map&lt;Class&lt;? extends T&gt;, Provider&lt;AndroidInjector.Factory&lt;? extends T&gt;&gt;&gt; injectorFactories) {    this.injectorFactories = injectorFactories;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里仅仅是将传进来的Map容器保存起来了。</p><p>我们再回到WanAndroidApp_MembersInjector的injectMAndroidInjector()方法，将上面得到的DispatchingAndroidInjector实例传入，继续查看injectMAndroidInjector()这个方法：</p><pre class="line-numbers language-none"><code class="language-none">public static void injectMAndroidInjector(  WanAndroidApp instance, DispatchingAndroidInjector&lt;Activity&gt; mAndroidInjector) {    instance.mAndroidInjector = mAndroidInjector;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，最后在WanAndroidApp_MembersInjector的injectMAndroidInjector()方法中，直接将新建好的DispatchingAndroidInjector实例赋值给了WanAndroidApp的mAndroidInjector。</p>        <h3 id="在目标Activity下的AndroidInjection-inject-this-这句代码是如何将当前Activity对象纳入依赖分配总管DispatchingAndroidInjector囊中的呢？">          <a href="#在目标Activity下的AndroidInjection-inject-this-这句代码是如何将当前Activity对象纳入依赖分配总管DispatchingAndroidInjector囊中的呢？" class="heading-link"><i class="fas fa-link"></i></a><a href="#在目标Activity下的AndroidInjection-inject-this-这句代码是如何将当前Activity对象纳入依赖分配总管DispatchingAndroidInjector囊中的呢？" class="headerlink" title="在目标Activity下的AndroidInjection.inject(this)这句代码是如何将当前Activity对象纳入依赖分配总管DispatchingAndroidInjector囊中的呢？"></a>在目标Activity下的AndroidInjection.inject(this)这句代码是如何将当前Activity对象纳入依赖分配总管DispatchingAndroidInjector囊中的呢？</h3>      <p>首先，我们看到AndroidInjection.inject(this)这个方法：</p><pre class="line-numbers language-none"><code class="language-none">public static void inject(Activity activity) {    checkNotNull(activity, "activity");        // 1    Application application = activity.getApplication();    if (!(application instanceof HasActivityInjector)) {    throw new RuntimeException(        String.format(            "%s does not implement %s",            application.getClass().getCanonicalName(),             HasActivityInjector.class.getCanonicalName()));    }    // 2    AndroidInjector&lt;Activity&gt; activityInjector =        ((HasActivityInjector) application).activityInjector();            checkNotNull(activityInjector, "%s.activityInjector() returned null", application.getClass());    // 3    activityInjector.inject(activity);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>}</p><p>在注释1处，会先判断当前的application是否实现了HasActivityInjector这个接口，如果没有，则抛出RuntimeException。如果有，会继续在注释2处调用application的activityInjector()方法得到DispatchingAndroidInjector实例。最后，在注释3处，会将当前的activity实例传入activityInjector的inject()方法中。我们继续查看inject()方法：</p><pre class="line-numbers language-none"><code class="language-none">@Overridepublic void inject(T instance) {    boolean wasInjected = maybeInject(instance);    if (!wasInjected) {        throw new IllegalArgumentException(errorMessageSuggestions(instance));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>DispatchingAndroidInjector的inject()方法，它的作用就是给传入的instance实例执行成员注入</strong>。具体在这个案例中，其实就是负责将创建好的Presenter实例赋值给BaseActivity对象 的mPresenter全局变量。在inject()方法中，又调用了maybeInject()方法，我们继续查看它：</p><pre class="line-numbers language-none"><code class="language-none">@CanIgnoreReturnValuepublic boolean maybeInject(T instance) {    // 1    Provider&lt;AndroidInjector.Factory&lt;? extends T&gt;&gt; factoryProvider =    injectorFactories.get(instance.getClass());    if (factoryProvider == null) {    return false;    }    @SuppressWarnings("unchecked")    // 2    AndroidInjector.Factory&lt;T&gt; factory = (AndroidInjector.Factory&lt;T&gt;) factoryProvider.get();    try {        // 3        AndroidInjector&lt;T&gt; injector =            checkNotNull(                factory.create(instance), "%s.create(I) should not return null.", factory.getClass());        // 4        injector.inject(instance);        return true;    } catch (ClassCastException e) {        ...    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在注释1处，我们从injectorFactories（前面得到的Map容器）中根据当前Activity实例拿到了factoryProvider对象，这里我们具体一点，看到MainActivity对应的factoryProvider，也就是我们研究的第一个问题中的mainActivitySubcomponentBuilderProvider：</p><pre class="line-numbers language-none"><code class="language-none">private void initialize(final Builder builder) {    this.mainActivitySubcomponentBuilderProvider =        new Provider&lt;            AbstractAllActivityModule_ContributesMainActivityInjector.MainActivitySubcomponent            .Builder&gt;() {        @Override        public AbstractAllActivityModule_ContributesMainActivityInjector.MainActivitySubcomponent                .Builder            get() {                return new MainActivitySubcomponentBuilder();            }        };    ...    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在maybeInject()方法的注释2处，调用了mainActivitySubcomponentBuilderProvider的get()方法得到了一个新建的MainActivitySubcomponentBuilder对象。在注释3处执行了它的create方法，create()方法的具体实现在AndroidInjector的内部类Builder中：</p><pre class="line-numbers language-none"><code class="language-none">abstract class Builder&lt;T&gt; implements AndroidInjector.Factory&lt;T&gt; {    @Override    public final AndroidInjector&lt;T&gt; create(T instance) {        seedInstance(instance);        return build();    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到这里，我相信看过第一个问题的同学已经明白后面是怎么回事了。在create()方法中，我们首先MainActivitySubcomponentBuilder的seedInstance()将MainActivity实例注入，然后再调用它的build()方法新建了一个MainActivitySubcomponentImpl实例返回。</p><p>最后，在注释4处，执行了MainActivitySubcomponentImpl的inject()方法：</p><pre class="line-numbers language-none"><code class="language-none">private final class MainActivitySubcomponentImpl    implements AbstractAllActivityModule_ContributesMainActivityInjector    .MainActivitySubcomponent {          private MainPresenter getMainPresenter() {        // 2        return MainPresenter_Factory.newMainPresenter(        DaggerAppComponent.this.provideDataManagerProvider.get());    }    @Override    public void inject(MainActivity arg0) {        // 1        injectMainActivity(arg0);    }    private MainActivity injectMainActivity(MainActivity instance) {        // 3        BaseActivity_MembersInjector        .injectMPresenter(instance, getMainPresenter());        return instance;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的逻辑已经在问题一的最后部分详细讲解了，最后，会在注释3处调用BaseActivity_MembersInjector的injectMPresenter()方法：</p><pre class="line-numbers language-none"><code class="language-none">public static &lt;T extends AbstractPresenter&gt; void injectMPresenter(  BaseActivity&lt;T&gt; instance, T mPresenter) {    instance.mPresenter = mPresenter;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样，就将mPresenter对象赋值给了当前Activity对象的mPresenter全局变量中了。至此，Dagger.Android的核心源码分析就结束了。</p><blockquote><p>相比于ButterKnife，Dagger是一个<strong>锋利的全局依赖注入管理框架</strong>，它主要用来<strong>管理对象的依赖关系和生命周期</strong>，当项目越来越大时，类之间的调用层次会越来越深，并且有些类是Activity或Fragment，有些是单例，而且它们的生命周期不一致，所以创建所需对象时需要处理的各个对象的依赖关系和生命周期时的任务会很繁重。因此，使用Dagger会大大减轻这方面的工作量。虽然它的学习成本比较高，而且需要写一定的模板类，但是，<strong>对于越大的项目来说，Dagger越值得被需要</strong>。</p></blockquote>        <h1 id="EventBus">          <a href="#EventBus" class="heading-link"><i class="fas fa-link"></i></a><a href="#EventBus" class="headerlink" title="EventBus"></a>EventBus</h1>              <h2 id="简单示例-3">          <a href="#简单示例-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#简单示例-3" class="headerlink" title="简单示例"></a>简单示例</h2>              <h3 id="首先，定义要传递的事件实体">          <a href="#首先，定义要传递的事件实体" class="heading-link"><i class="fas fa-link"></i></a><a href="#首先，定义要传递的事件实体" class="headerlink" title="首先，定义要传递的事件实体"></a>首先，定义要传递的事件实体</h3>      <pre class="line-numbers language-none"><code class="language-none">public class CollectEvent { ... }<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h3 id="准备订阅者：声明并注解你的订阅方法">          <a href="#准备订阅者：声明并注解你的订阅方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#准备订阅者：声明并注解你的订阅方法" class="headerlink" title="准备订阅者：声明并注解你的订阅方法"></a>准备订阅者：声明并注解你的订阅方法</h3>      <pre class="line-numbers language-none"><code class="language-none">@Subscribe(threadMode = ThreadMode.MAIN)public void onMessageEvent(CollectEvent event) {    LogHelper.d("OK");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="在2中，也就是订阅中所在的类中，注册和解注册你的订阅者">          <a href="#在2中，也就是订阅中所在的类中，注册和解注册你的订阅者" class="heading-link"><i class="fas fa-link"></i></a><a href="#在2中，也就是订阅中所在的类中，注册和解注册你的订阅者" class="headerlink" title="在2中，也就是订阅中所在的类中，注册和解注册你的订阅者"></a>在2中，也就是订阅中所在的类中，注册和解注册你的订阅者</h3>      <pre class="line-numbers language-none"><code class="language-none">@Overridepublic void onStart() {    super.onStart();    EventBus.getDefault().register(this);}@Overridepublic void onStop() {    super.onStop();    EventBus.getDefault().unregister(this);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="发送事件">          <a href="#发送事件" class="heading-link"><i class="fas fa-link"></i></a><a href="#发送事件" class="headerlink" title="发送事件"></a>发送事件</h3>      <pre class="line-numbers language-none"><code class="language-none">EventBus.getDefault().post(new CollectEvent());<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在正式讲解之前需要对一些基础性的概念进行详细的讲解。众所周知，EventBus没出现之前，那时候的开发者一般是使用Android四大组件中的广播进行组件间的消息传递，那么我们<strong>为什么要使用事件总线机制来替代广播呢</strong>？</p><p>主要是因为：</p><ul><li>广播：耗时、容易被捕获（不安全）。</li><li>事件总线：更节省资源、更高效，能将信息传递给原生以外的各种对象。</li></ul><p>那么，话又说回来了，<strong>事件总线又是什么呢？</strong></p><p>如下图所示，事件总线机制通过记录对象、使用观察者模式来通知对象各种事件。（当然，你也可以发送基本数据类型如 int，String 等作为一个事件）</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/6/170ada0907b50b75?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" style="" alt="image"></p><p>对于<strong>事件总线EventBus</strong>而言，它的<strong>优缺点</strong>又是如何？这里简单总结下：</p><ul><li>优点：开销小，代码更优雅、简洁，解耦发送者和接收者，可动态设置事件处理线程和优先级。</li><li>缺点：每个事件必须自定义一个事件类，增加了维护成本。</li></ul><p>EventBus是基于观察者模式扩展而来的，我们先了解一下观察者模式是什么？</p><p>观察者模式又可称为<strong>发布 - 订阅模式</strong>，它定义了对象间的一种1对多的依赖关系，每当这个对象的状态改变时，其它的对象都会接收到通知并被自动更新。</p><p>观察者模式有以下角色：</p><ul><li>抽象被观察者：将所有已注册的观察者对象保存在一个集合中。</li><li>具体被观察者：当内部状态发生变化时，将会通知所有已注册的观察者。</li><li>抽象观察者：定义了一个更新接口，当被观察者状态改变时更新自己。</li><li>具体观察者：实现抽象观察者的更新接口。</li></ul><p>这里给出一个简单的示例来让大家更深一步理解观察者模式的思想：</p><p>1、首先，创建抽象观察者</p><pre class="line-numbers language-none"><code class="language-none">public interface observer {        public void update(String message);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、接着，创建具体观察者</p><pre class="line-numbers language-none"><code class="language-none">public class WeXinUser implements observer {    private String name;        public WeXinUser(String name) {        this.name = name;    }        @Override    public void update(String message) {        ...    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、然后，创建抽象被观察者</p><pre class="line-numbers language-none"><code class="language-none">public interface observable {        public void addWeXinUser(WeXinUser weXinUser);        public void removeWeXinUser(WeXinUser weXinUser);        public void notify(String message);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、最后，创建具体被观察者</p><pre class="line-numbers language-none"><code class="language-none">public class Subscription implements observable {    private List&lt;WeXinUser&gt; mUserList = new ArrayList();        @Override    public void addWeXinUser(WeXinUser weXinUser) {        mUserList.add(weXinUser);    }        @Override    public void removeWeXinUser(WeXinUser weXinUser) {        mUserList.remove(weXinUser);    }        @Override    public void notify(String message) {        for(WeXinUser weXinUser : mUserList) {            weXinUser.update(message);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在具体使用时，我们便可以这样使用，如下所示：</p><pre class="line-numbers language-none"><code class="language-none">Subscription subscription = new Subscription();WeXinUser hongYang = new WeXinUser("HongYang");WeXinUser rengYuGang = new WeXinUser("RengYuGang");WeXinUser liuWangShu = new WeXinUser("LiuWangShu");subscription.addWeiXinUser(hongYang);subscription.addWeiXinUser(rengYuGang);subscription.addWeiXinUser(liuWangShu);subscription.notify("New article coming");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，hongYang、rengYuGang、liuWangShu等大神都订阅了我的微信公众号，每当我的公众号发表文章时（subscription.notify())，他们就会接收到最新的文章信息（weXinUser.update()）。（ps：当然，这一切都是YY~）</p><p>当然，EventBus的观察者模式和一般的观察者模式不同，它使用了<strong>扩展的观察者模式对事件进行订阅和分发，其实这里的扩展就是指的使用了EventBus来作为中介者，抽离了许多职责</strong>，如下是它的官方原理图：</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/6/170ada0907c082ed?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" style="" alt="image"></p><p>在得知了EventBus的原理之后，我们注意到，每次我们在register之后，都必须进行一次unregister，这是为什么呢？</p><p><strong>因为register是强引用，它会让对象无法得到内存回收，导致内存泄露。所以必须在unregister方法中释放对象所占的内存</strong>。</p><p>有些同学可能之前使用的是EventBus2.x的版本，那么它又与EventBus3.x的版本有哪些区别呢？</p><ol><li><p>EventBus2.x使用的是<strong>运行时注解，它采用了反射的方式对整个注册的类的所有方法进行扫描来完成注册，因而会对性能有一定影响</strong>。</p></li><li><p>EventBus3.x使用的是<strong>编译时注解，Java文件会编译成.class文件，再对class文件进行打包等一系列处理。在编译成.class文件时，EventBus会使用EventBusAnnotationProcessor注解处理器读取@Subscribe()注解并解析、处理其中的信息，然后生成Java类来保存所有订阅者的订阅信息。这样就创建出了对文件或类的索引关系，并将其编入到apk中</strong>。</p></li><li><p>从EventBus3.0开始<strong>使用了对象池缓存减少了创建对象的开销</strong>。</p></li></ol><p>除了EventBus，其实现在比较流行的事件总线还有RxBus，那么，它与EventBus相比又如何呢？</p><ol><li><p><strong>RxJava的Observable有onError、onComplete等状态回调</strong>。</p></li><li><p><strong>Rxjava使用组合而非嵌套的方式，避免了回调地狱</strong>。</p></li><li><p><strong>Rxjava的线程调度设计的更加优秀，更简单易用</strong>。</p></li><li><p><strong>Rxjava可使用多种操作符来进行链式调用来实现复杂的逻辑</strong>。</p></li><li><p><strong>Rxjava的信息效率高于EventBus2.x，低于EventBus3.x</strong>。</p></li></ol><p>在了解了EventBus和RxBus的区别之后，那么，对待新项目的事件总线选型时，我们该如何考量？</p><p>很简单，<strong>如果项目中使用了RxJava，则使用RxBus，否则使用EventBus3.x</strong>。</p>        <h2 id="源码分析-3">          <a href="#源码分析-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#源码分析-3" class="headerlink" title="源码分析"></a>源码分析</h2>      <p>接下来将按以下顺序来进行EventBus的源码分析：</p><ol><li><p>订阅者：EventBus.getDefault().register(this)；</p></li><li><p>发布者：EventBus.getDefault().post(new CollectEvent())；</p></li><li><p>订阅者：EventBus.getDefault().unregister(this)。</p></li></ol>        <h3 id="EventBus-getDefault-register-this">          <a href="#EventBus-getDefault-register-this" class="heading-link"><i class="fas fa-link"></i></a><a href="#EventBus-getDefault-register-this" class="headerlink" title="EventBus.getDefault().register(this)"></a>EventBus.getDefault().register(this)</h3>      <p>首先，从获取EventBus实例的方法getDefault()开始分析：</p><pre class="line-numbers language-none"><code class="language-none">public static EventBus getDefault() {    if (defaultInstance == null) {        synchronized (EventBus.class) {            if (defaultInstance == null) {                defaultInstance = new EventBus();            }        }    }    return defaultInstance;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在getDefault()中使用了双重校验并加锁的单例模式来创建EventBus实例。</p><p>接着，看到EventBus的默认构造方法中做了什么:</p><pre class="line-numbers language-none"><code class="language-none">private static final EventBusBuilder DEFAULT_BUILDER = new EventBusBuilder();public EventBus() {    this(DEFAULT_BUILDER);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在EventBus的默认构造方法中又调用了它的另一个有参构造方法，将一个类型为EventBusBuilder的DEFAULT_BUILDER对象传递进去了。这里的EventBusBuilder很明显是一个EventBus的建造器，以便于EventBus能够添加自定义的参数和安装一个自定义的默认EventBus实例。</p><p>再看一下EventBusBuilder的构造方法：</p><pre class="line-numbers language-none"><code class="language-none">public class EventBusBuilder {    ...    EventBusBuilder() {    }        ...    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>EventBusBuilder的构造方法中什么也没有做，那继续查看EventBus的这个有参构造方法：</p><pre class="line-numbers language-none"><code class="language-none">private final Map&lt;Class&lt;?&gt;, CopyOnWriteArrayList&lt;Subscription&gt;&gt; subscriptionsByEventType;private final Map&lt;Object, List&lt;Class&lt;?&gt;&gt;&gt; typesBySubscriber;private final Map&lt;Class&lt;?&gt;, Object&gt; stickyEvents;EventBus(EventBusBuilder builder) {    ...        // 1    subscriptionsByEventType = new HashMap&lt;&gt;();        // 2    typesBySubscriber = new HashMap&lt;&gt;();        // 3    stickyEvents = new ConcurrentHashMap&lt;&gt;();        // 4    mainThreadSupport = builder.getMainThreadSupport();    mainThreadPoster = mainThreadSupport != null ? mainThreadSupport.createPoster(this) : null;    backgroundPoster = new BackgroundPoster(this);    asyncPoster = new AsyncPoster(this);        ...        // 5    subscriberMethodFinder = new SubscriberMethodFinder(builder.subscriberInfoIndexes,            builder.strictMethodVerification, builder.ignoreGeneratedIndex);       // 从builder取中一些列订阅相关信息进行赋值    ...       // 6    executorService = builder.executorService;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在注释1处，创建了一个subscriptionsByEventType对象，可以看到它是一个类型为HashMap的subscriptionsByEventType对象，并且其key为 Event 类型，value为 Subscription链表。这里的Subscription是一个订阅信息对象，它里面保存了两个重要的字段，一个是类型为 Object 的 subscriber，该字段即为注册的对象（在 Android 中时通常是 Activity对象）；另一个是 类型为SubscriberMethod 的 subscriberMethod，它就是被@Subscribe注解的那个订阅方法，里面保存了一个重要的字段eventType，它是 Class&lt;?&gt; 类型的，代表了 Event 的类型。在注释2处，新建了一个类型为 Map 的typesBySubscriber对象，它的key为subscriber对象，value为subscriber对象中所有的 Event 类型链表，日常使用中仅用于判断某个对象是否注册过。在注释3处新建了一个类型为ConcurrentHashMap的stickyEvents对象，它是专用于粘性事件处理的一个字段，key为事件的Class对象，value为当前的事件。可能有的同学不了解sticky event，这里解释下：</p><ul><li>我们都知道<strong>普通事件是先注册，然后发送事件才能收到；而粘性事件，在发送事件之后再订阅该事件也能收到。并且，粘性事件会保存在内存中，每次进入都会去内存中查找获取最新的粘性事件，除非你手动解除注册</strong>。</li></ul><p>在注释4处，新建了三个不同类型的事件发送器，这里总结下：</p><ul><li>mainThreadPoster：主线程事件发送器，通过它的mainThreadPoster.enqueue(subscription, event)方法可以将订阅信息和对应的事件进行入队，然后通过 handler 去发送一个消息，在 handler 的 handleMessage 中去执行方法。</li><li>backgroundPoster：后台事件发送器，通过它的enqueue() 将方法加入到后台的一个队列，最后通过线程池去执行，注意，它在 Executor的execute()方法 上添加了 synchronized关键字 并设立 了控制标记flag，保证任一时间只且仅能有一个任务会被线程池执行。</li><li>asyncPoster：实现逻辑类似于backgroundPoster，不同于backgroundPoster的保证任一时间只且仅能有一个任务会被线程池执行的特性，asyncPoster则是异步运行的，可以同时接收多个任务。</li></ul><p>我们再回到注释5这行代码，这里新建了一个subscriberMethodFinder对象，这是从EventBus中抽离出的订阅方法查询的一个对象，在优秀的源码中，我们经常能看到<strong>组合优于继承</strong>的这种实现思想。在注释6处，从builder中取出了一个默认的线程池对象，它由**Executors的newCachedThreadPool()**方法创建，它是一个**有则用、无则创建、无数量上限**的线程池。</p><p>分析完这些核心的字段之后，后面的讲解就比较轻松了，接着查看EventBus的regist()方法：</p><pre class="line-numbers language-none"><code class="language-none">public void register(Object subscriber) {    Class&lt;?&gt; subscriberClass = subscriber.getClass();        // 1    List&lt;SubscriberMethod&gt; subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);    synchronized (this) {        for (SubscriberMethod subscriberMethod : subscriberMethods) {            // 2            subscribe(subscriber, subscriberMethod);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在注释1处，根据当前注册类获取 subscriberMethods这个订阅方法列表 。在注释2处，使用了增强for循环令subsciber对象 对 subscriberMethods 中每个 SubscriberMethod 进行订阅。</p><p>接着查看SubscriberMethodFinder的findSubscriberMethods()方法：</p><pre class="line-numbers language-none"><code class="language-none">List&lt;SubscriberMethod&gt; findSubscriberMethods(Class&lt;?&gt; subscriberClass) {    // 1    List&lt;SubscriberMethod&gt; subscriberMethods = METHOD_CACHE.get(subscriberClass);    if (subscriberMethods != null) {        return subscriberMethods;    }    // 2    if (ignoreGeneratedIndex) {        subscriberMethods = findUsingReflection(subscriberClass);    } else {        subscriberMethods = findUsingInfo(subscriberClass);    }    if (subscriberMethods.isEmpty()) {        throw new EventBusException("Subscriber " + subscriberClass                + " and its super classes have no public methods with the @Subscribe annotation");    } else {        METHOD_CACHE.put(subscriberClass, subscriberMethods);        return subscriberMethods;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在注释1处，如果缓存中有subscriberClass对象对应 的订阅方法列表，则直接返回。注释2处，先详细说说这个<strong>ignoreGeneratedIndex</strong>字段， 它用来<strong>判断是否使用生成的 APT 代码去优化寻找接收事件的过程，如果开启了的话，那么将会通过 subscriberInfoIndexes 来快速得到接收事件方法的相关信息</strong>。如果我们没有在项目中接入 EventBus 的 APT，那么可以将 ignoreGeneratedIndex 字段设为 false 以提高性能。这里ignoreGeneratedIndex 默认为false，所以会执行findUsingInfo()方法，后面生成 subscriberMethods 成功的话会加入到缓存中，失败的话会 抛出异常。</p><p>接着查看SubscriberMethodFinder的findUsingInfo()方法：</p><pre class="line-numbers language-none"><code class="language-none">private List&lt;SubscriberMethod&gt; findUsingInfo(Class&lt;?&gt; subscriberClass) {    // 1    FindState findState = prepareFindState();    findState.initForSubscriber(subscriberClass);    // 2    while (findState.clazz != null) {        findState.subscriberInfo = getSubscriberInfo(findState);        if (findState.subscriberInfo != null) {            SubscriberMethod[] array = findState.subscriberInfo.getSubscriberMethods();            for (SubscriberMethod subscriberMethod: array) {                if (findState.checkAdd(subscriberMethod.method, subscriberMethod.eventType)) {                    findState.subscriberMethods.add(subscriberMethod);                }            }        } else {             // 3             findUsingReflectionInSingleClass(findState);        }        findState.moveToSuperclass();    }    // 4    return getMethodsAndRelease(findState);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在注释1处，调用了SubscriberMethodFinder的prepareFindState()方法创建了一个新的 FindState 类，来看看这个方法：</p><pre class="line-numbers language-none"><code class="language-none">private static final FindState[] FIND_STATE_POOL = new FindState[POOL_SIZE];private FindState prepareFindState() {    // 1    synchronized(FIND_STATE_POOL) {        for (int i = 0; i &lt; POOL_SIZE; i++) {            FindState state = FIND_STATE_POOL[i];            if (state != null) {                FIND_STATE_POOL[i] = null;                return state;            }        }    }    // 2    return new FindState();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在注释1处，会先从 FIND_STATE_POOL 即 FindState 池中取出可用的 FindState（这里的POOL_SIZE为4），如果没有的话，则通过注释2处的代码直接新建 一个新的 FindState 对象。</p><p>接着来分析下FindState这个类：</p><pre class="line-numbers language-none"><code class="language-none">static class FindState {    ....    void initForSubscriber(Class&lt;?&gt; subscriberClass) {        this.subscriberClass = clazz = subscriberClass;        skipSuperClasses = false;        subscriberInfo = null;    }    ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它是 SubscriberMethodFinder 的内部类，这个方法主要做一个初始化、回收对象等工作。</p><p>接着回到SubscriberMethodFinder的注释2处的SubscriberMethodFinder()方法：</p><pre class="line-numbers language-none"><code class="language-none">private SubscriberInfo getSubscriberInfo(FindState findState) {    if (findState.subscriberInfo != null &amp;&amp; findState.subscriberInfo.getSuperSubscriberInfo() != null) {        SubscriberInfo superclassInfo = findState.subscriberInfo.getSuperSubscriberInfo();        if (findState.clazz == superclassInfo.getSubscriberClass()) {            return superclassInfo;        }    }    if (subscriberInfoIndexes != null) {        for (SubscriberInfoIndex index: subscriberInfoIndexes) {            SubscriberInfo info = index.getSubscriberInfo(findState.clazz);            if (info != null) {                return info;            }        }    }    return null;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在前面初始化的时候，findState的subscriberInfo和subscriberInfoIndexes 这两个字段为空，所以这里直接返回 null。</p><p>接着查看注释3处的findUsingReflectionInSingleClass()方法：</p><pre class="line-numbers language-none"><code class="language-none">private void findUsingReflectionInSingleClass(FindState findState) {    Method[] methods;    try {        // This is faster than getMethods, especially when subscribers are fat classes like Activities        methods = findState.clazz.getDeclaredMethods();    } catch (Throwable th) {        methods = findState.clazz.getMethods();        findState.skipSuperClasses = true;    }    for (Method method: methods) {        int modifiers = method.getModifiers();        if ((modifiers &amp; Modifier.PUBLIC) != 0 &amp;&amp; (modifiers &amp; MODIFIERS_IGNORE) == 0) {            Class&lt;?&gt; [] parameterTypes = method.getParameterTypes();            if (parameterTypes.length == 1) {                Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class);                if (subscribeAnnotation != null) {                    // 重点                    Class&lt;?&gt; eventType = parameterTypes[0];                    if (findState.checkAdd(method, eventType)) {                        ThreadMode threadMode = subscribeAnnotation.threadMode();                        findState.subscriberMethods.add(new SubscriberMethod(method, eventType, threadMode, subscribeAnnotation.priority(),  subscribeAnnotation.sticky()));                    }                }            } else if (strictMethodVerification &amp;&amp;     method.isAnnotationPresent(Subscribe.class)) {            String methodName = method.getDeclaringClass().getName() + "." + method.getName();            throw new EventBusException("@Subscribe method " + methodName + "must have exactly 1 parameter but has " + parameterTypes.length);            }        } else if (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) {            String methodName = method.getDeclaringClass().getName() + "." + method.getName();            throw new EventBusException(methodName + " is a illegal @Subscribe method: must be public, non-static, and non-abstract");        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法很长，大概做的事情是：</p><ol><li><p><strong>通过反射的方式获取订阅者类中的所有声明方法，然后在这些方法里面寻找以 @Subscribe作为注解的方法进行处理</strong>。</p></li><li><p><strong>在经过经过一轮检查，看看 findState.subscriberMethods是否存在，如果没有，将方法名，threadMode，优先级，是否为 sticky 方法等信息封装到 SubscriberMethod 对象中，最后添加到 subscriberMethods 列表中</strong>。</p></li></ol><p>最后，继续查看注释4处的getMethodsAndRelease()方法：</p><pre class="line-numbers language-none"><code class="language-none">private List&lt;SubscriberMethod&gt; getMethodsAndRelease(FindState findState) {    // 1    List&lt;SubscriberMethod&gt; subscriberMethods = new ArrayList&lt;&gt;(findState.subscriberMethods);    // 2    findState.recycle();    // 3    synchronized(FIND_STATE_POOL) {        for (int i = 0; i &lt; POOL_SIZE; i++) {            if (FIND_STATE_POOL[i] == null) {                FIND_STATE_POOL[i] = findState;                break;            }        }    }    // 4    return subscriberMethods;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，首先在注释1处，从findState中取出了保存的subscriberMethods。在注释2处，将findState里的保存的所有对象进行回收。在注释3处，把findState存储在 FindState 池中方便下一次使用，以提高性能。最后，在注释4处，返回subscriberMethods。接着，<strong>在EventBus的 register() 方法的最后会调用 subscribe 方法</strong>：</p><pre class="line-numbers language-none"><code class="language-none">public void register(Object subscriber) {    Class&lt;?&gt; subscriberClass = subscriber.getClass();    List&lt;SubscriberMethod&gt; subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);    synchronized (this) {        for (SubscriberMethod subscriberMethod : subscriberMethods) {            subscribe(subscriber, subscriberMethod);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续看看这个subscribe()方法做的事情：</p><pre class="line-numbers language-none"><code class="language-none">private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {    Class&lt;?&gt; eventType = subscriberMethod.eventType;    Subscription newSubscription = new Subscription(subscriber, subscriberMethod);        // 1    CopyOnWriteArrayList&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType);    if (subscriptions == null) {        subscriptions = new CopyOnWriteArrayList &lt;&gt; ();        subscriptionsByEventType.put(eventType, subscriptions);    } else {        if (subscriptions.contains(newSubscription)) {            throw new EventBusException("Subscriber " + subscriber.getClass() + " already registered to event " + eventType);        }    }    int size = subscriptions.size();        // 2    for (int i = 0; i &lt;= size; i++) {        if (i == size || subscriberMethod.priority &gt; subscriptions.get(i).subscriberMethod.priority) {            subscriptions.add(i, newSubscription);            break;        }    }        // 3    List&lt;Class&lt;?&gt;&gt; subscribedEvents = typesBySubscriber.get(subscriber);    if (subscribedEvents == null) {        subscribedEvents = new ArrayList&lt;&gt;();        typesBySubscriber.put(subscriber, subscribedEvents);    }    subscribedEvents.add(eventType);    // 4    if (subscriberMethod.sticky) {        if (eventInheritance) {            Set&lt;Map.Entry&lt;Class&lt;?&gt;, Object&gt;&gt; entries = stickyEvents.entrySet();            for (Map.Entry&lt;Class&lt;?&gt;, Object&gt; entry : entries) {                Class&lt;?&gt; candidateEventType = entry.getKey();                if(eventType.isAssignableFrom(candidateEventType)) {                Object stickyEvent = entry.getValue();                    checkPostStickyEventToSubscription(newSubscription, stickyEvent);                }            }        } else {            Object stickyEvent = stickyEvents.get(eventType);            checkPostStickyEventToSubscription(newSubscription, stickyEvent);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，在注释1处，会根据 subscriberMethod的eventType，在 subscriptionsByEventType 去查找一个 CopyOnWriteArrayList ，如果没有则创建一个新的 CopyOnWriteArrayList，然后将这个 CopyOnWriteArrayList 放入 subscriptionsByEventType 中。在注释2处，<strong>添加 newSubscription对象，它是一个 Subscription 类，里面包含着 subscriber 和 subscriberMethod 等信息，并且这里有一个优先级的判断，说明它是按照优先级添加的。优先级越高，会插到在当前 List 靠前面的位置</strong>。在注释3处，对typesBySubscriber 进行添加，这主要是在EventBus的isRegister()方法中去使用的，目的是用来判断这个 Subscriber对象 是否已被注册过。最后，在注释4处，会判断是否是 sticky事件。如果是sticky事件的话，会调用 checkPostStickyEventToSubscription() 方法。</p><p>接着查看这个checkPostStickyEventToSubscription()方法：</p><pre class="line-numbers language-none"><code class="language-none">private void checkPostStickyEventToSubscription(Subscription newSubscription, Object stickyEvent) {    if (stickyEvent != null) {        postToSubscription(newSubscription, stickyEvent, isMainThread());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到最终是<strong>调用了postToSubscription()这个方法来进行粘性事件的发送</strong>，对于粘性事件的处理，最后再分析，接下来看看事件是如何post的。</p>        <h3 id="EventBus-getDefault-post-new-CollectEvent">          <a href="#EventBus-getDefault-post-new-CollectEvent" class="heading-link"><i class="fas fa-link"></i></a><a href="#EventBus-getDefault-post-new-CollectEvent" class="headerlink" title="EventBus.getDefault().post(new CollectEvent())"></a>EventBus.getDefault().post(new CollectEvent())</h3>      <pre class="line-numbers language-none"><code class="language-none">public void post(Object event) {    // 1    PostingThreadState postingState = currentPostingThreadState.get();    List &lt;Object&gt; eventQueue = postingState.eventQueue;    eventQueue.add(event);    // 2    if (!postingState.isPosting) {        postingState.isMainThread = isMainThread();        postingState.isPosting = true;        if (postingState.canceled) {            throw new EventBusException("Internal error. Abort state was not reset");        }        try {            while (!eventQueue.isEmpty()) {                postSingleEvent(eventQueue.remove(0), postingState);            }        } finally {            postingState.isPosting = false;            postingState.isMainThread = false;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注释1处，这里的currentPostingThreadState 是一个 ThreadLocal 类型的对象，里面存储了 PostingThreadState，而 PostingThreadState 中包含了一个 eventQueue 和其他一些标志位，相关的源码如下：</p><pre class="line-numbers language-none"><code class="language-none">private final ThreadLocal &lt;PostingThreadState&gt; currentPostingThreadState = new ThreadLocal &lt;PostingThreadState&gt; () {@Overrideprotected PostingThreadState initialValue() {    return new PostingThreadState();}};final static class PostingThreadState {    final List &lt;Object&gt; eventQueue = new ArrayList&lt;&gt;();    boolean isPosting;    boolean isMainThread;    Subscription subscription;    Object event;    boolean canceled;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着把传入的 event，保存到了当前线程中的一个变量 PostingThreadState 的 eventQueue 中。在注释2处，最后调用了 postSingleEvent() 方法，我们继续查看这个方法：</p><pre class="line-numbers language-none"><code class="language-none">private void postSingleEvent(Object event, PostingThreadState postingState) throws Error {    Class&lt;?&gt; eventClass = event.getClass();    boolean subscriptionFound = false;    // 1    if (eventInheritance) {        // 2        List&lt;Class&lt;?&gt;&gt; eventTypes = lookupAllEventTypes(eventClass);        int countTypes = eventTypes.size();        for (int h = 0; h &lt; countTypes; h++) {            Class&lt;?&gt; clazz = eventTypes.get(h);            subscriptionFound |=            // 3            postSingleEventForEventType(event, postingState, clazz);        }    } else {        subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);    }    if (!subscriptionFound) {        ...    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，在注释1处，首先取出 Event 的 class 类型，接着<strong>会对 eventInheritance 标志位 判断，它默认为true，如果设为 true 的话，它会在发射事件的时候判断是否需要发射父类事件，设为 false，能够提高一些性能</strong>。接着，在注释2处，会调用lookupAllEventTypes() 方法，它的作用就是取出 Event 及其父类和接口的 class 列表，当然重复取的话会影响性能，所以它也做了一个 eventTypesCache 的缓存，这样就不用重复调用 getSuperclass() 方法。最后，在注释3处会调用postSingleEventForEventType()方法，看下这个方法：</p><pre class="line-numbers language-none"><code class="language-none">private boolean postSingleEventForEventType(Object event, PostingThreadState postingState, Class &lt;?&gt; eventClass) {    CopyOnWriteArrayList &lt;Subscription&gt; subscriptions;    synchronized(this) {        subscriptions = subscriptionsByEventType.get(eventClass);    }    if (subscriptions != null &amp;&amp; !subscriptions.isEmpty()) {        for (Subscription subscription: subscriptions) {            postingState.event = event;            postingState.subscription = subscription;            boolean aborted = false;            try {                postToSubscription(subscription, event, postingState.isMainThread);                aborted = postingState.canceled;            } finally {                postingState.event = null;                postingState.subscription = null;                postingState.canceled = false;            }            if (aborted) {                break;            }        }        return true;    }    return false;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，这里直接根据 Event 类型从 subscriptionsByEventType 中取出对应的 subscriptions对象，最后调用了 postToSubscription() 方法。</p><p>这个时候再看看这个postToSubscription()方法：</p><pre class="line-numbers language-none"><code class="language-none">private void postToSubscription(Subscription subscription, Object event, boolean isMainThread) {    switch (subscription.subscriberMethod.threadMode) {        case POSTING:            invokeSubscriber(subscription, event);            break;        case MAIN:            if (isMainThread) {                invokeSubscriber(subscription, event);            } else {                mainThreadPoster.enqueue(subscription, event);            }            break;        case MAIN_ORDERED:            if (mainThreadPoster != null) {                mainThreadPoster.enqueue(subscription, event);            } else {                invokeSubscriber(subscription, event);            }            break;        case BACKGROUND:            if (isMainThread) {                backgroundPoster.enqueue(subscription, event);            } else {                invokeSubscriber(subscription, event);            }            break;        case ASYNC:            asyncPoster.enqueue(subscription, event);            break;        default:            throw new IllegalStateException("Unknow thread mode: " + subscription.subscriberMethod.threadMode);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面可以看出，这里通过threadMode 来判断在哪个线程中去执行方法：</p><ol><li><p>POSTING：执行 invokeSubscriber() 方法，内部<strong>直接采用反射调用</strong>。</p></li><li><p>MAIN：<strong>首先去判断当前是否在 UI 线程，如果是的话则直接反射调用，否则调用mainThreadPoster的enqueue()方法，即把当前的方法加入到队列之中，然后通过 handler 去发送一个消息，在 handler 的 handleMessage 中去执行方法</strong>。</p></li><li><p>MAIN_ORDERED：<strong>与MAIN类似，不过是确保是顺序执行的</strong>。</p></li><li><p>BACKGROUND：<strong>判断当前是否在 UI 线程，如果不是的话则直接反射调用，是的话通过backgroundPoster的enqueue()方法 将方法加入到后台的一个队列，最后通过线程池去执行。注意，backgroundPoster在 Executor的execute()方法 上添加了 synchronized关键字 并设立 了控制标记flag，保证任一时间只且仅能有一个任务会被线程池执行</strong>。</p></li><li><p>ASYNC：<strong>逻辑实现类似于BACKGROUND，将任务加入到后台的一个队列，最终由Eventbus 中的一个线程池去调用，这里的线程池与 BACKGROUND 逻辑中的线程池用的是同一个，即使用Executors的newCachedThreadPool()方法创建的线程池，它是一个有则用、无则创建、无数量上限的线程池。不同于backgroundPoster的保证任一时间只且仅能有一个任务会被线程池执行的特性，这里asyncPoster则是异步运行的，可以同时接收多个任务</strong>。</p></li></ol><p>分析完EventBus的post()方法值，接着看看它的unregister()。</p>        <h3 id="EventBus-getDefault-unregister-this">          <a href="#EventBus-getDefault-unregister-this" class="heading-link"><i class="fas fa-link"></i></a><a href="#EventBus-getDefault-unregister-this" class="headerlink" title="EventBus.getDefault().unregister(this)"></a>EventBus.getDefault().unregister(this)</h3>      <p>它的核心源码如下所示：</p><pre class="line-numbers language-none"><code class="language-none">public synchronized void unregister(Object subscriber) {    List&lt;Class&lt;?&gt;&gt; subscribedTypes = typesBySubscriber.get(subscriber);    if (subscribedTypes != null) {        for (Class&lt;?&gt; eventType : subscribedTypes) {            //1            unsubscribeByEventType(subscriber, eventType);        }        // 2        typesBySubscriber.remove(subscriber);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，在注释1处，<strong>unsubscribeByEventType() 方法中对 subscriptionsByEventType 移除了该 subscriber 的所有订阅信息</strong>。最后，在注释2处，<strong>移除了注册对象和其对应的所有 Event 事件链表</strong>。</p><p>最后，再来分析下EventBus中对粘性事件的处理。</p>        <h3 id="EventBus-getDefault-postSticky-new-CollectEvent">          <a href="#EventBus-getDefault-postSticky-new-CollectEvent" class="heading-link"><i class="fas fa-link"></i></a><a href="#EventBus-getDefault-postSticky-new-CollectEvent" class="headerlink" title="EventBus.getDefault.postSticky(new CollectEvent())"></a>EventBus.getDefault.postSticky(new CollectEvent())</h3>      <p>如果想要发射 sticky 事件需要通过 EventBus的postSticky() 方法，内部源码如下所示：</p><pre class="line-numbers language-none"><code class="language-none">public void postSticky(Object event) {    synchronized (stickyEvents) {        // 1        stickyEvents.put(event.getClass(), event);    }    // 2    post(event);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在注释1处，先将该事件放入 stickyEvents 中，接着在注释2处使用post()发送事件。前面我们在分析register()方法的最后部分时，其中有关粘性事件的源码如下：</p><pre class="line-numbers language-none"><code class="language-none">if (subscriberMethod.sticky) {    Object stickyEvent = stickyEvents.get(eventType);    if (stickyEvent != null) {        postToSubscription(newSubscription, stickyEvent, isMainThread());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，在这里<strong>会判断当前事件是否是 sticky 事件，如果是，则从 stickyEvents 中拿出该事件并执行 postToSubscription() 方法</strong>。</p><blockquote><p>EventBus 的源码在Android主流三方库源码分析系列中可以说是除了ButterKnife之外，算是比较简单的了。但是，它其中的一些思想和设计是值得借鉴的。比如<strong>它使用 FindState 复用池来复用 FindState 对象，在各处使用了 synchronized 关键字进行代码块同步的一些优化操作</strong>。其中上面分析了这么多，<strong>EventBus最核心的逻辑就是利用了 subscriptionsByEventType 这个重要的列表，将订阅对象，即接收事件的方法存储在这个列表，发布事件的时候在列表中查询出相对应的方法并执行</strong>。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>知识汇总</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式汇总</title>
    <link href="/2023/08/31/docs/android/zhi-shi-hui-zong/she-ji-mo-shi-hui-zong/"/>
    <url>/2023/08/31/docs/android/zhi-shi-hui-zong/she-ji-mo-shi-hui-zong/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%88%86%E7%B1%BB">设计模式分类</a></li><li><a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99">面向对象六大原则</a></li><li><a href="#%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F">工厂模式</a></li><li><a href="#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F">单例模式</a></li><li><a href="#%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F">建造者模式</a></li><li><a href="#%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F">原型模式</a></li><li><a href="#%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F">适配器模式</a></li><li><a href="#%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F">观察者模式</a></li><li><a href="#%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F">代理模式</a></li><li><a href="#%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F">责任链模式</a></li><li><a href="#%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F">策略模式</a></li><li><a href="#%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F">备忘录模式</a></li></ul>        <h1 id="设计模式分类">          <a href="#设计模式分类" class="heading-link"><i class="fas fa-link"></i></a><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h1>      <div class="table-container"><table><thead><tr><th>模式 &amp; 描述</th><th>包括</th></tr></thead><tbody><tr><td><strong>创建型模式</strong><br>提供了一种在创建对象的同时隐藏创建逻辑的方式。</td><td>工厂模式（Factory Pattern）<br>抽象工厂模式（Abstract Factory Pattern）<br>单例模式（Singleton Pattern）<br>建造者模式（Builder Pattern）<br>原型模式（Prototype Pattern）</td></tr><tr><td><strong>结构型模式</strong><br>关注类和对象的组合。</td><td>适配器模式（Adapter Pattern）<br>桥接模式（Bridge Pattern）<br>过滤器模式（Filter、Criteria Pattern）<br>组合模式（Composite Pattern）<br>装饰器模式（Decorator Pattern）<br>外观模式（Facade Pattern）<br>享元模式（Flyweight Pattern）<br>代理模式（Proxy Pattern）</td></tr><tr><td><strong>行为型模式</strong><br>特别关注对象之间的通信。</td><td>责任链模式（Chain of Responsibility Pattern）<br>命令模式（Command Pattern）<br>解释器模式（Interpreter Pattern）<br>迭代器模式（Iterator Pattern）<br>中介者模式（Mediator Pattern）<br>备忘录模式（Memento Pattern）<br>观察者模式（Observer Pattern）<br>状态模式（State Pattern）<br>空对象模式（Null Object Pattern）<br>策略模式（Strategy Pattern）<br>模板模式（Template Pattern）<br>访问者模式（Visitor Pattern）</td></tr></tbody></table></div>        <h1 id="面向对象六大原则">          <a href="#面向对象六大原则" class="heading-link"><i class="fas fa-link"></i></a><a href="#面向对象六大原则" class="headerlink" title="面向对象六大原则"></a>面向对象六大原则</h1>      <div class="table-container"><table><thead><tr><th>原则</th><th>描述</th></tr></thead><tbody><tr><td>单一职责原则</td><td>一个类只负责一个功能领域中的相应职责。</td></tr><tr><td>开闭原则</td><td>对象应该对于扩展是开放的，对于修改是封闭的。</td></tr><tr><td>里氏替换原则</td><td>所有引用基类的地方必须能透明地使用其子类的对象。</td></tr><tr><td>依赖倒置原则</td><td>高层模块不依赖低层模块，两者应该依赖其对象；抽象不应该依赖细节；细节应该依赖抽象。</td></tr><tr><td>接口隔离原则</td><td>类间的依赖关系应该建立在最小的接口上。</td></tr><tr><td>迪米特原则</td><td>也称最少知识原则，一个对象对其他对象有最少的了解。</td></tr></tbody></table></div>        <h1 id="工厂模式">          <a href="#工厂模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1>      <p>适用于复杂对象的创建。</p><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Bitmap</span> bitmap <span class="token operator">=</span> <span class="token class-name">BitmapFactory</span><span class="token punctuation">.</span><span class="token function">decodeResource</span><span class="token punctuation">(</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>BitmapFactory.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 生成 Bitmap 对象的工厂类 BitmapFactory</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BitmapFactory</span> <span class="token punctuation">{</span>    ···    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Bitmap</span> <span class="token function">decodeFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> pathName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ···    <span class="token punctuation">}</span>    ···    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Bitmap</span> <span class="token function">decodeResource</span><span class="token punctuation">(</span><span class="token class-name">Resources</span> res<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">Options</span> opts<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">validate</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Bitmap</span> bm <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                 <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token class-name">TypedValue</span> value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypedValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            is <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">openRawResource</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            bm <span class="token operator">=</span> <span class="token function">decodeResourceStream</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> value<span class="token punctuation">,</span> is<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         ···        <span class="token keyword">return</span> bm<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ···<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="单例模式">          <a href="#单例模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1>      <p>确保某一个类只有一个实例，并自动实例化向整个系统提供这个实例，且可以避免产生多个对象消耗资源。</p><p>示例：</p><p><code>InputMethodManager.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** Retrieve the global InputMethodManager instance, creating it if it* doesn't already exist.* @hide*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">InputMethodManager</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">InputMethodManager</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                sInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputMethodManager</span><span class="token punctuation">(</span><span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServiceNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sInstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="建造者模式">          <a href="#建造者模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1>      <p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示，适用于初始化的对象比较复杂且参数较多的情况。</p><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"Title"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"Message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">AlertDialog</span> dialog <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dialog<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>AlertDialog.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AlertDialog</span> <span class="token keyword">extends</span> <span class="token class-name">Dialog</span> <span class="token keyword">implements</span> <span class="token class-name">DialogInterface</span> <span class="token punctuation">{</span>    ···    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AlertController<span class="token punctuation">.</span>AlertParams</span> <span class="token class-name">P</span><span class="token punctuation">;</span>        ···        <span class="token keyword">public</span> <span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token function">resolveDialogTheme</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">ResourceId</span><span class="token punctuation">.</span><span class="token constant">ID_NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ···        <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> title<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">P</span><span class="token punctuation">.</span>mTitle <span class="token operator">=</span> title<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ···        <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">P</span><span class="token punctuation">.</span>mMessage <span class="token operator">=</span> message<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ···        <span class="token keyword">public</span> <span class="token class-name">AlertDialog</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// Context has already been wrapped with the appropriate theme.</span>            <span class="token keyword">final</span> <span class="token class-name">AlertDialog</span> dialog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AlertDialog</span><span class="token punctuation">(</span><span class="token class-name">P</span><span class="token punctuation">.</span>mContext<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">P</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>dialog<span class="token punctuation">.</span>mAlert<span class="token punctuation">)</span><span class="token punctuation">;</span>            ···            <span class="token keyword">return</span> dialog<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ···    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="原型模式">          <a href="#原型模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1>      <p>用原型模式实例指定创建对象的种类，并通过拷贝这些原型创建新的对象。</p><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> newArrayList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> arrayList<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>ArrayList.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Returns a shallow copy of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance.  (The * elements themselves are not copied.) * * @return a clone of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance */</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> v <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v<span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        v<span class="token punctuation">.</span>modCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// this shouldn't happen, since we are Cloneable</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="适配器模式">          <a href="#适配器模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1>      <p>适配器模式把一个类的接口变成客户端所期待的另一种接口，从而使原因接口不匹配而无法一起工作的两个类能够在一起工作。</p><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RecyclerView</span> recyclerView <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>recycler_view<span class="token punctuation">)</span><span class="token punctuation">;</span>recyclerView<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">MyAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>Adapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RecyclerView<span class="token punctuation">.</span>ViewHolder</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NonNull</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>ViewHolder</span> <span class="token function">onCreateViewHolder</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">ViewGroup</span> parent<span class="token punctuation">,</span> <span class="token keyword">int</span> viewType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ···    <span class="token punctuation">}</span>    ···<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>RecyclerView.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">···<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setAdapterInternal</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Adapter</span> adapter<span class="token punctuation">,</span> <span class="token keyword">boolean</span> compatibleWithPrevious<span class="token punctuation">,</span>        <span class="token keyword">boolean</span> removeAndRecycleViews<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mAdapter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mAdapter<span class="token punctuation">.</span><span class="token function">unregisterAdapterDataObserver</span><span class="token punctuation">(</span>mObserver<span class="token punctuation">)</span><span class="token punctuation">;</span>        mAdapter<span class="token punctuation">.</span><span class="token function">onDetachedFromRecyclerView</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ···    mAdapterHelper<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Adapter</span> oldAdapter <span class="token operator">=</span> mAdapter<span class="token punctuation">;</span>    mAdapter <span class="token operator">=</span> adapter<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>adapter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        adapter<span class="token punctuation">.</span><span class="token function">registerAdapterDataObserver</span><span class="token punctuation">(</span>mObserver<span class="token punctuation">)</span><span class="token punctuation">;</span>        adapter<span class="token punctuation">.</span><span class="token function">onAttachedToRecyclerView</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mLayout <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mLayout<span class="token punctuation">.</span><span class="token function">onAdapterChanged</span><span class="token punctuation">(</span>oldAdapter<span class="token punctuation">,</span> mAdapter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    mRecycler<span class="token punctuation">.</span><span class="token function">onAdapterChanged</span><span class="token punctuation">(</span>oldAdapter<span class="token punctuation">,</span> mAdapter<span class="token punctuation">,</span> compatibleWithPrevious<span class="token punctuation">)</span><span class="token punctuation">;</span>    mState<span class="token punctuation">.</span>mStructureChanged <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>···<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Recycler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token class-name">ViewHolder</span> <span class="token function">tryGetViewHolderForPositionByDeadline</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> dryRun<span class="token punctuation">,</span> <span class="token keyword">long</span> deadlineNs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ···        <span class="token class-name">ViewHolder</span> holder <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        ···        <span class="token keyword">if</span> <span class="token punctuation">(</span>holder <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ···            holder <span class="token operator">=</span> mAdapter<span class="token punctuation">.</span><span class="token function">createViewHolder</span><span class="token punctuation">(</span><span class="token class-name">RecyclerView</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>            ···        <span class="token punctuation">}</span>        ···        <span class="token keyword">return</span> holder<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>···<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Adapter</span><span class="token generics"><span class="token punctuation">&lt;</span>VH <span class="token keyword">extends</span> <span class="token class-name">ViewHolder</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    ···    <span class="token annotation punctuation">@NonNull</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">VH</span> <span class="token function">onCreateViewHolder</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">ViewGroup</span> parent<span class="token punctuation">,</span> <span class="token keyword">int</span> viewType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@NonNull</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">VH</span> <span class="token function">createViewHolder</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">ViewGroup</span> parent<span class="token punctuation">,</span> <span class="token keyword">int</span> viewType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">TraceCompat</span><span class="token punctuation">.</span><span class="token function">beginSection</span><span class="token punctuation">(</span><span class="token constant">TRACE_CREATE_VIEW_TAG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token class-name">VH</span> holder <span class="token operator">=</span> <span class="token function">onCreateViewHolder</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> viewType<span class="token punctuation">)</span><span class="token punctuation">;</span>            ···            holder<span class="token punctuation">.</span>mItemViewType <span class="token operator">=</span> viewType<span class="token punctuation">;</span>            <span class="token keyword">return</span> holder<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token class-name">TraceCompat</span><span class="token punctuation">.</span><span class="token function">endSection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    ···<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="观察者模式">          <a href="#观察者模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1>      <p>定义对象间一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并被自动更新。</p><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">MyAdapter</span> adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>recyclerView<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token punctuation">;</span>adapter<span class="token punctuation">.</span><span class="token function">notifyDataSetChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>RecyclerView.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">···<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RecyclerViewDataObserver</span> mObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RecyclerViewDataObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>···<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setAdapterInternal</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Adapter</span> adapter<span class="token punctuation">,</span> <span class="token keyword">boolean</span> compatibleWithPrevious<span class="token punctuation">,</span>        <span class="token keyword">boolean</span> removeAndRecycleViews<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ···    mAdapter <span class="token operator">=</span> adapter<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>adapter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        adapter<span class="token punctuation">.</span><span class="token function">registerAdapterDataObserver</span><span class="token punctuation">(</span>mObserver<span class="token punctuation">)</span><span class="token punctuation">;</span>        adapter<span class="token punctuation">.</span><span class="token function">onAttachedToRecyclerView</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ···<span class="token punctuation">}</span>···<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Adapter</span><span class="token generics"><span class="token punctuation">&lt;</span>VH <span class="token keyword">extends</span> <span class="token class-name">ViewHolder</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AdapterDataObservable</span> mObservable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdapterDataObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ···    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerAdapterDataObserver</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">AdapterDataObserver</span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mObservable<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ···    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">notifyDataSetChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mObservable<span class="token punctuation">.</span><span class="token function">notifyChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AdapterDataObservable</span> <span class="token keyword">extends</span> <span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AdapterDataObserver</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    ···    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> mObservers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mObservers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    ···<span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">RecyclerViewDataObserver</span> <span class="token keyword">extends</span> <span class="token class-name">AdapterDataObserver</span> <span class="token punctuation">{</span>    ···    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">assertNotInLayoutOrScroll</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mState<span class="token punctuation">.</span>mStructureChanged <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">processDataSetCompletelyChanged</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mAdapterHelper<span class="token punctuation">.</span><span class="token function">hasPendingUpdates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">requestLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    ···<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="代理模式">          <a href="#代理模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1>      <p>为其他的对象提供一种代理以控制对这个对象的访问。适用于当无法或不想直接访问某个对象时通过一个代理对象来间接访问，为了保证客户端使用的透明性，委托对象与代理对象需要实现相同的接口。</p><p>示例：</p><p><code>Context.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>    ···    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequiresPermission</span> <span class="token class-name">Intent</span> intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    ···<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ContextWrapper.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContextWrapper</span> <span class="token keyword">extends</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>    <span class="token class-name">Context</span> mBase<span class="token punctuation">;</span> <span class="token comment">// 代理类，实为 ContextImpl 对象</span>    ···    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">attachBaseContext</span><span class="token punctuation">(</span><span class="token class-name">Context</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mBase <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Base context already set"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mBase <span class="token operator">=</span> base<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ···    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mBase<span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 核心工作交由给代理类对象 mBase 实现</span>    <span class="token punctuation">}</span>    ···<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ContextImpl.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Context 的真正实现类</span><span class="token keyword">class</span> <span class="token class-name">ContextImpl</span> <span class="token keyword">extends</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">warnIfCallingFromSystemProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="责任链模式">          <a href="#责任链模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h1>      <p>使多个对象都有机会处理请求，从而避免了请求的发送者和接受者之间的耦合。将这些对象连成一条链，并沿着这条链传递该请求，直到有对象处理它为止。</p><p><code>ViewGroup.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@UiThread</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ViewGroup</span> <span class="token keyword">extends</span> <span class="token class-name">View</span> <span class="token keyword">implements</span> <span class="token class-name">ViewParent</span><span class="token punctuation">,</span> <span class="token class-name">ViewManager</span> <span class="token punctuation">{</span>    ···    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTransformedTouchEvent</span><span class="token punctuation">(</span><span class="token class-name">MotionEvent</span> event<span class="token punctuation">,</span> <span class="token keyword">boolean</span> cancel<span class="token punctuation">,</span>            <span class="token class-name">View</span> child<span class="token punctuation">,</span> <span class="token keyword">int</span> desiredPointerIdBits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> handled<span class="token punctuation">;</span>        ···        <span class="token keyword">final</span> <span class="token class-name">MotionEvent</span> transformedEvent<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newPointerIdBits <span class="token operator">==</span> oldPointerIdBits<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> child<span class="token punctuation">.</span><span class="token function">hasIdentityMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    handled <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    ···                    <span class="token comment">// 获取子 view 处理的结果</span>                    handled <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> handled<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            transformedEvent <span class="token operator">=</span> <span class="token class-name">MotionEvent</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            transformedEvent <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>newPointerIdBits<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// Perform any necessary transformations and dispatch.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            handled <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>transformedEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            ···            <span class="token comment">// 获取子 view 处理的结果</span>            handled <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>transformedEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ···        <span class="token keyword">return</span> handled<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ···<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="策略模式">          <a href="#策略模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1>      <p>策略模式定义了一系列的算法，并封装起来，提供针对同一类型问题的多种处理方式。</p><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 匀速</span>animation<span class="token punctuation">.</span><span class="token function">setInterpolator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinearInterpolator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 加速</span>animation<span class="token punctuation">.</span><span class="token function">setInterpolator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AccelerateInterpolator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>···<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>BaseInterpolator.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * An abstract class which is extended by default interpolators. */</span><span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseInterpolator</span> <span class="token keyword">implements</span> <span class="token class-name">Interpolator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token annotation punctuation">@Config</span> <span class="token keyword">int</span> mChangingConfiguration<span class="token punctuation">;</span>    <span class="token comment">/**     * @hide     */</span>    <span class="token keyword">public</span> <span class="token annotation punctuation">@Config</span> <span class="token keyword">int</span> <span class="token function">getChangingConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mChangingConfiguration<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * @hide     */</span>    <span class="token keyword">void</span> <span class="token function">setChangingConfiguration</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Config</span> <span class="token keyword">int</span> changingConfiguration<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mChangingConfiguration <span class="token operator">=</span> changingConfiguration<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>LinearInterpolator.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@HasNativeInterpolator</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinearInterpolator</span> <span class="token keyword">extends</span> <span class="token class-name">BaseInterpolator</span> <span class="token keyword">implements</span> <span class="token class-name">NativeInterpolatorFactory</span> <span class="token punctuation">{</span>    ···<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>AccelerateInterpolator.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@HasNativeInterpolator</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccelerateInterpolator</span> <span class="token keyword">extends</span> <span class="token class-name">BaseInterpolator</span> <span class="token keyword">implements</span> <span class="token class-name">NativeInterpolatorFactory</span> <span class="token punctuation">{</span>    ···<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        <h1 id="备忘录模式">          <a href="#备忘录模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h1>      <p>在不破坏封闭的前提下，在对象之外保存保存对象的当前状态，并且在之后可以恢复到此状态。</p><p>示例：</p><p><code>Activity.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 保存状态</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> outState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 存储当前窗口的视图树的状态</span>    outState<span class="token punctuation">.</span><span class="token function">putBundle</span><span class="token punctuation">(</span><span class="token constant">WINDOW_HIERARCHY_TAG</span><span class="token punctuation">,</span> mWindow<span class="token punctuation">.</span><span class="token function">saveHierarchyState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    outState<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token constant">LAST_AUTOFILL_ID</span><span class="token punctuation">,</span> mLastAutofillId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 存储 Fragment 的状态</span>    <span class="token class-name">Parcelable</span> p <span class="token operator">=</span> mFragments<span class="token punctuation">.</span><span class="token function">saveAllState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        outState<span class="token punctuation">.</span><span class="token function">putParcelable</span><span class="token punctuation">(</span><span class="token constant">FRAGMENTS_TAG</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mAutoFillResetNeeded<span class="token punctuation">)</span> <span class="token punctuation">{</span>        outState<span class="token punctuation">.</span><span class="token function">putBoolean</span><span class="token punctuation">(</span><span class="token constant">AUTOFILL_RESET_NEEDED</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getAutofillManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span>outState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 调用 ActivityLifecycleCallbacks 的 onSaveInstanceState 进行存储状态</span>    <span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dispatchActivitySaveInstanceState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> outState<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>···<span class="token comment">// onCreate 方法中恢复状态</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ···    <span class="token keyword">if</span> <span class="token punctuation">(</span>savedInstanceState <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mAutoFillResetNeeded <span class="token operator">=</span> savedInstanceState<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token constant">AUTOFILL_RESET_NEEDED</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mLastAutofillId <span class="token operator">=</span> savedInstanceState<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token constant">LAST_AUTOFILL_ID</span><span class="token punctuation">,</span>                <span class="token class-name">View</span><span class="token punctuation">.</span><span class="token constant">LAST_APP_AUTOFILL_ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mAutoFillResetNeeded<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">getAutofillManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Parcelable</span> p <span class="token operator">=</span> savedInstanceState<span class="token punctuation">.</span><span class="token function">getParcelable</span><span class="token punctuation">(</span><span class="token constant">FRAGMENTS_TAG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mFragments<span class="token punctuation">.</span><span class="token function">restoreAllState</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> mLastNonConfigurationInstances <span class="token operator">!=</span> <span class="token keyword">null</span>                <span class="token operator">?</span> mLastNonConfigurationInstances<span class="token punctuation">.</span>fragments <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    mFragments<span class="token punctuation">.</span><span class="token function">dispatchCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dispatchActivityCreated</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>    ···    mRestoredFromBundle <span class="token operator">=</span> savedInstanceState <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    mCalled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ActivityThread.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleStartActivity</span><span class="token punctuation">(</span><span class="token class-name">ActivityClientRecord</span> r<span class="token punctuation">,</span>        <span class="token class-name">PendingTransactionActions</span> pendingActions<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">Activity</span> activity <span class="token operator">=</span> r<span class="token punctuation">.</span>activity<span class="token punctuation">;</span>    ···    <span class="token comment">// Start</span>    activity<span class="token punctuation">.</span><span class="token function">performStart</span><span class="token punctuation">(</span><span class="token string">"handleStartActivity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    r<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token constant">ON_START</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ···    <span class="token comment">// Restore instance state</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingActions<span class="token punctuation">.</span><span class="token function">shouldRestoreInstanceState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">isPersistable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>state <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> r<span class="token punctuation">.</span>persistentState <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mInstrumentation<span class="token punctuation">.</span><span class="token function">callActivityOnRestoreInstanceState</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> r<span class="token punctuation">.</span>state<span class="token punctuation">,</span>                        r<span class="token punctuation">.</span>persistentState<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>state <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mInstrumentation<span class="token punctuation">.</span><span class="token function">callActivityOnRestoreInstanceState</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> r<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    ···<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>知识汇总</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux汉化不完全</title>
    <link href="/2023/08/31/docs/cao-zuo-xi-tong/linux/linux-han-hua-bu-wan-quan/"/>
    <url>/2023/08/31/docs/cao-zuo-xi-tong/linux/linux-han-hua-bu-wan-quan/</url>
    
    <content type="html"><![CDATA[<p>成功安装了Linux Mint 19操作系统，但是部分界面还是英文的。<br>由于在Linux Mint 19里去除了Ubuntu的语言支持小工具，使用Cinnamon自身的一个新开发语言配置工具来替换，但是这个工具尚未完善，明明在Linux Mint 19系统中的Firefox等软件还是英文的界面，可却显示中文已经完整安装。所以，我们需要手动来安装所需要的中文语言包，以下在Linux Mint 19系统终端中运行相关指令即可完成。</p><ol><li>安装中文语言包<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">$ sudo apt<span class="hljs-operator">-</span><span class="hljs-keyword">get</span> install <span class="hljs-keyword">language</span><span class="hljs-operator">-</span>pack<span class="hljs-operator">-</span>zh<span class="hljs-operator">-</span>hans  <span class="hljs-keyword">language</span><span class="hljs-operator">-</span>pack<span class="hljs-operator">-</span>gnome<span class="hljs-operator">-</span>zh<span class="hljs-operator">-</span>hans<br></code></pre></td></tr></tbody></table></figure></li><li>安装firefox语言包<figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo apt-<span class="hljs-built_in">get</span> install firefox-locale-zh-hans<br></code></pre></td></tr></tbody></table></figure></li><li>安装libreoffice语言包<figure class="highlight armasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">$ sudo apt-<span class="hljs-meta">get</span> install libreoffice-l10n-zh-<span class="hljs-meta">cn</span><br></code></pre></td></tr></tbody></table></figure></li><li>安装thunderbird语言包<figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo apt-<span class="hljs-built_in">get</span> install thunderbird-locale-zh-hans<br></code></pre></td></tr></tbody></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu设置root登录</title>
    <link href="/2023/08/31/docs/cao-zuo-xi-tong/linux/ubuntu-she-zhi-root-deng-lu/"/>
    <url>/2023/08/31/docs/cao-zuo-xi-tong/linux/ubuntu-she-zhi-root-deng-lu/</url>
    
    <content type="html"><![CDATA[<p>sudo passwd root</p><p>su root</p><p>sudo gedit /etc/pam.d/gdm-autologin</p><p>//注释 auth requied pam_succeed_if.so user != root quiet success</p><p>sudo gedit /etc/pam.d/gdm-password</p><p>//注释 auth requied pam_succeed_if.so user != root quiet success</p><p>此时重启计算机，使用root账户登陆，出现错误提示：Error found when loading/root/.profile:mesg: ttyname失败: 对设备不适当的ioctl操作，As a result the session will not be configured correctly.You shoud fix the problem as soon as feasible</p><p>运行：</p><p>sudo gedit /root/.profile</p><p>在行”mesg n || true”前添加”tty -s &amp;&amp; “，变为”tty -s &amp;&amp; mesg n || true”，此时重启计算机，使用root账户登陆正常。</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>性能优化知识点汇总</title>
    <link href="/2023/08/31/docs/android/zhi-shi-hui-zong/xing-neng-you-hua-zhi-shi-dian-hui-zong/"/>
    <url>/2023/08/31/docs/android/zhi-shi-hui-zong/xing-neng-you-hua-zhi-shi-dian-hui-zong/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96">启动优化</a><ul><li><a href="#%E8%A7%86%E8%A7%89%E4%BC%98%E5%8C%96">视觉优化</a><ul><li><a href="#%E5%90%AF%E5%8A%A8%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96">启动主题优化</a></li></ul></li><li><a href="#%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96">代码优化</a><ul><li><a href="#%E5%86%B7%E5%90%AF%E5%8A%A8%E8%80%97%E6%97%B6%E7%BB%9F%E8%AE%A1">冷启动耗时统计</a></li><li><a href="#Application-%E4%BC%98%E5%8C%96">Application 优化</a></li><li><a href="#%E9%97%AA%E5%B1%8F%E9%A1%B5%E4%B8%9A%E5%8A%A1%E4%BC%98%E5%8C%96">闪屏页业务优化</a></li><li><a href="#%E5%B9%BF%E5%91%8A%E9%A1%B5%E4%BC%98%E5%8C%96">广告页优化</a></li></ul></li><li><a href="#%E4%BC%98%E5%8C%96%E6%95%88%E6%9E%9C">优化效果</a></li><li><a href="#%E5%90%AF%E5%8A%A8%E7%AA%97%E5%8F%A3">启动窗口</a></li></ul></li><li><a href="#UI%E6%B8%B2%E6%9F%93%E4%BC%98%E5%8C%96">UI渲染优化</a><ul><li><a href="#CPUGPU%E7%9A%84%E8%81%8C%E8%B4%A3">CPU、GPU的职责</a></li><li><a href="#%E6%9F%A5%E6%89%BEOverdraw">查找Overdraw</a></li><li><a href="#clipRect%E8%A7%A3%E5%86%B3%E8%87%AA%E5%AE%9A%E4%B9%89View%E7%9A%84OverDraw">clipRect解决自定义View的OverDraw</a></li><li><a href="#Hierarchy-Viewer%E7%9A%84%E4%BD%BF%E7%94%A8">Hierarchy Viewer的使用</a></li><li><a href="#%E5%86%85%E5%AD%98%E6%8A%96%E5%8A%A8%E7%8E%B0%E8%B1%A1">内存抖动现象</a></li></ul></li><li><a href="#%E5%B4%A9%E6%BA%83%E4%BC%98%E5%8C%96">崩溃优化</a><ul><li><a href="#%E5%B4%A9%E6%BA%83">崩溃</a><ul><li><a href="#%E5%B4%A9%E6%BA%83%E7%9A%84%E6%94%B6%E9%9B%86">崩溃的收集</a></li><li><a href="#ANR">ANR</a></li><li><a href="#%E5%BA%94%E7%94%A8%E9%80%80%E5%87%BA">应用退出</a></li></ul></li><li><a href="#%E5%B4%A9%E6%BA%83%E5%A4%84%E7%90%86">崩溃处理</a><ul><li><a href="#%E5%B4%A9%E6%BA%83%E7%8E%B0%E5%9C%BA">崩溃现场</a></li><li><a href="#%E5%B4%A9%E6%BA%83%E5%88%86%E6%9E%90">崩溃分析</a></li><li><a href="#%E7%B3%BB%E7%BB%9F%E5%B4%A9%E6%BA%83">系统崩溃</a></li></ul></li></ul></li><li><a href="#%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96">内存优化</a><ul><li><a href="#%E4%BC%98%E5%8C%96%E5%B7%A5%E5%85%B7">优化工具</a><ul><li><a href="#Memory-Profiler">Memory Profiler</a></li><li><a href="#Memory-AnalyzerMAT">Memory Analyzer（MAT）</a></li><li><a href="#LeakCannary">LeakCannary</a></li></ul></li><li><a href="#%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86">内存管理</a><ul><li><a href="#%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F">内存区域</a></li><li><a href="#%E5%AF%B9%E8%B1%A1%E5%AD%98%E6%B4%BB%E5%88%A4%E6%96%AD">对象存活判断</a></li><li><a href="#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95">垃圾回收算法</a></li></ul></li><li><a href="#%E5%86%85%E5%AD%98%E6%8A%96%E5%8A%A8">内存抖动</a><ul><li><a href="#%E6%A8%A1%E6%8B%9F%E5%86%85%E5%AD%98%E6%8A%96%E5%8A%A8">模拟内存抖动</a></li><li><a href="#%E5%88%86%E6%9E%90%E5%B9%B6%E5%AE%9A%E4%BD%8D">分析并定位</a></li></ul></li><li><a href="#%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2">内存泄露</a><ul><li><a href="#%E6%A8%A1%E6%8B%9F%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2">模拟内存泄露</a></li><li><a href="#%E5%88%86%E6%9E%90%E5%B9%B6%E5%AE%9A%E4%BD%8D-1">分析并定位</a></li></ul></li><li><a href="#MAT%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7">MAT分析工具</a><ul><li><a href="#Overview">Overview</a></li><li><a href="#Histogram">Histogram</a></li><li><a href="#Dominator_tree">Dominator_tree</a></li><li><a href="#SQL">SQL</a></li><li><a href="#Thread_overview">Thread_overview</a></li><li><a href="#Top-Consumers">Top Consumers</a></li><li><a href="#Leak-Suspects">Leak Suspects</a></li></ul></li><li><a href="#%E9%80%9A%E8%BF%87ARTHook%E6%A3%80%E6%B5%8B%E4%B8%8D%E5%90%88%E7%90%86%E5%9B%BE%E7%89%87">通过ARTHook检测不合理图片</a><ul><li><a href="#%E8%8E%B7%E5%8F%96Bitmap%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98">获取Bitmap占用内存</a></li><li><a href="#%E6%A3%80%E6%B5%8B%E5%A4%A7%E5%9B%BE">检测大图</a></li></ul></li><li><a href="#%E7%BA%BF%E4%B8%8A%E5%86%85%E5%AD%98%E7%9B%91%E6%8E%A7">线上内存监控</a><ul><li><a href="#%E5%B8%B8%E8%A7%84%E6%96%B9%E6%A1%88">常规方案</a></li><li><a href="#LeakCannary%E5%AE%9A%E5%88%B6%E6%94%B9%E9%80%A0">LeakCannary定制改造</a></li><li><a href="#%E5%AE%8C%E6%95%B4%E6%96%B9%E6%A1%88">完整方案</a></li></ul></li></ul></li><li><a href="#%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96">卡顿优化</a><ul><li><a href="#%E5%8D%A1%E9%A1%BF">卡顿</a></li><li><a href="#%E5%B8%A7%E7%8E%87">帧率</a></li><li><a href="#%E5%8D%A1%E9%A1%BF%E5%8E%9F%E5%9B%A0">卡顿原因</a></li><li><a href="#%E5%8D%A1%E9%A1%BF%E6%A3%80%E6%B5%8B">卡顿检测</a><ul><li><a href="#%E4%BD%BF%E7%94%A8dumpsys-gfxinfo">使用dumpsys gfxinfo</a></li><li><a href="#%E4%BD%BF%E7%94%A8systrace">使用systrace</a></li><li><a href="#%E4%BD%BF%E7%94%A8BlockCanary">使用BlockCanary</a></li><li><a href="#%E4%BD%BF%E7%94%A8Choreographer">使用Choreographer</a></li></ul></li><li><a href="#%E4%BC%98%E5%8C%96">优化</a></li></ul></li><li><a href="#%E5%AD%98%E5%82%A8%E4%BC%98%E5%8C%96">存储优化</a><ul><li><a href="#%E4%BA%A4%E6%8D%A2%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F">交换数据格式</a></li><li><a href="#SharePreferences-%E4%BC%98%E5%8C%96">SharePreferences 优化</a></li><li><a href="Bitmap-%E8%A7%A3%E7%A0%81">Bitmap 解码</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96">数据库优化</a><ul><li><a href="#%E4%BA%8B%E5%8A%A1">事务</a></li><li><a href="#SQLiteStatement">SQLiteStatement</a>    </li><li><a href="#%E7%B4%A2%E5%BC%95">索引</a></li></ul></li><li><a href="#%E5%85%B6%E5%AE%83%E9%80%9A%E7%94%A8%E4%BC%98%E5%8C%96">其它通用优化</a></li></ul></li><li><a href="#%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96">网络优化</a><ul><li><a href="#%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E5%AF%B9%E7%94%A8%E6%88%B7%E7%9A%84%E5%BD%B1%E5%93%8D">网络连接对用户的影响</a></li><li><a href="#%E5%88%86%E6%9E%90%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%B7%A5%E5%85%B7">分析网络连接的工具</a><ul><li><a href="#Network-Monitor">Network Monitor</a></li><li><a href="#%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7">网络代理工具</a></li></ul></li><li><a href="#%E4%BB%8E%E5%93%AA%E4%BA%9B%E6%96%B9%E9%9D%A2%E4%BC%98%E5%8C%96%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5">从哪些方面优化网络连接</a><ul><li><a href="#%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1">接口设计</a></li><li><a href="#%E7%BD%91%E7%BB%9C%E7%BC%93%E5%AD%98">网络缓存</a></li><li><a href="#%E5%BC%B1%E7%BD%91%E6%B5%8B%E8%AF%95&amp;%E4%BC%98%E5%8C%96">弱网测试&amp;优化</a></li></ul></li></ul></li><li><a href="#%E8%80%97%E7%94%B5%E4%BC%98%E5%8C%96">耗电优化</a><ul><li><a href="#%E8%80%97%E7%94%B5%E7%9B%91%E6%8E%A7">耗电监控</a><ul><li><a href="#Android-Vitals">Android Vitals</a></li></ul></li><li><a href="#%E8%80%97%E7%94%B5%E7%9B%91%E6%8E%A7%E9%83%BD%E7%9B%91%E6%8E%A7%E4%BB%80%E4%B9%88">耗电监控都监控什么</a></li><li><a href="#%E5%A6%82%E4%BD%95%E7%9B%91%E6%8E%A7%E8%80%97%E7%94%B5">如何监控耗电</a><ul><li><a href="#Java-Hook">Java Hook</a></li><li><a href="#%E6%8F%92%E6%A1%A9">插桩</a></li></ul></li></ul></li><li><a href="#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E4%BC%98%E5%8C%96">多线程并发优化</a><ul><li><a href="#Thread-%E4%BD%BF%E7%94%A8">Thread 使用</a><ul><li><a href="#Thread-%E4%B8%AD%E6%96%AD">Thread 中断</a></li><li><a href="#%E5%90%8C%E6%AD%A5">同步</a></li></ul></li><li><a href="#Android-Threading">Android Threading</a><ul><li><a href="#AsyncTask">AsyncTask</a></li><li><a href="#HandlerThread">HandlerThread</a></li><li><a href="#IntentService">IntentService</a></li><li><a href="#Loader">Loader</a></li><li><a href="#ThreadPool">ThreadPool</a></li></ul></li><li><a href="#%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7">线程优先级</a></li></ul></li><li><a href="#%E5%AE%89%E8%A3%85%E5%8C%85%E4%BC%98%E5%8C%96">安装包优化</a><ul><li><a href="#%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BC%98%E5%8C%96%E6%96%B9%E5%BC%8F">常用的优化方式</a><ul><li><a href="#%E6%B8%85%E7%90%86%E6%97%A0%E7%94%A8%E8%B5%84%E6%BA%90">清理无用资源</a></li><li><a href="#%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90%E4%BC%98%E5%8C%96">图片资源优化</a></li><li><a href="#%E8%B5%84%E6%BA%90%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD">资源动态加载</a></li><li><a href="#lib%E5%BA%93%E4%BC%98%E5%8C%96">lib库优化</a></li><li><a href="#7zip%E5%8E%8B%E7%BC%A9%E8%B5%84%E6%BA%90">7zip压缩资源</a></li><li><a href="#%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86">代码混淆</a></li><li><a href="#%E8%B5%84%E6%BA%90res%E6%B7%B7%E6%B7%86">资源(res)混淆</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E5%BE%AE%E4%BF%A1AndResGuard">使用微信AndResGuard</a></li><li><a href="#Facebook%E7%9A%84redex%E4%BC%98%E5%8C%96%E5%AD%97%E8%8A%82%E7%A0%81">Facebook的redex优化字节码</a></li></ul></li></ul></li></ul>        <h1 id="启动优化">          <a href="#启动优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#启动优化" class="headerlink" title="启动优化"></a>启动优化</h1>      <p>一个应用App的启动速度能够影响用户的首次体验，启动速度较慢(感官上)的应用可能导致用户再次开启App的意图下降，或者卸载放弃该应用程序。</p>        <h2 id="视觉优化">          <a href="#视觉优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#视觉优化" class="headerlink" title="视觉优化"></a>视觉优化</h2>      <p>应用程序启动有三种状态，每种状态都会影响应用程序对用户可见所需的时间：冷启动，热启动和温启动。</p><blockquote><p>在冷启动时，应用程序从头开始。在其他状态下，系统需要将正在运行的应用程序从后台运行到前台。我们建议您始终根据冷启动的假设进行优化。这样做也可以改善热启动和温启动的性能。</p></blockquote><p>在冷启动开始时，系统有三个任务。这些任务是：</p><ol><li>加载并启动应用程序。</li><li>启动后立即显示应用程序空白的启动窗口。</li><li>创建应用程序进程。</li></ol><blockquote><p>一旦系统创建应用程序进程，应用程序进程就会负责下一阶段。这些阶段是：</p></blockquote><ol><li>创建app对象.</li><li>启动主线程(main thread).</li><li>创建应用入口的Activity对象.</li><li>填充加载布局Views</li><li>在屏幕上执行View的绘制过程.measure -&gt; layout -&gt; draw</li></ol><blockquote><p>应用程序进程完成第一次绘制后，系统进程会交换当前显示的背景窗口，将其替换为主活动。此时，用户可以开始使用该应用程序。</p></blockquote><p><img src="https://img-blog.csdn.net/20180821203949125?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW41MjBhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style=""></p><p>因为App应用进程的创建过程是由手机的软硬件决定的，所以我们只能在这个创建过程中视觉优化。</p>        <h3 id="启动主题优化">          <a href="#启动主题优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#启动主题优化" class="headerlink" title="启动主题优化"></a>启动主题优化</h3>      <p>冷启动阶段 :</p><ol><li>加载并启动应用程序。</li><li>启动后立即显示应用程序空白的启动窗口。</li><li>创建应用程序进程。<br>所谓的主题优化，就是应用程序在冷启动的时候(1~2阶段)，设置启动窗口的主题。</li></ol><p>因为现在 App 应用启动都会先进入一个闪屏页(LaunchActivity) 来展示应用信息。</p><ul><li><strong>默认情况</strong></li></ul><p>如果我们对App没有做处理(设置了默认主题)，并且在 Application 初始化了其它第三方的服务(假设需要加载2000ms)，那么冷启动过程就会如下图 ：</p><p><img src="https://img-blog.csdn.net/20180821174737118?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW41MjBhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style=""></p><p>系统默认会在启动应用程序的时候<strong>启动空白窗口</strong>，直到 App 应用程序的入口 Activity 创建成功，视图绘制完毕。( 大概是onWindowFocusChanged方法回调的时候 )</p><ul><li><strong>透明主题优化</strong></li></ul><p>为了解决启动窗口白屏问题，许多开发者使用透明主题来解决这个问题，但是治标不治本。<br>虽然解决了上面这个问题，但是仍然有些不足。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token class-name">Base</span> application theme<span class="token punctuation">.</span> <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>style name<span class="token operator">=</span><span class="token string">"AppTheme"</span> parent<span class="token operator">=</span><span class="token string">"Theme.AppCompat.Light.DarkActionBar"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>item name<span class="token operator">=</span><span class="token string">"android:windowFullscreen"</span><span class="token operator">&gt;</span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>item name<span class="token operator">=</span><span class="token string">"android:windowIsTranslucent"</span><span class="token operator">&gt;</span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdn.net/2018082120304024?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW41MjBhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style=""></p><p>(无白屏,不过从点击到App仍然存在视觉延迟~)</p><ul><li><strong>设置闪屏图片主题</strong></li></ul><p>为了更顺滑无缝衔接我们的闪屏页，可以在启动 Activity 的 Theme中设置闪屏页图片，这样启动窗口的图片就会是闪屏页图片，而不是白屏。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>style name<span class="token operator">=</span><span class="token string">"AppTheme"</span> parent<span class="token operator">=</span><span class="token string">"Theme.AppCompat.Light.NoActionBar"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>item name<span class="token operator">=</span><span class="token string">"android:windowBackground"</span><span class="token operator">&gt;</span><span class="token annotation punctuation">@drawable</span><span class="token operator">/</span>lunch<span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">&gt;</span>  <span class="token comment">//闪屏页图片</span>    <span class="token operator">&lt;</span>item name<span class="token operator">=</span><span class="token string">"android:windowFullscreen"</span><span class="token operator">&gt;</span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>item name<span class="token operator">=</span><span class="token string">"android:windowDrawsSystemBarBackgrounds"</span><span class="token operator">&gt;</span><span class="token boolean">false</span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>显示虚拟按键，并腾出空间<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdn.net/20180821204758547?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW41MjBhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style=""></p><p>这样设置的话，就会在冷启动的时候，展示闪屏页的图片，等App进程初始化加载入口 Activity (也是闪屏页) 就可以无缝衔接。</p><p>其实这种方式并没有真正的加速应用进程的启动速度，而只是通过用户视觉效果带来的优化体验。</p>        <h2 id="代码优化">          <a href="#代码优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h2>      <p>当然上面使用设置主题的方式优化用户体验效果治标不治本，关键还在于对代码的优化。</p><p>首先统计一下应用冷启动的时间。</p>        <h3 id="冷启动耗时统计">          <a href="#冷启动耗时统计" class="heading-link"><i class="fas fa-link"></i></a><a href="#冷启动耗时统计" class="headerlink" title="冷启动耗时统计"></a>冷启动耗时统计</h3>      <ul><li><strong>adb 命令统计</strong></li></ul><p>adb命令 :<code>adb shell am start -S -W 包名/启动类的全限定名</code>， -S 表示重启当前应用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">C</span><span class="token operator">:</span>\<span class="token class-name">Android</span>\<span class="token class-name">Demo</span><span class="token operator">&gt;</span>adb shell am start <span class="token operator">-</span><span class="token class-name">S</span> <span class="token operator">-</span><span class="token class-name">W</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>moneyqian<span class="token punctuation">.</span>demo<span class="token operator">/</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>moneyqian<span class="token punctuation">.</span>demo<span class="token punctuation">.</span></span>MainActivity</span><span class="token class-name">Stopping</span><span class="token operator">:</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>moneyqian<span class="token punctuation">.</span>demo<span class="token class-name">Starting</span><span class="token operator">:</span> <span class="token class-name">Intent</span> <span class="token punctuation">{</span> act<span class="token operator">=</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>intent<span class="token punctuation">.</span>action<span class="token punctuation">.</span></span>MAIN</span> cat<span class="token operator">=</span><span class="token punctuation">[</span>android<span class="token punctuation">.</span>intent<span class="token punctuation">.</span>category<span class="token punctuation">.</span><span class="token constant">LAUNCHER</span><span class="token punctuation">]</span> cmp<span class="token operator">=</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>moneyqian<span class="token punctuation">.</span>demo<span class="token operator">/</span><span class="token punctuation">.</span>MainActivity <span class="token punctuation">}</span><span class="token class-name">Status</span><span class="token operator">:</span> ok<span class="token class-name">Activity</span><span class="token operator">:</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>moneyqian<span class="token punctuation">.</span>demo<span class="token operator">/</span><span class="token punctuation">.</span>MainActivity<span class="token class-name">ThisTime</span><span class="token operator">:</span> <span class="token number">2247</span><span class="token class-name">TotalTime</span><span class="token operator">:</span> <span class="token number">2247</span><span class="token class-name">WaitTime</span><span class="token operator">:</span> <span class="token number">2278</span><span class="token class-name">Complete</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>ThisTime : 最后一个 Activity 的启动耗时(例如从 LaunchActivity - &gt;MainActivity「adb命令输入的Activity」 , 只统计 MainActivity 的启动耗时)</p></li><li><p>TotalTime : 启动一连串的 Activity 总耗时.(有几个Activity 就统计几个)</p></li><li><p>WaitTime : 应用进程的创建过程 + TotalTime .</p></li></ul><p><img src="https://img-blog.csdn.net/20180823165453780?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW41MjBhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style=""></p><ul><li><p>在第①个时间段内，AMS 创建 ActivityRecord 记录块和选择合理的 Task、将当前Resume 的 Activity 进行 pause.</p></li><li><p>在第②个时间段内，启动进程、调用无界面 Activity 的 onCreate() 等、 pause/finish 无界面的 Activity.</p></li><li><p>在第③个时间段内，调用有界面 Activity 的 onCreate、onResume.</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//ActivityRecord</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">reportLaunchTimeLocked</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> curTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>``````        <span class="token keyword">final</span> <span class="token keyword">long</span> thisTime <span class="token operator">=</span> curTime <span class="token operator">-</span> displayStartTime<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">long</span> totalTime <span class="token operator">=</span> stack<span class="token punctuation">.</span>mLaunchStartTime <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span>curTime <span class="token operator">-</span> stack<span class="token punctuation">.</span>mLaunchStartTime<span class="token punctuation">)</span> <span class="token operator">:</span> thisTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果需要统计从点击桌面图标到 Activity 启动完毕，可以用WaitTime作为标准，但是系统的启动时间优化不了，所以优化冷启动只要在意<strong>ThisTime</strong>即可。</p><ul><li><strong>系统日志统计</strong></li></ul><p>也可以根据系统日志来统计启动耗时，在Android Studio中查找已用时间，必须在logcat视图中禁用过滤器(No Filters)。因为这个是系统的日志输出，而不是应用程序的。你也可以查看其它应用程序的启动耗时。</p><p>过滤<code>displayed</code>输出的启动日志.</p><p><img src="https://img-blog.csdn.net/20180823173958565?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW41MjBhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style=""></p><p>根据上面启动时间的输出统计，就可以先记录优化前的冷启动耗时，然后再对比优化之后的启动时间。</p>        <h3 id="Application-优化">          <a href="#Application-优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#Application-优化" class="headerlink" title="Application 优化"></a>Application 优化</h3>      <p>Application 作为 应用程序的整个初始化配置入口，时常担负着它不应该有的负担</p><p>有很多第三方组件（包括App应用本身）都在 Application 中抢占先机，完成初始化操作。</p><p>但是在 Application 中完成繁重的初始化操作和复杂的逻辑就会影响到<strong>应用的启动性能</strong></p><p>通常，有机会优化这些工作以实现性能改进，这些常见问题包括：</p><ol><li>复杂繁琐的布局初始化</li><li>阻塞主线程 UI 绘制的操作，如 I/O 读写或者是网络访问.</li><li>Bitmap 大图片或者 VectorDrawable加载</li><li>其它占用主线程的操作</li></ol><p>我们可以根据这些组件的轻重缓急之分，对初始化做一下分类 ：</p><ol><li>必要的组件一定要在<strong>主线程中立即</strong>初始化(入口 Activity 可能立即会用到)</li><li>组件一定要在<strong>主线程</strong>中初始化，但是可以延迟初始化。</li><li>组件可以在<strong>子线程</strong>中初始化。</li></ol><p><strong>放在子线程的组件初始化建议延迟初始化</strong>，这样就可以了解是否会对项目造成影响！</p><p>所以对于上面的分析，可以在项目中 Application 的加载组件进行如下优化 ：</p><ul><li><strong>将Bugly，x5内核初始化，SP的读写，友盟等组件放到子线程中初始化。</strong>（子线程初始化不能影响到组件的使用）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//设置线程的优先级，不与主线程抢资源</span>            <span class="token class-name">Process</span><span class="token punctuation">.</span><span class="token function">setThreadPriority</span><span class="token punctuation">(</span><span class="token class-name">Process</span><span class="token punctuation">.</span><span class="token constant">THREAD_PRIORITY_BACKGROUND</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//子线程初始化第三方组件</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建议延迟初始化，可以发现是否影响其它功能，或者是崩溃！</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>将需要在主线程中初始化但是可以不用立即完成的动作延迟加载</strong>（原本是想在入口 Activity 中进行此项操作，不过组件的初始化放在 Application 中统一管理为妙.）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">    handler<span class="token punctuation">.</span><span class="token function">postDelayed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//延迟初始化组件</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="闪屏页业务优化">          <a href="#闪屏页业务优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#闪屏页业务优化" class="headerlink" title="闪屏页业务优化"></a>闪屏页业务优化</h3>      <p>最后还剩下那些为数不多的组件在主线程初始化动作，例如<strong>埋点，点击流，数据库初始化</strong>等，不过这些消耗的时间可以在其它地方<strong>相抵</strong>。</p><p><strong>需求背景</strong>： 应用App通常会设置一个固定的闪屏页展示时间，例如2000ms，所以我们可以根据用户手机的运行速度，对展示时间做出调整，但是总时间仍然为 2000ms。</p><p><strong>闪屏页政展示总时间</strong> = <strong>组件初始化时间</strong> + <strong>剩余展示时间</strong>。</p><p>也就是2000ms的总时间，组件初始化了800ms，那么就再展示1200ms即可。</p><p>先了解一下 Application的启动过程<br>虽然这个以下图片的源码并不是最新源码（5.0源码），不过不影响整体流程。（7.0,8.0方法名会有所改变）。</p><p><img src="https://img-blog.csdn.net/20180823215319329?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW41MjBhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style=""></p><p><img src="https://img-blog.csdn.net/20180826181521975?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW41MjBhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style=""></p><p>冷启动的过程中系统会初始化应用程序进程，创建Application等任务，这时候会展示一个<strong>启动窗口</strong> Starting Window，如果没有优化主题的话，那么就是白屏。</p><p>分析源码后，我们可以知道 Application 初始化后会调用<code>attachBaseContext()</code>方法，再调用 Application 的<code>onCreate()</code>，再到入口 Activity的创建和执行<code>onCreate()</code>方法。所以我们就可以在 Application 中记录启动时间。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Application</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">attachBaseContext</span><span class="token punctuation">(</span><span class="token class-name">Context</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">attachBaseContext</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SPUtil</span><span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span><span class="token string">"application_attach_time"</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//记录Application初始化时间</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有了启动时间，我们得知道入口的 Acitivty 显示给用户的时间（View绘制完毕），在<code>onWindowFocusChanged()</code>的回调时机中表示可以获取用户的触摸时间和View的流程绘制完毕，所以可以在这个方法里记录显示时间。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//入口Activity</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onWindowFocusChanged</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> hasFocus<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onWindowFocusChanged</span><span class="token punctuation">(</span>hasFocus<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> appAttachTime <span class="token operator">=</span> <span class="token class-name">SPUtil</span><span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token string">"application_attach_time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">long</span> diffTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> appAttachTime<span class="token punctuation">;</span><span class="token comment">//从application到入口Acitity的时间</span>  <span class="token comment">//所以闪屏页展示的时间为 2000ms - diffTime.</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以就可以动态的设置应用闪屏的显示时间，尽量让每一部手机展示的时间一致，这样就不会让手机配置较低的用户感觉漫长难熬的闪屏页时间（例如初始化了2000ms，又要展示2000ms的闪屏页时间.），优化用户体验。</p>        <h3 id="广告页优化">          <a href="#广告页优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#广告页优化" class="headerlink" title="广告页优化"></a>广告页优化</h3>      <p>闪屏页过后就要展示金主爸爸们的广告页了。</p><p>因为项目中广告页图片有可能是大图，APng动态图片，所以需要将这些图片下载到本地文件，下载完成后再显示，这个过程往往会遇到以下两个问题 ：</p><ul><li>广告页的下载，由于这个是一个异步过程，所以往往不知道加载到页面的合适时机。</li><li>广告页的保存，因为保存是 I/O 流操作，很有可能被用户中断，下次拿到破损的图片。</li></ul><p>因为不清楚用户的网络环境，有些用户下载广告页可能需要一段时间，这时候又不可能无限的等候。所以针对这个问题可以开启<code>IntentService</code>用来下载广告页图片。</p><ul><li>在入口 Acitivity 中开启<strong>IntentService</strong>来下载广告页。 或者是其它异步下载操作。</li><li>在广告页图片<strong>文件流完全写入后</strong>记录图片大小，或者记录一个标识。</li></ul><p>在下次的广告页加载中可以<strong>判断是否已经下载</strong>好了广告页图片以及图片<strong>是否完整</strong>，否则删除并且再次下载图片。</p><p>另外因为在闪屏页中仍然有<strong>剩余展示时间</strong>，所以在这个时间段里如果用户已经下载好了图片并且图片完整，就可以显示广告页。否则进入主 Activity ， 因为<code>IntentService</code>仍然在后台继续默默的下载并保存图片~</p>        <h2 id="优化效果">          <a href="#优化效果" class="heading-link"><i class="fas fa-link"></i></a><a href="#优化效果" class="headerlink" title="优化效果"></a>优化效果</h2>      <p>优化前 ： （小米6）</p><div class="table-container"><table><thead><tr><th align="center">Displayed</th><th align="center">LaunchActivity</th><th align="center">MainActivity</th></tr></thead><tbody><tr><td align="center"></td><td align="center">+2s526ms</td><td align="center">+1s583ms</td></tr><tr><td align="center"></td><td align="center">+2s603ms</td><td align="center">+1s533ms</td></tr><tr><td align="center"></td><td align="center">+2s372ms</td><td align="center">+1s556ms</td></tr></tbody></table></div><p>优化后 ： （小米6）</p><div class="table-container"><table><thead><tr><th align="center">Displayed</th><th align="center">LaunchActivity</th><th align="center">MainActivity</th></tr></thead><tbody><tr><td align="center"></td><td align="center">+995ms</td><td align="center">+1s191ms</td></tr><tr><td align="center"></td><td align="center">+911ms</td><td align="center">+1s101ms</td></tr><tr><td align="center"></td><td align="center">+903ms</td><td align="center">+1s187ms</td></tr></tbody></table></div><p>通过手上 小米6，小米 mix2s，还有小米 2s的启动测试，发现优化后App冷启动的启动速度均提升了 60% !!! ，并且可以再看一下手机冷启动时候的内存情况 ：</p><p>优化前 ： 伴随着大量对象的创建回收，15s内系统GC 5次。内存使用波澜荡漾。</p><p><img src="https://img-blog.csdn.net/20180825150849193?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW41MjBhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style=""></p><p>优化后 ： 趋于平稳上升状态创建对象，15s内系统GC 2次。（后期业务拓展加入新功能，所以代码量增加。）之后总内存使用平缓下降。</p><p><img src="https://img-blog.csdn.net/20180825151003130?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW41MjBhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style=""></p><ul><li><strong>Other</strong>：应用使用的系统不确定如何分类的内存。</li><li><strong>Code</strong>：应用用于处理代码和资源（如 dex 字节码、已优化或已编译的 dex 码、.so 库和字体）的内存。</li><li><strong>Stack</strong>： 应用中的原生堆栈和 Java 堆栈使用的内存。 这通常与您的应用运行多少线程有关。</li><li><strong>Graphics</strong>：图形缓冲区队列向屏幕显示像素（包括 GL 表面、GL 纹理等等）所使用的内存。 （请注意，这是与 CPU 共享的内存，不是 GPU 专用内存。）</li><li><strong>Native</strong>：从 C 或 C++ 代码分配的对象内存。即使应用中不使用 C++，也可能会看到此处使用的一些原生内存，因为 Android 框架使用原生内存代表处理各种任务，如处理图像资源和其他图形时，即使编写的代码采用 Java 或 Kotlin 语言。</li><li><strong>Java</strong>：从 Java 或 Kotlin 代码分配的对象内存。</li><li><strong>Allocated</strong>：应用分配的 Java/Kotlin 对象数。 它没有计入 C 或 C++ 中分配的对象。</li></ul>        <h2 id="启动窗口">          <a href="#启动窗口" class="heading-link"><i class="fas fa-link"></i></a><a href="#启动窗口" class="headerlink" title="启动窗口"></a>启动窗口</h2>      <p>优化完代码后，分析一下启动窗口的源码。基于 android-25 (7.1.1)</p><p>启动窗口是由 <code>WindowManagerService</code> 统一管理的 <code>Window</code> 窗口，一般作为冷启动页入口 Activity 的预览窗口，启动窗口由 <code>ActivityManagerService</code> 来决定是否显示的，并不是每一个 Activity 的启动和跳转都会显示这个窗口。</p><p><code>WindowManagerService</code> 通过窗口管理策略类 <code>PhoneWindowManager</code> 来创建启动窗口。<br><img src="https://img-blog.csdn.net/2018082515534691?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW41MjBhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style=""></p><p><strong>AMS启动Activity流程</strong></p><p><img src="https://img-blog.csdn.net/2018082516213539?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW41MjBhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style=""></p><p>在 <code>ActivityStarter</code> 的 <code>startActivityUnchecked()</code> 方法中，调用了 <code>ActivityStack</code> （Activity 状态管理）的 <code>startActivityLocked()</code> 方法。此时Activity 还在启动过程中，窗口并未显示。</p><p><strong>启动窗口的显示过程</strong></p><p><img src="https://img-blog.csdn.net/20180825170000818?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW41MjBhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style=""></p><p>首先，由 Activity 状态管理者 <code>ActivityStack</code> 开始执行显示启动窗口的流程。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//ActivityStack</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">startActivityLocked</span><span class="token punctuation">(</span><span class="token class-name">ActivityRecord</span> r<span class="token punctuation">,</span> <span class="token keyword">boolean</span> newTask<span class="token punctuation">,</span> <span class="token keyword">boolean</span> keepCurTransition<span class="token punctuation">,</span>            <span class="token class-name">ActivityOptions</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>``````        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isHomeStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">numActivities</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//HOME_STACK表示Launcher桌面所在的Stack</span>        <span class="token comment">// 1.首先当前启动栈不在Launcher的桌面栈里,并且当前系统已经有激活过Activity</span>                    <span class="token comment">// We want to show the starting preview window if we are</span>            <span class="token comment">// switching to a new task, or the next activity's process is</span>            <span class="token comment">// not currently running.</span>            <span class="token keyword">boolean</span> doShow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newTask<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 2.要将该Activity组件放在一个新的任务栈中启动</span>                            <span class="token comment">// Even though this activity is starting fresh, we still need</span>                <span class="token comment">// to reset it to make sure we apply affinities to move any</span>                <span class="token comment">// existing activities from other tasks in to it.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>intent<span class="token punctuation">.</span><span class="token function">getFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">FLAG_ACTIVITY_RESET_TASK_IF_NEEDED</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">resetTaskIfNeededLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>                    doShow <span class="token operator">=</span> <span class="token function">topRunningNonDelayedActivityLocked</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">==</span> r<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>options <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span><span class="token function">getAnimationType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">==</span> <span class="token class-name">ActivityOptions</span><span class="token punctuation">.</span><span class="token constant">ANIM_SCENE_TRANSITION</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                doShow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>mLaunchTaskBehind<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//3. 热启动，不需要启动窗口</span>                            <span class="token comment">// Don't do a starting window for mLaunchTaskBehind. More importantly make sure we</span>                <span class="token comment">// tell WindowManager that r is visible even though it is at the back of the stack.</span>                mWindowManager<span class="token punctuation">.</span><span class="token function">setAppVisibility</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>appToken<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">ensureActivitiesVisibleLocked</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">!</span><span class="token constant">PRESERVE_WINDOWS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">SHOW_APP_STARTING_PREVIEW</span> <span class="token operator">&amp;&amp;</span> doShow<span class="token punctuation">)</span> <span class="token punctuation">{</span>``````<span class="token comment">//4. 显示启动窗口</span>                r<span class="token punctuation">.</span><span class="token function">showStartingWindow</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> showStartingIcon<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 当前启动的是桌面Launcher (开机启动)</span>            <span class="token comment">// If this is the first activity, don't do any fancy animations,</span>            <span class="token comment">// because there is nothing for it to animate on top of.</span>``````        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>首先判断当前要启动的 Activity 不在Launcher栈里</li><li>要启动的 Activity 是否处于新的 Task 里，并且没有转场动画</li><li>如果是热/温启动则不需要启动窗口，直接设置App的Visibility</li></ol><p>接下来调用 <code>ActivityRecord</code> 的 <code>showStartingWindow()</code> 方法来设置启动窗口并且改变当前窗口的状态。</p><p>如果 App 的应用进程创建完成，并且入口 Activity 准备就绪，就可以根据 <code>mStartingWindowState</code> 来判断是否需要关闭启动窗口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//ActivityRecord</span>    <span class="token keyword">void</span> <span class="token function">showStartingWindow</span><span class="token punctuation">(</span><span class="token class-name">ActivityRecord</span> prev<span class="token punctuation">,</span> <span class="token keyword">boolean</span> createIfNeeded<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">CompatibilityInfo</span> compatInfo <span class="token operator">=</span>                service<span class="token punctuation">.</span><span class="token function">compatibilityInfoForPackageLocked</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> shown <span class="token operator">=</span> service<span class="token punctuation">.</span>mWindowManager<span class="token punctuation">.</span><span class="token function">setAppStartingWindow</span><span class="token punctuation">(</span>                appToken<span class="token punctuation">,</span> packageName<span class="token punctuation">,</span> theme<span class="token punctuation">,</span> compatInfo<span class="token punctuation">,</span> nonLocalizedLabel<span class="token punctuation">,</span> labelRes<span class="token punctuation">,</span> icon<span class="token punctuation">,</span>                logo<span class="token punctuation">,</span> windowFlags<span class="token punctuation">,</span> prev <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> prev<span class="token punctuation">.</span>appToken <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> createIfNeeded<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>shown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mStartingWindowState <span class="token operator">=</span> <span class="token constant">STARTING_WINDOW_SHOWN</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>WindowManagerService 会对当前 Activity 的token和主题进行判断。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//WindowManagerService</span> <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">setAppStartingWindow</span><span class="token punctuation">(</span><span class="token class-name">IBinder</span> token<span class="token punctuation">,</span> <span class="token class-name">String</span> pkg<span class="token punctuation">,</span>            <span class="token keyword">int</span> theme<span class="token punctuation">,</span> <span class="token class-name">CompatibilityInfo</span> compatInfo<span class="token punctuation">,</span>            <span class="token class-name">CharSequence</span> nonLocalizedLabel<span class="token punctuation">,</span> <span class="token keyword">int</span> labelRes<span class="token punctuation">,</span> <span class="token keyword">int</span> icon<span class="token punctuation">,</span> <span class="token keyword">int</span> logo<span class="token punctuation">,</span>            <span class="token keyword">int</span> windowFlags<span class="token punctuation">,</span> <span class="token class-name">IBinder</span> transferFrom<span class="token punctuation">,</span> <span class="token keyword">boolean</span> createIfNeeded<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>mWindowMap<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//1. 启动窗口也是需要token的</span>            <span class="token class-name">AppWindowToken</span> wtoken <span class="token operator">=</span> <span class="token function">findAppWindowToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2. 如果已经设置过启动窗口了，不继续处理</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>wtoken<span class="token punctuation">.</span>startingData <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// If this is a translucent window, then don't</span>            <span class="token comment">// show a starting window -- the current effect (a full-screen</span>            <span class="token comment">// opaque starting window that fades away to the real contents</span>            <span class="token comment">// when it is ready) does not work for this.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>theme <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">AttributeCache<span class="token punctuation">.</span>Entry</span> ent <span class="token operator">=</span> <span class="token class-name">AttributeCache</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> theme<span class="token punctuation">,</span>                        <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>internal<span class="token punctuation">.</span></span>R</span><span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>Window<span class="token punctuation">,</span> mCurrentUserId<span class="token punctuation">)</span><span class="token punctuation">;</span>                                       <span class="token comment">//3. 一堆代码对主题判断，不符合要求则不显示启动窗口（如透明主题）</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>windowIsTranslucent<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>windowIsFloating <span class="token operator">||</span> windowDisableStarting<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>``````            <span class="token punctuation">}</span><span class="token comment">//4. 创建StartingData，并且通过Handler发送消息</span>            wtoken<span class="token punctuation">.</span>startingData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StartingData</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> theme<span class="token punctuation">,</span> compatInfo<span class="token punctuation">,</span> nonLocalizedLabel<span class="token punctuation">,</span>                    labelRes<span class="token punctuation">,</span> icon<span class="token punctuation">,</span> logo<span class="token punctuation">,</span> windowFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Message</span> m <span class="token operator">=</span> mH<span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span><span class="token class-name">H</span><span class="token punctuation">.</span><span class="token constant">ADD_STARTING</span><span class="token punctuation">,</span> wtoken<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Note: we really want to do sendMessageAtFrontOfQueue() because we</span>            <span class="token comment">// want to process the message ASAP, before any other queued</span>            <span class="token comment">// messages.</span>            mH<span class="token punctuation">.</span><span class="token function">sendMessageAtFrontOfQueue</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>启动窗口也需要和 Activity 拥有同样令牌 token ，虽然启动窗口可能是白屏，或者一张图片，但是仍然需要走绘制流程已经通过WMS显示窗口。</li><li>StartingData对象用来表示启动窗口的相关数据，描述了启动窗口的视图信息。</li><li>如果当前 Activity 是透明主题或者是浮动窗口等，那么就不需要启动窗口来过渡启动过程，所以在上面视觉优化中的设置透明主题就没有显示白色的启动窗口。</li><li>显示启动窗口也是一件心急火燎的事情，WMS的内部类H (handler) 处于主线程处理消息，所以需要将当前Message放置队列头部。</li></ol><p><strong>为什么需要通过 Handler 发送消息 ？</strong></p><p>你可以在各大服务Service中见到 Handler 的身影，并且它们可能都有一个很吊的命名 <code>H</code> ，因为可能调用这个服务的某个执行方法处于子线程中，所以 Handler 的职责就是将它们切换到主线程中，并且也可以统一管理调度。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//WindowManagerService --&gt; H </span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token constant">ADD_STARTING</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token keyword">final</span> <span class="token class-name">AppWindowToken</span> wtoken <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AppWindowToken</span><span class="token punctuation">)</span>msg<span class="token punctuation">.</span>obj<span class="token punctuation">;</span>                    <span class="token keyword">final</span> <span class="token class-name">StartingData</span> sd <span class="token operator">=</span> wtoken<span class="token punctuation">.</span>startingData<span class="token punctuation">;</span>                    <span class="token class-name">View</span> view <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token keyword">final</span> <span class="token class-name">Configuration</span> overrideConfig <span class="token operator">=</span> wtoken <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> wtoken<span class="token punctuation">.</span>mTask <span class="token operator">!=</span> <span class="token keyword">null</span>                                <span class="token operator">?</span> wtoken<span class="token punctuation">.</span>mTask<span class="token punctuation">.</span>mOverrideConfig <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                        view <span class="token operator">=</span> mPolicy<span class="token punctuation">.</span><span class="token function">addStartingWindow</span><span class="token punctuation">(</span>wtoken<span class="token punctuation">.</span>token<span class="token punctuation">,</span> sd<span class="token punctuation">.</span>pkg<span class="token punctuation">,</span> sd<span class="token punctuation">.</span>theme<span class="token punctuation">,</span>                            sd<span class="token punctuation">.</span>compatInfo<span class="token punctuation">,</span> sd<span class="token punctuation">.</span>nonLocalizedLabel<span class="token punctuation">,</span> sd<span class="token punctuation">.</span>labelRes<span class="token punctuation">,</span> sd<span class="token punctuation">.</span>icon<span class="token punctuation">,</span> sd<span class="token punctuation">.</span>logo<span class="token punctuation">,</span>                            sd<span class="token punctuation">.</span>windowFlags<span class="token punctuation">,</span> overrideConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">Slog</span><span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token constant">TAG_WM</span><span class="token punctuation">,</span> <span class="token string">"Exception when adding starting window"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    ``````                      <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在当前的 <code>handleMessage</code> 方法中，会处于主线程处理消息，拿到token和StartingData启动数据后，便通过 <code>mPolicy.addStartingWindow()</code> 方法将启动窗口添加到WIndow上。</p><p><code>mPolicy</code> 为 <code>PhoneWindowManager</code> ，控制着启动窗口的添加删除和修改。</p><p>在PhoneWindowManager对启动窗口进行配置，获取当前Activity设置的主题和资源信息，设置到启动窗口中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//PhoneWindowManager</span><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">View</span> <span class="token function">addStartingWindow</span><span class="token punctuation">(</span><span class="token class-name">IBinder</span> appToken<span class="token punctuation">,</span> <span class="token class-name">String</span> packageName<span class="token punctuation">,</span> <span class="token keyword">int</span> theme<span class="token punctuation">,</span>            <span class="token class-name">CompatibilityInfo</span> compatInfo<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> nonLocalizedLabel<span class="token punctuation">,</span> <span class="token keyword">int</span> labelRes<span class="token punctuation">,</span>            <span class="token keyword">int</span> icon<span class="token punctuation">,</span> <span class="token keyword">int</span> logo<span class="token punctuation">,</span> <span class="token keyword">int</span> windowFlags<span class="token punctuation">,</span> <span class="token class-name">Configuration</span> overrideConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token comment">//可以通过SHOW_STARTING_ANIMATIONS设置不显示启动窗口</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">SHOW_STARTING_ANIMATIONS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">WindowManager</span> wm <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">View</span> view <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">//1. 获取上下文Context和主题theme以及标题</span>            <span class="token class-name">Context</span> context <span class="token operator">=</span> mContext<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>theme <span class="token operator">!=</span> context<span class="token punctuation">.</span><span class="token function">getThemeResId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> labelRes <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    context <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createPackageContext</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    context<span class="token punctuation">.</span><span class="token function">setTheme</span><span class="token punctuation">(</span>theme<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageManager<span class="token punctuation">.</span>NameNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// Ignore</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token comment">//2. 创建PhoneWindow 用来显示</span>            <span class="token keyword">final</span> <span class="token class-name">PhoneWindow</span> win <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhoneWindow</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>            win<span class="token punctuation">.</span><span class="token function">setIsStartingWindow</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3. 设置当前窗口type和flag,源码注释中描述的很清晰...</span>            win<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>                <span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">.</span><span class="token constant">TYPE_APPLICATION_STARTING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Force the window flags: this is a fake window, so it is not really</span>            <span class="token comment">// touchable or focusable by the user.  We also add in the ALT_FOCUSABLE_IM</span>            <span class="token comment">// flag because we do know that the next window will take input</span>            <span class="token comment">// focus, so we want to get the IME window up on top of us right away.</span>            win<span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span>                windowFlags<span class="token operator">|</span>                <span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">.</span><span class="token constant">FLAG_NOT_TOUCHABLE</span><span class="token operator">|</span>                <span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">.</span><span class="token constant">FLAG_NOT_FOCUSABLE</span><span class="token operator">|</span>                <span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">.</span><span class="token constant">FLAG_ALT_FOCUSABLE_IM</span><span class="token punctuation">,</span>                windowFlags<span class="token operator">|</span>                <span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">.</span><span class="token constant">FLAG_NOT_TOUCHABLE</span><span class="token operator">|</span>                <span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">.</span><span class="token constant">FLAG_NOT_FOCUSABLE</span><span class="token operator">|</span>                <span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">.</span><span class="token constant">FLAG_ALT_FOCUSABLE_IM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            win<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">.</span><span class="token constant">MATCH_PARENT</span><span class="token punctuation">,</span>                    <span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">.</span><span class="token constant">MATCH_PARENT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>``````            view <span class="token operator">=</span> win<span class="token punctuation">.</span><span class="token function">getDecorView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4. WindowManager的绘制流程</span>            wm<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> view<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> view <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">WindowManager<span class="token punctuation">.</span>BadTokenException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// ignore</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// don't crash if something else bad happens, for example a</span>            <span class="token comment">// failure loading resources because we are loading from an app</span>            <span class="token comment">// on external storage that has been unmounted.</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> appToken <span class="token operator">+</span> <span class="token string">" failed creating starting window"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>如果theme和labelRes的值不为0，那么说明开发者指定了启动窗口的主题和标题，那么就需要从当前要启动的Activity中获取这些信息，并设置到启动窗口中。</li><li>和其它窗口一样，启动窗口也需要通过PhoneWindow来设置布局信息DecorView。所以在上面视觉优化中的设置闪屏图片主题的启动窗口显示的就是图片内容。</li><li>启动窗口和普通窗口的不同之处在于它是 fake window ，不需要触摸事件</li><li>最后通过WindowManger走View的绘制流程(measure-layout-draw)将启动窗口显示出来，最后会请求WindowManagerService为启动窗口添加一个WindowState对象，真正的将启动窗口显示给用户，并且可以对启动窗口进行管理。</li></ol>        <h1 id="UI渲染优化">          <a href="#UI渲染优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#UI渲染优化" class="headerlink" title="UI渲染优化"></a>UI渲染优化</h1>      <p>理解工作中常用的UI渲染性能优化及调试方法对于我们编写高质量代码也是很有帮助的</p>        <h2 id="CPU、GPU的职责">          <a href="#CPU、GPU的职责" class="heading-link"><i class="fas fa-link"></i></a><a href="#CPU、GPU的职责" class="headerlink" title="CPU、GPU的职责"></a>CPU、GPU的职责</h2>      <p>对于大多数手机的屏幕刷新频率是60hz，也就是如果在1000/60=16.67ms内没有把这一帧的任务执行完毕，就会发生丢帧的现象，丢帧是造成界面卡顿的直接原因，渲染操作通常依赖于两个核心组件：CPU与GPU。CPU负责包括Measure，Layout等计算操作，GPU负责Rasterization(栅格化)操作(所谓栅格化就是将矢量图形转换为位图的过程，手机上显示是按照一个个像素来显示的，栅格化再普通一些的说法就是将一个Button,TextView等组件拆分到一个个像素上去显示)。</p><p>UI渲染优化的目的就是减轻CPU,GPU的压力，除去不必要的操作，保证每帧16ms以内处理完所有的CPU与GPU的计算，绘制，渲染等等操作，使UI顺滑，流畅的展示出来。</p>        <h2 id="查找Overdraw">          <a href="#查找Overdraw" class="heading-link"><i class="fas fa-link"></i></a><a href="#查找Overdraw" class="headerlink" title="查找Overdraw"></a>查找Overdraw</h2>      <p>Overdraw(过度绘制)描述的是屏幕上的某个像素在同一帧的时间内被绘制了多次。在重叠的UI布局中，如果不可见的UI也在做绘制的操作或者后一个控件将前一个控件遮挡，会导致某些像素区域被绘制了多次，从而增加了CPU,GPU的压力。</p><p>那么如何找出布局中Overdraw的地方呢？很简单，一般手机里面开发者选项都有调试GPU过度绘制的开关，打开即可。</p><p>以小米4手机为例，依次找到<code>设置-&gt;更多设置-&gt;开发者选项-&gt;调试GPU过度绘制开关</code>，打开就可以了。</p><p>打开调试GPU过度绘制开关之后，再次回到自己开发的应用发现界面怎么多了一些花花绿绿的玩意，没错，不同的颜色代表过度绘制的程度，具体如下：</p><p><img src="https://images2018.cnblogs.com/blog/794139/201804/794139-20180420104948203-194071555.png"></p><p>蓝色，淡绿，淡红，深红代表了4种不同程度的Overdraw情况，1x,2x,3x,4x分别表示同一像素上同一帧的时间内被绘制了多次，1x就表示一次(最理想情况)，4x表示4次(最差的情况)，我们要做的就是尽量减少3x,4x的情况出现。</p><p>下面以一个简单demo来进一步说明一下，比如我们开发好一个界面，如下：</p><p><img src="https://images2018.cnblogs.com/blog/794139/201804/794139-20180426174522016-785166152.jpg"></p><p>很简单的功能，功能做完了，能不能做下优化呢？打开OverDraw功能，再次查看界面，如下：</p><p><img src="https://images2018.cnblogs.com/blog/794139/201804/794139-20180426175106185-12883163.jpg"></p><p>咦？怎么大部分都是浅绿色呢？也就是说同一像素上同一帧的时间内被绘制了2次，这是怎么回事？这时我们需要看下UI布局了，看哪些地方可以优化一下。</p><p>主界面布局如下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"xmlns:tools="http://schemas.android.com/tools"android:layout_width="match_parent"android:layout_height="match_parent"&gt;&lt;ListViewandroid:id="@+id/list_view"android:layout_width="match_parent"android:layout_height="match_parent"android:divider="#F1F1F1"android:dividerHeight="1dp"android:background="@android:color/white"android:scrollbars="vertical"&gt;&lt;/ListView&gt;&lt;/RelativeLayout&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ListView每个条目布局如下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"android:layout_width="match_parent"android:layout_height="52dp"android:background="@drawable/ts_account_list_selector"&gt;&lt;TextViewandroid:id="@+id/ts_item_has_login_account"android:layout_width="wrap_content"android:layout_height="wrap_content"android:layout_marginLeft="10dp"android:layout_marginTop="4dp"android:gravity="center"android:text="12345678999"android:textColor="@android:color/black"android:textSize="16sp" /&gt;&lt;LinearLayoutandroid:layout_width="wrap_content"android:layout_height="20dp"android:layout_alignParentBottom="true"android:layout_marginBottom="3dp"android:layout_marginLeft="10dp"android:gravity="center_vertical" &gt;&lt;ImageViewandroid:id="@+id/ts_item_time_clock_image"android:layout_width="12dp"android:layout_height="12dp"android:src="@mipmap/ts_login_clock" /&gt;&lt;TextViewandroid:id="@+id/ts_item_last_login_time"android:layout_width="wrap_content"android:layout_height="wrap_content"android:layout_marginLeft="5dp"android:layout_toRightOf="@id/ts_item_time_clock_image"android:text="上次登录"android:textColor="@android:color/darker_gray"android:textSize="11sp" /&gt;&lt;TextViewandroid:id="@+id/ts_item_login_time"android:layout_width="wrap_content"android:layout_height="wrap_content"android:layout_marginLeft="5dp"android:layout_toRightOf="@id/ts_item_last_login_time"android:text="59分钟前"android:textColor="@android:color/darker_gray"android:textSize="11sp" /&gt;&lt;/LinearLayout&gt;&lt;TextViewandroid:id="@+id/ts_item_always_account_image_tips"android:layout_width="wrap_content"android:layout_height="13dp"android:layout_alignParentRight="true"android:layout_marginTop="2dp"android:background="@mipmap/ts_always_account_bg"android:gravity="center"android:text="常用"android:textColor="@android:color/white"android:textSize="9sp" /&gt;&lt;ImageViewandroid:id="@+id/ts_item_delete_account_image"android:layout_width="12dp"android:layout_height="12dp"android:layout_alignParentRight="true"android:layout_marginTop="2dp"android:layout_marginRight="13dp"android:layout_centerVertical="true"android:src="@mipmap/ts_close" /&gt;&lt;/RelativeLayout&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现哪里有问题了吗？问题在于ListView多余设置了背景：<code>android:background="@android:color/white"</code>，设置此背景对于我们这个需求根本就没有用，显示不出来并且增加GPU额外压力，去掉ListView背景之后再次观察如下：</p><p><img src="https://images2018.cnblogs.com/blog/794139/201804/794139-20180427104105612-986672707.jpg"></p><p>渲染性能提升了一个档次，在实际工作中情况会复杂很多，为了实现一个效果会不得不牺牲性能，这就需要自己团队权衡了。</p>        <h2 id="clipRect解决自定义View的OverDraw">          <a href="#clipRect解决自定义View的OverDraw" class="heading-link"><i class="fas fa-link"></i></a><a href="#clipRect解决自定义View的OverDraw" class="headerlink" title="clipRect解决自定义View的OverDraw"></a>clipRect解决自定义View的OverDraw</h2>      <p>平时写自定义View的时候有时会重写onDraw方法，但是Android系统是无法检测onDraw里面具体会执行什么操作，从而系统无法为我们做一些优化。这样对编程人员要求就高了，如果我们自己写的View有大量重叠的地方就造成了CPU,GPU资源的浪费，但是我们可以通过<code>canvas.clipRect()</code>来帮助系统识别那些可见的区域。这个方法可以指定一块矩形区域，只有在这个区域内才会被绘制，其他的区域会被忽视，下面我们通过谷歌提供的一个小demo进一步说明。实现效果如下：</p><p><img src="https://images2018.cnblogs.com/blog/794139/201804/794139-20180427134333601-937366791.png"></p><p>主要就是卡片重叠效果，优化前代码实现如下：</p><p>DroidCard类封装要绘制的一个个卡片的信息：</p><pre class="line-numbers language-none"><code class="language-none">public class DroidCard {public int x;//左侧绘制起点public int width;public int height;public Bitmap bitmap;public DroidCard(Resources res,int resId,int x){this.bitmap = BitmapFactory.decodeResource(res,resId);this.x = x;this.width = this.bitmap.getWidth();this.height = this.bitmap.getHeight();}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DroidCardsView为真正的自定义View:</p><pre class="line-numbers language-none"><code class="language-none">public class DroidCardsView extends View {//图片与图片之间的间距private int mCardSpacing = 150;//图片与左侧距离的记录private int mCardLeft = 10;private List&lt;DroidCard&gt; mDroidCards = new ArrayList&lt;DroidCard&gt;();private Paint paint = new Paint();public DroidCardsView(Context context) {super(context);initCards();}public DroidCardsView(Context context, AttributeSet attrs) {super(context, attrs);initCards();}/*** 初始化卡片集合*/protected void initCards(){Resources res = getResources();mDroidCards.add(new DroidCard(res,R.drawable.alex,mCardLeft));mCardLeft+=mCardSpacing;mDroidCards.add(new DroidCard(res,R.drawable.claire,mCardLeft));mCardLeft+=mCardSpacing;mDroidCards.add(new DroidCard(res,R.drawable.kathryn,mCardLeft));}@Overrideprotected void onDraw(Canvas canvas) {super.onDraw(canvas);for (DroidCard c : mDroidCards){drawDroidCard(canvas, c);}invalidate();}/*** 绘制DroidCard*/private void drawDroidCard(Canvas canvas, DroidCard c) {canvas.drawBitmap(c.bitmap,c.x,0f,paint);}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码不是重点，不过也不难，自行查看就可以了。我们打开overdraw开关，效果如下：</p><p><img src="https://images2018.cnblogs.com/blog/794139/201804/794139-20180427135142525-619373111.png"></p><p>淡红色区域明显被绘制了三次（三张图片重合的地方），其实下面的图片完全没必要完全绘制，只需要绘制三分之一即可，接下来我们就需要对其优化，保证最下面两张图片只需要回执其三分之一最上面图片完全绘制出来就可。</p><p>DroidCardsView代码优化为：</p><pre class="line-numbers language-none"><code class="language-none">public class DroidCardsView extends View {//图片与图片之间的间距private int mCardSpacing = 150;//图片与左侧距离的记录private int mCardLeft = 10;private List&lt;DroidCard&gt; mDroidCards = new ArrayList&lt;DroidCard&gt;();private Paint paint = new Paint();public DroidCardsView(Context context) {super(context);initCards();}public DroidCardsView(Context context, AttributeSet attrs) {super(context, attrs);initCards();}/*** 初始化卡片集合*/protected void initCards(){Resources res = getResources();mDroidCards.add(new DroidCard(res, R.drawable.alex,mCardLeft));mCardLeft+=mCardSpacing;mDroidCards.add(new DroidCard(res, R.drawable.claire,mCardLeft));mCardLeft+=mCardSpacing;mDroidCards.add(new DroidCard(res, R.drawable.kathryn,mCardLeft));}@Overrideprotected void onDraw(Canvas canvas) {super.onDraw(canvas);for (int i = 0; i &lt; mDroidCards.size() - 1; i++){drawDroidCard(canvas, mDroidCards,i);}drawLastDroidCard(canvas,mDroidCards.get(mDroidCards.size()-1));invalidate();}/*** 绘制最后一个DroidCard* @param canvas* @param c*/private void drawLastDroidCard(Canvas canvas,DroidCard c) {canvas.drawBitmap(c.bitmap,c.x,0f,paint);}/*** 绘制DroidCard* @param canvas* @param mDroidCards* @param i*/private void drawDroidCard(Canvas canvas,List&lt;DroidCard&gt; mDroidCards,int i) {DroidCard c = mDroidCards.get(i);canvas.save();canvas.clipRect((float)c.x,0f,(float)(mDroidCards.get(i+1).x),(float)c.height);canvas.drawBitmap(c.bitmap,c.x,0f,paint);canvas.restore();}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要就是使用Canvas的clipRect方法，绘制之前裁剪出一个区域，这样绘制的时候只在这区域内绘制，超出部分不会绘制出来。</p><p>重新执行程序，效果如下：</p><p><img src="https://images2018.cnblogs.com/blog/794139/201804/794139-20180427140830588-1561624230.png"></p><p>处理后性能就提升了一丝丝，此外我们还可以使用canvas.quickReject方法来判断是否没和某个矩形相交，从而跳过那些非矩形区域内的绘制操作。</p>        <h2 id="Hierarchy-Viewer的使用">          <a href="#Hierarchy-Viewer的使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#Hierarchy-Viewer的使用" class="headerlink" title="Hierarchy Viewer的使用"></a>Hierarchy Viewer的使用</h2>      <p>Hierarchy Viewer可以很直观的呈现布局的层次关系。我们可以通过红，黄，绿三种不同的颜色来区分布局的Measure，Layout，Executive的相对性能表现如何</p><p>提升布局性能的关键点是尽量保持布局层级的扁平化，避免出现重复的嵌套布局。如果我们写的布局层级比较深会严重增加CPU的负担，造成性能的严重卡顿，关于Hierarchy Viewer的使用举例这里就不列举了。</p>        <h2 id="内存抖动现象">          <a href="#内存抖动现象" class="heading-link"><i class="fas fa-link"></i></a><a href="#内存抖动现象" class="headerlink" title="内存抖动现象"></a>内存抖动现象</h2>      <p>在我们优化过view的树形结构和overdraw之后，可能还是感觉自己的app有卡顿和丢帧，或者滑动慢：卡顿还是存在。这时我们就要查看一下是否存在内存抖动情况了</p><p>Android有自动管理内存的机制，但是对内存的不恰当使用仍然容易引起严重的性能问题。在同一帧里面创建过多的对象是件需要特别引起注意的事情，在同一帧里创建大量对象可能引起GC的不停操作，执行GC操作的时候，所有线程的任何操作都会需要暂停，直到GC操作完成。大量不停的GC操作则会显著占用帧间隔时间。</p><p>如果在帧间隔时间里面做了过多的GC操作，那么自然其他类似计算，渲染等操作的可用时间就变得少了，严重时可能引起卡顿：</p><p><img src="https://images2018.cnblogs.com/blog/794139/201804/794139-20180427152217272-597281776.png"></p><p>导致GC频繁操作有两个主要原因：</p><ol><li>内存抖动，所谓内存抖动就是短时间产生大量对象又在短时间内马上释放。</li><li>短时间产生大量对象超出阈值，内存不够，同样会触发GC操作。</li></ol><p>观察内存抖动我们可以借助android studio中的工具，3.0以前可以使用android monitor,3.0以后被替换为android Profiler。</p><p>如果工具里面查看到短时间发生了多次内存的涨跌，这意味着很有可能发生了内存抖动，如图：</p><p><img src="https://images2018.cnblogs.com/blog/794139/201804/794139-20180427153938668-1405877845.png"></p><p>为了避免发生内存抖动，我们需要避免在for循环里面分配对象占用内存，需要尝试把对象的创建移到循环体之外，自定义View中的onDraw方法也需要引起注意，每次屏幕发生绘制以及动画执行过程中，onDraw方法都会被调用到，避免在onDraw方法里面执行复杂的操作，避免创建对象。对于那些无法避免需要创建对象的情况，我们可以考虑对象池模型，通过对象池来解决频繁创建与销毁的问题，但是这里需要注意结束使用之后，需要手动释放对象池中的对象。</p>        <h1 id="崩溃优化">          <a href="#崩溃优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#崩溃优化" class="headerlink" title="崩溃优化"></a>崩溃优化</h1>              <h2 id="崩溃">          <a href="#崩溃" class="heading-link"><i class="fas fa-link"></i></a><a href="#崩溃" class="headerlink" title="崩溃"></a>崩溃</h2>      <p>崩溃率是衡量一个应用质量高低的基本指标，那么，该怎样客观地衡量崩溃这个指标，以及又该如何看待和崩溃相关的稳定性。</p><p>Android 的两种崩溃：</p><ol><li>Java 崩溃</li><li>Native 崩溃</li></ol><p>简单来说，Java 崩溃就是在 Java 代码中，出现了未捕获异常，导致程序异常退出。那 Native 崩溃一般都是因为在 Native 代码中访问非法地址，也可能是地址对齐出现了问题，或者发生了程序主动 Abort，这些都会产生相应的 Signal 信号，导致程序异常退出。</p>        <h3 id="崩溃的收集">          <a href="#崩溃的收集" class="heading-link"><i class="fas fa-link"></i></a><a href="#崩溃的收集" class="headerlink" title="崩溃的收集"></a>崩溃的收集</h3>      <p>“崩溃”就是程序出现异常，而一个产品的崩溃率，跟我们如何捕获、处理这些异常有比较大的关系。对于很多中小型公司来说，可以选择一些第三方的服务。目前各种平台也是百花齐放，包括阿里的友盟、腾讯的Bugly、网易云捕、Google 的 Firebase 等等。要懂得借力！</p>        <h3 id="ANR">          <a href="#ANR" class="heading-link"><i class="fas fa-link"></i></a><a href="#ANR" class="headerlink" title="ANR"></a>ANR</h3>      <p>崩溃率是不是就能完全等价于应用的稳定性呢？答案是肯定不行。处理了崩溃，我们还会经常遇到 ANR（Application Not Responding，程序没有响应）这个问题。</p><p>出现 ANR 的时候，系统还会弹出对话框打断用户的操作，这是用户非常不能忍受的。</p><blockquote><p>ANR处理方法：<br>使用 FileObserver 监听 /data/anr/traces.txt 的变化。非常不幸的是，很多高版本的 ROM，已经没有读取这个文件的权限了。这个时候你可能只能思考其他路径，海外可以使用 Google Play 服务，而国内微信利用Hardcoder框架（HC 框架是一套独立于安卓系统实现的通信框架，它让 App 和厂商 ROM 能够实时“对话”了，目标就是充分调度系统资源来提升 App 的运行速度和画质，切实提高大家的手机使用体验）向厂商获取了更大的权限。也可以将手机 ROOT 掉，然后取得 traces.txt 文件。</p></blockquote>        <h3 id="应用退出">          <a href="#应用退出" class="heading-link"><i class="fas fa-link"></i></a><a href="#应用退出" class="headerlink" title="应用退出"></a>应用退出</h3>      <p>除了常见的崩溃，还有一些会导致应用异常退出的情况，例如：</p><ol><li>主动自杀。Process.killProcess()、exit() 等</li><li>崩溃。出现了 Java 或 Native 崩溃</li><li>系统重启。系统出现异常、断电、用户主动重启等，我们可以通过比较应用开机运行时间是否比之前记录的值更小</li><li>被系统杀死。被 low memory killer 杀掉、从系统的任务管理器中划掉等</li><li>ANR</li></ol><p>我们可以在应用启动的时候设定一个标志，在主动自杀或崩溃后更新标志，这样下次启动时通过检测这个标志就能确认运行期间是否发生过异常退出。对应上面的五种退出场景，我们排除掉主动自杀和崩溃（崩溃会单独的统计）这两种场景，希望可以监控到剩下三种的异常退出，理论上这个异常捕获机制是可以达到 100% 覆盖的。</p><p>通过这个异常退出的检测，可以反映如 ANR、low memory killer、系统强杀、死机、断电等其他无法正常捕获到的问题。当然异常率会存在一些误报，比如用户从系统的任务管理器中划掉应用。对于线上的大数据来说，还是可以帮助我们发现代码中的一些隐藏问题。</p><p>根据应用的前后台状态，我们可以把异常退出分为前台异常退出和后台异常退出。“被系统杀死” 是后台异常退出的主要原因，当然我们会更关注前台的异常退出的情况，这会跟 ANR、OOM 等异常情况有更大的关联。</p>        <h2 id="崩溃处理">          <a href="#崩溃处理" class="heading-link"><i class="fas fa-link"></i></a><a href="#崩溃处理" class="headerlink" title="崩溃处理"></a>崩溃处理</h2>      <p>我们每天工作也会遇到各种各样的疑难问题，“崩溃”就是其中比较常见的一种问题。解决问题跟破案一样需要经验，我们分析的问题越多越熟练，定位问题就会越快越准。</p><p>当然这里也有很多套路，比如：</p><blockquote><ol><li>对于 “案发现场” 我们应该留意哪些信息？</li><li>怎样找到更多的 “证人” 和 “线索” ？ </li><li>“侦查案件” 的一般流程是什么？</li><li>对不同类型的 “案件” 分别应该使用什么样的调查方式？</li></ol></blockquote><p>要相信 “真相永远只有一个”，崩溃也并不可怕。</p>        <h3 id="崩溃现场">          <a href="#崩溃现场" class="heading-link"><i class="fas fa-link"></i></a><a href="#崩溃现场" class="headerlink" title="崩溃现场"></a>崩溃现场</h3>      <p>崩溃现场是我们的“第一案发现场”，它保留着很多有价值的线索。现在可以挖掘到的信息越多，下一步分析的方向就越清晰，而不是去靠盲目猜测。</p><p><strong>崩溃信息</strong></p><p>从崩溃的基本信息，我们可以对崩溃有初步的判断。进程名、线程名。崩溃的进程是前台进程还是后台进程，崩溃是不是发生在 UI 线程。</p><p>崩溃堆栈和类型。崩溃是属于 Java 崩溃、Native 崩溃，还是 ANR，对于不同类型的崩溃关注的点也不太一样。特别需要看崩溃堆栈的栈顶，看具体崩溃在系统的代码，还是 APP 代码里面。</p><p><strong>关键字：FATAL</strong></p><pre class="line-numbers language-none"><code class="language-none">FATAL EXCEPTION: mainProcess: com.cchip.csmart, PID: 27456java.lang.NullPointerException: Attempt to invoke virtual method 'void android.widget.TextView.setText(int)' on a null object referenceat com.cchip.alicsmart.activity.SplashActivity$1.handleMessage(SplashActivity.java:67)at android.os.Handler.dispatchMessage(Handler.java:102)at android.os.Looper.loop(Looper.java:179)at android.app.ActivityThread.main(ActivityThread.java:5672)at java.lang.reflect.Method.invoke(Native Method)at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:784)at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:674)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>系统信息</strong></p><p>系统的信息有时候会带有一些关键的线索，对我们解决问题有非常大的帮助。</p><p>Logcat。这里包括应用、系统的运行日志。由于系统权限问题，获取到的 Logcat 可能只包含与当前 APP 相关的。其中系统的 event logcat 会记录 APP 运行的一些基本情况，记录在文件 /system/etc/event-log-tags 中。</p><pre class="line-numbers language-none"><code class="language-none">//system logcat:10-25 17:13:47.788 21430 21430 D dalvikvm: Trying to load lib ...//event logcat:10-25 17:13:47.788 21430 21430 I am_on_resume_called: 生命周期10-25 17:13:47.788 21430 21430 I am_low_memory: 系统内存不足10-25 17:13:47.788 21430 21430 I am_destroy_activity: 销毁 Activty10-25 17:13:47.888 21430 21430 I am_anr: ANR 以及原因10-25 17:13:47.888 21430 21430 I am_kill: APP 被杀以及原因<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>机型、系统、厂商、CPU、ABI、Linux 版本等。通过采集多达几十个维度，这对寻找共性问题会很有帮助。</p><p><strong>内存信息</strong></p><p>OOM、ANR、虚拟内存耗尽等，很多崩溃都跟内存有直接关系。如果把用户的手机内存分为“2GB 以下”和“2GB 以上”两个区，就会发现“2GB 以下”用户的崩溃率是“2GB 以上”用户的几倍。</p><p>系统剩余内存。关于系统内存状态，可以直接读取文件 /proc/meminfo。当系统可用内存很小（低于 MemTotal 的 10%）时，OOM、大量 GC、系统频繁自杀拉起等问题都非常容易出现。</p><p>应用使用内存。包括 Java 内存、RSS（Resident Set Size）、PSS（Proportional Set Size），我们可以得出应用本身内存的占用大小和分布。PSS 和 RSS 通过 /proc/self/smap 计算，可以进一步得到例如 apk、dex、so 等更加详细的分类统计。</p><p>虚拟内存。虚拟内存可以通过 /proc/self/status 得到，通过 /proc/self/maps 文件可以得到具体的分布情况。有时候我们一般不太重视虚拟内存，但是很多类似 OOM、tgkill 等问题都是虚拟内存不足导致的。</p><pre class="line-numbers language-none"><code class="language-none">Name: com.xmamiga.name // 进程名FDSize: 800 // 当前进程申请的文件句柄个数VmPeak: 3004628 kB // 当前进程的虚拟内存峰值大小VmSize: 2997032 kB // 当前进程的虚拟内存大小Threads: 600 // 当前进程包含的线程个数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般来说，对于 32 位进程，如果是 32 位的 CPU，虚拟内存达到 3GB 就可能会引起内存申请失败的问题。如果是 64 位的 CPU，虚拟内存一般在 3～4GB 之间。当然如果我们支持 64 位进程，虚拟内存就不会成为问题。Google Play 要求 2019 年 8 月一定要支持 64 位，在国内虽然支持 64 位的设备已经在 90% 以上了，但是商店都不支持区分 CPU 架构类型发布，普及起来需要更长的时间。</p><p><strong>资源信息</strong></p><p>有的时候会发现应用堆内存和设备内存都非常充足，还是会出现内存分配失败的情况，这跟资源泄漏可能有比较大的关系。</p><p>文件句柄 fd。文件句柄的限制可以通过 /proc/self/limits 获得，一般单个进程允许打开的最大文件句柄个数为 1024。但是如果文件句柄超过 800 个就比较危险，需要将所有的 fd 以及对应的文件名输出到日志中，进一步排查是否出现了有文件或者线程的泄漏。</p><pre class="line-numbers language-none"><code class="language-none">opened files count 812:0 -&gt; /dev/null1 -&gt; /dev/log/main42 -&gt; /dev/binder3 -&gt; /data/data/com.xmamiga.sample/files/test.conf...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>线程数。当前线程数大小可以通过上面的 status 文件得到，一个线程可能就占 2MB 的虚拟内存，过多的线程会对虚拟内存和文件句柄带来压力。根据我的经验来说，如果线程数超过 400 个就比较危险。需要将所有的线程 id 以及对应的线程名输出到日志中，进一步排查是否出现了线程相关的问题。</p><pre class="line-numbers language-none"><code class="language-none">threads count 412:1820 com.xmamiga.crashsdk1844 ReferenceQueueD1869 FinalizerDaemon...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JNI。使用 JNI 时，如果不注意很容易出现引用失效、引用爆表等一些崩溃。</p><p><strong>应用信息</strong></p><p>除了系统，其实我们的应用更懂自己，可以留下很多相关的信息。崩溃场景。崩溃发生在哪个 Activity 或 Fragment，发生在哪个业务中; 关键操作路径，不同于开发过程详细的打点日志，我们可以记录关键的用户操作路径，这对我们复现崩溃会有比较大的帮助。其他自定义信息。不同的应用关心的重点可能不太一样。</p>        <h3 id="崩溃分析">          <a href="#崩溃分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#崩溃分析" class="headerlink" title="崩溃分析"></a>崩溃分析</h3>      <p>有了这么多现场信息之后，就可以开始真正的“破案”之旅了。绝大部分的 “案件” 只要肯花功夫，最后都能真相大白。不要畏惧问题，经过耐心和细心地分析，总能敏锐地发现一些异常或关键点，并且还要敢于怀疑和验证。</p><p><strong>第一步：确定重点</strong></p><p>确认和分析重点，关键在于终过日志中找到重要的信息，对问题有一个大致判断。一般来说，我建议在确定重点这一步可以关注以下几点。</p><blockquote><ol><li><p>确认严重程度。解决崩溃也要看性价比，我们优先解决 Top 崩溃或者对业务有重大影响，例如主要功能的崩溃。不要花几天去解决了一个边角的崩溃，有可能下个版本就把功能删除了。</p></li><li><p>崩溃基本信息。确定崩溃的类型以及异常描述，对崩溃有大致的判断。</p><p>一般来说，大部分的简单崩溃经过这一步已经可以得到结论。</p></li></ol></blockquote><p>Java 崩溃。Java 崩溃类型比较明显，比如 NullPointerException 是空指针，OutOfMemoryError 是资源不足，这个时候需要去进一步查看日志中的 “内存信息”和“资源信息”。</p><p>Native 崩溃。需要观察 signal、code、fault addr 等内容，以及崩溃时 Java 的堆栈。关于各 signal 含义的介绍，你可以查看崩溃信号介绍。比较常见的是有 SIGSEGV 和 SIGABRT，前者一般是由于空指针、非法指针造成，后者主要因为 ANR 和调用 abort() 退出所导致。</p><p>ANR。先看看主线程的堆栈，是否是因为锁等待导致。接着看看 ANR 日志中 iowait、CPU、GC、system server 等信息，进一步确定是 I/O 问题，或是 CPU 竞争问题，还是由于大量 GC 导致卡死。</p><p><strong>第二步：查找共性</strong></p><p>如果使用了上面的方法还是不能有效定位问题，我们可以尝试查找这类崩溃有没有什么共性。找到了共性，也就可以进一步找到差异，离解决问题也就更进一步。</p><p>机型、系统、ROM、厂商、ABI，这些采集到的系统信息都可以作为维度聚合，共性问题例如是不是只出现在 x86 的手机，是不是只有三星这款机型，是不是只在 Android 8.0 的系统上。应用信息也可以作为维度来聚合，比如正在打开的链接、正在播放的视频、国家、地区等。</p><p>找到了共性，可以对你下一步复现问题有更明确的指引。</p><p><strong>第三步：尝试复现</strong></p><p>如果我们已经大概知道了崩溃的原因，为了进一步确认更多信息，就需要尝试复现崩溃。如果我们对崩溃完全没有头绪，也希望通过用户操作路径来尝试重现，然后再去分析崩溃原因。</p><p>“只要能本地复现，我就能解”，相信这是很多开发跟测试说过的话。有这样的底气主要是因为在稳定的复现路径上面，我们可以采用增加日志或使用 Debugger、GDB 等各种各样的手段或工具做进一步分析。</p><p>我们可能会遇到了各种各样的奇葩问题。比如某个厂商改了底层实现、新的 Android 系统实现有所更改，都需要去 Google、翻源码，有时候还需要去抠厂商的 ROM 或手动刷 ROM。很多疑难问题需要我们耐得住寂寞，反复猜测、反复发灰度、反复验证。–但这种问题还是要看问题的严重程序，不可捡了芝麻丢了西瓜。</p>        <h3 id="系统崩溃">          <a href="#系统崩溃" class="heading-link"><i class="fas fa-link"></i></a><a href="#系统崩溃" class="headerlink" title="系统崩溃"></a>系统崩溃</h3>      <p>系统崩溃常常令我们感到非常无助，它可能是某个 Android 版本的 Bug，也可能是某个厂商修改 ROM 导致。这种情况下的崩溃堆栈可能完全没有我们自己的代码，很难直接定位问题。能做的有：</p><blockquote><ol><li><p>查找可能的原因。通过上面的共性归类，我们先看看是某个系统版本的问题，还是某个厂商特定 ROM 的问题。虽然崩溃日志可能没有我们自己的代码，但通过操作路径和日志，可以找到一些怀疑的点。</p></li><li><p>尝试规避。查看可疑的代码调用，是否使用了不恰当的 API，是否可以更换其他的实现方式规避。</p></li><li><p>Hook 解决。这里分为 Java Hook 和 Native Hook。它可能只出现在 Android 7.0 的系统中，参考 Android 8.0 的做法，直接 catch 住这个异常。</p><p>如果做到了上面说的这些，以上大部分的崩溃应该都能解决或者规避，大部分的系统崩溃也是如此。当然总有一些疑难问题需要依赖到用户的真实环境，这些需要具备类似动态跟踪和调试的能力。</p></li></ol></blockquote><p>崩溃攻防是一个长期的过程，我们尽可能地提前预防崩溃的发生，将它消灭在萌芽阶段。作为技术人员，我们不应该盲目追求崩溃率这一个数字，应该以用户体验为先，如果强行去掩盖一些问题往往更加适得其反。我们不应该随意使用 try catch 去隐藏真正的问题，要从源头入手，了解崩溃的本质原因，保证后面的运行流程。在解决崩溃的过程，也要做到由点到面，不能只针对这个崩溃去解决，而应该要考虑这一类崩溃怎么解决和预防。</p>        <h1 id="内存优化">          <a href="#内存优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#内存优化" class="headerlink" title="内存优化"></a>内存优化</h1>      <p>在内存管理上，JVM拥有垃圾内存回收的机制，自身会在虚拟机层面自动分配和释放内存，因此不需要像使用C/C++一样在代码中分配和释放某一块内存。Android系统的内存管理类似于JVM，通过new关键字来为对象分配内存，内存的释放由GC来回收。并且Android系统在内存管理上有一个Generational Heap Memory模型，当内存达到某一个阈值时，系统会根据不同的规则自动释放可以释放的内存。即便有了内存管理机制，但是，如果不合理地使用内存，也会造成一系列的性能问题，比如内存泄漏、内存抖动、短时间内分配大量的内存对象等等。</p>        <h2 id="优化工具">          <a href="#优化工具" class="heading-link"><i class="fas fa-link"></i></a><a href="#优化工具" class="headerlink" title="优化工具"></a>优化工具</h2>              <h3 id="Memory-Profiler">          <a href="#Memory-Profiler" class="heading-link"><i class="fas fa-link"></i></a><a href="#Memory-Profiler" class="headerlink" title="Memory Profiler"></a>Memory Profiler</h3>      <p>Memory profiler是Android Studio自带的一个内存检测工具，通过实时图表的方式展示内存信息，具有可以识别内存泄露，内存抖动等现象，并可以将捕获到的内存信息进行堆转储、强制GC以及跟踪内存分配的能力。</p><p>Android Studio打开Profiler工具</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/5/170ab3f47365d43d"></p><p>观察Memory曲线，比较平缓即为内存分配正常，如果出现大的波动有可能发生了内存泄露。</p><blockquote><p>GC：可手动触发GC</p><p>Dump：Dump出当前Java Heap信息</p><p>Record：记录一段时间内的内存信息</p></blockquote><p><strong>点击Dump后</strong></p><p><img src="https://user-gold-cdn.xitu.io/2020/3/5/170ab40e18dca203"></p><p>可查看当前内存分配对象</p><blockquote><p>Allocations：分配对象个数</p><p>Native Size：Native内存大小</p><p>Shallow Size：对象本身占用内存的大小，不包含其引用的对象</p></blockquote><blockquote><p>Retained Size: 对象的Retained Size = 对象本身的Shallow Size + 对象能直接或间接访问到的对象的Shallow Size，也就是说 Retained Size 就是该对象被 Gc 之后所能回收内存的总和</p></blockquote><p>点击Bitmap Preview可以进行预览图片，对查看图片占用内存情况比较有帮助</p><p><strong>点击Record后</strong></p><p><img src="https://user-gold-cdn.xitu.io/2020/3/5/170ab3f5189df885"></p><p>可以记录一段时间内内存分配情况，可查看各对象分配大小及调用栈、对象生成位置</p>        <h3 id="Memory-Analyzer（MAT）">          <a href="#Memory-Analyzer（MAT）" class="heading-link"><i class="fas fa-link"></i></a><a href="#Memory-Analyzer（MAT）" class="headerlink" title="Memory Analyzer（MAT）"></a>Memory Analyzer（MAT）</h3>      <p>比Memory Profiler更强大的Java Heap分析工具，可以准确查找内存泄露以及内存占用情况，还可以生成整体报告，用来分析问题等。</p><p>MAT一般用来线下结合Memory Profiler分析问题使用，Memory Profiler可以直观看出内存抖动，然后生成的hdprof文件，通过MAT深入分析及定位内存泄露问题。</p>        <h3 id="LeakCannary">          <a href="#LeakCannary" class="heading-link"><i class="fas fa-link"></i></a><a href="#LeakCannary" class="headerlink" title="LeakCannary"></a>LeakCannary</h3>      <p>Leak Cannary是一个能自动监测内存泄露的线下监测工具。</p>        <h2 id="内存管理">          <a href="#内存管理" class="heading-link"><i class="fas fa-link"></i></a><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2>              <h3 id="内存区域">          <a href="#内存区域" class="heading-link"><i class="fas fa-link"></i></a><a href="#内存区域" class="headerlink" title="内存区域"></a>内存区域</h3>      <p>Java内存划分为方法区、堆、程序计数器、本地方法栈、虚拟机栈五个区域；</p><p>线程维度分为线程共享区和线程隔离区，方法区和堆是线程共享的，程序计数器、本地方法栈、虚拟机栈是线程隔离的，如下图</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/5/170ab3f4abba75fe"></p><p><strong>方法区</strong></p><ul><li>线程共享区域，用于存储类信息、静态变量、常量、即时编译器编译出来的代码数据</li><li>无法满足内存分配需求时会发生OOM</li></ul><p><strong>堆</strong></p><ul><li>线程共享区域，是JAVA虚拟机管理的内存中最大的一块，在虚拟机启动时创建</li><li>存放对象实例，几乎所有的对象实例都在堆上分配，GC管理的主要区域</li></ul><p><strong>虚拟机栈</strong></p><ul><li>线程私有区域，每个java方法在执行的时候会创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。方法从执行开始到结束过程就是栈帧在虚拟机栈中入栈出栈过程</li><li>局部变量表存放编译期可知的基本数据类型、对象引用、returnAddress类型。所需的内存空间会在编译期间完成分配，进入一个方法时在帧中局部变量表的空间是完全确定的，不需要运行时改变</li><li>若线程申请的栈深度大于虚拟机允许的最大深度，会抛出SatckOverFlowError错误</li><li>虚拟机动态扩展时，若无法申请到足够内存，会抛出OutOfMemoryError错误</li></ul><p><strong>本地方法栈</strong></p><ul><li>为虚拟机中Native方法服务，对本地方法栈中使用的语言、数据结构、使用方式没有强制规定，虚拟机可自有实现</li><li>占用的内存区大小是不固定的，可根据需要动态扩展</li></ul><p><strong>程序计数器</strong></p><ul><li>一块较小的内存空间，线程私有，存储当前线程执行的字节码行号指示器</li><li>字节码解释器通过改变这个计数器的值来选取下一条需要执行的字节码指令：分支、循环、跳转等</li><li>每个线程都有一个独立的程序计数器</li><li>唯一一个在java虚拟机中不会OOM的区域</li></ul>        <h3 id="对象存活判断">          <a href="#对象存活判断" class="heading-link"><i class="fas fa-link"></i></a><a href="#对象存活判断" class="headerlink" title="对象存活判断"></a>对象存活判断</h3>      <p><strong>引用计数法</strong></p><ul><li>给对象添加引用计数器，每当一个地方引用时，计数器加1，引用失效时计数器减1；当引用计数器为0时即为对象不可用</li><li>实现简单，效率高，但是无法解决相互引用问题，主流虚拟机一般不使用此方法判断对象是否存活</li></ul><p><strong>可达性分析法</strong></p><ul><li>从一些称为”GC Roots”的对象作为起点，向下搜索，搜索走过的路径称为引用链，当一个对象到GC Roots没有任何引用链时即为对象不可用，可被回收的</li><li>可被称为GC Roots的对象：虚拟机栈中引用的对象、方法区中类静态属性引用的对象、方法区中常量引用的对象、本地方法栈中引用的对象</li></ul><p><strong>GC Root有以下几种：</strong></p><ol><li>Class-由系统ClassLoader加载的对象</li><li>Thread-活着的线程</li><li>Stack Local-Java方法的local变量或参数</li><li>JNI Local – JNI方法的local变量或参数</li><li>JNI Global – 全局JNI引用</li><li>Monitor Used – 用于同步的监控对象</li></ol>        <h3 id="垃圾回收算法">          <a href="#垃圾回收算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h3>      <p><strong>标记清除算法</strong></p><p>标记清除算法有两个阶段，首先标记出需要回收的对象，在标记完成后统一回收所有标记的对象；</p><p>缺点：</p><ul><li>效率问题：标记和清除两个过程效率都不高</li><li>空间问题：标记清除之后会导致很多不连续的内存碎片，会导致需要分配大对象时无法找到足够的连续空间而不得不触发GC的问题</li></ul><p><strong>复制算法</strong></p><p>将可用内存按空间分为大小相同的两小块，每次只使用其中的一块，等这块内存使用完了将还存活的对象复制到另一块内存上，然后将这块内存区域对象整体清除掉。每次对整个半区进行内存回收，不会导致碎片问题，实现简单高效。</p><p>缺点：</p><ul><li>需要将内存缩小为原来的一半，空间代价太高</li></ul><p><strong>标记整理算法</strong></p><p>标记整理算法标记过程和标记清除算法一样，但清除过程并不是对可回收对象直接清理，而是将所有存活对象像一端移动，然后集中清理到端边界以外的内存。</p><p><strong>分代收集算法</strong></p><p>当代虚拟机垃圾回收算法都采用分代收集算法来收集，根据对象存活周期不同将内存划分为新生代和老年代，再根据每个年代的特点采用最合适的算法。</p><ul><li>新生代存活对象较少，每次垃圾回收都有大量对象死去，一般采用复制算法，只需要付出复制少量存活对象的成本就可以实现垃圾回收；</li><li>老年代存活对象较多，没有额外空间进行分配担保，就必须采用标记清除算法和标记整理算法进行回收；</li></ul>        <h2 id="内存抖动">          <a href="#内存抖动" class="heading-link"><i class="fas fa-link"></i></a><a href="#内存抖动" class="headerlink" title="内存抖动"></a>内存抖动</h2>      <p>内存频繁分配和回收导致内存不稳定</p><ul><li>频繁GC，内存曲线呈现锯齿状，会导致卡顿</li><li>频繁的创建对象会导致内存不足及碎片</li><li>不连续的内存碎片无法被释放，导致OOM</li></ul>        <h3 id="模拟内存抖动">          <a href="#模拟内存抖动" class="heading-link"><i class="fas fa-link"></i></a><a href="#模拟内存抖动" class="headerlink" title="模拟内存抖动"></a>模拟内存抖动</h3>      <p>执行此段代码</p><pre class="line-numbers language-none"><code class="language-none">private static Handler mShakeHandler = new Handler() {    @Override public void handleMessage(Message msg) {        super.handleMessage(msg);        // 频繁创建对象，模拟内存抖动        for(int index = 0;index &lt;= 100;index ++) {            String strArray[] = new String[100000];        }        mShakeHandler.sendEmptyMessageDelayed(0,30);    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="分析并定位">          <a href="#分析并定位" class="heading-link"><i class="fas fa-link"></i></a><a href="#分析并定位" class="headerlink" title="分析并定位"></a>分析并定位</h3>      <p>利用Memory Profiler工具查看内存信息</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/5/170ab3f4b2e12bbc"></p><p>发现内存曲线由原来的平稳曲线变成锯齿状</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/5/170ab3f4bd27aed8"></p><p>点击record记录内存信息，查找发生内存抖动位置，发现String对象ShallowSize非常异常，可直接通过Jump to Source定位到代码位置</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/5/170ab428ac88b8cf"></p>        <h2 id="内存泄露">          <a href="#内存泄露" class="heading-link"><i class="fas fa-link"></i></a><a href="#内存泄露" class="headerlink" title="内存泄露"></a>内存泄露</h2>      <p><strong>定义</strong>：内存中存在已经没有用确无法回收的对象</p><p><strong>现象</strong>：会导致内存抖动，可用内存减少，进而导致GC频繁、卡顿、OOM</p>        <h3 id="模拟内存泄露">          <a href="#模拟内存泄露" class="heading-link"><i class="fas fa-link"></i></a><a href="#模拟内存泄露" class="headerlink" title="模拟内存泄露"></a>模拟内存泄露</h3>      <p>模拟内存泄露代码，反复进入退出该Activity</p><pre class="line-numbers language-none"><code class="language-none">/** * 模拟内存泄露的Activity */public class MemoryLeakActivity extends AppCompatActivity implements CallBack{    @Override    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_memoryleak);        ImageView imageView = findViewById(R.id.iv_memoryleak);        Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.mipmap.splash);        imageView.setImageBitmap(bitmap);                // 添加静态类引用        CallBackManager.addCallBack(this);    }    @Override    protected void onDestroy() {        super.onDestroy();//        CallBackManager.removeCallBack(this);    }    @Override    public void dpOperate() {        // do sth    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="分析并定位-1">          <a href="#分析并定位-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#分析并定位-1" class="headerlink" title="分析并定位"></a>分析并定位</h3>      <p>通过Memory Profiler工具查看内存曲线，发现内存在不断的上升</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/5/170ab40e2d62dbc7"></p><p>如果想分析定位具体发生内存泄露位置需要借助MAT工具</p><p>首先生成hprof文件</p><p>点击dump将当前内存信息转成hprof文件，需要对生成的文件转换成MAT可读取文件</p><p>执行一下转换命令（Android/sdk/platorm-tools路径下）</p><pre class="line-numbers language-none"><code class="language-none">hprof-conv 刚刚生成的hprof文件 memory-mat.hprof<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用mat打开刚刚转换的hprof文件</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/5/170ab40de67d9377"></p><p>点击Historygram，搜索MemoryLeakActivity</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/5/170ab3f7b7828c99"></p><p>可以看到有8个MemoryLeakActivity未释放</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/5/170ab3fa542aa377"></p><p>查看所有引用对象</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/5/170ab3fb31c51990"></p><p>查看到GC Roots的引用链</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/5/170ab415cc3f2f0f"></p><p>可以看到GC Roots是CallBackManager</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/5/170ab3fd8e85b3d9"></p><p>解决问题，当Activity销毁时将当前引用移除</p><pre class="line-numbers language-none"><code class="language-none">@Overrideprotected void onDestroy() {    super.onDestroy();    CallBackManager.removeCallBack(this);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="MAT分析工具">          <a href="#MAT分析工具" class="heading-link"><i class="fas fa-link"></i></a><a href="#MAT分析工具" class="headerlink" title="MAT分析工具"></a>MAT分析工具</h2>              <h3 id="Overview">          <a href="#Overview" class="heading-link"><i class="fas fa-link"></i></a><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3>      <p>当前内存整体信息</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/5/170ab3fd96215a96"></p>        <h3 id="Histogram">          <a href="#Histogram" class="heading-link"><i class="fas fa-link"></i></a><a href="#Histogram" class="headerlink" title="Histogram"></a>Histogram</h3>      <p>列举对象所有的实例及实例所占大小，可按package排序</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/5/170ab3fde16df094"></p><p>可以查看应用包名下Activity存在实例个数，可以查看是否存在内存泄露，这里发现内存中有8个Activity实例未释放</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/5/170ab40e2ebdfd30"></p><p>查看未被释放的Activity的引用链</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/5/170ab3fea58ec50a"></p>        <h3 id="Dominator-tree">          <a href="#Dominator-tree" class="heading-link"><i class="fas fa-link"></i></a><a href="#Dominator-tree" class="headerlink" title="Dominator_tree"></a>Dominator_tree</h3>      <p>当前所有实例的支配树，和Histogram区别时Histogram是类维度，dominator_tree是实例维度，可以查看所有实例的所占百分比和引用链</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/5/170ab400fb3064a1"></p>        <h3 id="SQL">          <a href="#SQL" class="heading-link"><i class="fas fa-link"></i></a><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3>      <p>通过sql语句查询相关类信息</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/5/170ab40f7375b7b4"></p>        <h3 id="Thread-overview">          <a href="#Thread-overview" class="heading-link"><i class="fas fa-link"></i></a><a href="#Thread-overview" class="headerlink" title="Thread_overview"></a>Thread_overview</h3>      <p>查看当前所有线程信息</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/5/170ab40fed68db9e"></p>        <h3 id="Top-Consumers">          <a href="#Top-Consumers" class="heading-link"><i class="fas fa-link"></i></a><a href="#Top-Consumers" class="headerlink" title="Top Consumers"></a>Top Consumers</h3>      <p>通过图形方式展示占用内存较高的对象，对降低内存栈优化可用内存比较有帮助</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/5/170ab402bef16ff2"></p><p><img src="https://user-gold-cdn.xitu.io/2020/3/5/170ab40ffa3c75d1"></p>        <h3 id="Leak-Suspects">          <a href="#Leak-Suspects" class="heading-link"><i class="fas fa-link"></i></a><a href="#Leak-Suspects" class="headerlink" title="Leak Suspects"></a>Leak Suspects</h3>      <p>内存泄露分析页面</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/5/170ab4034a3f9c59"></p><p>直接定位到内存泄露位置</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/5/170ab4038d5229f9"></p>        <h2 id="通过ARTHook检测不合理图片">          <a href="#通过ARTHook检测不合理图片" class="heading-link"><i class="fas fa-link"></i></a><a href="#通过ARTHook检测不合理图片" class="headerlink" title="通过ARTHook检测不合理图片"></a>通过ARTHook检测不合理图片</h2>              <h3 id="获取Bitmap占用内存">          <a href="#获取Bitmap占用内存" class="heading-link"><i class="fas fa-link"></i></a><a href="#获取Bitmap占用内存" class="headerlink" title="获取Bitmap占用内存"></a>获取Bitmap占用内存</h3>      <ul><li>通过getByteCount方法，但是需要在运行时获取</li><li>width * height * 一个像素所占内存 * 图片所在资源目录压缩比</li></ul>        <h3 id="检测大图">          <a href="#检测大图" class="heading-link"><i class="fas fa-link"></i></a><a href="#检测大图" class="headerlink" title="检测大图"></a>检测大图</h3>      <p>当图片控件load图片大小超过控件自身大小时会造成内存浪费，所以检测出不合理图片对内存优化是很重要的。</p><p><strong>ARTHook方式检测不合理图片</strong></p><p>通过ARTHook方法可以优雅的获取不合理图片，侵入性低，但是因为兼容性问题一般在线下使用。</p><p>引入epic开源库</p><pre class="line-numbers language-none"><code class="language-none">implementation 'me.weishu:epic:0.3.6'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实现Hook方法</p><pre class="line-numbers language-none"><code class="language-none">public class CheckBitmapHook extends XC_MethodHook {    @Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {        super.afterHookedMethod(param);        ImageView imageView = (ImageView)param.thisObject;        checkBitmap(imageView,imageView.getDrawable());    }    private static void checkBitmap(Object o,Drawable drawable) {        if(drawable instanceof BitmapDrawable &amp;&amp; o instanceof View) {            final Bitmap bitmap = ((BitmapDrawable) drawable).getBitmap();            if(bitmap != null) {                final View view = (View)o;                int width = view.getWidth();                int height = view.getHeight();                if(width &gt; 0 &amp;&amp; height &gt; 0) {                    if(bitmap.getWidth() &gt; (width &lt;&lt;1) &amp;&amp; bitmap.getHeight() &gt; (height &lt;&lt; 1)) {                        warn(bitmap.getWidth(),bitmap.getHeight(),width,height,                                new RuntimeException("Bitmap size is too large"));                    }                } else {                    final Throwable stacktrace = new RuntimeException();                    view.getViewTreeObserver().addOnPreDrawListener(                            new ViewTreeObserver.OnPreDrawListener() {                                @Override public boolean onPreDraw() {                                    int w = view.getWidth();                                    int h = view.getHeight();                                    if(w &gt; 0 &amp;&amp; h &gt; 0) {                                        if (bitmap.getWidth() &gt;= (w &lt;&lt; 1)                                                &amp;&amp; bitmap.getHeight() &gt;= (h &lt;&lt; 1)) {                                            warn(bitmap.getWidth(), bitmap.getHeight(), w, h, stacktrace);                                        }                                        view.getViewTreeObserver().removeOnPreDrawListener(this);                                    }                                    return true;                                }                            });                }            }        }    }    private static void warn(int bitmapWidth, int bitmapHeight, int viewWidth, int viewHeight, Throwable t) {        String warnInfo = new StringBuilder("Bitmap size too large: ")                .append("\n real size: (").append(bitmapWidth).append(',').append(bitmapHeight).append(')')                .append("\n desired size: (").append(viewWidth).append(',').append(viewHeight).append(')')                .append("\n call stack trace: \n").append(Log.getStackTraceString(t)).append('\n')                .toString();        LogUtils.i(warnInfo);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Application初始化时注入Hook</p><pre class="line-numbers language-none"><code class="language-none">DexposedBridge.hookAllConstructors(ImageView.class, new XC_MethodHook() {    @Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {        super.afterHookedMethod(param);        DexposedBridge.findAndHookMethod(ImageView.class,"setImageBitmap", Bitmap.class,                new CheckBitmapHook());    }});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="线上内存监控">          <a href="#线上内存监控" class="heading-link"><i class="fas fa-link"></i></a><a href="#线上内存监控" class="headerlink" title="线上内存监控"></a>线上内存监控</h2>              <h3 id="常规方案">          <a href="#常规方案" class="heading-link"><i class="fas fa-link"></i></a><a href="#常规方案" class="headerlink" title="常规方案"></a>常规方案</h3>      <p><strong>常规方案一</strong></p><p>在特定场景中获取当前占用内存大小，如果当前内存大小超过系统最大内存80%，对当前内存进行一次Dump（Debug.dumpHprofData()），选择合适时间将hprof文件进行上传，然后通过MAT工具手动分析该文件。</p><p>缺点：</p><ul><li>Dump文件比较大，和用户使用时间、对象树正相关</li><li>文件较大导致上传失败率较高，分析困难</li></ul><p><strong>常规方案二</strong></p><p>将LeakCannary带到线上，添加预设怀疑点，对怀疑点进行内存泄露监控，发现内存泄露回传到server。</p><p>缺点：</p><ul><li>通用性较低，需要预设怀疑点，对没有预设怀疑点的地方监控不到</li><li>LeakCanary分析比较耗时、耗内存，有可能会发生OOM</li></ul>        <h3 id="LeakCannary定制改造">          <a href="#LeakCannary定制改造" class="heading-link"><i class="fas fa-link"></i></a><a href="#LeakCannary定制改造" class="headerlink" title="LeakCannary定制改造"></a>LeakCannary定制改造</h3>      <ol><li>将需要预设怀疑点改为自动寻找怀疑点，自动将前内存中所占内存较大的对象类中设置怀疑点。</li><li>LeakCanary分析泄露链路比较慢，改造为只分析Retain size大的对象。</li><li>分析过程会OOM，是因为LeakCannary分析时会将分析对象全部加载到内存当中，我们可以记录下分析对象的个数和占用大小，对分析对象进行裁剪，不全部加载到内存当中。</li></ol>        <h3 id="完整方案">          <a href="#完整方案" class="heading-link"><i class="fas fa-link"></i></a><a href="#完整方案" class="headerlink" title="完整方案"></a>完整方案</h3>      <ol><li>监控常规指标：待机内存、重点模块占用内存、OOM率</li><li>监控APP一个生命周期内和重点模块界面的生命周期内的GC次数、GC时间等</li><li>将定制的LeakCanary带到线上，自动化分析线上的内存泄露</li></ol>        <h1 id="卡顿优化">          <a href="#卡顿优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#卡顿优化" class="headerlink" title="卡顿优化"></a>卡顿优化</h1>              <h2 id="卡顿">          <a href="#卡顿" class="heading-link"><i class="fas fa-link"></i></a><a href="#卡顿" class="headerlink" title="卡顿"></a>卡顿</h2>      <p>在应用开发中如果留意到log的话有时候可能会发下下面的log信息：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">I</span><span class="token operator">/</span><span class="token class-name">Choreographer</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Skipped</span> <span class="token number">60</span> frames<span class="token operator">!</span>  <span class="token class-name">The</span> application may be doing too much work on its main thread<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在大部分Android平台的设备上，Android系统是16ms刷新一次，也就是一秒钟60帧。要达到这种刷新速度就要求在ui线程中处理的任务时间必须要小于16ms，如果ui线程中处理时间长，就会导致跳过帧的渲染，也就是导致界面看起来不流畅，卡顿。如果用户点击事件5s中没反应就会导致ANR。</p>        <h2 id="帧率">          <a href="#帧率" class="heading-link"><i class="fas fa-link"></i></a><a href="#帧率" class="headerlink" title="帧率"></a>帧率</h2>      <p>即 Frame Rate，单位 fps，是指 gpu 生成帧的速率，60fps，Android中更帧率相关的类是SurfaceFlinger。</p><p><strong>SurfaceFlinger</strong><br>surfaceflinger作用是接受多个来源的图形显示数据，将他们合成，然后发送到显示设备。比如打开应用，常见的有三层显示，顶部的statusbar底部或者侧面的导航栏以及应用的界面，每个层是单独更新和渲染，这些界面都是有surfaceflinger合成一个刷新到硬件显示。<br><img src="https://img-blog.csdnimg.cn/20200617103126541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzA=,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzApx;" alt="在这里插入图片描述"><br>在显示过程中使用到了bufferqueue，surfaceflinger作为consumer方，比如windowmanager管理的surface作为生产方产生页面，交由surfaceflinger进行合成。</p><p><img src="https://img-blog.csdnimg.cn/20200617101750496.png" alt="在这里插入图片描述"><br><strong>VSync</strong></p><p>Android系统每隔16ms发出VSYNC信号，触发对UI进行渲染，VSync是Vertical Synchronization(垂直同步)的缩写，是一种在PC上很早就广泛使用的技术，可以简单的把它认为是一种定时中断。而在Android 4.1(JB)中已经开始引入VSync机制，用来同步渲染，让UI和SurfaceFlinger可以按硬件产生的VSync节奏进行工作。</p><p>安卓系统中有 2 种 VSync 信号：<br>1、屏幕产生的硬件 VSync： 硬件 VSync 是一个脉冲信号，起到开关或触发某种操作的作用。<br>2、由 SurfaceFlinger 将其转成的软件 Vsync 信号：经由 Binder 传递给 Choreographer。</p><p>除了Vsync的机制，Android还使用了多级缓冲的手段以优化UI流程度，例如双缓冲(A+B)，在显示buffer A的数据时，CPU/GPU就开始在buffer B中准备下一帧数据：但是不能保证每一帧CPU、GPU都运行状态良好，可能由于资源抢占等性能问题导致某一帧GPU掉链子，vsync信号到来时buffer B的数据还没准备好，而此时Display又在显示buffer A的数据，导致后面CPU/GPU没有新的buffer着手准备数据，导致卡顿（jank）。<br><img src="https://img-blog.csdnimg.cn/20200619101533702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzA=,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzApx;" alt="在这里插入图片描述"></p>        <h2 id="卡顿原因">          <a href="#卡顿原因" class="heading-link"><i class="fas fa-link"></i></a><a href="#卡顿原因" class="headerlink" title="卡顿原因"></a>卡顿原因</h2>      <p>从系统层面上看主要以下几个方面的原因会导致卡顿：<br><strong>1. SurfaceFlinger 主线程耗时</strong></p><p>SurfaceFlinger 负责 Surface 的合成 , 一旦 SurfaceFlinger 主线程调用超时 , 就会产生掉帧 .<br>SurfaceFlinger 主线程耗时会也会导致 hwc service 和 crtc 不能及时完成, 也会阻塞应用的 binder 调用, 如 dequeueBuffer \ queueBuffer 等.</p><p><strong>2. 后台活动进程太多导致系统繁忙</strong></p><p>后台进程活动太多,会导致系统非常繁忙, cpu \ io \ memory 等资源都会被占用, 这时候很容易出现卡顿问题 , 这也是系统这边经常会碰到的问题。<br><strong>dumpsys cpuinfo 可以查看一段时间内 cpu 的使用情况：</strong><br><img src="https://img-blog.csdnimg.cn/20200619101827920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzA=,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzApx;" alt="在这里插入图片描述"><br><strong>3.主线程调度不到 , 处于 Runnable 状态</strong></p><p>当线程为 Runnable 状态的时候 , 调度器如果迟迟不能对齐进行调度 , 那么就会产生长时间的 Runnable 线程状态 , 导致错过 Vsync 而产生流畅性问题。</p><p><strong>4、System 锁</strong></p><p>system_server 的 AMS 锁和 WMS 锁 , 在系统异常的情况下 , 会变得非常严重 , 如下图所示 , 许多系统的关键任务都被阻塞 , 等待锁的释放 , 这时候如果有 App 发来的 Binder 请求带锁 , 那么也会进入等待状态 , 这时候 App 就会产生性能问题 ; 如果此时做 Window 动画 , 那么 system_server 的这些锁也会导致窗口动画卡顿<br><img src="https://img-blog.csdnimg.cn/20200619102031218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzA=,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzApx;" alt="在这里插入图片描述"><br><strong>5、Layer过多导致 SurfaceFlinger Layer Compute 耗时</strong></p><p>Android P 修改了 Layer 的计算方法 , 把这部分放到了 SurfaceFlinger 主线程去执行, 如果后台 Layer 过多, 就会导致 SurfaceFlinger 在执行 rebuildLayerStacks 的时候耗时 , 导致 SurfaceFlinger 主线程执行时间过长。<br><img src="https://img-blog.csdnimg.cn/20200619102324220.png" alt="在这里插入图片描述"><br>从应用层来看以下会导致卡顿：</p><p><strong>1、主线程执行时间长</strong><br>主线程执行 Input \ Animation \ Measure \ Layout \ Draw \ decodeBitmap 等操作超时都会导致卡顿 。</p><ul><li>1、Measure \ Layout 耗时\超时</li></ul><p><img src="https://img-blog.csdnimg.cn/20200619103556294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzA=,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzApx;" alt="在这里插入图片描述"></p><ul><li>2、draw耗时</li></ul><p><img src="https://img-blog.csdnimg.cn/20200619103632673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzA=,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzApx;" alt="在这里插入图片描述"></p><ul><li>3、Animation回调耗时</li></ul><p><img src="https://img-blog.csdnimg.cn/20200619103717321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzA=,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzApx;" alt="在这里插入图片描述"></p><ul><li>4、View 初始化耗时</li></ul><p><img src="https://img-blog.csdnimg.cn/20200619103810150.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzA=,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzApx;" alt="在这里插入图片描述"></p><ul><li>5、List Item 初始化耗时</li></ul><p><img src="https://img-blog.csdnimg.cn/20200619103839118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzA=,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzApx;" alt="在这里插入图片描述"></p><ul><li>6、主线程操作数据库</li></ul><p><strong>2、主线程 Binder 耗时</strong></p><p>Activity resume 的时候, 与 AMS 通信要持有 AMS 锁, 这时候如果碰到后台比较繁忙的时候, 等锁操作就会比较耗时, 导致部分场景因为这个卡顿, 比如多任务手势操作。<br><img src="https://img-blog.csdnimg.cn/2020061910395626.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzA=,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzApx;" alt="在这里插入图片描述"></p><p><strong>3、WebView 性能不足</strong></p><p>应用里面涉及到 WebView 的时候, 如果页面比较复杂, WebView 的性能就会比较差, 从而造成卡顿<br><img src="https://img-blog.csdnimg.cn/20200619104046115.png" alt="在这里插入图片描述"></p><p><strong>4、帧率与刷新率不匹配</strong></p><p>如果屏幕帧率和系统的 fps 不相符 , 那么有可能会导致画面不是那么顺畅. 比如使用 90 Hz 的屏幕搭配 60 fps 的动画。<br><img src="https://img-blog.csdnimg.cn/20200619104123839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzA=,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzApx;" alt="在这里插入图片描述"></p>        <h2 id="卡顿检测">          <a href="#卡顿检测" class="heading-link"><i class="fas fa-link"></i></a><a href="#卡顿检测" class="headerlink" title="卡顿检测"></a>卡顿检测</h2>      <p>卡顿检测可以使用以下多种方法同时进行：<br><strong>1、使用dumpsys gfxinfo</strong><br><strong>2、使用Systrace获取相关信息</strong><br><strong>3、使用LayoutInspect 检测布局层次</strong><br><strong>4、使用BlockCanary</strong><br><strong>5、利用Choreographer。</strong><br><strong>6、使用严格模式（StrictMode ）。</strong></p>        <h3 id="使用dumpsys-gfxinfo">          <a href="#使用dumpsys-gfxinfo" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用dumpsys-gfxinfo" class="headerlink" title="使用dumpsys gfxinfo"></a>使用dumpsys gfxinfo</h3>      <p>在开发过程中发现有卡顿发生时可以使用下面的命令来获取卡顿相关的信息：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">adb shell dumpsys gfxinfo <span class="token punctuation">[</span><span class="token constant">PACKAGE_NAME</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入这个命令后可能会打印下面的信息：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Applications</span> <span class="token class-name">Graphics</span> <span class="token class-name">Acceleration</span> <span class="token class-name">Info</span><span class="token operator">:</span><span class="token class-name">Uptime</span><span class="token operator">:</span> <span class="token number">102809662</span> <span class="token class-name">Realtime</span><span class="token operator">:</span> <span class="token number">196891968</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token class-name">Graphics</span> info <span class="token keyword">for</span> pid <span class="token number">31148</span> <span class="token punctuation">[</span>com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>settings<span class="token punctuation">]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">Stats</span> since<span class="token operator">:</span> <span class="token number">524615985046231</span>ns<span class="token class-name">Total</span> frames rendered<span class="token operator">:</span> <span class="token number">8325</span><span class="token class-name">Janky</span> frames<span class="token operator">:</span> <span class="token number">729</span> <span class="token punctuation">(</span><span class="token number">8.76</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token number">90</span>th percentile<span class="token operator">:</span> <span class="token number">13</span>ms<span class="token number">95</span>th percentile<span class="token operator">:</span> <span class="token number">20</span>ms<span class="token number">99</span>th percentile<span class="token operator">:</span> <span class="token number">73</span>ms<span class="token class-name">Number</span> <span class="token class-name">Missed</span> <span class="token class-name">Vsync</span><span class="token operator">:</span> <span class="token number">294</span><span class="token class-name">Number</span> <span class="token class-name">High</span> input latency<span class="token operator">:</span> <span class="token number">47</span><span class="token class-name">Number</span> <span class="token class-name">Slow</span> <span class="token constant">UI</span> thread<span class="token operator">:</span> <span class="token number">502</span><span class="token class-name">Number</span> <span class="token class-name">Slow</span> bitmap uploads<span class="token operator">:</span> <span class="token number">44</span><span class="token class-name">Number</span> <span class="token class-name">Slow</span> issue draw commands<span class="token operator">:</span> <span class="token number">135</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面参数说明：</p><p><strong>Graphics info for pid 31148 [com.android.settings]</strong>: 表明当前dump的为设置界面的帧信息，pid为31148<br><strong>Total frames rendered</strong>: 8325 本次dump搜集了8325帧的信息</p><p><strong>Janky frames</strong> :729 (8.76%)出现卡顿的帧数有729帧，占8.76%</p><p><strong>Number Missed Vsync</strong>: 294 垂直同步失败的帧</p><p><strong>Number Slow UI thread</strong>: 502 因UI线程上的工作导致超时的帧数</p><p><strong>Number Slow bitmap uploads</strong>: 44 因bitmap的加载耗时的帧数</p><p><strong>Number Slow issue draw commands</strong>: 135 因绘制导致耗时的帧数</p>        <h3 id="使用systrace">          <a href="#使用systrace" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用systrace" class="headerlink" title="使用systrace"></a>使用systrace</h3>      <p>上面使用的dumpsys是能发现问题或者判断问题的严重性，但无法定位真正的原因。如果要定位原因，应当配合systrace工具使用。</p><p><strong>systrace使用</strong></p><p>Systrace可以帮助分析应用是如何设备上运行起来的，它将系统和应用程序线程集中在一个共同的时间轴上，分析systrace的第一步需要在程序运行的时间段中抓取trace log，在抓取到的trace文件中，包含了这段时间中想要的关键信息，交互情况。<br><img src="https://img-blog.csdnimg.cn/2020061911445373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzA=,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzApx;" alt="在这里插入图片描述"><br>图1显示的是当一个app在滑动时出现了卡顿的现象，默认的界面下，横轴是时间，纵向为trace event，trace event 先按进程分组，然后再按线程分组.从上到下的信息分别为Kernel，SurfaceFlinger，应用包名。通过配置trace的分类，可以根据配置情况记录每个应用程序的所有线程信息以及trace event的层次结构信息。</p><p><strong>Android studio中使用systrace</strong></p><p>1、在android设备的 设置 – 开发者选项 – 监控 – 开启traces。<br>2、选择要追中的类别，并且点击确定。</p><p>完成以上配置后，开始抓trace文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ python systrace<span class="token punctuation">.</span>py <span class="token operator">--</span>cpu<span class="token operator">-</span>freq <span class="token operator">--</span>cpu<span class="token operator">-</span>load <span class="token operator">--</span>time<span class="token operator">=</span><span class="token number">10</span> <span class="token operator">-</span>o mytracefile<span class="token punctuation">.</span>html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>分析trace文件</strong><br>抓到trace.html文件后，通过web浏览器打开</p><p>检查Frames<br>每个应用程序都有一排代表渲染帧的圆圈，通常为绿色，如果绘制的时间超过16.6毫秒则显示黄色或红色。通过“W”键查看帧。<br><img src="https://img-blog.csdnimg.cn/20200619114729357.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzA=,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzApx;" alt="在这里插入图片描述"><br><strong>trace应用程序代码</strong><br>在framework中的trace marker并没有覆盖到所有代码，因此有些时候需要自己去定义trace marker。在Android4.3之后，可以通过Trace类在代码中添加标记，这样将能够看到在指定时间内应用的线程在做哪些工作，当然，trace 的begin和end操作也会增加一些额外的开销，但都只有几微秒左右。<br>通过下面的例子来说明Trace类的 用法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>Adapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyViewHolder</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">MyViewHolder</span> <span class="token function">onCreateViewHolder</span><span class="token punctuation">(</span><span class="token class-name">ViewGroup</span> parent<span class="token punctuation">,</span> <span class="token keyword">int</span> viewType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Trace</span><span class="token punctuation">.</span><span class="token function">beginSection</span><span class="token punctuation">(</span><span class="token string">"MyAdapter.onCreateViewHolder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MyViewHolder</span> myViewHolder<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            myViewHolder <span class="token operator">=</span> <span class="token class-name">MyViewHolder</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token class-name">Trace</span><span class="token punctuation">.</span><span class="token function">endSection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> myViewHolder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onBindViewHolder</span><span class="token punctuation">(</span><span class="token class-name">MyViewHolder</span> holder<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Trace</span><span class="token punctuation">.</span><span class="token function">beginSection</span><span class="token punctuation">(</span><span class="token string">"MyAdapter.onBindViewHolder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Trace</span><span class="token punctuation">.</span><span class="token function">beginSection</span><span class="token punctuation">(</span><span class="token string">"MyAdapter.queryDatabase"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">RowItem</span> rowItem <span class="token operator">=</span> <span class="token function">queryDatabase</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>                mDataset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rowItem<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token class-name">Trace</span><span class="token punctuation">.</span><span class="token function">endSection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            holder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>mDataset<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token class-name">Trace</span><span class="token punctuation">.</span><span class="token function">endSection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>…<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="使用BlockCanary">          <a href="#使用BlockCanary" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用BlockCanary" class="headerlink" title="使用BlockCanary"></a>使用BlockCanary</h3>      <p>BlockCanary是国内开发者MarkZhai开发的一套性能监控组件，它对主线程操作进行了完全透明的监控，并能输出有效的信息，帮助开发分析、定位到问题所在，迅速优化应用。<br>其特点有：<br><strong>1、非侵入式，简单的两行就打开监控，不需要到处打点，破坏代码优雅性。</strong><br><strong>2、精准，输出的信息可以帮助定位到问题所在（精确到行），不需要像Logcat一样，慢慢去找。</strong><br><strong>3、目前包括了核心监控输出文件，以及UI显示卡顿信息功能</strong></p><p><strong>BlockCanary基本原理</strong></p><p>android应用程序只有一个主线程ActivityThread，这个主线程会创建一个Looper(Looper.prepare)，而Looper又会关联一个MessageQueue，主线程Looper会在应用的生命周期内不断轮询(Looper.loop)，从MessageQueue取出Message 更新UI。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment">// This must be in a local variable, in case a UI event sets the logger</span>        <span class="token class-name">Printer</span> logging <span class="token operator">=</span> me<span class="token punctuation">.</span>mLogging<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logging <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logging<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span>target <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span>                    msg<span class="token punctuation">.</span>callback <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        msg<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">dispatchMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logging <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logging<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span>target <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>BlockCanary主要是检测<code>msg.target.dispatchMessage(msg);</code>之前的<code>&gt;&gt;&gt;&gt;&gt; Dispatching to</code> 和之后的<code>&lt;&lt;&lt;&lt;&lt; Finished to</code>的间隔时间。<br>应用发生卡顿，一定是在dispatchMessage中执行了耗时操作。通过给主线程的Looper设置一个Printer，打点统计dispatchMessage方法执行的时间，如果超出阀值，表示发生卡顿，则dump出各种信息，提供开发者分析性能瓶颈。</p>        <h3 id="使用Choreographer">          <a href="#使用Choreographer" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用Choreographer" class="headerlink" title="使用Choreographer"></a>使用Choreographer</h3>      <p>Android 主线程运行的本质，其实就是 Message 的处理过程，我们的各种操作，包括每一帧的渲染操作 ，都是通过 Message 的形式发给主线程的 MessageQueue ，MessageQueue 处理完消息继续等下一个消息。<br><img src="https://img-blog.csdnimg.cn/20200619115744338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzA=,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzApx;" alt="在这里插入图片描述"><br>Choreographer 的引入，主要是配合 Vsync ，给上层 App 的渲染提供一个稳定的 Message 处理的时机，也就是 Vsync 到来的时候 ，系统通过对 Vsync 信号周期的调整，来控制每一帧绘制操作的时机. 目前大部分手机都是 60Hz 的刷新率，也就是 16.6ms 刷新一次，系统为了配合屏幕的刷新频率，将 Vsync 的周期也设置为 16.6 ms，每个 16.6 ms ， Vsync 信号唤醒 Choreographer 来做 App 的绘制操作 ，这就是引入 Choreographer 的主要作用。</p><p><strong>Choreographer 两个主要作用</strong></p><p>1、承上：负责接收和处理 App 的各种更新消息和回调，等到 Vsync 到来的时候统一处理。比如集中处理 Input(主要是 Input 事件的处理) 、Animation(动画相关)、Traversal(包括 measure、layout、draw 等操作) ，判断卡顿掉帧情况，记录 CallBack 耗时等。</p><p>2、启下：负责请求和接收 Vsync 信号。接收 Vsync 事件回调(通过 FrameDisplayEventReceiver.onVsync )；请求 Vsync(FrameDisplayEventReceiver.scheduleVsync) .</p><p><strong>使用Choreographer 计算帧率</strong></p><p>Choreographer 处理绘制的逻辑核心在 Choreographer.doFrame 函数中，从下图可以看到，FrameDisplayEventReceiver.onVsync post 了自己，其 run 方法直接调用了 doFrame 开始一帧的逻辑处理：<br><img src="https://img-blog.csdnimg.cn/20200619120044126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzA=,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzApx;" alt="在这里插入图片描述"><br>Choreographer周期性的在UI重绘时候触发，在代码中记录上一次和下一次绘制的时间间隔，如果超过16ms，就意味着一次UI线程重绘的“丢帧”。丢帧的数量为间隔时间除以16，如果超过3，就开始有卡顿的感知。<br>使用Choreographer检测帧的代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFrameCallback</span> <span class="token keyword">implements</span> <span class="token class-name">Choreographer<span class="token punctuation">.</span>FrameCallback</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token constant">TAG</span> <span class="token operator">=</span> <span class="token string">"性能检测"</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">long</span> lastTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFrame</span><span class="token punctuation">(</span><span class="token keyword">long</span> frameTimeNanos<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTime <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//代码第一次初始化。不做检测统计。</span>                lastTime <span class="token operator">=</span> frameTimeNanos<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">long</span> times <span class="token operator">=</span> <span class="token punctuation">(</span>frameTimeNanos <span class="token operator">-</span> lastTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000000</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> frames <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>times <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>times <span class="token operator">&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"UI线程超时(超过16ms):"</span> <span class="token operator">+</span> times <span class="token operator">+</span> <span class="token string">"ms"</span> <span class="token operator">+</span> <span class="token string">" , 丢帧:"</span> <span class="token operator">+</span> frames<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                lastTime <span class="token operator">=</span> frameTimeNanos<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">Choreographer</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">postFrameCallback</span><span class="token punctuation">(</span>mFrameCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="优化">          <a href="#优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#优化" class="headerlink" title="优化"></a>优化</h2>      <p>由上面的分析可知<strong>对象分配</strong>、<strong>垃圾回收</strong>(GC)、<strong>线程调度</strong>以及<strong>Binder调用</strong> 是Android系统中常见的卡顿原因，因此卡顿优化主要以下几种方法，更多的要结合具体的应用来进行：</p><p><strong>1、布局优化</strong></p><ul><li>通过减少冗余或者嵌套布局来降低视图层次结构。比如使用约束布局代替线性布局和相对布局。</li><li>用 ViewStub 替代在启动过程中不需要显示的 UI 控件。</li><li>使用自定义 View 替代复杂的 View 叠加。</li><li></li></ul><p><strong>2、减少主线程耗时操作</strong></p><ul><li>主线程中不要直接操作数据库，数据库的操作应该放在数据库线程中完成。</li><li>sharepreference尽量使用apply，少使用commit，可以使用MMKV框架来代替sharepreference。</li><li>网络请求回来的数据解析尽量放在子线程中，不要在主线程中进行复制的数据解析操作。</li><li>不要在activity的onResume和onCreate中进行耗时操作，比如大量的计算等。</li></ul><p><strong>3、减少过度绘制</strong><br>过度绘制是同一个像素点上被多次绘制，减少过度绘制一般减少布局背景叠加等方式，如下图所示右边是过度绘制的图片。<br><img src="https://img-blog.csdnimg.cn/20200619153239362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzA=,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDk4NzApx;" alt="在这里插入图片描述"><br><strong>4、列表优化</strong></p><ul><li>RecyclerView使用优化，使用DiffUtil和notifyItemDataSetChanged进行局部更新等。</li></ul><p><strong>5、对象分配和回收优化</strong></p><p>自从Android引入 ART 并且在Android 5.0上成为默认的运行时之后，对象分配和垃圾回收（GC）造成的卡顿已经显著降低了，但是由于对象分配和GC有额外的开销，它依然又可能使线程负载过重。 在一个调用不频繁的地方（比如按钮点击）分配对象是没有问题的，但如果在在一个被频繁调用的紧密的循环里，就需要避免对象分配来降低GC的压力。</p><ul><li>减少小对象的频繁分配和回收操作。</li></ul>        <h1 id="存储优化">          <a href="#存储优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#存储优化" class="headerlink" title="存储优化"></a>存储优化</h1>              <h2 id="交换数据格式">          <a href="#交换数据格式" class="heading-link"><i class="fas fa-link"></i></a><a href="#交换数据格式" class="headerlink" title="交换数据格式"></a>交换数据格式</h2>      <p>Google 推出的 <span class="exturl"><a class="exturl__link" href="https://developers.google.com/protocol-buffers/">Protocal Buffers</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 是一种更轻便高效的存储结构，但消耗内存较大。</p><p><span class="exturl"><a class="exturl__link" href="https://github.com/google/flatbuffers">FlatBuffers</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 同样由 Google 推出，专注性能，适合移动端。占用存储比 Protocal 要大。</p>        <h2 id="SharePreferences-优化">          <a href="#SharePreferences-优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#SharePreferences-优化" class="headerlink" title="SharePreferences 优化"></a>SharePreferences 优化</h2>      <ul><li>当 SharedPreferences 文件还没有被加载到内存时，调用 getSharedPreferences 方法会初始化文件并读入内存，这容易导致 耗时更长。</li><li>Editor 的 commit 或者 apply 方法的区别在于同步写入和异步 写入，以及是否需要返回值。在不需要返回值的情况下，<strong>使用 apply 方法可以极大提高性能</strong>。</li><li>SharedPreferences 类 中的 commitToMemory() 会锁定 SharedPreference 对象，put() 和 getEditor() 方法会锁定 Editor 对象，在写入磁盘时更会锁定一个写入锁。因此，最好的优化方法就是避免频繁地读写 SharedPreferences，减少无谓的调用。对于 SharedPreferences 的批量操作，最好先获取一个 editor 进行批量操作，然后调用 apply 方法。</li></ul>        <h2 id="Bitmap-解码">          <a href="#Bitmap-解码" class="heading-link"><i class="fas fa-link"></i></a><a href="#Bitmap-解码" class="headerlink" title="Bitmap 解码"></a>Bitmap 解码</h2>      <ul><li>4.4 以上 decodeFile 内部没有使用缓存，效率不高。要使用 decodeStream，同时传入的文件流为 BufferedInputStream。</li><li>decodeResource 同样存在性能问题，用 decodeResourceStream。</li></ul>        <h2 id="数据库优化">          <a href="#数据库优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据库优化" class="headerlink" title="数据库优化"></a>数据库优化</h2>      <ol><li><p>使用 StringBuilder 代替 String</p></li><li><p>查询时返回更少的结果集及更少的字段</p><p>查询时只取需要的字段和结果集，更多的结果集会消耗更多的时间及内存，更多的字段会导致更多的内存消耗。</p></li><li><p>少用 cursor.getColumnIndex</p><p>根据性能调优过程中的观察 cursor.getColumnIndex 的时间消耗跟 cursor.getInt 相差无几。可以在建表的时候用 static 变量记住某列的 index，直接调用相应 index 而不是每次查询。</p></li><li><p>异步线程</p><p>Android 中数据不多时表查询可能耗时不多，不会导致 ANR，不过大于 100ms 时同样会让用户感觉到延时和卡顿，可以放在线程中运行，但 sqlite 在并发方面存在局限，多线程控制较麻烦，这时候可使用单线程池，在任务中执行 db 操作，通过 handler 返回结果和 UI 线程交互，既不会影响 UI 线程，同时也能防止并发带来的异常。</p></li><li><p>SQLiteOpenHelper <strong>维持一个单例</strong></p><p>因为 SQLite 对多线程的支持并不是很完善，如果两个线程同时操作数据库，因为数据库被另一个线程占用， 这种情况下会报“Database is locked” 的异常。所以在数据库管理类中使用单例模式，就可以保证无论在哪个线程中获取数据库对象，都是同一个。</p><p>最好的方法是所有的数据库<strong>操作统一到同一个线程队列管理</strong>，而业务层使用缓存同步，这样可以完全避免多线程操作数据库导致的不同步和死锁问题。</p></li><li><p>Application 中初始化</p><ul><li>使用 Application 的 Context 创建数据库，在 Application 生命周期结束时再关闭。</li><li>在应用启动过程中最先初始化完数据库，避免进入应用后再初始化导致相关操作时间变长。</li></ul></li><li><p>少用 AUTOINCREMENT</p><p>主键加上 AUTOINCREMENT 后，可以保证主键严格递增，但并不能保证每次都加 1，因为在插入失败后，失败的行号不会被复用，会造成主键有间隔，继而使 INSERT 耗时 1 倍以上。</p><p>这个 AUTOINCREMENT 关键词会增加 CPU，内存，磁盘空间和磁盘 I/O 的负担，所以 尽量不要用，除非必需。通常情况下都不是必需的。</p></li></ol>        <h3 id="事务">          <a href="#事务" class="heading-link"><i class="fas fa-link"></i></a><a href="#事务" class="headerlink" title="事务"></a>事务</h3>      <p>使用事务的两大好处是原子提交和更优性能：</p><ul><li>原子提交：意味着同一事务内的所有修改要么都完成要么都不做，如果某个修改失败，会自动回滚使得所有修改不生效。</li><li>更优性能：Sqlite 默认会为每个插入、更新操作创建一个事务，并且在每次插入、更新后立即提交。这样如果连续插入 100 次数据实际是创建事务、执行语句、提交这个过程被重复执行了 100 次。如果显式的创建事务，这个过程只做一次，通过这种一次性事务可以使得性能大幅提升。尤其当数据库位于 sd 卡时，时间上能节省两个数量级左右。</li></ul><p>主要三个方法：beginTransaction，setTransactionSuccessful，endTransaction。</p>        <h3 id="SQLiteStatement">          <a href="#SQLiteStatement" class="heading-link"><i class="fas fa-link"></i></a><a href="#SQLiteStatement" class="headerlink" title="SQLiteStatement"></a>SQLiteStatement</h3>      <p>使用 Android 系统提供的 SQLiteStatement 来插入数据，在性能上有一定的提高，并且也解决了 SQL 注入的问题。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SQLiteStatement</span> statement <span class="token operator">=</span> dbOpenHelper<span class="token punctuation">.</span><span class="token function">getWritableDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compileStatement</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO EMPERORS(name, dynasty, start_year) values(?,?,?)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> statement<span class="token punctuation">.</span><span class="token function">clearBindings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>statement<span class="token punctuation">.</span><span class="token function">bindString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Max"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> statement<span class="token punctuation">.</span><span class="token function">bindString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Luk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> statement<span class="token punctuation">.</span><span class="token function">bindString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"1998"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> statement<span class="token punctuation">.</span><span class="token function">executeInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SQLiteStatement 只能插入一个表中的数据，在插入前要清除上一次的数据。</p>        <h3 id="索引">          <a href="#索引" class="heading-link"><i class="fas fa-link"></i></a><a href="#索引" class="headerlink" title="索引"></a>索引</h3>      <p>索引就像书本的目录，目录可以快速找到所在页数，数据库中索引可以帮助快速找到数据，而不用全表扫描，合适的索引可以大大提高数据库查询的效率。</p><p>优点：大大加快了数据库检索的速度，包括对单表查询、连表查询、分组查询、排序查询。经常是一到两个数量级的性能提升，且随着数据数量级增长。</p><p>缺点：</p><ul><li>索引的创建和维护存在消耗，索引会占用物理空间，且随着数据量的增加而增加。</li><li>在对数据库进行增删改时需要维护索引，所以会对增删改的性能存在影响。</li></ul><p><strong>分类</strong></p><ol><li>直接创建索引和间接创建索引<ul><li>直接创建: 使用 sql 语句创建，Android 中可以在 SQLiteOpenHelper 的 onCreate 或是 onUpgrade 中直接 excuSql 创建语句，如 <code>CREATE INDEX mycolumn_index ON mytable (myclumn)</code></li><li>间接创建: 定义主键约束或者唯一性键约束，可以间接创建索引，主键默认为唯一索引。</li></ul></li><li>普通索引和唯一性索引<ul><li>普通索引：<code>CREATEINDEXmycolumn_indexONmytable(myclumn)</code></li><li>唯一性索引：保证在索引列中的全部数据是唯一的，对聚簇索引和非聚簇索引都可以使用，语句为 <code>CREATE UNIQUE COUSTERED INDEX myclumn_cindex ON mytable(mycolumn)</code></li></ul></li><li>单个索引和复合索引<ul><li>单个索引：索引建立语句中仅包含单个字段，如上面的普通索引和唯一性索引创建示例。</li><li>复合索引：又叫组合索引，在索引建立语句中同时包含多个字段，如 <code>CREATEINDEXname_indexONusername(firstname,lastname)</code>，其中 firstname 为前导列。</li></ul></li><li>聚簇索引和非聚簇索引 (聚集索引，群集索引)<ul><li>聚簇索引：物理索引，与基表的物理顺序相同，数据值的顺序总是按照顺序排列，如 <code>CREATE CLUSTERED INDEX mycolumn_cindex ON mytable(mycolumn) WITH ALLOW_DUP_ROW</code>，其中 <code>WITH ALLOW_DUP_ROW</code> 表示允许有重复记录的聚簇索引</li><li>非聚簇索引：<code>CREATEUNCLUSTEREDINDEXmycolumn_cindexONmytable(mycolumn)</code>，索引默认为非聚簇索引</li></ul></li></ol><p><strong>使用场景</strong></p><ol><li>当某字段数据更新频率较低，查询频率较高，经常有范围查询 <code>(&gt;, &lt;, =,&gt;=, &lt;=)</code> 或 <code>order by</code>、<code>group by</code> 发生时建议使用索引。并且选择度（一个字段中唯一值的数量 / 总的数量）越大，建索引越有优势</li><li>经常同时存取多列，且每列都含有重复值可考虑建立复合索引</li></ol><p><strong>使用规则</strong></p><ol><li>对于复合索引，把使用最频繁的列做为前导列 (索引中第一个字段)。如果查询时前导列不在查询条件中则该复合索引不会被使用。如 <code>create unique index PK_GRADE_CLASS on student (grade, class)</code>，<code>select * from student where class = 2</code> 未使用到索引，<code>select * from dept where grade = 3</code> 使用到了索引</li><li>避免对索引列进行计算，对 where 子句列的任何计算如果不能被编译优化，都会导致查询时索引失效 <code>select * from student where tochar(grade)=’2</code></li><li>比较值避免使用 NULL</li><li>多表查询时要注意是选择合适的表做为内表。连接条件要充份考虑带有索引的表、行数多的表，内外表的选择可由公式：外层表中的匹配行数 <code>*</code> 内层表中每一次查找的次数确定，乘积最小为最佳方案。实际多表操作在被实际执行前，查询优化器会根据连接条件，列出几组可能的连接方案并从中找出系统开销最小的最佳方案</li><li>查询列与索引列次序一致</li><li>用多表连接代替 EXISTS 子句</li><li>把过滤记录数最多的条件放在最前面</li><li>善于使用存储过程，它使 sql 变得更加灵活和高效 (Sqlite 不支持存储过程)</li></ol>        <h2 id="其它通用优化">          <a href="#其它通用优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#其它通用优化" class="headerlink" title="其它通用优化"></a>其它通用优化</h2>      <ul><li>经常用的数据读取后缓存起来，以免多次重复读写造成“写入放大”</li><li>子线程读写数据</li><li>ObjectOutputStream 在序列化磁盘时，会把内存中的每个对象保存到磁盘，在保存对象的 时候，每个数据成员会带来一次 I/O 操作。在 ObjectOutputStream 上面再封装一个输出流 ByteArrayOutputStream 或 BufferedOutputStream，先将对象序列化后的信息写到缓存区中，然后再一次性地写到磁盘上；相应的，用 ByteArrayInputStream 或 BufferedInputStream 替代 ObjectInputStream。</li><li>合理选择缓冲区 Buffer 的大小。太小导致 I/O 操作次数增多，太大导致申请时间变长。比如 4-8 KB。</li></ul>        <h1 id="网络优化">          <a href="#网络优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#网络优化" class="headerlink" title="网络优化"></a>网络优化</h1>      <p>互联网时代, App作为于用户交互的端, 可以说实际上是一个界面, 产品的业务, 服务都是由Server提供的. 而App与Server的交互依赖于网络, 故而网络优化, 也是我们的App优化中不可缺少的一个优化项。除了客户端, 接口的优化外, 很多一部分优化还依赖于服务器端, 包括服务器端的代码开发, 部署方式等。</p>        <h2 id="网络连接对用户的影响">          <a href="#网络连接对用户的影响" class="heading-link"><i class="fas fa-link"></i></a><a href="#网络连接对用户的影响" class="headerlink" title="网络连接对用户的影响"></a>网络连接对用户的影响</h2>      <p>App的网络连接对于用户来说, 影响很多, 且多数情况下都很直观, 直接影响用户对这个App的使用体验. 其中较为重要的几点:</p><ul><li><strong>流量</strong><br>App的流量消耗对用户来说是比较敏感的, 毕竟流量是花钱的嘛. 现在大部分人的手机上都有安装流量监控的工具App, 用来监控App的流量使用. 如果我们的App这方面没有控制好, 会给用户不好的使用体验.</li><li><strong>电量</strong><br>电量相对于用户来说, 没有那么明显. 一般用户可能不会太注意. 但是如电量优化中的那样, 网络连接(radio)是对电量影响很大的一个因素. 所以我们也要加以注意.</li><li><strong>用户等待</strong><br>也就是用户体验, 良好的用户体验, 才是我们留住用户的第一步. 如果App请求等待时间长, 会给用户网络卡, 应用反应慢的感觉, 如果有对比, 有替代品, 我们的App很可能就会被用户无情抛弃.</li></ul>        <h2 id="分析网络连接的工具">          <a href="#分析网络连接的工具" class="heading-link"><i class="fas fa-link"></i></a><a href="#分析网络连接的工具" class="headerlink" title="分析网络连接的工具"></a>分析网络连接的工具</h2>              <h3 id="Network-Monitor">          <a href="#Network-Monitor" class="heading-link"><i class="fas fa-link"></i></a><a href="#Network-Monitor" class="headerlink" title="Network Monitor"></a>Network Monitor</h3>      <p>Android Studio内置的Monitor工具中就有一个Network Monitor:</p><p><img src="https://img-blog.csdn.net/20180910062232358?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F1Z2Z1bg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style="" alt="img"></p><p>其中:</p><ul><li>Rx — R(ecive) 表示下行流量, 即下载接收.</li><li>Tx — T(ransmit) 表示上行流量, 即上传发送.</li></ul><p><strong>怎么使用Network Monitor?</strong></p><p>Network monitor实时跟踪选定应用的数据请求情况. 我们可以连上手机, 选定调试应用进程, 然后在App上操作我们需要分析的页面请求.</p><p>例如, 上图就是以<span class="exturl"><a class="exturl__link" href="https://github.com/mingjunli/GithubApp">CoderPub</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>为例, 针对从repo列表界面进入repo详情界面的监控数据.</p><p>可以看到从10s到30s之间, 20s时间内发生了多次数据请求, 且22s到27s之间的请求数据量还很大.</p><p>分析代码可以看到, 在请求repo详情的时候是打包了很多请求的:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RepoDetail</span><span class="token punctuation">&gt;</span></span> <span class="token function">getRepoDetail</span><span class="token punctuation">(</span><span class="token class-name">String</span> owner<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">zip</span><span class="token punctuation">(</span>mRepoService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">,</span>            mRepoService<span class="token punctuation">.</span><span class="token function">contributors</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">,</span>            mRepoService<span class="token punctuation">.</span><span class="token function">listForks</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">"newest"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            mRepoService<span class="token punctuation">.</span><span class="token function">readme</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">isStarred</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Func5</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Repo</span><span class="token punctuation">,</span> <span class="token class-name">ArrayList</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">ArrayList</span><span class="token punctuation">&lt;</span><span class="token class-name">Repo</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Content</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">,</span> <span class="token class-name">RepoDetail</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token class-name">RepoDetail</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Repo</span> repo<span class="token punctuation">,</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users<span class="token punctuation">,</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Repo</span><span class="token punctuation">&gt;</span></span> forks<span class="token punctuation">,</span> <span class="token class-name">Content</span> readme<span class="token punctuation">,</span> <span class="token class-name">Boolean</span> isStarred<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">RepoDetail</span> detail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RepoDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     repo<span class="token punctuation">.</span><span class="token function">setStarred</span><span class="token punctuation">(</span>isStarred<span class="token punctuation">)</span><span class="token punctuation">;</span>                    detail<span class="token punctuation">.</span><span class="token function">setBaseRepo</span><span class="token punctuation">(</span>repo<span class="token punctuation">)</span><span class="token punctuation">;</span>                    detail<span class="token punctuation">.</span><span class="token function">setForks</span><span class="token punctuation">(</span>forks<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">// because the readme content is encode with Base64 by github.</span>                    readme<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">base64Decode</span><span class="token punctuation">(</span>readme<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>                    detail<span class="token punctuation">.</span><span class="token function">setReadme</span><span class="token punctuation">(</span>readme<span class="token punctuation">)</span><span class="token punctuation">;</span>                     detail<span class="token punctuation">.</span><span class="token function">setContributors</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> detail<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这也验证了14s到20s间的四次数据请求, 另外由于repo详情界面会显示作者以及贡献者的图片, 而图片的数据量相对大, 故而23s到27s间有多次数据量很大的请求发生.</p>        <h3 id="网络代理工具">          <a href="#网络代理工具" class="heading-link"><i class="fas fa-link"></i></a><a href="#网络代理工具" class="headerlink" title="网络代理工具"></a>网络代理工具</h3>      <p>一般来说, 网络代理工具有两个作用:</p><ol><li>截获网络请求响应包, 分析网络请求</li><li>设置代理网络, 移动App开发中一般用来做不同网络环境的测试, 例如Wifi/4G/3G/弱网等.</li></ol><p>代理工具很多, 诸如<span class="exturl"><a class="exturl__link" href="https://www.wireshark.org/">Wireshark</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>, <span class="exturl"><a class="exturl__link" href="https://www.telerik.com/fiddler">Fiddler</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>, <span class="exturl"><a class="exturl__link" href="https://www.charlesproxy.com/">Charles</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>等, 在此不一一细说了, 使用方法自行问谷歌度娘. :)</p>        <h2 id="从哪些方面优化网络连接">          <a href="#从哪些方面优化网络连接" class="heading-link"><i class="fas fa-link"></i></a><a href="#从哪些方面优化网络连接" class="headerlink" title="从哪些方面优化网络连接"></a>从哪些方面优化网络连接</h2>      <p>简单来说, 两个方面:</p><ul><li><strong>减少Radio活跃时间</strong><ul><li>也就是减少网络数据获取的频次.</li><li>这就减少了radio的电量消耗, 控制电量使用.</li></ul></li><li><strong>减少获取数据包的大小</strong><ul><li>可以减少流量消耗</li><li>也可以让每次请求更快, 在网络情况不好的情况下也有良好表现, 提升用户体验.</li></ul></li></ul>        <h3 id="接口设计">          <a href="#接口设计" class="heading-link"><i class="fas fa-link"></i></a><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h3>      <p><strong>API设计</strong></p><p>App与Server之间的API设计要考虑网络请求的频次, 资源的状态等. 以便App可以以较少的请求来完成业务需求和界面的展示.</p><p>例如, 注册登录. 正常会有两个API, 注册和登录, 但是设计API时我们应该给注册接口包含一个隐式的登录. 来避免App在注册后还得请求一次登录接口(有可能失败, 从而导致业务流程失败).</p><p>例如, 之前提到的获取repo详情, 实际上请求了4个接口, 请求了repo的信息, forks列表, contributors列表, readme, 这是因为github提供的接口是尽量单一职责的. 然而在我们的实际开发中, 我们的Server除了提供这些单一职责的小接口外, 最好还能组合一个满足客户端业务需求的repo详情接口出来.</p><p><strong>Gzip压缩</strong></p><p>使用Gzip来压缩request和response, 减少传输数据量, 从而减少流量消耗.</p><p><strong>考虑使用Protocol Buffer代替JSON</strong></p><p>以前我们传输数据使用XML, 后来使用JSON代替了XML, 很大程度上也是为了可读性和减少数据量(当然还有映射成POJO的方便程度).</p><p><span class="exturl"><a class="exturl__link" href="https://github.com/google/protobuf/">Protocol Buffer</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>是Google推出的一种数据交换格式.</p><p>如果我们的接口每次传输的数据量很大的话, 可以考虑下protobuf, 会比JSON数据量小很多.</p><p>当然相比来说, JSON也有其优势, 可读性更高.</p><blockquote><p>本节以网络流量优化的角度推荐protobuf作为一个选择, 具体还需更具实际情况考虑.</p></blockquote><p><strong>图片的Size</strong></p><p>上面Network Monitor中看到的22s到27s之间的有多次请求, 且数据量还很大. 就是在获取图片资源.</p><p>图片相对于接口请求来说, 数据量要大得多. 故而也是我们需要优化的一个点.</p><p>我们可以在获取图片时告知服务器需要的图片的宽高, 以便服务器给出合适的图片, 避免浪费.</p><p>我们现在很多公司的图片资源都是使用第三方的云存储服务的(七牛, 阿里云存储之类的).</p><p>以七牛为例, 可以在请求图片的url中添加诸如质量, 格式, width, height等path来获取合适的图片资源:</p><pre class="line-numbers language-none"><code class="language-none">imageView2/&lt;mode&gt;/w/&lt;LongEdge&gt;                 /h/&lt;ShortEdge&gt;                 /format/&lt;Format&gt;                 /interlace/&lt;Interlace&gt;                 /q/&lt;Quality&gt;                 /ignore-error/&lt;ignoreError&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="网络缓存">          <a href="#网络缓存" class="heading-link"><i class="fas fa-link"></i></a><a href="#网络缓存" class="headerlink" title="网络缓存"></a>网络缓存</h3>      <p>适当的缓存, 既可以让我们的应用看起来更快, 也能避免一些不必要的流量消耗.</p><p><strong>打包网络请求</strong></p><p>当接口设计不能满足我们的业务需求时. 例如可能一个界面需要请求多个接口, 或是网络良好, 处于Wifi状态下时我们想获取更多的数据等.</p><p>这时就可以打包一些网络请求, 例如请求列表的同时, 获取Header点击率较高的的item项的详情数据.</p><blockquote><p>可以通过一些统计数据来帮助我们定位用户接下来的操作是高概率的, 提前获取这部分的数据.</p></blockquote><p><strong>监听相关状态</strong></p><p>通过监听设备的状态:</p><ul><li>休眠状态</li><li>充电状态</li><li>网络状态</li></ul><p>结合<span class="exturl"><a class="exturl__link" href="https://developer.android.com/reference/android/app/job/JobScheduler.html">JobScheduler</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>来根据实际情况做网络请求. 比方说Splash闪屏广告图片, 我们可以在连接到Wifi时下载缓存到本地; 新闻类的App可以在充电, Wifi状态下做离线缓存.</p>        <h3 id="弱网测试-优化">          <a href="#弱网测试-优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#弱网测试-优化" class="headerlink" title="弱网测试&amp;优化"></a>弱网测试&amp;优化</h3>      <p>除了正常的网络优化, 我们还需考虑到弱网情况下, App的表现.</p><p><strong>弱网测试</strong></p><p>有几种方式来模拟弱网进行测试.</p><p>Android Emulator</p><p>创建和启动Android模拟器可以设置网络速度和延迟:</p><p><strong>创建时</strong>:</p><p><img src="https://img-blog.csdn.net/20180910062617283?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F1Z2Z1bg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style="" alt="img"></p><p><strong>启动时</strong>, 使用emulator命令:</p><pre class="line-numbers language-none"><code class="language-none">$emulator -netdelay gprs -netspeed gsm -avd Nexus_5_API_22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体参数参考<span class="exturl"><a class="exturl__link" href="https://developer.android.com/studio/run/emulator-commandline.html#netdelay">这里</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>和<span class="exturl"><a class="exturl__link" href="https://developer.android.com/studio/run/emulator-commandline.html#netspeed">这里</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>, 需要翻墙.</p><p>使用网络代理工具</p><p>以<span class="exturl"><a class="exturl__link" href="https://www.charlesproxy.com/">Charles</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>为例:<br>保持手机和PC处于同一个局域网, 在手机端wifi设置高级设置中设置代理方式为手动, 代理ip填写PC端ip地址, 端口号默认8888.</p><p><img src="https://img-blog.csdn.net/2018091006274452?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F1Z2Z1bg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style="" alt="img"></p><p><img src="https://img-blog.csdn.net/20180910062757452?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F1Z2Z1bg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style="" alt="img"></p><p><strong>其他模拟弱网方式</strong></p><p>如果你恰好也是iOS的开发者, Apple提供了<span class="exturl"><a class="exturl__link" href="http://nshipster.cn/network-link-conditioner/">Network Link Conditioner</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>, 非常好用.</p><p>可以模拟的网络情况与上述类似:</p><p>​                            <img src="https://img-blog.csdn.net/20180910062859260?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F1Z2Z1bg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style="" alt="img"></p><p>如果你使用Linux环境开发, 还可以试下facebook出的<span class="exturl"><a class="exturl__link" href="http://facebook.github.io/augmented-traffic-control/">ATC</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>.</p><p><strong>弱网优化</strong></p><p>利用上述工具模拟弱网, 在弱网情况下体验我们的App. 一般来说, 网络延迟在60ms内, 是OK的, 超过200ms就比较糟糕了. 我们需要做的是在比较糟糕的网络环境下还能给用户较好的体验.</p><p>弱网优化, 本质上是在弱网的情况下能让用户流畅的使用我们的App. 我们要做的就是结合上述的优化项:</p><ul><li>压缩/减少数据传输量</li><li>利用缓存减少网络传输</li><li>针对弱网(移动网络), 不自动加载图片</li><li>界面先反馈, 请求延迟提交<br>例如, 用户点赞操作, 可以直接给出界面的点赞成功的反馈, 使用<a href="https://developer.android.com/reference/android/app/job/JobScheduler.html"><strong>JobScheduler</strong></a>在网络情况较好的时候打包请求.</li></ul>        <h1 id="耗电优化">          <a href="#耗电优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#耗电优化" class="headerlink" title="耗电优化"></a>耗电优化</h1>      <p>实践中，如果我们的应用需要播放视频、需要获取 GPS 信息、需要拍照，这些耗电看起来是无法避免的。</p><p>如何判断哪些耗电是可以避免，或者是需要去优化的呢？可以看下面这张图，当用户去看耗电排行榜的时候，发现“王者荣耀”使用了 7 个多小时，这时用户对“王者荣耀”的耗电是有预期的。</p><p><img src="https://static001.geekbang.org/resource/image/5f/90/5f98c8a117745ce2fd7ef8f873894090.png" alt="image"></p><p>假设这个时候发现某个应用他根本没怎么使用（前台时间很少），但是耗电却非常多。这种情况会跟用户的预期差别很大，他可能就会想去投诉。</p><p><strong>所以耗电优化的第一个方向是优化应用的后台耗电。</strong></p><p>知道了系统是如何计算耗电的，那反过来看，我们也就可以知道应用在后台不应该做什么，例如长时间获取 WakeLock、WiFi 和蓝牙的扫描等。为什么说耗电优化第一个方向就是优化应用后台耗电，因为大部分厂商预装项目要求最严格的正是应用后台待机耗电。</p><p><img src="https://static001.geekbang.org/resource/image/b0/2b/b01e359b45d22bd80efda51eee2f5f2b.png" alt="image"></p><p>当然前台耗电我们不会完全不管，但是标准会放松很多。再来看看下面这张图，如果系统对你的应用弹出这个对话框，可能对于微信来说，用户还可以忍受，但是对其他大多数的应用来说，可能很多用户就直接把你加入到后台限制的名单中了</p><p><img src="https://static001.geekbang.org/resource/image/c6/1b/c6d2c20c09e84190c7b4a64578d0cc1b.png" alt="image"></p><p><strong>耗电优化的第二个方向是符合系统的规则，让系统认为你耗电是正常的。</strong></p><p>而 Android P 是通过 Android Vitals 监控后台耗电，所以我们需要符合 Android Vitals 的规则，目前它的具体规则如下：</p><p><img src="https://static001.geekbang.org/resource/image/62/15/620748a58e45e50fdea1098f15c77d15.png" alt="image"></p><p>虽然上面的标准可能随时会改变，但是可以看到，Android 系统目前比较关心后台 Alarm 唤醒、后台网络、后台 WiFi 扫描以及部分长时间 WakeLock 阻止系统后台休眠。</p>        <h2 id="耗电监控">          <a href="#耗电监控" class="heading-link"><i class="fas fa-link"></i></a><a href="#耗电监控" class="headerlink" title="耗电监控"></a>耗电监控</h2>      <p>对于耗电监控也是如此，我们首先需要抽象出具体的规则，然后收集尽量多的辅助信息，帮助问题的排查。</p>        <h3 id="Android-Vitals">          <a href="#Android-Vitals" class="heading-link"><i class="fas fa-link"></i></a><a href="#Android-Vitals" class="headerlink" title="Android Vitals"></a>Android Vitals</h3>      <p>Android Vitals 的几个关于电量的监控方案与规则：</p><ul><li><span class="exturl"><a class="exturl__link" href="https://developer.android.com/topic/performance/vitals/wakeup">Alarm Manager wakeup 唤醒过多</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link" href="https://developer.android.google.cn/topic/performance/vitals/wakelock">频繁使用局部唤醒锁</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link" href="https://developer.android.com/topic/performance/vitals/bg-network-usage">后台网络使用量过高</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link" href="https://developer.android.com/topic/performance/vitals/bg-wifi">后台 WiFi scans 过多</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul><p>在使用了一段时间之后，我发现它并不是那么好用。以 Alarm wakeup 为例，Vitals 以每小时超过 10 次作为规则。由于这个规则无法做修改，很多时候我们可能希望针对不同的系统版本做更加细致的区分。</p><p>其次跟 Battery Historian 一样，我们只能拿到 wakeup 的标记的组件，拿不到申请的堆栈，也拿不到当时手机是否在充电、剩余电量等信息。<br><img src="https://static001.geekbang.org/resource/image/33/1d/33aa19f951d577b759527c717c7d6e1d.png" alt="image"></p><p>对于网络、WiFi scans 以及 WakeLock 也是如此。虽然 Vitals 帮助我们缩小了排查的范围，但是依然需要在茫茫的代码中寻找对应的可疑代码。</p>        <h2 id="耗电监控都监控什么">          <a href="#耗电监控都监控什么" class="heading-link"><i class="fas fa-link"></i></a><a href="#耗电监控都监控什么" class="headerlink" title="耗电监控都监控什么"></a>耗电监控都监控什么</h2>      <p>Android Vitals并不是那么好用，而且对于国内的应用来说其实也根本无法使用。不管怎样，我们还是需要搭建自己的耗电监控系统。</p><p>那我们的耗电监控系统应该监控哪些内容，怎么样才能比 Android Vitals 做得更好呢？</p><ul><li><strong>监控信息</strong>。简单来说系统关心什么，我们就监控什么，而且应该以后台耗电监控为主。类似 Alarm wakeup、WakeLock、WiFi scans、Network 都是必须的，其他的可以根据应用的实际情况。如果是地图应用，后台获取 GPS 是被允许的；如果是计步器应用，后台获取 Sensor 也没有太大问题。</li><li><strong>现场信息</strong>。监控系统希望可以获得完整的堆栈信息，比如哪一行代码发起了 WiFi scans、哪一行代码申请了 WakeLock 等。还有当时手机是否在充电、手机的电量水平、应用前台和后台时间、CPU 状态等一些信息也可以帮助我们排查某些问题。</li><li><strong>提炼规则</strong>。最后我们需要将监控的内容抽象成规则，当然不同应用监控的事项或者参数都不太一样。 由于每个应用的具体情况都不太一样，下面是一些可以用来参考的简单规则。</li></ul><p><img src="https://static001.geekbang.org/resource/image/d4/be/d48b7e4d3fdceb101fa7716b5892b0be.png" alt="image"></p><p>在安卓绿色联盟的会议中，华为公开过他们后台资源使用的“红线”，你也可以参考里面的一些规则：<br><img src="https://static001.geekbang.org/resource/image/86/ff/86a65ea0d9216a11a341d7224fce93ff.png" alt="image"></p>        <h2 id="如何监控耗电">          <a href="#如何监控耗电" class="heading-link"><i class="fas fa-link"></i></a><a href="#如何监控耗电" class="headerlink" title="如何监控耗电"></a>如何监控耗电</h2>      <p>明确了我们需要监控什么以及具体的规则之后，就可以来到实现这个环节了。跟 I/O 监控、网络监控一样，我首先想到的还是 Hook 方案。</p>        <h3 id="Java-Hook">          <a href="#Java-Hook" class="heading-link"><i class="fas fa-link"></i></a><a href="#Java-Hook" class="headerlink" title="Java Hook"></a>Java Hook</h3>      <p>Hook 方案的好处在于使用者接入非常简单，不需要去修改自己的代码。下面我以几个比较常用的规则为例，看看如果使用 Java Hook 达到监控的目的。</p><ul><li><span class="exturl"><a class="exturl__link" href="https://developer.android.com/training/scheduling/wakelock">WakeLock</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。WakeLock 用来阻止 CPU、屏幕甚至是键盘的休眠。类似 Alarm、JobService 也会申请 WakeLock 来完成后台 CPU 操作。WakeLock 的核心控制代码都在<span class="exturl"><a class="exturl__link" href="http://androidxref.com/7.0.0_r1/xref/frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java">PowerManagerService</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>中，实现的方法非常简单。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 代理 PowerManagerService</span><span class="token class-name">ProxyHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">proxyHook</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getSystemService</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token constant">POWER_SERVICE</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"mService"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>；<span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeInvoke</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 申请 Wakelock</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"acquireWakeLock"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isAppBackground</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 应用后台逻辑，获取应用堆栈等等     </span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 应用前台逻辑，获取应用堆栈等等</span>         <span class="token punctuation">}</span>    <span class="token comment">// 释放 Wakelock</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"releaseWakeLock"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">// 释放的逻辑    </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><span class="exturl"><a class="exturl__link" href="https://developer.android.com/training/scheduling/alarms">Alarm</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。Alarm 用来做一些定时的重复任务，它一共有四个类型，其中<span class="exturl"><a class="exturl__link" href="https://developer.android.com/reference/android/app/AlarmManager.html#ELAPSED_REALTIME_WAKEUP">ELAPSED_REALTIME_WAKEUP</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>和<span class="exturl"><a class="exturl__link" href="https://developer.android.com/reference/android/app/AlarmManager.html#RTC_WAKEUP">RTC_WAKEUP</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>类型都会唤醒设备。同样，Alarm 的核心控制逻辑都在<span class="exturl"><a class="exturl__link" href="http://androidxref.com/7.0.0_r1/xref/frameworks/base/services/core/java/com/android/server/AlarmManagerService.java">AlarmManagerService</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>中，实现如下：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 代理 AlarmManagerService</span><span class="token keyword">new</span> <span class="token class-name">ProxyHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">proxyHook</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>getSystemService<span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token constant">ALARM_SERVICE</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"mService"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>；<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeInvoke</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 设置 Alarm</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"set"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 不同版本参数类型的适配，获取应用堆栈等等</span>    <span class="token comment">// 清除 Alarm</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"remove"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 清除的逻辑</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其他。对于后台 CPU，我们可以使用卡顿监控相关的方法。对于后台网络，同样我们可以通过网络监控相关的方法。对于 GPS 监控，我们可以通过 Hook 代理<span class="exturl"><a class="exturl__link" href="http://androidxref.com/7.0.0_r1/xref/frameworks/base/services/core/java/com/android/server/LocationManagerService.java">LOCATION_SERVICE</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。对于 Sensor，我们通过 Hook <span class="exturl"><a class="exturl__link" href="http://androidxref.com/7.0.0_r1/xref/frameworks/base/core/java/android/hardware/SystemSensorManager.java">SENSOR_SERVICE</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>中的“mSensorListeners”，可以拿到部分信息。</li><li><strong>通过 Hook，我们可以在申请资源的时候将堆栈信息保存起来。当我们触发某个规则上报问题的时候，可以将收集到的堆栈信息、电池是否充电、CPU 信息、应用前后台时间等辅助信息也一起带上。</strong></li></ul>        <h3 id="插桩">          <a href="#插桩" class="heading-link"><i class="fas fa-link"></i></a><a href="#插桩" class="headerlink" title="插桩"></a>插桩</h3>      <p>虽然使用 Hook 非常简单，但是某些规则可能不太容易找到合适的 Hook 点。而且在 Android P 之后，很多的 Hook 点都不支持了。</p><p>出于兼容性考虑，我首先想到的是写一个基础类，然后在统一的调用接口中增加监控逻辑。以 WakeLock 为例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WakelockMetrics</span> <span class="token punctuation">{</span>    <span class="token comment">// Wakelock 申请</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token class-name">PowerManager<span class="token punctuation">.</span>WakeLock</span> wakelock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        wakeLock<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 在这里增加 Wakelock 申请监控逻辑</span>    <span class="token punctuation">}</span>    <span class="token comment">// Wakelock 释放</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token class-name">PowerManager<span class="token punctuation">.</span>WakeLock</span> wakelock<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>        wakelock<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 在这里增加 Wakelock 释放监控逻辑</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Facebook 也有一个耗电监控的开源库Battery-Metrics，它监控的数据非常全，包括 Alarm、WakeLock、Camera、CPU、Network 等，而且也有收集电量充电状态、电量水平等信息。</p><p>Battery-Metrics 只是提供了一系列的基础类，在实际使用中，接入者可能需要修改大量的源码。但对于一些第三方 SDK 或者后续增加的代码，我们可能就不太能保证可以监控到了。这些场景也就无法监控了，所以 Facebook 内部是使用插桩来动态替换。</p><p>遗憾的是，Facebook 并没有开源它们内部的插桩具体实现方案。不过这实现起来其实并不困难，事实上在 <span class="exturl"><a class="exturl__link" href="https://github.com/AndroidAdvanceWithGeektime/Chapter19">Sample</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 中，已经使用过 ASM、Aspectj 这两种插桩方案了。</p><p>插桩方案使用起来兼容性非常好，并且使用者也没有太大的接入成本。但是它并不是完美无缺的，对于系统的代码插桩方案是无法替换的，例如 JobService 申请 PARTIAL_WAKE_LOCK 的场景。</p>        <h1 id="多线程并发优化">          <a href="#多线程并发优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#多线程并发优化" class="headerlink" title="多线程并发优化"></a>多线程并发优化</h1>      <p>在程序开发的实践当中，为了让程序表现得更加流畅，我们肯定会需要使用到多线程来提升程序的并发执行性能。但是编写多线程并发的代码一直以来都是一个相对棘手的问题，所以想要获得更佳的程序性能，非常有必要掌握多线程并发编程的基础技能。</p>        <h2 id="Thread-使用">          <a href="#Thread-使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#Thread-使用" class="headerlink" title="Thread 使用"></a>Thread 使用</h2>      <p>Thread使用需要注意的点：</p>        <h3 id="Thread-中断">          <a href="#Thread-中断" class="heading-link"><i class="fas fa-link"></i></a><a href="#Thread-中断" class="headerlink" title="Thread 中断"></a>Thread 中断</h3>      <p>常用的有两种方式：</p><p><strong>(1).通过抛出InterruptedException来中断线程</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">static</span>  <span class="token keyword">class</span>  <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">private</span>  <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count value:"</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"check interrupted show!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span> <span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"thread is stop!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>(2).通过变量来中断（常用）</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">static</span>  <span class="token keyword">class</span>  <span class="token class-name">CustomThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">private</span>  <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isCancel <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>isCancel<span class="token punctuation">)</span><span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count value:"</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        isCancel <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="同步">          <a href="#同步" class="heading-link"><i class="fas fa-link"></i></a><a href="#同步" class="headerlink" title="同步"></a>同步</h3>      <p>分变量同步和代码块同步两个方面来讲解</p><p><strong>(1).变量同步</strong></p><p>使用volatile关键字</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * 主内存和线程内存缓存进行同步 */</span><span class="token keyword">volatile</span> <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> val<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用synchronized关键字</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> val2 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">/** * 使用一个motinor来监听（实现资源由一个线程进行操作） * 主内存和线程内存缓存进行同步 * @return */</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">getVal2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> val2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">setVal2</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>val2 <span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用关键字AtomicXXXXX</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">AtomicInteger</span> mAtomicValue <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token constructor-invocation class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">setAtomicValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    mAtomicValue<span class="token punctuation">.</span><span class="token function">getAndSet</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">getAtomicValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> mAtomicValue<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>(2).代码块同步</strong></p><p>代码块同步分乐观锁和悲观锁来讲解</p><p>使用悲观锁时，其他线程等待，进入睡眠，频繁切换任务，消耗cpu资源</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用乐观锁时，失败重试，避免任务重复切换，减少cpu消耗</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">ReentrantLock <span class="token keyword">lock</span> <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token constructor-invocation class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">lock</span><span class="token punctuation">.</span><span class="token keyword">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token range operator">..</span><span class="token range operator">..</span><span class="token range operator">..</span><span class="token keyword">lock</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="Android-Threading">          <a href="#Android-Threading" class="heading-link"><i class="fas fa-link"></i></a><a href="#Android-Threading" class="headerlink" title="Android Threading"></a>Android Threading</h2>      <p>android中很多操作需要在主线程中执行，比如UI的操作，点击事件等等，但是如果主线程操作太多，占有的执行时间过长就会出现前面我们说的卡顿现象：</p><p><img src="https://upload-images.jianshu.io/upload_images/5748654-d4e4ae18dd8cd437.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/661/format/webp" style="" alt="img"></p><p>为了减轻主线程操作过多，避免出现卡顿的现象，我们把一些操作复杂的消耗时间长的任务放到线程池中去执行。下面我们就来介绍android中几种线程的类。</p>        <h3 id="AsyncTask">          <a href="#AsyncTask" class="heading-link"><i class="fas fa-link"></i></a><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h3>      <p>为UI线程与工作线程之间进行快速的切换提供一种简单便捷的机制。适用于当下立即需要启动，但是异步执行的生命周期短暂的使用场景。<br>它提供了一种简便的异步处理机制，但是它又同时引入了一些令人厌恶的麻烦。一旦对AsyncTask使用不当，很可能对程序的性能带来负面影响，同时还可能导致内存泄露。(关于内存泄漏在上面已经讲过)</p><p><strong>使用AsyncTask需要注意的问题?</strong></p><p>(1).在AsyncTask中所有的任务都是被线性调度执行的，他们处在同一个任务队列当中，按顺序逐个执行。一旦有任务执行时间过长，队列中其他任务就会阻塞。</p><p><img src="https://upload-images.jianshu.io/upload_images/5748654-713e085214020903.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/559/format/webp" style="" alt="img"></p><p>对于上面的问题，我们可以使用AsyncTask.executeOnExecutor()让AsyncTask变成并发调度。</p><p>(2).AsyncTask对正在执行的任务不具备取消的功能，所以我们要在任务代码中添加取消的逻辑（和上面Thread类似）</p><p>(3).AsyncTask使用不当会导致内存泄漏（可以参考内存泄漏一章）</p>        <h3 id="HandlerThread">          <a href="#HandlerThread" class="heading-link"><i class="fas fa-link"></i></a><a href="#HandlerThread" class="headerlink" title="HandlerThread"></a>HandlerThread</h3>      <p>为某些回调方法或者等待某些任务的执行设置一个专属的线程，并提供线程任务的调度机制。<br>先来了解下Looper，Handler，MessageQueue<br><strong>Looper:</strong> 能够确保线程持续存活并且可以不断的从任务队列中获取任务并进行执行。<br><strong>Handler:</strong> 能够帮助实现队列任务的管理，不仅仅能够把任务插入到队列的头部，尾部，还可以按照一定的时间延迟来确保任务从队列中能够来得及被取消掉。<br><strong>MessageQueue:</strong> 使用Intent，Message，Runnable作为任务的载体在不同的线程之间进行传递。<br> 把上面三个组件打包到一起进行协作，这就是HandlerThread</p><p><img src="https://upload-images.jianshu.io/upload_images/5748654-e88d1a439d37bf38.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/622/format/webp" style="" alt="img"></p><p>我们先来看下源码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HandlerThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">HandlerThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> priority<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        mPriority <span class="token operator">=</span> priority<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mTid <span class="token operator">=</span> <span class="token class-name">Process</span><span class="token punctuation">.</span><span class="token function">myTid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mLooper <span class="token operator">=</span> <span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Process</span><span class="token punctuation">.</span><span class="token function">setThreadPriority</span><span class="token punctuation">(</span>mPriority<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">onLooperPrepared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Looper</span> <span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// If the thread has been started, wait until the looper has been created.</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mLooper <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> mLooper<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的源码发现，HandlerThread其实就是在线程中维持一个消息循环队列。下面我们看下使用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HandlerThread</span> mHanderThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandlerThread</span><span class="token punctuation">(</span><span class="token string">"hanlderThreadTest"</span><span class="token punctuation">,</span> <span class="token class-name">Process</span><span class="token punctuation">.</span><span class="token constant">THREAD_PRIORITY_BACKGROUND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mHanderThread<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Looper</span> mHanderThreadLooper <span class="token operator">=</span> mHanderThread<span class="token punctuation">.</span><span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Handler</span> mHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span>mHanderThreadLooper<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//子线程中执行</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//发送消息</span>mHandler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="IntentService">          <a href="#IntentService" class="heading-link"><i class="fas fa-link"></i></a><a href="#IntentService" class="headerlink" title="IntentService"></a>IntentService</h3>      <p>适合于执行由UI触发的后台Service任务，并可以把后台任务执行的情况通过一定的机制反馈给UI。<br>默认的Service是执行在主线程的，可是通常情况下，这很容易影响到程序的绘制性能(抢占了主线程的资源)。除了前面介绍过的AsyncTask与HandlerThread，我们还可以选择使用IntentService来实现异步操作。IntentService继承自普通Service同时又在内部创建了一个HandlerThread，在onHandlerIntent()的回调里面处理扔到IntentService的任务。所以IntentService就不仅仅具备了异步线程的特性，还同时保留了Service不受主页面生命周期影响的特点。</p><p><img src="https://upload-images.jianshu.io/upload_images/5748654-b85e16cfc4e1ebf4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/744/format/webp" style="" alt="img"></p><p><strong>使用IntentService需要特别注意的点：</strong></p><p>(1).因为IntentService内置的是HandlerThread作为异步线程，所以每一个交给IntentService的任务都将以队列的方式逐个被执行到，一旦队列中有某个任务执行时间过长，那么就会导致后续的任务都会被延迟处理。</p><p>(2).通常使用到IntentService的时候，我们会结合使用BroadcastReceiver把工作线程的任务执行结果返回给主UI线程。使用广播容易引起性能问题，我们可以使用LocalBroadcastManager来发送只在程序内部传递的广播，从而提升广播的性能。我们也可以使用runOnUiThread()快速回调到主UI线程。</p><p>(3).包含正在运行的IntentService的程序相比起纯粹的后台程序更不容易被系统杀死，该程序的优先级是介于前台程序与纯后台程序之间的。</p>        <h3 id="Loader">          <a href="#Loader" class="heading-link"><i class="fas fa-link"></i></a><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h3>      <p>对于3.0后ContentProvider中的耗时操作，推荐使用Loader异步加载数据机制。相对其他加载机制，Loader有那些优点呢？</p><ul><li><p>提供异步加载数据机制</p></li><li><p>对数据源变化进行监听，实时更新数据</p></li><li><p>在Activity配置发生变化（如横竖屏切换）时不用重复加载数据</p></li><li><p>适用于任何Activity和Fragment</p></li></ul><p>下面我们来看下Loader的具体使用：<br> 我们以获得手机中所有的图片为例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">getLoaderManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initLoader</span><span class="token punctuation">(</span><span class="token constant">LOADER_TYPE</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> mLoaderCallback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LoaderManager<span class="token punctuation">.</span>LoaderCallbacks</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cursor</span><span class="token punctuation">&gt;</span></span> mLoaderCallback <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoaderManager<span class="token punctuation">.</span>LoaderCallbacks</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cursor</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">IMAGE_COLUMNS</span><span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span><span class="token constant">DATA</span><span class="token punctuation">,</span><span class="token comment">//图片路径</span>            <span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span><span class="token constant">DISPLAY_NAME</span><span class="token punctuation">,</span><span class="token comment">//显示的名字</span>            <span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span><span class="token constant">DATE_ADDED</span><span class="token punctuation">,</span><span class="token comment">//添加时间</span>            <span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span><span class="token constant">MIME_TYPE</span><span class="token punctuation">,</span><span class="token comment">//图片扩展类型</span>            <span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span><span class="token constant">SIZE</span><span class="token punctuation">,</span><span class="token comment">//图片大小</span>            <span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>_ID<span class="token punctuation">,</span><span class="token comment">//图片id</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Loader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cursor</span><span class="token punctuation">&gt;</span></span> <span class="token function">onCreateLoader</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">Bundle</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">toggleShowLoading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>common_loading<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CursorLoader</span> cursorLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CursorLoader</span><span class="token punctuation">(</span><span class="token class-name">ImageSelectActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span>                 <span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span><span class="token constant">EXTERNAL_CONTENT_URI</span><span class="token punctuation">,</span><span class="token constant">IMAGE_COLUMNS</span><span class="token punctuation">,</span>                <span class="token constant">IMAGE_COLUMNS</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" &gt; 0 AND "</span><span class="token operator">+</span><span class="token constant">IMAGE_COLUMNS</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" =? OR "</span> <span class="token operator">+</span><span class="token constant">IMAGE_COLUMNS</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" =? "</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"image/jpeg"</span><span class="token punctuation">,</span><span class="token string">"image/png"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token constant">IMAGE_COLUMNS</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" DESC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cursorLoader<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLoadFinished</span><span class="token punctuation">(</span><span class="token class-name">Loader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cursor</span><span class="token punctuation">&gt;</span></span> loader<span class="token punctuation">,</span> <span class="token class-name">Cursor</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> imageList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mShowCamera<span class="token punctuation">)</span><span class="token punctuation">{</span>                imageList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">moveToNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">String</span> path <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getColumnIndexOrThrow</span><span class="token punctuation">(</span><span class="token constant">IMAGE_COLUMNS</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                imageList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"ImageSelect"</span><span class="token punctuation">,</span> <span class="token string">"IIIIIIIIIIIIIIIIIIII=====&gt;"</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//显示数据</span>            <span class="token function">showListData</span><span class="token punctuation">(</span>imageList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">toggleShowLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>common_loading<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLoaderReset</span><span class="token punctuation">(</span><span class="token class-name">Loader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cursor</span><span class="token punctuation">&gt;</span></span> loader<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>onCreateLoader()  实例化并返回一个新创建给定ID的Loader对象<br>onLoadFinished() 当创建好的Loader完成了数据的load之后回调此方法<br>onLoaderReset() 当创建好的Loader被reset时调用此方法，这样保证它的数据无效<br>LoaderManager会对查询的操作进行缓存，只要对应Cursor上的数据源没有发生变化，在配置信息发生改变的时候(例如屏幕的旋转)，Loader可以直接把缓存的数据回调到onLoadFinished()，从而避免重新查询数据。另外系统会在Loader不再需要使用到的时候(例如使用Back按钮退出当前页面)回调onLoaderReset()方法，我们可以在这里做数据的清除等等操作。</p>        <h3 id="ThreadPool">          <a href="#ThreadPool" class="heading-link"><i class="fas fa-link"></i></a><a href="#ThreadPool" class="headerlink" title="ThreadPool"></a>ThreadPool</h3>      <p>把任务分解成不同的单元，分发到各个不同的线程上，进行同时并发处理。<br>线程池适合用在把任务进行分解，并发进行执行的场景。<br>系统提供ThreadPoolExecutor帮助类来帮助我们简化实现线程池。</p><p><img src="https://upload-images.jianshu.io/upload_images/5748654-91d21d03a19a7610.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/670/format/webp" style="" alt="img"></p><p>使用线程池需要特别注意同时并发线程数量的控制，理论上来说，我们可以设置任意你想要的并发数量，但是这样做非常的不好。因为CPU只能同时执行固定数量的线程数，一旦同时并发的线程数量超过CPU能够同时执行的阈值，CPU就需要花费精力来判断到底哪些线程的优先级比较高，需要在不同的线程之间进行调度切换。<br>一旦同时并发的线程数量达到一定的量级，这个时候CPU在不同线程之间进行调度的时间就可能过长，反而导致性能严重下降。另外需要关注的一点是，每开一个新的线程，都会耗费至少64K+的内存。为了能够方便的对线程数量进行控制，ThreadPoolExecutor为我们提供了初始化的并发线程数量，以及最大的并发数量进行设置。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/** * 核心线程数 * 最大线程数 * 保活时间 * 时间单位 * 任务队列 * 线程工厂 */</span>threadPoolExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>        CORE_POOL_SIZE<span class="token punctuation">,</span> MAXIMUM_POOL_SIZE<span class="token punctuation">,</span> KEEP_ALIVE_SECONDS<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>        linkedBlockingQueue<span class="token punctuation">,</span> sThreadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>threadPoolExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们知道系统还提供了Executors类中几种线程池，下面我们来看下这些线程池的缺点：</p><p>**newFixedThreadPool 和 newSingleThreadExecutor:**主要问题是堆积的请求处理队列可能会耗费非常大的内存，甚至 OOM。<br>**newCachedThreadPool 和 newScheduledThreadPool:**主要问题是线程数最大数是 Integer.MAX_VALUE，可能会创建数量非常多的线程，甚至 OOM</p><p>我们看到这些线程池但是有缺点的，所以具体使用那种方式实现要根据我们的需求来选择。</p><p>如果想要避开上面的问题，可以参考OKHttp中线程池的实现，OKHttp中队线程调度又封装了一层，使用安全且方便，有兴趣的可以去看看源码。</p>        <h2 id="线程优先级">          <a href="#线程优先级" class="heading-link"><i class="fas fa-link"></i></a><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h2>      <p>Android系统会根据当前运行的可见的程序和不可见的后台程序对线程进行归类，划分为forground的那部分线程会大致占用掉CPU的90%左右的时间片，background的那部分线程就总共只能分享到5%-10%左右的时间片。之所以设计成这样是因为forground的程序本身的优先级就更高，理应得到更多的执行时间。</p><p><img src="https://upload-images.jianshu.io/upload_images/5748654-fedda45234d2551d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/574/format/webp" style="" alt="img"></p><p>默认情况下，新创建的线程的优先级默认和创建它的母线程保持一致。如果主UI线程创建出了几十个工作线程，这些工作线程的优先级就默认和主线程保持一致了，为了不让新创建的工作线程和主线程抢占CPU资源，需要把这些线程的优先级进行降低处理，这样才能给帮组CPU识别主次，提高主线程所能得到的系统资源。</p><p>在Android系统里面，我们可以通过android.os.Process.setThreadPriority(int)设置线程的优先级，参数范围从-20到24，数值越小优先级越高。Android系统还为我们提供了以下的一些预设值，我们可以通过给不同的工作线程设置不同数值的优先级来达到更细粒度的控制。</p><p><img src="https://upload-images.jianshu.io/upload_images/5748654-1f22773258ff2ed1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/525/format/webp" style="" alt="img"></p><p>大多数情况下，新创建的线程优先级会被设置为默认的0，主线程设置为0的时候，新创建的线程还可以利用THREAD_PRIORITY_LESS_FAVORABLE或者THREAD_PRIORITY_MORE_FAVORABLE来控制线程的优先级。</p>        <h1 id="安装包优化">          <a href="#安装包优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装包优化" class="headerlink" title="安装包优化"></a>安装包优化</h1>      <p>安装包优化的主要方向就是APP瘦身，那么App瘦身带来哪些好处呢？<br> (1).下载时省流量<br> (2).用户好的体验，下载更快，安装更快</p>        <h2 id="常用的优化方式">          <a href="#常用的优化方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#常用的优化方式" class="headerlink" title="常用的优化方式"></a>常用的优化方式</h2>              <h3 id="清理无用资源">          <a href="#清理无用资源" class="heading-link"><i class="fas fa-link"></i></a><a href="#清理无用资源" class="headerlink" title="清理无用资源"></a>清理无用资源</h3>      <p>在我们应用版本的迭代中，肯定有废弃的代码和资源，我们要及时地清理，来减小App体积。</p><p>清理的方法：</p><p><strong>(1).使用Refactor-&gt;Remove unused Resource</strong></p><p>这个一键清除的小功能不是特别的又用，因为资源是经过反射或字符拼接等方式获取，所以检查不完全，需要我们不断的实验。</p><p><img src="https://upload-images.jianshu.io/upload_images/5748654-8e0439bf866e6a33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/408/format/webp" style="" alt="img"></p><p><strong>(2).使用Lint工具</strong></p><p>lint工具还是很有用的，它给我们需要优化的点</p><p>需要注意的点：</p><ul><li><p>检测没有用的布局并且删除</p></li><li><p>把未使用到的资源删除</p></li><li><p>建议String.xml有一些没有用到的字符也删除掉</p></li></ul><p><strong>(3).开启shrinkResources去除无用资源</strong></p><p>在build.gradle 里面配置shrinkResources true，在打包的时候会自动清除掉无用的资源，但经过实验发现打出的包并不会，而是会把部分无用资源用更小的东西代替掉。注意，这里的“无用”是指调用图片的所有父级函数最终是废弃代码，而shrinkResources true 只能去除没有任何父函数调用的情况.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">android <span class="token punctuation">{</span>    buildTypes <span class="token punctuation">{</span>        release <span class="token punctuation">{</span>            shrinkResources <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>(4).删除无用的语言资源</strong></p><p>大部分应用其实并不需要支持几十种语言的国际化支持。比如我们只是保存中文支持：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">android <span class="token punctuation">{</span>    defaultConfig <span class="token punctuation">{</span>        resConfigs <span class="token string">"zh"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>(5).清理第三方库中冗余代码</strong></p><p>对于第三方库，可能我们只是用到库中的一个功能，那么我们就可以导入源码，并且删除无关的代码，来减小体积。</p>        <h3 id="图片资源优化">          <a href="#图片资源优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#图片资源优化" class="headerlink" title="图片资源优化"></a>图片资源优化</h3>      <p>图片是占用空间比较大的资源，这是我们要重点优化的地方。</p><p><strong>(1).使用压缩过的图片</strong></p><p>这个点在这里就不再累赘。</p><p><strong>(2).只用一套图片</strong></p><p>对于绝大对数APP来说，只需要取一套设计图就足够了。从内存占用和适配的角度考虑，这一套图建议放在xhdpi文件夹下；</p><p><strong>(3).使用不带alpha值的jpg图片</strong></p><p>对于非透明的大图，jpg将会比png的大小有显著的优势，虽然不是绝对的，但是通常会减小到一半都不止。</p><p><strong>(4).使用tinypng有损压缩</strong></p><p>支持上传PNG图片到官网上压缩，然后下载保存，在保持alpha通道的情况下对PNG的压缩可以达到1/3之内，而且用肉眼基本上分辨不出压缩的损失.</p><p><strong>(5).使用webp格式</strong></p><p>webp支持透明度，压缩比比jpg更高但显示效果却不输于jpg,从Android 4.0+开始原生支持，但是不支持包含透明度，直到Android 4.2.1+才支持显示含透明度的webp，使用的时候要特别注意。</p><p><strong>(6).使用svg</strong></p><p>矢量图是由点与线组成,和位图不一样,它再放大也能保持清晰度，而且使用矢量图比位图设计方案能节约30～40%的空间，现在谷歌一直在强调扁平化方式，矢量图可很好的契合该设计理念。</p><ul><li><p>占用存储空间小</p></li><li><p>无极拉伸不会出现锯齿，可以照顾不同尺寸的机型</p></li><li><p>Android Studio自带很多资源</p></li></ul><p><strong>(7).使用shape</strong></p><p>特别是在扁平化盛行的当下，很多纯色的渐变的圆角的图片都可以用shape实现，代码灵活可控，省去了大量的背景图片。</p><p><strong>(8).使用着色方案</strong></p><p>相信你的工程里也有很多selector文件，也有很多相似的图片只是颜色不同，通过着色方案我们能大大减轻这样的工作量，减少这样的文件。</p><p><strong>(9).对打包后的图片进行压缩</strong></p><p>使用7zip压缩方式对图片进行压缩,建议使用微信的<span class="exturl"><a class="exturl__link" href="https://github.com/shwenzhang/AndResGuard">AndResGuard</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="资源动态加载">          <a href="#资源动态加载" class="heading-link"><i class="fas fa-link"></i></a><a href="#资源动态加载" class="headerlink" title="资源动态加载"></a>资源动态加载</h3>      <p>资源可以动态加载，减小apk体积。</p><p><strong>(1).在线化素材库</strong></p><p>如果你的APP支持素材库(比如聊天表情库)的话，考虑在线加载模式，因为往往素材库都有不小的体积</p><p><strong>(2).皮肤加载</strong></p><p>有的app用到皮肤库，这是就可以使用动态加载。</p><p><strong>(3).模块插件化</strong></p><p>如果模块过多，apk体积过大，可以考虑插件化，来减少体积。</p>        <h3 id="lib库优化">          <a href="#lib库优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#lib库优化" class="headerlink" title="lib库优化"></a>lib库优化</h3>      <p>只提供对主流架构的支持，比如arm，对于mips和x86架构可以考虑不支持，这样可以大大减小APK的体积.</p>        <h3 id="7zip压缩资源">          <a href="#7zip压缩资源" class="heading-link"><i class="fas fa-link"></i></a><a href="#7zip压缩资源" class="headerlink" title="7zip压缩资源"></a>7zip压缩资源</h3>      <p>对于assets或者raw文件夹中的资源，可以使用7zip压缩，使用时进行解压。</p>        <h3 id="代码混淆">          <a href="#代码混淆" class="heading-link"><i class="fas fa-link"></i></a><a href="#代码混淆" class="headerlink" title="代码混淆"></a>代码混淆</h3>      <p>在gradle使用minifyEnabled进行Proguard混淆的配置.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">android <span class="token punctuation">{</span>    buildTypes <span class="token punctuation">{</span>        release <span class="token punctuation">{</span>            minifyEnabled <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>为什么代码混淆可以让apk变小?</li></ul><ol><li>可以删除注释和不用的代码。</li><li>将java文件名改成短名</li><li>将方法名改成短名</li></ol>        <h3 id="资源-res-混淆">          <a href="#资源-res-混淆" class="heading-link"><i class="fas fa-link"></i></a><a href="#资源-res-混淆" class="headerlink" title="资源(res)混淆"></a>资源(res)混淆</h3>      <p>资源混淆简单来说希望实现将res/drawable/icon,png变成res/drawable/a.png,或我们甚至可以将文件路径也同时混淆，改成r/s/a.png。<br> 建议使用微信的<span class="exturl"><a class="exturl__link" href="https://github.com/shwenzhang/AndResGuard">AndResGuard</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="使用微信AndResGuard">          <a href="#使用微信AndResGuard" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用微信AndResGuard" class="headerlink" title="使用微信AndResGuard"></a>使用微信AndResGuard</h3>      <p>使用微信AndResGuard对资源混淆并且压缩图片res等资源</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">apply</span> plugin<span class="token punctuation">:</span> 'AndResGuard'buildscript <span class="token punctuation">{</span>    dependencies <span class="token punctuation">{</span>        classpath 'com<span class="token punctuation">.</span>tencent<span class="token punctuation">.</span>mm<span class="token punctuation">:</span>AndResGuard<span class="token operator">-</span>gradle<span class="token operator">-</span>plugin<span class="token punctuation">:</span><span class="token number">1.1</span><span class="token number">.7</span>'    <span class="token punctuation">}</span><span class="token punctuation">}</span>andResGuard <span class="token punctuation">{</span>    mappingFile <span class="token operator">=</span> <span class="token keyword">null</span>    use7zip <span class="token operator">=</span> <span class="token class-name">true</span>    useSign <span class="token operator">=</span> <span class="token class-name">true</span>    keepRoot <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token comment">// add &lt;your_application_id&gt;.R.drawable.icon into whitelist.</span>    <span class="token comment">// because the launcher will get thgge icon with his name</span>    <span class="token class-name">def</span> packageName <span class="token operator">=</span> <span class="token operator">&lt;</span>your_application_id<span class="token operator">&gt;</span>            whiteList <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment">//for your icon</span>    packageName <span class="token operator">+</span> <span class="token string">".R.drawable.icon"</span><span class="token punctuation">,</span>            <span class="token comment">//for fabric</span>            packageName <span class="token operator">+</span> <span class="token string">".R.string.com.crashlytics.*"</span><span class="token punctuation">,</span>            <span class="token comment">//for umeng update</span>            packageName <span class="token operator">+</span> <span class="token string">".R.string.umeng*"</span><span class="token punctuation">,</span>            packageName <span class="token operator">+</span> <span class="token string">".R.string.UM*"</span><span class="token punctuation">,</span>            packageName <span class="token operator">+</span> <span class="token string">".R.string.tb_*"</span><span class="token punctuation">,</span>            packageName <span class="token operator">+</span> <span class="token string">".R.layout.umeng*"</span><span class="token punctuation">,</span>            packageName <span class="token operator">+</span> <span class="token string">".R.layout.tb_*"</span><span class="token punctuation">,</span>            packageName <span class="token operator">+</span> <span class="token string">".R.drawable.umeng*"</span><span class="token punctuation">,</span>            packageName <span class="token operator">+</span> <span class="token string">".R.drawable.tb_*"</span><span class="token punctuation">,</span>            packageName <span class="token operator">+</span> <span class="token string">".R.anim.umeng*"</span><span class="token punctuation">,</span>            packageName <span class="token operator">+</span> <span class="token string">".R.color.umeng*"</span><span class="token punctuation">,</span>            packageName <span class="token operator">+</span> <span class="token string">".R.color.tb_*"</span><span class="token punctuation">,</span>            packageName <span class="token operator">+</span> <span class="token string">".R.style.*UM*"</span><span class="token punctuation">,</span>            packageName <span class="token operator">+</span> <span class="token string">".R.style.umeng*"</span><span class="token punctuation">,</span>            packageName <span class="token operator">+</span> <span class="token string">".R.id.umeng*"</span>    <span class="token punctuation">]</span>    compressFilePattern <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">"*.png"</span><span class="token punctuation">,</span>            <span class="token string">"*.jpg"</span><span class="token punctuation">,</span>            <span class="token string">"*.jpeg"</span><span class="token punctuation">,</span>            <span class="token string">"*.gif"</span><span class="token punctuation">,</span>            <span class="token string">"resources.arsc"</span>    <span class="token punctuation">]</span>    sevenzip <span class="token punctuation">{</span>        artifact <span class="token operator">=</span> 'com<span class="token punctuation">.</span>tencent<span class="token punctuation">.</span>mm<span class="token punctuation">:</span>SevenZip<span class="token punctuation">:</span><span class="token number">1.1</span><span class="token number">.7</span>'        <span class="token comment">//path = "/usr/local/bin/7za"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="Facebook的redex优化字节码">          <a href="#Facebook的redex优化字节码" class="heading-link"><i class="fas fa-link"></i></a><a href="#Facebook的redex优化字节码" class="headerlink" title="Facebook的redex优化字节码"></a>Facebook的redex优化字节码</h3>      <p>redex是facebook发布的一款android字节码的优化工具.<br> <span class="exturl"><a class="exturl__link" href="https://github.com/facebook/redex">redex</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>知识汇总</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux vim编辑指令</title>
    <link href="/2023/08/31/docs/cao-zuo-xi-tong/linux/vi-bian-ji/"/>
    <url>/2023/08/31/docs/cao-zuo-xi-tong/linux/vi-bian-ji/</url>
    
    <content type="html"><![CDATA[<p>i 进入编辑模式</p><p>按ESC键 退出编辑模式，然后：</p><p>:w 保存文件但不退出vi</p><p>:w file 将修改另外保存到file中，不退出vi</p><p>:w! 强制保存，不推出vi</p><p>:wq 保存文件并退出vi</p><p>:wq! 强制保存文件，并退出vi</p><p>q: 不保存文件，退出vi</p><p>:q! 不保存文件，强制退出vi</p><p>:e! 放弃所有修改，从上次保存文件开始再编辑</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux,vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu看不到图形界面解决办法</title>
    <link href="/2023/08/31/docs/cao-zuo-xi-tong/linux/ubuntu-kan-bu-dao-tu-xing-jie-mian-jie-jue-ban-fa/"/>
    <url>/2023/08/31/docs/cao-zuo-xi-tong/linux/ubuntu-kan-bu-dao-tu-xing-jie-mian-jie-jue-ban-fa/</url>
    
    <content type="html"><![CDATA[<h2 id="ubuntu-看不到图形界面桌面的解决办法"><a href="#ubuntu-看不到图形界面桌面的解决办法" class="headerlink" title="ubuntu 看不到图形界面桌面的解决办法"></a>ubuntu 看不到图形界面桌面的解决办法</h2><p>1、使用Ctrl + Alt + F1组合键进入字符命令行界面</p><p>2、试试 restartx</p><p>3、如果第2条解决不了，再试试 sudo service lightdm restart 重启 lightdm</p><p>4、如果第3条解决不了，再试试 sudo dpkg-reconfigre lightdm 选择 lightdm</p><p>5、如果第4条解决不了，就只能重装 unity 了</p><p>sudo apt-get update</p><p>sudo apt-get install –reinstall ubuntu-desktop</p><p>sudo apt-get install unity</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux samba共享文件</title>
    <link href="/2023/08/31/docs/cao-zuo-xi-tong/linux/samba-gong-xiang-wen-jian/"/>
    <url>/2023/08/31/docs/cao-zuo-xi-tong/linux/samba-gong-xiang-wen-jian/</url>
    
    <content type="html"><![CDATA[<h2 id="Samba共享文件"><a href="#Samba共享文件" class="headerlink" title="Samba共享文件"></a>Samba共享文件</h2><p><a href="https://blog.csdn.net/qq_37992321/article/details/90084534">Samba共享文件</a></p><p><a href="http://www.360doc.com/content/21/0127/16/496343_959226652.shtml">Windows上无法访问共享文件</a></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux bash执行命令相关问题</title>
    <link href="/2023/08/31/docs/cao-zuo-xi-tong/linux/bash-zhi-xing-ming-ling-xiang-guan-wen-ti/"/>
    <url>/2023/08/31/docs/cao-zuo-xi-tong/linux/bash-zhi-xing-ming-ling-xiang-guan-wen-ti/</url>
    
    <content type="html"><![CDATA[<h3 id="sh-执行问题"><a href="#sh-执行问题" class="headerlink" title="sh 执行问题"></a>sh 执行问题</h3><h4 id="bash-xxx-sh-bin-bash-M-bad-interpreter-No-such-file-or-directory"><a href="#bash-xxx-sh-bin-bash-M-bad-interpreter-No-such-file-or-directory" class="headerlink" title="bash: ./xxx.sh: /bin/bash^M: bad interpreter: No such file or directory"></a>bash: ./xxx.sh: /bin/bash^M: bad interpreter: No such file or directory</h4><p>解决方案：</p><ul><li><p>方法一</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim xxx.sh <br></code></pre></td></tr></tbody></table></figure><p>进入 xxx.sh后<br>在底部模式下执行</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:<span class="hljs-built_in">set</span> fileformat=unix<br></code></pre></td></tr></tbody></table></figure><p>后执行</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:x<br></code></pre></td></tr></tbody></table></figure><p>或者</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:wq<br></code></pre></td></tr></tbody></table></figure><p>保存修改<br>然后就可以执行./***.sh运行脚本了。</p></li><li><p>方法二：</p><p>直接执行 <code>sed -i "s/\r//" xxx.sh</code> 来转化， 然后就可以执行 <code>./***.sh</code> 运行脚本了。</p></li><li><p>方法三：</p><p>直接执行 <code>dos2unix xxx.sh</code> 来转化， 然后就可以执行 <code>./xxx.sh</code> 运行脚本了.</p><p>如执行报错<code>bash: dos2unix: command not found</code>，请使用<code>busybox dos2unix ***.sh</code>继续操作。</p></li></ul><h4 id="bash-XXX-No-such-file-or-directory-没有那个文件或目录"><a href="#bash-XXX-No-such-file-or-directory-没有那个文件或目录" class="headerlink" title="bash: ./XXX: No such file or directory/ 没有那个文件或目录"></a>bash: ./XXX: No such file or directory/ 没有那个文件或目录</h4><p>明明文件存在而且有权限执行，却提示这个问题，有可可能是在64-bit机器上上运行了32-bit软件<br>需要安装32位支持库</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install ia32-libs<br></code></pre></td></tr></tbody></table></figure><p>安装这个库可能会提示找不到，安装不了</p><figure class="highlight avrasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">没有可用的软件包 ia32-libs，但是它被其它的软件包引用了。<br>这可能意味着这个缺失的软件包可能已被废弃，<br>或者只能在其他发布源中找到<br>然而下列软件包会取代它：<br>  lib32z1<br><br><span class="hljs-symbol">E:</span> 软件包 ia32-libs 没有可安装候选<br></code></pre></td></tr></tbody></table></figure><p>根据错误提示安装下面这个这个库</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install lib32z1<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>卸载已安装的Qt</title>
    <link href="/2023/08/31/docs/cao-zuo-xi-tong/linux/xie-zai-yi-an-zhuang-de-qt/"/>
    <url>/2023/08/31/docs/cao-zuo-xi-tong/linux/xie-zai-yi-an-zhuang-de-qt/</url>
    
    <content type="html"><![CDATA[<h1 id="linux下卸载之前的qt4"><a href="#linux下卸载之前的qt4" class="headerlink" title="linux下卸载之前的qt4"></a>linux下卸载之前的qt4</h1><ul><li><p>打开终端，进入安装Qt的目录</p></li><li><p>运行命令 </p><p>  <code>./MaintenanceTool</code></p></li></ul><p>​​​​​​​</p><ul><li><p>如果没有这个的话，则执行：</p><p>  <code>sudo apt autoremove '.*qt4.*-dev'</code></p></li><li><p>还不行的话：</p><p>  <code>rm /usr/lib/x86_64-linux-gnu/libQt*</code></p></li></ul><h1 id="安装Qt5"><a href="#安装Qt5" class="headerlink" title="安装Qt5"></a>安装Qt5</h1><p>以安装qt5.9.9为例</p><ol><li><p>从以下网址中下载qt安装包</p><p> <a href="https://iso.mirrors.ustc.edu.cn/qtproject/archive/qt/5.12/5.12.12/qt-opensource-linux-x64-5.12.12.run">Qt5.12.12下载</a></p></li><li><p>打开终端，输入以下命令赋予安装包权限</p><p> <code>chmod -R 777 qtopensource-linux-x64-5.12.12.run</code></p></li><li><p>输入以下命令开始进行安装</p><p> <code>./qt-opensource-linux-x64-5.12.12.run</code></p></li><li><p>然后进入到安装页面，并且跟着提示一步一步走就好了（现在安装还要登录账户）</p></li><li><p>安装完成后不要马上打开qt软件，而是按照如下步骤配置环境变量</p><ul><li>在终端输入以下命令   <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span><br><span class="hljs-built_in">ls</span> -a <br>gedit ./bashrc<br></code></pre></td></tr></tbody></table></figure></li><li>然后在<code>.bashrc</code>文件中添加如下内容   <figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#其中下面第一行代码中的路劲是qt安装位置所对应的路径</span><br><span class="hljs-comment">#32位系统</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">QTDIR</span>=/opt/Qt5.12.12/5.12.12<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$QTDIR</span>/gcc/bin:$PATH<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">LD_LIBRARY_PATH</span>=<span class="hljs-variable">$QTDIR</span>/gcc/lib:$LD_LIBRARY_PATH<br><br><span class="hljs-comment">#64位</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">QTDIR</span>=/opt/Qt5.12.12/5.12.12<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$QTDIR</span>/gcc_64/bin:$PATH<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">LD_LIBRARY_PATH</span>=<span class="hljs-variable">$QTDIR</span>/gcc_64/lib:$LD_LIBRARY_PATH<br></code></pre></td></tr></tbody></table></figure></li><li>保存退出，执行以下命令让环境变量生效   <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p>输入以下命令，验证qt是否安装成功</p> <figure class="highlight applescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">qmake -<span class="hljs-built_in">version</span><br></code></pre></td></tr></tbody></table></figure><p> 如果出现qt信息则证明安装成功</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux安装Wine</title>
    <link href="/2023/08/31/docs/cao-zuo-xi-tong/linux/an-zhuang-wine/"/>
    <url>/2023/08/31/docs/cao-zuo-xi-tong/linux/an-zhuang-wine/</url>
    
    <content type="html"><![CDATA[<p>先得添加ubuntu-wine/ppa这个官方的源地址<br>指令是：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo add-apt-repository ppa:ubuntu-wine/ppa<br></code></pre></td></tr></tbody></table></figure><p>当然，你如果直接开始安装也是可以的，但是不能获取到最新的wine哦！建议以上的操作。</p><p>再更新安装包<br>安装包的更新指令是：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update<br>```  <br><br>安装wine1.8<br><br>```bash<br>sudo apt-get install wine1.8<br></code></pre></td></tr></tbody></table></figure><p>第一步，在终端中使用如下命令，添加软件仓库并自动刷新缓存：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -O- https://deepin-wine.i-m.dev/setup.sh | sh<br></code></pre></td></tr></tbody></table></figure><p>软件仓库添加完毕，会提示使用 apt 命令即可安装微信、QQ 了，与安装 Linux 原生软件一样</p><p>第二步，在终端中使用 apt 命令安装微信、QQ 等软件，以下以微信为例。安装其他软件只需使用相应的软件名称即可。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install com.qq.weixin.deepin<br></code></pre></td></tr></tbody></table></figure><p>安装后需要注销重登录才能显示应用图标。</p><p>常用应用的软件包名如下</p><table><thead><tr><th>应用</th><th>包名</th></tr></thead><tbody><tr><td>TIM</td><td>com.qq.office.deepin</td></tr><tr><td>QQ</td><td>com.qq.im.deepin</td></tr><tr><td>微信</td><td>com.qq.weixin.deepin</td></tr><tr><td>钉钉</td><td>com.dingtalk.deepin</td></tr></tbody></table><p>完整列表见 <a href="https://deepin-wine.i-m.dev/">https://deepin-wine.i-m.dev/</a></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows文件夹映射成硬盘</title>
    <link href="/2023/08/31/docs/cao-zuo-xi-tong/windows/windows-wen-jian-jia-ying-she-cheng-ying-pan/"/>
    <url>/2023/08/31/docs/cao-zuo-xi-tong/windows/windows-wen-jian-jia-ying-she-cheng-ying-pan/</url>
    
    <content type="html"><![CDATA[<h2 id="Windows文件夹映射成硬盘"><a href="#Windows文件夹映射成硬盘" class="headerlink" title="Windows文件夹映射成硬盘"></a>Windows文件夹映射成硬盘</h2><ul><li><p>方法一，使用命令</p><p>  映射<br>  将<code>D:\files</code>文件夹映射为<code>E:</code>盘</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">subst e: d:\files<br></code></pre></td></tr></tbody></table></figure><p>  取消映射</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">subst d: /d<br></code></pre></td></tr></tbody></table></figure><p>  虚拟盘符可以用h~z任意一个做盘符,不能用已有的盘符的名称,包括光驱盘符，否则会报错。</p><p>  注意：这种映射重启电脑后会失效</p></li><li><p>方法二，使用共享文件夹映射网络驱动器</p><p>  <a href="https://blog.csdn.net/bandaoyu/article/details/122746715">映射网络驱动器</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>win+R 运行命令</title>
    <link href="/2023/08/31/docs/cao-zuo-xi-tong/windows/win-r-yun-xing-ming-ling/"/>
    <url>/2023/08/31/docs/cao-zuo-xi-tong/windows/win-r-yun-xing-ming-ling/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p>        <h1 id="win-R-运行命令">          <a href="#win-R-运行命令" class="heading-link"><i class="fas fa-link"></i></a><a href="#win-R-运行命令" class="headerlink" title="win+R 运行命令"></a>win+R 运行命令</h1>              <h2 id="系统激活相关">          <a href="#系统激活相关" class="heading-link"><i class="fas fa-link"></i></a><a href="#系统激活相关" class="headerlink" title="系统激活相关"></a>系统激活相关</h2>              <h3 id="查询操作系统版本">          <a href="#查询操作系统版本" class="heading-link"><i class="fas fa-link"></i></a><a href="#查询操作系统版本" class="headerlink" title="查询操作系统版本"></a>查询操作系统版本</h3>      <pre class="line-numbers language-none"><code class="language-none">winver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h3 id="查询操作系统版本、部分产品密钥、许可证状态等">          <a href="#查询操作系统版本、部分产品密钥、许可证状态等" class="heading-link"><i class="fas fa-link"></i></a><a href="#查询操作系统版本、部分产品密钥、许可证状态等" class="headerlink" title="查询操作系统版本、部分产品密钥、许可证状态等"></a>查询操作系统版本、部分产品密钥、许可证状态等</h3>      <pre class="line-numbers language-none"><code class="language-none">slmgr.vbs -dli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h3 id="查询系统是试用激活码还是永久激活码">          <a href="#查询系统是试用激活码还是永久激活码" class="heading-link"><i class="fas fa-link"></i></a><a href="#查询系统是试用激活码还是永久激活码" class="headerlink" title="查询系统是试用激活码还是永久激活码"></a>查询系统是试用激活码还是永久激活码</h3>      <pre class="line-numbers language-none"><code class="language-none">slmgr.vbs -xpr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关闭Windows的下载目录的自动分组功能</title>
    <link href="/2023/08/31/docs/cao-zuo-xi-tong/windows/guan-bi-windows-de-xia-zai-mu-lu-de-zi-dong-fen-zu-gong-neng/"/>
    <url>/2023/08/31/docs/cao-zuo-xi-tong/windows/guan-bi-windows-de-xia-zai-mu-lu-de-zi-dong-fen-zu-gong-neng/</url>
    
    <content type="html"><![CDATA[<h2 id="关闭Windows的下载目录的自动分组功能">          <a href="#关闭Windows的下载目录的自动分组功能" class="heading-link"><i class="fas fa-link"></i></a><a href="#关闭Windows的下载目录的自动分组功能" class="headerlink" title="关闭Windows的下载目录的自动分组功能"></a>关闭Windows的下载目录的自动分组功能</h2>      <p>升级到 windows 11 后，下载目录总是会自动分组，手动关了之后，下次打开又会自动分组。这里通过修改注册表彻底关闭。</p><p>键盘快捷键(win+R)，打开运行输入regedit，注册表找到下面的内容：</p><pre class="line-numbers language-none"><code class="language-none">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderTypes\{885a186e-a440-4ada-812b-db871b942259}\TopViews\{00000000-0000-0000-0000-000000000000}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改右侧内容区域：</p><p><code>GroupBy</code>：从 <code>System.DateModified</code> 改为</p> <pre class="line-numbers language-none"><code class="language-none">System.Null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>SortByList</code>：从 <code>prop:System.DateModified</code> 改为 </p><pre class="line-numbers language-none"><code class="language-none">prop:System.ItemNameDisplay<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后重启电脑</p><p>方法来自：<span class="exturl"><a class="exturl__link" href="https://www.v2ex.com/t/629634">如何彻底禁用 win10 资源管理器的分组依据功能</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>如果修改提示 写入值的新内容时出错，右键 <code>{00000000-0000-0000-0000-000000000000}</code> 项，选择 <code>权限</code>，弹出窗口中点击 高级，然后弹出窗口的左上角的 所有者，点击 更改。弹出的 <code>选择用户或组</code> 窗口中点击 <code>高级</code> ，然后点击 <code>立即找查</code> ，在搜索结果的选项中选择 <code>Administrators</code> ，确定之后就可以正常修改了。</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微软商店跳过系统代理</title>
    <link href="/2023/08/31/docs/cao-zuo-xi-tong/windows/wei-ruan-shang-dian-tiao-guo-xi-tong-dai-li/"/>
    <url>/2023/08/31/docs/cao-zuo-xi-tong/windows/wei-ruan-shang-dian-tiao-guo-xi-tong-dai-li/</url>
    
    <content type="html"><![CDATA[<p>一打开系统代理就无法使用微软商店了，解决办法<br><a href="https://zhuanlan.zhihu.com/p/413730301">配置Microsoft Store等软件绕过V2ray全局代理</a></p><p>管理员权限打开终端，执行</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CheckNetIsolation.exe loopbackexempt -a -p=S-1-15-2-1609473798-1231923017-684268153-4268514328-882773646-2760585773-1760938157<br></code></pre></td></tr></tbody></table></figure><p>完成</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RecyclerView个性化设置</title>
    <link href="/2023/08/31/docs/android/view/recycleview/recyclerview-ge-xing-hua-she-zhi/"/>
    <url>/2023/08/31/docs/android/view/recycleview/recyclerview-ge-xing-hua-she-zhi/</url>
    
    <content type="html"><![CDATA[<h2 id="属性">          <a href="#属性" class="heading-link"><i class="fas fa-link"></i></a><a href="#属性" class="headerlink" title="属性"></a>属性</h2>              <h3 id="预览视图样式">          <a href="#预览视图样式" class="heading-link"><i class="fas fa-link"></i></a><a href="#预览视图样式" class="headerlink" title="预览视图样式"></a>预览视图样式</h3>      <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">tools:itemCount="13" //预览item数量tools:listitem="@layout/item_goal" //预览item视图tools:itemCount="5" //线性布局item数量tools:layoutManager="androidx.recyclerview.widget.GridLayoutManager" //预览布局管理器tools:spanCount="5" //网格布局列数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="滑动到底部时显示padding，滑动过程中不显示">          <a href="#滑动到底部时显示padding，滑动过程中不显示" class="heading-link"><i class="fas fa-link"></i></a><a href="#滑动到底部时显示padding，滑动过程中不显示" class="headerlink" title="滑动到底部时显示padding，滑动过程中不显示"></a>滑动到底部时显示padding，滑动过程中不显示</h3>      <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">android:clipToPadding="false"android:paddingBottom="60dp"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>        <h2 id="方法">          <a href="#方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#方法" class="headerlink" title="方法"></a>方法</h2>              <h3 id="加载item动画">          <a href="#加载item动画" class="heading-link"><i class="fas fa-link"></i></a><a href="#加载item动画" class="headerlink" title="加载item动画"></a>加载item动画</h3>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onBindViewHolder</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">InnerHolder</span> holder<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>    holder<span class="token punctuation">.</span>binding<span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAnimation</span><span class="token punctuation">(</span><span class="token class-name">AnimationUtils</span><span class="token punctuation">.</span><span class="token function">loadAnimation</span><span class="token punctuation">(</span>holder<span class="token punctuation">.</span>itemView<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span>anim<span class="token punctuation">.</span>scale<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="设置间距">          <a href="#设置间距" class="heading-link"><i class="fas fa-link"></i></a><a href="#设置间距" class="headerlink" title="设置间距"></a>设置间距</h3>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SpaceItemDecoration</span> dividerItemDecoration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpaceItemDecoration</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>binding<span class="token punctuation">.</span>recyclerView<span class="token punctuation">.</span><span class="token function">addItemDecoration</span><span class="token punctuation">(</span>dividerItemDecoration<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>        <h3 id="加载更多">          <a href="#加载更多" class="heading-link"><i class="fas fa-link"></i></a><a href="#加载更多" class="headerlink" title="加载更多"></a>加载更多</h3>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> isLoading<span class="token punctuation">;</span>binding<span class="token punctuation">.</span>recyclerView<span class="token punctuation">.</span><span class="token function">addOnScrollListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>OnScrollListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onScrolled</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">RecyclerView</span> recyclerView<span class="token punctuation">,</span> <span class="token keyword">int</span> dx<span class="token punctuation">,</span> <span class="token keyword">int</span> dy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dy <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span> slideToBottom <span class="token operator">=</span> <span class="token class-name">RecyclerViewUtils</span><span class="token punctuation">.</span><span class="token function">isSlideToBottom</span><span class="token punctuation">(</span>recyclerView<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>slideToBottom<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> nextPage <span class="token operator">=</span> viewModel<span class="token punctuation">.</span><span class="token function">getPagingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNextPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextPage <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isLoading<span class="token punctuation">)</span> <span class="token punctuation">{</span>                isLoading <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                binding<span class="token punctuation">.</span>progressBar<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span><span class="token class-name">View</span><span class="token punctuation">.</span><span class="token constant">VISIBLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                viewModel<span class="token punctuation">.</span><span class="token function">loadFoodList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="判断滑动状态-是否到底部">          <a href="#判断滑动状态-是否到底部" class="heading-link"><i class="fas fa-link"></i></a><a href="#判断滑动状态-是否到底部" class="headerlink" title="判断滑动状态 是否到底部"></a>判断滑动状态 是否到底部</h3>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isSlideToBottom</span><span class="token punctuation">(</span><span class="token class-name">RecyclerView</span> recyclerView<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>recyclerView <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> recyclerView<span class="token punctuation">.</span><span class="token function">computeVerticalScrollExtent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> recyclerView<span class="token punctuation">.</span><span class="token function">computeVerticalScrollOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span>            recyclerView<span class="token punctuation">.</span><span class="token function">computeVerticalScrollRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="流式布局">          <a href="#流式布局" class="heading-link"><i class="fas fa-link"></i></a><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h2>      <ol><li>引入google流式布局<br>google/flexbox-layout： Flexbox for Android (github.com)<pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">dependencies <span class="token punctuation">{</span>    implementation <span class="token string">'com.google.android.flexbox:flexbox:3.0.0'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>使用<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FlexboxLayoutManager</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlexboxLayoutManager</span><span class="token punctuation">(</span><span class="token function">requireContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>binding<span class="token punctuation">.</span>recyclerView<span class="token punctuation">.</span><span class="token function">setLayoutManager</span><span class="token punctuation">(</span>manager<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>View</category>
      
      <category>RecycleView</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Paging3相关</title>
    <link href="/2023/08/31/docs/android/view/recycleview/paging3-xiang-guan/"/>
    <url>/2023/08/31/docs/android/view/recycleview/paging3-xiang-guan/</url>
    
    <content type="html"><![CDATA[<h2 id="Paging局部修改数据"><a href="#Paging局部修改数据" class="headerlink" title="Paging局部修改数据"></a>Paging局部修改数据</h2><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//转成LiveData</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> _pagerData: MutableLiveData&lt;PagingData&lt;Item&gt;&gt; =<br>        repository.pagingData.cachedIn(viewModelScope).asLiveData().let {<br>            it <span class="hljs-keyword">as</span> MutableLiveData&lt;PagingData&lt;Item&gt;&gt;<br>        }<br><br><span class="hljs-keyword">val</span> pagerData: LiveData&lt;PagingData&lt;Item&gt;&gt; <span class="hljs-keyword">get</span>() = _pagerData<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">mod</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    old: <span class="hljs-type">Item</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    new: <span class="hljs-type">Item</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span> {<br>    _pagerData.value?.map {<br>        <span class="hljs-keyword">if</span> (it.id == old.id) {<br>            new<br>        } <span class="hljs-keyword">else</span> {<br>            it<br>        }<br>    }.also {<br>        _pagerData.value = it<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><a href="https://sourcediving.com/crud-operations-with-the-new-android-paging-v3-5bf55110aa4d">这里还有一个不修改数据源实现的示例</a></p><h1 id="getRefreshKey示例"><a href="#getRefreshKey示例" class="headerlink" title="getRefreshKey示例"></a>getRefreshKey示例</h1><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getRefreshKey</span><span class="hljs-params">(state: <span class="hljs-type">PagingState</span>&lt;<span class="hljs-type">Int</span>, Item&gt;)</span></span>: <span class="hljs-built_in">Int</span>? {<br>    <span class="hljs-keyword">return</span> state.anchorPosition?.let {<br>        state.closestPageToPosition(it)?.prevKey?.plus(<span class="hljs-number">1</span>)<br>            ?: state.closestPageToPosition(it)?.nextKey?.minus(<span class="hljs-number">1</span>)<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>View</category>
      
      <category>RecycleView</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RecycleView滑动删除</title>
    <link href="/2023/08/31/docs/android/view/recycleview/recycleview-hua-dong-shan-chu/"/>
    <url>/2023/08/31/docs/android/view/recycleview/recycleview-hua-dong-shan-chu/</url>
    
    <content type="html"><![CDATA[<h2 id="RecycleView实现滑动删除或拖动排序">          <a href="#RecycleView实现滑动删除或拖动排序" class="heading-link"><i class="fas fa-link"></i></a><a href="#RecycleView实现滑动删除或拖动排序" class="headerlink" title="RecycleView实现滑动删除或拖动排序"></a>RecycleView实现滑动删除或拖动排序</h2>      <pre class="line-numbers language-Kotlin" data-language="Kotlin"><code class="language-Kotlin">ItemTouchHelper(object : ItemTouchHelper.Callback() {    override fun getMovementFlags(        recyclerView: RecyclerView,        viewHolder: RecyclerView.ViewHolder    ): Int {        return (viewHolder as? MyAdapter.MyHolder)?.data?.let {            //dragFlags 拖拽的方式            //swipeFlags 滑动触发的方式            makeMovementFlags(0, ItemTouchHelper.LEFT or ItemTouchHelper.RIGHT)        } ?: makeMovementFlags(0, 0)    }    override fun onMove(        recyclerView: RecyclerView,        viewHolder: RecyclerView.ViewHolder,        target: RecyclerView.ViewHolder    ): Boolean = false    override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {        (viewHolder as? MyAdapter.MyHolder)?.data?.let {            //删除某一项的操作            //model.onViewEvent(ItemViewEvents.Remove(it.id))        }    }}).attachToRecyclerView(recyclerView)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><span class="exturl"><a class="exturl__link" href="https://github.com/BeauteousJade/SlideDeleteDemo">仿QQ侧滑删除示例</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>View</category>
      
      <category>RecycleView</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RecycleView多选功能示例，RecycleView-Selection</title>
    <link href="/2023/08/31/docs/android/view/recycleview/recycleview-selection/"/>
    <url>/2023/08/31/docs/android/view/recycleview/recycleview-selection/</url>
    
    <content type="html"><![CDATA[<figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AFragment</span> : <span class="hljs-type">Fragment</span>() {<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> tracker: SelectionTracker&lt;<span class="hljs-built_in">Long</span>&gt;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onViewCreated</span><span class="hljs-params">(view: <span class="hljs-type">View</span>, savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> {<br>        <span class="hljs-keyword">super</span>.onViewCreated(view, savedInstanceState)<br>        <span class="hljs-comment">//......</span><br>        adapter = MyAdapter()<br><br>        recyclerView.adapter = adapter<br>        recyclerView.setHasFixedSize(<span class="hljs-literal">true</span>)<br><br>        tracker = SelectionTracker.Builder&lt;<span class="hljs-built_in">Long</span>&gt;(<br>            <span class="hljs-string">"appt_unreviewed_selection"</span>,<br>            recyclerView,<br>            MyAdapter.KeyProvider(recyclerView),<br>            MyAdapter.DetailsLookup(recyclerView),<br>            StorageStrategy.createLongStorage()<br>        ).withSelectionPredicate(MyAdapter.SelectionPredicate(recyclerView)).build()<br>        adapter.setSelectionTracker(tracker)<br>        tracker.addObserver(<span class="hljs-keyword">object</span> : SelectionTracker.SelectionObserver&lt;<span class="hljs-built_in">Long</span>&gt;() {<br>            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onSelectionRefresh</span><span class="hljs-params">()</span></span> {<br>                <span class="hljs-keyword">super</span>.onSelectionRefresh()<br>                adapter.refreshSelection()<br>            }<br><br>            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onSelectionChanged</span><span class="hljs-params">()</span></span> {<br>                <span class="hljs-keyword">super</span>.onSelectionChanged()<br>                <span class="hljs-keyword">val</span> size = tracker.selection.size()<br>            }<br>        })<br>        <span class="hljs-comment">//......</span><br>    }<br><br>    <br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onViewStateRestored</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> {<br>        <span class="hljs-keyword">super</span>.onViewStateRestored(savedInstanceState)<br>        tracker.onRestoreInstanceState(savedInstanceState)<br>    }<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onSaveInstanceState</span><span class="hljs-params">(outState: <span class="hljs-type">Bundle</span>)</span></span> {<br>        <span class="hljs-keyword">super</span>.onSaveInstanceState(outState)<br>        tracker.onSaveInstanceState(outState)<br>    }<br>    <br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAdapter</span>(<br>        workerDispatcher: CoroutineDispatcher = Dispatchers.IO,<br>    ) : PagingDataAdapter&lt;Item, MyAdapter.MyHolder&gt;(<br>        diffCallback = COMPARATOR,<br>        workerDispatcher = workerDispatcher<br>    ) {<br>        <span class="hljs-comment">//......</span><br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onBindViewHolder</span><span class="hljs-params">(holder: <span class="hljs-type">VisitAppointHolder</span>, position: <span class="hljs-type">Int</span>)</span></span> {<br>            holder.bindView(position, getData(position), PAYLOAD_ALL)<br>        }<br><br>        <span class="hljs-keyword">internal</span> <span class="hljs-keyword">inner</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHolder</span>(<br>            itemView: View,<br>            <span class="hljs-keyword">val</span> binding: ItemBinding<br>        ) : RecyclerView.ViewHolder(itemView) {<br><br>            <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> details = ItemDetails()<br><br>            <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">bindView</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">                position: <span class="hljs-type">Int</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                <span class="hljs-keyword">data</span>: <span class="hljs-type">Item</span>?,</span></span><br><span class="hljs-params"><span class="hljs-function">                payload: <span class="hljs-type">Set</span>&lt;*&gt;</span></span><br><span class="hljs-params"><span class="hljs-function">            )</span></span> {<br>                <span class="hljs-comment">//val index = if (data == null) -position else position</span><br>                <span class="hljs-keyword">val</span> key = <span class="hljs-keyword">if</span> (<span class="hljs-keyword">data</span> == <span class="hljs-literal">null</span>) -position.toLong() <span class="hljs-keyword">else</span> position.toLong()<br>                details.setIndex(position)<br>                details.setKey(key)<br>                binding.tvNumber.tag = key<br>                <span class="hljs-comment">// .....</span><br>            }<br><br>        }<br><br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">ItemDetails</span> : <span class="hljs-type">ItemDetailsLookup.ItemDetails</span>&lt;<span class="hljs-type">Long</span>&gt;() {<br><br>            <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> mIndex: <span class="hljs-built_in">Int</span> = RecyclerView.NO_POSITION<br>            <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> mKey: <span class="hljs-built_in">Long</span> = -<span class="hljs-number">1</span><br><br>            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getPosition</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Int</span> {<br>                <span class="hljs-keyword">return</span> mIndex<br>            }<br><br>            <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setIndex</span><span class="hljs-params">(index: <span class="hljs-type">Int</span>)</span></span> {<br>                <span class="hljs-keyword">this</span>.mIndex = index<br>            }<br><br>            <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setKey</span><span class="hljs-params">(key: <span class="hljs-type">Long</span>)</span></span> {<br>                <span class="hljs-keyword">this</span>.mKey = key<br>            }<br><br>            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getSelectionKey</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Long</span> {<br>                <span class="hljs-keyword">return</span> mKey<br>            }<br><br>            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">inSelectionHotspot</span><span class="hljs-params">(e: <span class="hljs-type">MotionEvent</span>)</span></span>: <span class="hljs-built_in">Boolean</span> {<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>            }<br><br>            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">inDragRegion</span><span class="hljs-params">(e: <span class="hljs-type">MotionEvent</span>)</span></span>: <span class="hljs-built_in">Boolean</span> {<br>                <span class="hljs-keyword">return</span> mKey &gt;= <span class="hljs-number">0</span><br>            }<br>        }<br><br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">DetailsLookup</span>(<br>            <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> recyclerView: RecyclerView<br>        ) : ItemDetailsLookup&lt;<span class="hljs-built_in">Long</span>&gt;() {<br>            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getItemDetails</span><span class="hljs-params">(e: <span class="hljs-type">MotionEvent</span>)</span></span>: ItemDetails&lt;<span class="hljs-built_in">Long</span>&gt;? {<br>                <span class="hljs-keyword">val</span> view = recyclerView.findChildViewUnder(e.x, e.y)<br>                <span class="hljs-keyword">val</span> viewHolder = view?.let {<br>                    <span class="hljs-keyword">try</span> {<br>                        recyclerView.getChildViewHolder(it)<br>                    } <span class="hljs-keyword">catch</span> (e: Throwable) {<br>                        <span class="hljs-literal">null</span><br>                    }<br>                }<br>                <span class="hljs-keyword">if</span> (viewHolder <span class="hljs-keyword">is</span> MyAdapter.MyHolder) {<br>                    <span class="hljs-keyword">return</span> viewHolder.getItemDetails()<br>                }<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>            }<br>        }<br><br><br><br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">KeyProvider</span>(<br>            <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> recyclerView: RecyclerView<br>        ) : ItemKeyProvider&lt;<span class="hljs-built_in">Long</span>?&gt;(SCOPE_MAPPED) {<br><br>            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getKey</span><span class="hljs-params">(position: <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Long</span>? {<br>                <span class="hljs-keyword">if</span> (position &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>                <span class="hljs-keyword">val</span> viewHolder = recyclerView.findViewHolderForAdapterPosition(position)<br>                <span class="hljs-keyword">if</span> (viewHolder <span class="hljs-keyword">is</span> MyAdapter.MyHolder) {<br>                    <span class="hljs-keyword">return</span> viewHolder.getItemDetails().selectionKey<br>                }<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>            }<br><br>            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getPosition</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> key: <span class="hljs-type">Long</span>)</span></span>: <span class="hljs-built_in">Int</span> {<br>                <span class="hljs-keyword">return</span> abs(key).toInt()<br>            }<br><br>        }<br><br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">SelectionPredicate</span>(<br>            <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> recyclerView: RecyclerView<br>        ) : SelectionTracker.SelectionPredicate&lt;<span class="hljs-built_in">Long</span>&gt;() {<br>            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">canSetStateForKey</span><span class="hljs-params">(key: <span class="hljs-type">Long</span>, nextState: <span class="hljs-type">Boolean</span>)</span></span>: <span class="hljs-built_in">Boolean</span> {<br>                <span class="hljs-keyword">if</span> (!nextState) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>                <span class="hljs-keyword">return</span> key &gt;= <span class="hljs-number">0</span><br>            }<br><br>            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">canSetStateAtPosition</span><span class="hljs-params">(position: <span class="hljs-type">Int</span>, nextState: <span class="hljs-type">Boolean</span>)</span></span>: <span class="hljs-built_in">Boolean</span> {<br>                <span class="hljs-keyword">if</span> (!nextState) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>                <span class="hljs-keyword">if</span> (position &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>                <span class="hljs-keyword">val</span> viewHolder = recyclerView.findViewHolderForAdapterPosition(position)<br>                <span class="hljs-keyword">if</span> (viewHolder <span class="hljs-keyword">is</span> MyAdapter.MyHolder) {<br>                    <span class="hljs-keyword">return</span> canSetStateForKey(viewHolder.getItemDetails().selectionKey, nextState)<br>                }<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>            }<br><br>            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">canSelectMultiple</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Boolean</span> = <span class="hljs-literal">true</span><br><br>        }<br>    }<br><br>}<br><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>View</category>
      
      <category>RecycleView</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AnimeView</title>
    <link href="/2023/08/31/docs/android/view/customview/animeview/"/>
    <url>/2023/08/31/docs/android/view/customview/animeview/</url>
    
    <content type="html"><![CDATA[<figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AnimeView</span> <span class="hljs-meta">@JvmOverloads</span> <span class="hljs-keyword">constructor</span>(<br>    context: Context, attrs: AttributeSet? = <span class="hljs-literal">null</span>, defStyleAttr: <span class="hljs-built_in">Int</span> = <span class="hljs-number">0</span><br>) : View(context, attrs, defStyleAttr) {<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> backgroundPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {<br>        color = <span class="hljs-number">0x55FFFFFF</span><br>    }<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> topPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {<br>        color = <span class="hljs-number">0xAAFFFFFF</span>.toInt()<br>    }<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> topLineOffsetX = <span class="hljs-number">0f</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> topLineLength <span class="hljs-keyword">get</span>() = width / <span class="hljs-number">4f</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> animation = ValueAnimator.ofFloat(<span class="hljs-number">0f</span>, <span class="hljs-number">1f</span>).apply {<br>        duration = <span class="hljs-number">2000L</span><br>        repeatMode = ValueAnimator.REVERSE<br>        repeatCount = ValueAnimator.INFINITE<br>        addUpdateListener {<br>            <span class="hljs-keyword">val</span> value = it.animatedValue <span class="hljs-keyword">as</span> <span class="hljs-built_in">Float</span><br>            topLineOffsetX = (width * <span class="hljs-number">.75f</span>) * value<br>            postInvalidate()<br>        }<br>    }<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onAttachedToWindow</span><span class="hljs-params">()</span></span> {<br>        <span class="hljs-keyword">super</span>.onAttachedToWindow()<br>        animation.start()<br>    }<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onDetachedFromWindow</span><span class="hljs-params">()</span></span> {<br>        animation.cancel()<br>        <span class="hljs-keyword">super</span>.onDetachedFromWindow()<br>    }<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onDraw</span><span class="hljs-params">(canvas: <span class="hljs-type">Canvas</span>?)</span></span> {<br>        <span class="hljs-keyword">super</span>.onDraw(canvas)<br><br>        canvas?.let {<br>            it.drawRoundRect(<br>                <span class="hljs-number">0f</span>,<br>                <span class="hljs-number">0f</span>,<br>                width.toFloat(),<br>                height.toFloat(),<br>                height / <span class="hljs-number">2f</span>,<br>                height / <span class="hljs-number">2f</span>,<br>                backgroundPaint<br>            )<br>            it.drawRoundRect(<br>                topLineOffsetX,<br>                <span class="hljs-number">0f</span>,<br>                topLineOffsetX + topLineLength,<br>                height.toFloat(),<br>                height / <span class="hljs-number">2f</span>,<br>                height / <span class="hljs-number">2f</span>,<br>                topPaint<br>            )<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>View</category>
      
      <category>CustomView</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义RadioGroup</title>
    <link href="/2023/08/31/docs/android/view/customview/customradiogroup/"/>
    <url>/2023/08/31/docs/android/view/customview/customradiogroup/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.android.settings.util;<br><br><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.content.res.TypedArray;<br><span class="hljs-keyword">import</span> android.util.AttributeSet;<br><span class="hljs-keyword">import</span> android.util.Log;<br><span class="hljs-keyword">import</span> android.view.MotionEvent;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.view.ViewGroup;<br><span class="hljs-keyword">import</span> android.widget.RadioButton;<br><span class="hljs-keyword">import</span> android.widget.RadioGroup;<br><br><span class="hljs-keyword">import</span> com.android.internal.R;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomRadioGroup</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RadioGroup</span> {<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">"CustomRadioGroup"</span>;<br><br>    <span class="hljs-keyword">private</span> OnCheckedChangeListener mOnCheckedChangeListener;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">mCheckedId</span> <span class="hljs-operator">=</span> View.NO_ID;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">radioIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">private</span> List&lt;RadioButton&gt; radios = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomRadioGroup</span><span class="hljs-params">(Context context)</span> {<br>        <span class="hljs-built_in">super</span>(context);<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomRadioGroup</span><span class="hljs-params">(Context context, AttributeSet attrs)</span> {<br>        <span class="hljs-built_in">super</span>(context, attrs);<br><br>        <span class="hljs-type">TypedArray</span> <span class="hljs-variable">attributes</span> <span class="hljs-operator">=</span> context.obtainStyledAttributes(<br>                attrs, com.android.internal.R.styleable.RadioGroup, com.android.internal.R.attr.radioButtonStyle, <span class="hljs-number">0</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> attributes.getResourceId(R.styleable.RadioGroup_checkedButton, View.NO_ID);<br>        <span class="hljs-keyword">if</span> (value != View.NO_ID) {<br>            mCheckedId = value;<br>        }<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addView</span><span class="hljs-params">(<span class="hljs-keyword">final</span> View child, <span class="hljs-type">int</span> index, ViewGroup.LayoutParams params)</span> {<br>        findRadioButton(child);<br><br>        <span class="hljs-built_in">super</span>.addView(child, index, params);<br>    }<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findRadioButton</span><span class="hljs-params">(View view)</span> {<br>        <span class="hljs-keyword">if</span> (view <span class="hljs-keyword">instanceof</span> ViewGroup) {<br>            <span class="hljs-type">int</span> <span class="hljs-variable">childCount</span> <span class="hljs-operator">=</span> ((ViewGroup) view).getChildCount();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; childCount; i++) {<br>                <span class="hljs-type">View</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> ((ViewGroup) view).getChildAt(i);<br>                findRadioButton(child);<br>            }<br>        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (view <span class="hljs-keyword">instanceof</span> RadioButton) {<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">RadioButton</span> <span class="hljs-variable">button</span> <span class="hljs-operator">=</span> (RadioButton) view;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> radioIndex;<br>            radios.add(button);<br>            ((RadioButton) button).setOnTouchListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OnTouchListener</span>() {<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onTouch</span><span class="hljs-params">(View v, MotionEvent event)</span> {<br>                    <span class="hljs-keyword">if</span> (event.getAction() == MotionEvent.ACTION_UP) {<br>                        check(button.getId());<br>                        <span class="hljs-comment">// ((RadioButton) button).setChecked(true);</span><br>                        <span class="hljs-comment">// checkRadioButton((RadioButton) button);</span><br>                        <span class="hljs-keyword">if</span> (mOnCheckedChangeListener != <span class="hljs-literal">null</span>) {<br>                            mOnCheckedChangeListener.onCheckedChanged(CustomRadioGroup.<span class="hljs-built_in">this</span>, index);<br>                        }<br>                    }<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                }<br>            });<br>            radioIndex++;<br>        }<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> {<br>        <span class="hljs-keyword">if</span> (id != -<span class="hljs-number">1</span> &amp;&amp; (id == mCheckedId)) {<br>            <span class="hljs-keyword">return</span>;<br>        }<br><br>        <span class="hljs-keyword">if</span> (mCheckedId != -<span class="hljs-number">1</span>) {<br>            setCheckedStateForView(mCheckedId, <span class="hljs-literal">false</span>);<br>        }<br><br>        <span class="hljs-keyword">if</span> (id != -<span class="hljs-number">1</span>) {<br>            setCheckedStateForView(id, <span class="hljs-literal">true</span>);<br>        }<br><br>        mCheckedId = id;<br>    }<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCheckedStateForView</span><span class="hljs-params">(<span class="hljs-type">int</span> viewId, <span class="hljs-type">boolean</span> checked)</span> {<br>        <span class="hljs-type">View</span> <span class="hljs-variable">checkedView</span> <span class="hljs-operator">=</span> findViewById(viewId);<br>        Log.d(TAG, <span class="hljs-string">"checkedView is "</span> + checkedView);<br>        <span class="hljs-keyword">if</span> (checkedView != <span class="hljs-literal">null</span> &amp;&amp; checkedView <span class="hljs-keyword">instanceof</span> RadioButton) {<br>            ((RadioButton) checkedView).setChecked(checked);<br>        }<br>    }<br><br>    <span class="hljs-comment">// public void checkRadioButton(RadioButton radioButton) {</span><br>    <span class="hljs-comment">//     View child;</span><br>    <span class="hljs-comment">//     int radioCount = getChildCount();</span><br>    <span class="hljs-comment">//     for (int i = 0; i &lt; radioCount; i++) {</span><br>    <span class="hljs-comment">//         child = getChildAt(i);</span><br>    <span class="hljs-comment">//         if (child instanceof RadioButton) {</span><br>    <span class="hljs-comment">//             if (child == radioButton) {</span><br>    <span class="hljs-comment">//                 // do nothing</span><br>    <span class="hljs-comment">//             } else {</span><br>    <span class="hljs-comment">//                 ((RadioButton) child).setChecked(false);</span><br>    <span class="hljs-comment">//             }</span><br>    <span class="hljs-comment">//         } else if (child instanceof LinearLayout) {</span><br>    <span class="hljs-comment">//             int childCount = ((LinearLayout) child).getChildCount();</span><br>    <span class="hljs-comment">//             for (int j = 0; j &lt; childCount; j++) {</span><br>    <span class="hljs-comment">//                 View view = ((LinearLayout) child).getChildAt(j);</span><br>    <span class="hljs-comment">//                 if (view instanceof RadioButton) {</span><br>    <span class="hljs-comment">//                     final RadioButton button = (RadioButton) view;</span><br>    <span class="hljs-comment">//                     if (button == radioButton) {</span><br>    <span class="hljs-comment">//                         // do nothing</span><br>    <span class="hljs-comment">//                     } else {</span><br>    <span class="hljs-comment">//                         ((RadioButton) button).setChecked(false);</span><br>    <span class="hljs-comment">//                     }</span><br>    <span class="hljs-comment">//                 }</span><br>    <span class="hljs-comment">//             }</span><br>    <span class="hljs-comment">//         }</span><br>    <span class="hljs-comment">//     }</span><br>    <span class="hljs-comment">// }</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCheckedRadioPosition</span><span class="hljs-params">()</span> {<br>        <span class="hljs-type">int</span> <span class="hljs-variable">checkedPosition</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (radios.size() &gt; <span class="hljs-number">0</span>) {<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; radios.size(); i++) {<br>                <span class="hljs-keyword">if</span> (radios.get(i).isChecked()) {<br>                    checkedPosition = i;<br>                    <span class="hljs-keyword">break</span>;<br>                }<br>            }<br>        }<br><br>        <span class="hljs-keyword">return</span> checkedPosition;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOnCheckedChangeListener</span><span class="hljs-params">(OnCheckedChangeListener mOnCheckedChangeListener)</span> {<br>        <span class="hljs-built_in">this</span>.mOnCheckedChangeListener = mOnCheckedChangeListener;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCheckedId</span><span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> mCheckedId;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>View</category>
      
      <category>CustomView</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>垂直SeekBar,VerticalSeekBar</title>
    <link href="/2023/08/31/docs/android/view/customview/verticalseekbar/"/>
    <url>/2023/08/31/docs/android/view/customview/verticalseekbar/</url>
    
    <content type="html"><![CDATA[<figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><br><span class="hljs-keyword">import</span> android.<span class="hljs-keyword">annotation</span>.SuppressLint<br><span class="hljs-keyword">import</span> android.content.Context<br><span class="hljs-keyword">import</span> android.util.AttributeSet<br><span class="hljs-keyword">import</span> android.view.MotionEvent<br><span class="hljs-keyword">import</span> androidx.appcompat.widget.AppCompatSeekBar<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">VerticalSeekBar</span> : <span class="hljs-type">AppCompatSeekBar</span> {<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> mOnSeekBarChangeListener: OnSeekBarChangeListener? = <span class="hljs-literal">null</span><br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setOnSeekBarChangeListener</span><span class="hljs-params">(l: <span class="hljs-type">OnSeekBarChangeListener</span>)</span></span> {<br>        mOnSeekBarChangeListener = l<br>        <span class="hljs-keyword">super</span>.setOnSeekBarChangeListener(l)<br>    }<br><br>    <span class="hljs-meta">@SuppressLint(<span class="hljs-string">"ClickableViewAccessibility"</span>)</span><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onTouchEvent</span><span class="hljs-params">(event: <span class="hljs-type">MotionEvent</span>?)</span></span>: <span class="hljs-built_in">Boolean</span> {<br>        <span class="hljs-keyword">if</span> (!isEnabled) {<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        }<br>        parent.requestDisallowInterceptTouchEvent(<span class="hljs-literal">true</span>)<br>        <span class="hljs-keyword">when</span> (event!!.action) {<br>            MotionEvent.ACTION_DOWN -&gt; {<br>                mOnSeekBarChangeListener?.onStartTrackingTouch(<span class="hljs-keyword">this</span>)<br>                <span class="hljs-keyword">val</span> i = max - (max * event.y * <span class="hljs-number">1f</span> / height).toInt()<br>                progress = i<br>                <span class="hljs-keyword">if</span> (event.action == MotionEvent.ACTION_UP || event.action == MotionEvent.ACTION_CANCEL) {<br>                    parent.requestDisallowInterceptTouchEvent(<span class="hljs-literal">false</span>)<br>                    mOnSeekBarChangeListener?.onStopTrackingTouch(<span class="hljs-keyword">this</span>)<br>                }<br>            }<br>            MotionEvent.ACTION_MOVE, MotionEvent.ACTION_UP -&gt; {<br>                <span class="hljs-keyword">val</span> i = max - (max * event.y * <span class="hljs-number">1f</span> / height).toInt()<br>                progress = i<br>                <span class="hljs-keyword">if</span> (event.action == MotionEvent.ACTION_UP || event.action == MotionEvent.ACTION_CANCEL) {<br>                    parent.requestDisallowInterceptTouchEvent(<span class="hljs-literal">false</span>)<br>                    mOnSeekBarChangeListener?.onStopTrackingTouch(<span class="hljs-keyword">this</span>)<br>                }<br>            }<br>        }<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    }<br><br>    <span class="hljs-keyword">constructor</span>(ctx: Context) : <span class="hljs-keyword">super</span>(ctx)<br><br>    <span class="hljs-keyword">constructor</span>(ctx: Context, attrs: AttributeSet?) : <span class="hljs-keyword">this</span>(ctx, attrs, <span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">constructor</span>(ctx: Context, attrs: AttributeSet?, defStyleAttr: <span class="hljs-built_in">Int</span>) : <span class="hljs-keyword">super</span>(<br>        ctx,<br>        attrs,<br>        defStyleAttr<br>    )<br><br>    <span class="hljs-keyword">init</span> {<br>        thumb = <span class="hljs-literal">null</span><br>    }<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onDetachedFromWindow</span><span class="hljs-params">()</span></span> {<br>        <span class="hljs-keyword">super</span>.onDetachedFromWindow()<br>        mOnSeekBarChangeListener = <span class="hljs-literal">null</span><br>    }<br><br>}<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>View</category>
      
      <category>CustomView</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IP输入框控件</title>
    <link href="/2023/08/31/docs/android/view/customview/ipeditortext/"/>
    <url>/2023/08/31/docs/android/view/customview/ipeditortext/</url>
    
    <content type="html"><![CDATA[<p>IpEditorText.kt</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> android.content.Context<br><span class="hljs-keyword">import</span> android.content.res.ColorStateList<br><span class="hljs-keyword">import</span> android.graphics.Color<br><span class="hljs-keyword">import</span> android.text.Editable<br><span class="hljs-keyword">import</span> android.text.TextWatcher<br><span class="hljs-keyword">import</span> android.text.method.DigitsKeyListener<br><span class="hljs-keyword">import</span> android.util.AttributeSet<br><span class="hljs-keyword">import</span> android.util.SparseArray<br><span class="hljs-keyword">import</span> android.util.TypedValue<br><span class="hljs-keyword">import</span> android.view.Gravity<br><span class="hljs-keyword">import</span> android.view.KeyEvent<br><span class="hljs-keyword">import</span> android.view.inputmethod.EditorInfo<br><span class="hljs-keyword">import</span> android.widget.EditText<br><span class="hljs-keyword">import</span> android.widget.TextView<br><span class="hljs-keyword">import</span> androidx.appcompat.widget.AppCompatEditText<br><span class="hljs-keyword">import</span> androidx.appcompat.widget.AppCompatTextView<br><span class="hljs-keyword">import</span> androidx.appcompat.widget.LinearLayoutCompat<br><span class="hljs-keyword">import</span> com.google.android.material.shape.MaterialShapeDrawable<br><span class="hljs-keyword">import</span> com.google.android.material.shape.ShapeAppearanceModel<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IpEditorText</span>(context: Context, attrs: AttributeSet) : LinearLayoutCompat(context, attrs) {<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">data</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EditorView</span>(<br>        <span class="hljs-keyword">val</span> text: EditText,<br>        <span class="hljs-keyword">val</span> suffixTextView: TextView? = <span class="hljs-literal">null</span><br>    )<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> boxBackground: MaterialShapeDrawable<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> shapeAppearanceModel: ShapeAppearanceModel<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> editorViews: List&lt;EditorView&gt; = emptyList()<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> itemDisableIndex: Set&lt;<span class="hljs-built_in">Int</span>&gt; = emptySet()<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> itemWidth: <span class="hljs-built_in">Int</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> itemHeight: <span class="hljs-built_in">Int</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> textSize: <span class="hljs-built_in">Float</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> textColor: <span class="hljs-built_in">Int</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> textDisableColor: <span class="hljs-built_in">Int</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> mBackgroundColor: <span class="hljs-built_in">Int</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> boxStrokeColor: <span class="hljs-built_in">Int</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> boxStrokeWidth: <span class="hljs-built_in">Float</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> boxCornerRadius: <span class="hljs-built_in">Float</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> boxCornerRadiusTopStart: <span class="hljs-built_in">Float</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> boxCornerRadiusTopEnd: <span class="hljs-built_in">Float</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> boxCornerRadiusBottomStart: <span class="hljs-built_in">Float</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> boxCornerRadiusBottomEnd: <span class="hljs-built_in">Float</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> layoutStyle: <span class="hljs-built_in">Int</span> = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> ips: SparseArray&lt;String&gt; = SparseArray()<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> ipViewCount = <span class="hljs-number">4</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> suffix = <span class="hljs-string">"."</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> ipText: String? = <span class="hljs-literal">null</span><br><br>    <span class="hljs-keyword">init</span> {<br>        context.obtainStyledAttributes(<br>            attrs, R.styleable.IpEditorText<br>        ).also {<br>            suffix = it.getString(R.styleable.IpEditorText_splitText) ?: suffix<br>            ipViewCount = it.getInt(R.styleable.IpEditorText_itemCount, <span class="hljs-number">4</span>)<br>            ipViewCount = ipViewCount.coerceAtLeast(<span class="hljs-number">1</span>).coerceAtMost(<span class="hljs-number">4</span>)<br>            itemWidth = it.getDimensionPixelSize(R.styleable.IpEditorText_itemWidth, -<span class="hljs-number">1</span>)<br>            itemHeight = it.getDimensionPixelSize(R.styleable.IpEditorText_itemHeight, -<span class="hljs-number">1</span>)<br><br>            textSize = it.getDimension(<br>                R.styleable.IpEditorText_textSize,<br>                context.resources.getDimension(R.dimen.sp_22)<br>            )<br><br>            textColor = it.getColor(R.styleable.IpEditorText_textColor, Color.DKGRAY)<br>            textDisableColor =<br>                it.getColor(R.styleable.IpEditorText_textDisableColor, Color.LTGRAY)<br><br>            mBackgroundColor =<br>                it.getColor(R.styleable.IpEditorText_boxBackgroundColor, Color.TRANSPARENT)<br>            boxStrokeColor =<br>                it.getColor(R.styleable.IpEditorText_boxStrokeColor, Color.TRANSPARENT)<br>            boxStrokeWidth = it.getDimension(R.styleable.IpEditorText_boxStrokeWidth, <span class="hljs-number">0f</span>)<br><br>            boxCornerRadius = it.getDimension(R.styleable.IpEditorText_boxCornerRadius, <span class="hljs-number">0f</span>)<br>            boxCornerRadiusTopStart =<br>                it.getDimension(R.styleable.IpEditorText_boxCornerRadiusTopStart, -<span class="hljs-number">1f</span>)<br>            boxCornerRadiusTopEnd =<br>                it.getDimension(R.styleable.IpEditorText_boxCornerRadiusTopEnd, -<span class="hljs-number">1f</span>)<br>            boxCornerRadiusBottomStart =<br>                it.getDimension(R.styleable.IpEditorText_boxCornerRadiusBottomStart, -<span class="hljs-number">1f</span>)<br>            boxCornerRadiusBottomEnd =<br>                it.getDimension(R.styleable.IpEditorText_boxCornerRadiusBottomEnd, -<span class="hljs-number">1f</span>)<br><br>            layoutStyle = it.getInt(R.styleable.IpEditorText_layoutStyle, <span class="hljs-number">0</span>)<br>            ipText = it.getString(R.styleable.IpEditorText_ipText)<br>            itemDisableIndex = it.getString(<br>                R.styleable.IpEditorText_itemDisableIndex<br>            )?.split(<span class="hljs-string">","</span>)?.mapNotNull { s -&gt;<br>                s.toIntOrNull()<br>            }?.toSet().orEmpty()<br><br>            it.recycle()<br>        }<br>        initView()<br>    }<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">initView</span><span class="hljs-params">()</span></span> {<br>        createLayouts()<br>        updateLayoutsParams()<br>        updateBackground()<br>        updateIp()<br>    }<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">createLayouts</span><span class="hljs-params">()</span></span> {<br>        removeAllViews()<br>        editorViews = List(ipViewCount) { index -&gt;<br>            <span class="hljs-keyword">val</span> textView = AppCompatEditText(context).apply {<br>                layoutParams = LayoutParams(itemWidth, itemHeight, <span class="hljs-number">1f</span>).apply {<br>                    gravity = Gravity.CENTER<br>                    setPadding(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>                }<br>                setPadding(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>                gravity = Gravity.CENTER<br>                background = <span class="hljs-literal">null</span><br>                inputType = EditorInfo.TYPE_NUMBER_FLAG_DECIMAL<br>                isSingleLine = <span class="hljs-literal">true</span><br>                maxLines = <span class="hljs-number">3</span><br>                keyListener = DigitsKeyListener.getInstance(<span class="hljs-string">"0123456789"</span>)<br>                addListener(index)<br>            }.also(::addView)<br><br>            <span class="hljs-keyword">val</span> suffixTextView = <span class="hljs-keyword">if</span> (index &lt; ipViewCount - <span class="hljs-number">1</span>) {<br>                AppCompatTextView(context).apply {<br>                    layoutParams = LayoutParams(LayoutParams.WRAP_CONTENT, itemHeight).apply {<br>                        setPadding(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>                        gravity = Gravity.CENTER or Gravity.BOTTOM<br>                    }<br>                    gravity = Gravity.CENTER or Gravity.BOTTOM<br>                    setPadding(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>                    text = suffix<br>                }.also(::addView)<br>            } <span class="hljs-keyword">else</span> {<br>                <span class="hljs-literal">null</span><br>            }<br>            EditorView(textView, suffixTextView)<br>        }<br>    }<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">updateLayoutsParams</span><span class="hljs-params">()</span></span> {<br>        updateViewEnable()<br>        updateTextStyle()<br>    }<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">updateViewEnable</span><span class="hljs-params">()</span></span> {<br>        editorViews.forEachIndexed { i, editorView -&gt;<br>            editorView.text.isEnabled = !itemDisableIndex.contains(i)<br>        }<br>    }<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">updateTextStyle</span><span class="hljs-params">()</span></span> {<br>        editorViews.forEachIndexed { _, editorView -&gt;<br>            <span class="hljs-keyword">val</span> text = editorView.text<br>            <span class="hljs-keyword">val</span> suffixTextView = editorView.suffixTextView<br><br>            <span class="hljs-keyword">val</span> colorStateList = ColorStateList(<br>                arrayOf(<br>                    intArrayOf(android.R.attr.state_enabled),<br>                    intArrayOf(-android.R.attr.state_enabled),<br>                ),<br>                intArrayOf(textColor, textDisableColor)<br>            )<br>            suffixTextView?.setTextSize(TypedValue.COMPLEX_UNIT_PX, textSize)<br>            suffixTextView?.setTextColor(colorStateList)<br><br>            text.setTextSize(TypedValue.COMPLEX_UNIT_PX, textSize)<br>            text.setTextColor(colorStateList)<br>        }<br>    }<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">updateBackground</span><span class="hljs-params">()</span></span> {<br>        shapeAppearanceModel = ShapeAppearanceModel().toBuilder().apply {<br>            setAllCornerSizes(boxCornerRadius)<br>            boxCornerRadiusTopStart.takeIf { f -&gt; f &gt; <span class="hljs-number">0</span> }?.also(::setTopLeftCornerSize)<br>            boxCornerRadiusTopEnd.takeIf { f -&gt; f &gt; <span class="hljs-number">0</span> }?.also(::setTopRightCornerSize)<br>            boxCornerRadiusBottomStart.takeIf { f -&gt; f &gt; <span class="hljs-number">0</span> }?.also(::setBottomLeftCornerSize)<br>            boxCornerRadiusBottomEnd.takeIf { f -&gt; f &gt; <span class="hljs-number">0</span> }?.also(::setBottomRightCornerSize)<br>        }.build()<br><br>        boxBackground = MaterialShapeDrawable(shapeAppearanceModel).also { d -&gt;<br>            d.strokeWidth = boxStrokeWidth<br>            d.strokeColor = ColorStateList.valueOf(boxStrokeColor)<br>            d.fillColor = ColorStateList.valueOf(mBackgroundColor)<br>        }<br>        <span class="hljs-keyword">if</span> (layoutStyle == <span class="hljs-number">1</span>) {<br>            editorViews.forEach {<br>                it.text.background = boxBackground<br>            }<br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-keyword">this</span>.background = boxBackground<br>        }<br>    }<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> EditText.<span class="hljs-title">addListener</span><span class="hljs-params">(index: <span class="hljs-type">Int</span>)</span></span> {<br>        setOnKeyListener { _, keyCode, _ -&gt;<br>            <span class="hljs-keyword">if</span> (keyCode == KeyEvent.KEYCODE_DEL) {<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.text.isNullOrEmpty()) {<br>                    toPreEditor(index)<br>                }<br>            }<br>            <span class="hljs-keyword">return</span><span class="hljs-symbol">@setOnKeyListener</span> <span class="hljs-literal">false</span><br>        }<br>        addTextChangedListener(<span class="hljs-keyword">object</span> : TextWatcher {<br>            <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> ip: String = <span class="hljs-string">""</span><br><br>            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">beforeTextChanged</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">                s: <span class="hljs-type">CharSequence</span>?,</span></span><br><span class="hljs-params"><span class="hljs-function">                start: <span class="hljs-type">Int</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                count: <span class="hljs-type">Int</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                after: <span class="hljs-type">Int</span></span></span><br><span class="hljs-params"><span class="hljs-function">            )</span></span> {<br>            }<br><br>            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onTextChanged</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">                char: <span class="hljs-type">CharSequence</span>?,</span></span><br><span class="hljs-params"><span class="hljs-function">                start: <span class="hljs-type">Int</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                before: <span class="hljs-type">Int</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                count: <span class="hljs-type">Int</span></span></span><br><span class="hljs-params"><span class="hljs-function">            )</span></span> {<br>                <span class="hljs-keyword">if</span> (char.isNullOrEmpty()) {<br>                    ip = <span class="hljs-string">""</span><br>                    <span class="hljs-keyword">return</span><br>                }<br>                <span class="hljs-keyword">if</span> (char.length &gt; <span class="hljs-number">2</span>) {<br>                    <span class="hljs-keyword">val</span> s = char.toString().toIntOrNull() ?: <span class="hljs-built_in">Int</span>.MAX_VALUE<br>                    ip = <span class="hljs-keyword">if</span> (s &gt; <span class="hljs-number">255</span>) {<br>                        <span class="hljs-string">"255"</span><br>                    } <span class="hljs-keyword">else</span> {<br>                        <span class="hljs-string">"<span class="hljs-variable">$s</span>"</span><br>                    }<br>                    toNextEditor(index)<br>                } <span class="hljs-keyword">else</span> {<br>                    ip = char.toString()<br>                }<br>            }<br><br>            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">afterTextChanged</span><span class="hljs-params">(s: <span class="hljs-type">Editable</span>?)</span></span> {<br>                removeTextChangedListener(<span class="hljs-keyword">this</span>)<br>                ips[index] = ip<br>                setText(ip)<br>                setSelection(ip.length)<br>                addTextChangedListener(<span class="hljs-keyword">this</span>)<br>            }<br><br>        })<br>        <span class="hljs-keyword">val</span> next = toNextEditor(index)<br>        imeOptions = <span class="hljs-keyword">if</span> (next != <span class="hljs-literal">null</span>) {<br>            EditorInfo.IME_ACTION_NEXT or EditorInfo.IME_FLAG_NO_FULLSCREEN<br>        } <span class="hljs-keyword">else</span> {<br>            EditorInfo.IME_ACTION_DONE or EditorInfo.IME_FLAG_NO_FULLSCREEN<br>        }<br>    }<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">toPreEditor</span><span class="hljs-params">(index: <span class="hljs-type">Int</span>)</span></span>: EditText? {<br>        <span class="hljs-keyword">return</span> editorViews.getOrNull(index - <span class="hljs-number">1</span>)?.let { prev -&gt;<br>            <span class="hljs-keyword">val</span> editText = prev.text<br>            <span class="hljs-keyword">if</span> (editText.isEnabled) {<br>                editText.requestFocus()<br>                editText.setSelection(editText.text.length)<br>                editText<br>            } <span class="hljs-keyword">else</span> {<br>                toPreEditor(index - <span class="hljs-number">1</span>)<br>            }<br>        }<br>    }<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">toNextEditor</span><span class="hljs-params">(index: <span class="hljs-type">Int</span>)</span></span>: EditText? {<br>        <span class="hljs-keyword">return</span> editorViews.getOrNull(index + <span class="hljs-number">1</span>)?.let { next -&gt;<br>            <span class="hljs-keyword">val</span> editText = next.text<br>            <span class="hljs-keyword">if</span> (editText.isEnabled) {<br>                editText.requestFocus()<br>                editText.setSelection(editText.text.length)<br>                editText<br>            } <span class="hljs-keyword">else</span> {<br>                toNextEditor(index + <span class="hljs-number">1</span>)<br>            }<br>        }<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setItemCount</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-meta">@androidx</span>.<span class="hljs-keyword">annotation</span>.IntRange(from = <span class="hljs-number">1</span>, to = <span class="hljs-number">4</span>)</span></span><br>        count: <span class="hljs-built_in">Int</span><br>    ) {<br>        <span class="hljs-keyword">this</span>.ipViewCount = count.coerceAtLeast(<span class="hljs-number">1</span>).coerceAtMost(<span class="hljs-number">4</span>)<br>        initView()<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setDisableItems</span><span class="hljs-params">(<span class="hljs-keyword">vararg</span> index: <span class="hljs-type">Int</span>)</span></span> {<br>        <span class="hljs-keyword">this</span>.itemDisableIndex = index.toSet()<br>        updateViewEnable()<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setSuffix</span><span class="hljs-params">(suffix: <span class="hljs-type">String</span>)</span></span> {<br>        <span class="hljs-keyword">this</span>.ipText = <span class="hljs-keyword">this</span>.ipText?.replace(<span class="hljs-keyword">this</span>.suffix, suffix)<br>        <span class="hljs-keyword">this</span>.suffix = suffix<br>        editorViews.forEachIndexed { _, v -&gt;<br>            v.suffixTextView?.text = suffix<br>        }<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getIp</span><span class="hljs-params">()</span></span>: String {<br>        <span class="hljs-keyword">val</span> s = run {<br>            List(editorViews.size) { index -&gt;<br>                <span class="hljs-keyword">val</span> ip = ips.<span class="hljs-keyword">get</span>(index, <span class="hljs-string">""</span>)<br>                <span class="hljs-keyword">if</span> (ip.isNullOrEmpty()) {<br>                    <span class="hljs-keyword">return</span><span class="hljs-symbol">@run</span> <span class="hljs-string">""</span><br>                }<br>                ip<br>            }.joinToString(suffix)<br>        }<br>        <span class="hljs-keyword">this</span>.ipText = s<br>        <span class="hljs-keyword">return</span> s<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setIp</span><span class="hljs-params">(ip: <span class="hljs-type">String</span>?)</span></span> {<br>        <span class="hljs-keyword">this</span>.ipText = ip<br>        updateIp()<br>    }<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">updateIp</span><span class="hljs-params">()</span></span> {<br>        <span class="hljs-keyword">val</span> ip = ipText<br>        <span class="hljs-keyword">if</span> (ip.isNullOrEmpty()) {<br>            editorViews.forEach {<br>                it.text.text.clear()<br>            }<br>            <span class="hljs-keyword">return</span><br>        }<br>        <span class="hljs-keyword">val</span> temp = ip.split(suffix)<br>        <span class="hljs-keyword">if</span> (temp.isEmpty() || temp.size &lt; editorViews.size) {<br>            editorViews.forEach {<br>                it.text.text.clear()<br>            }<br>            <span class="hljs-keyword">return</span><br>        }<br>        editorViews.forEachIndexed { index, editorView -&gt;<br>            <span class="hljs-keyword">val</span> text = editorView.text<br>            <span class="hljs-keyword">val</span> s = temp[index].let {<br>                <span class="hljs-keyword">val</span> i = it.toIntOrNull() ?: <span class="hljs-number">0</span><br>                <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span>) {<br>                    <span class="hljs-string">"0"</span><br>                } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">255</span>) {<br>                    <span class="hljs-string">"255"</span><br>                } <span class="hljs-keyword">else</span> {<br>                    it<br>                }<br>            }<br>            ips[index] = s<br>            text.setText(s)<br>        }<br>    }<br><br>}<br></code></pre></td></tr></tbody></table></figure><p>attr-ip-editor-text.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"utf-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">declare-styleable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"IpEditorText"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"ipText"</span> <span class="hljs-attr">format</span>=<span class="hljs-string">"string"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"itemWidth"</span> <span class="hljs-attr">format</span>=<span class="hljs-string">"dimension"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"itemCount"</span> <span class="hljs-attr">format</span>=<span class="hljs-string">"integer"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"itemHeight"</span> <span class="hljs-attr">format</span>=<span class="hljs-string">"dimension"</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--  define which items is not editable, multi index split with "," , such as "0,1,2" --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"itemDisableIndex"</span> <span class="hljs-attr">format</span>=<span class="hljs-string">"string"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"textSize"</span> <span class="hljs-attr">format</span>=<span class="hljs-string">"dimension"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"splitText"</span> <span class="hljs-attr">format</span>=<span class="hljs-string">"string"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"textColor"</span> <span class="hljs-attr">format</span>=<span class="hljs-string">"color"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"textDisableColor"</span> <span class="hljs-attr">format</span>=<span class="hljs-string">"color"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"layoutStyle"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">enum</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"one_piece"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"0"</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">enum</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"separate"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">attr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"boxStrokeColor"</span> <span class="hljs-attr">format</span>=<span class="hljs-string">"color"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"boxStrokeWidth"</span> <span class="hljs-attr">format</span>=<span class="hljs-string">"dimension"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"boxBackgroundColor"</span> <span class="hljs-attr">format</span>=<span class="hljs-string">"color"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"boxCornerRadius"</span> <span class="hljs-attr">format</span>=<span class="hljs-string">"dimension"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"boxCornerRadiusTopStart"</span> <span class="hljs-attr">format</span>=<span class="hljs-string">"dimension"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"boxCornerRadiusTopEnd"</span> <span class="hljs-attr">format</span>=<span class="hljs-string">"dimension"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"boxCornerRadiusBottomStart"</span> <span class="hljs-attr">format</span>=<span class="hljs-string">"dimension"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"boxCornerRadiusBottomEnd"</span> <span class="hljs-attr">format</span>=<span class="hljs-string">"dimension"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">declare-styleable</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>View</category>
      
      <category>CustomView</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TextView限制输入内容</title>
    <link href="/2023/08/31/docs/android/view/textview-xian-zhi-shu-ru-nei-rong/"/>
    <url>/2023/08/31/docs/android/view/textview-xian-zhi-shu-ru-nei-rong/</url>
    
    <content type="html"><![CDATA[<h3 id="EditText限制只能输入汉字"><a href="#EditText限制只能输入汉字" class="headerlink" title="EditText限制只能输入汉字"></a>EditText限制只能输入汉字</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * EditText限制只能输入汉字</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> InputFilter <span class="hljs-title function_">getInputFilter</span><span class="hljs-params">()</span> {<br>    <span class="hljs-type">InputFilter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputFilter</span>() {<br>        <span class="hljs-keyword">public</span> CharSequence <span class="hljs-title function_">filter</span><span class="hljs-params">(CharSequence source, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end,</span><br><span class="hljs-params">                Spanned dest, <span class="hljs-type">int</span> dstart, <span class="hljs-type">int</span> dend)</span> {<br>            <span class="hljs-keyword">if</span> (TextUtils.isEmpty(source)){<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;<br>            }<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start; i &lt; end; i++) {<br>                <span class="hljs-keyword">if</span> (stringFilterChinese(source) &amp;&amp; !source.toString().contains(<span class="hljs-string">"。"</span>) &amp;&amp; !source.toString ().contains(<span class="hljs-string">"，"</span>)) {<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;<br>                } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (CHINESE_RADICAL_DIGISTS.contains(source)) {<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;<br>                }<br>            }<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        }<br>    };<br>    <span class="hljs-keyword">return</span> filter;<br>}<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 限制只能输入汉字，过滤非汉字</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> str 输入值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> true 非汉字；false 汉字</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">stringFilterChinese</span><span class="hljs-params">(CharSequence str)</span> {<br>     <span class="hljs-comment">//只允许汉字，正则表达式匹配出所有非汉字</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">regEx</span> <span class="hljs-operator">=</span> <span class="hljs-string">"[^\u4E00-\u9FA5]"</span>;<br>    <span class="hljs-type">Pattern</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> Pattern.compile(regEx);<br>    <span class="hljs-type">Matcher</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> p.matcher(str);<br>    <span class="hljs-keyword">if</span> (m.find()) {<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    }<br>}<br>mEdtAddDictation.setFilters(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputFilter</span>[]{getInputFilter()});<br><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>View</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TextView属性</title>
    <link href="/2023/08/31/docs/android/view/textview-shu-xing/"/>
    <url>/2023/08/31/docs/android/view/textview-shu-xing/</url>
    
    <content type="html"><![CDATA[<h2 id="TextView-跑马灯"><a href="#TextView-跑马灯" class="headerlink" title="TextView 跑马灯"></a>TextView 跑马灯</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/textView"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">"40sp"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:singleLine</span>=<span class="hljs-string">"true"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:ellipsize</span>=<span class="hljs-string">"marquee"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:focusableInTouchMode</span>=<span class="hljs-string">"true"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:focusable</span>=<span class="hljs-string">"true"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:clickable</span>=<span class="hljs-string">"true"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:marqueeRepeatLimit</span>=<span class="hljs-string">"marquee_forever"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:text</span>=<span class="hljs-string">"人民日报生活漫步：莫让千元打车费毁了专车"</span> /&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">focusableInTouchMode="true"<br>focusable="true"<br>clickable="true"<br>singleLine="true"<br>android:ellipsize="marquee"<br></code></pre></td></tr></tbody></table></figure><p>以上五个属性必须设置</p><p><code>marqueeReatLimit</code>属性是滚动重复次数，设置为<code>marquee_forever</code> 意思为一直都是滚动模式。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>View</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux安装Webmin</title>
    <link href="/2023/08/31/docs/cao-zuo-xi-tong/linux/linux-an-zhuang-webmin/"/>
    <url>/2023/08/31/docs/cao-zuo-xi-tong/linux/linux-an-zhuang-webmin/</url>
    
    <content type="html"><![CDATA[<p><a href="https://webmin.com/download">Webmin Download</a></p><h2 id="快速安装"><a href="#快速安装" class="headerlink" title="快速安装"></a>快速安装</h2><h3 id="添加仓库源"><a href="#添加仓库源" class="headerlink" title="添加仓库源"></a>添加仓库源</h3><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -o setup-repos.sh https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/webmin/</span>webmin<span class="hljs-regexp">/master/</span>setup-repos.sh<br>sh setup-repos.sh<br></code></pre></td></tr></tbody></table></figure><p>此脚本将自动设置<code>Webmin</code>的存储库并在系统上安装 GPG 密钥，并提供 <code>Webmin</code> 包以供将来安装和轻松升级。支持的系统是 Red Hat<br>Enterprise Linux，Alma，Rocky，Oracle，CentOS Stream，Fedora或Debian，Ubuntu，Kali。</p><h3 id="启用存储库后，使用以下命令安装Webmin："><a href="#启用存储库后，使用以下命令安装Webmin：" class="headerlink" title="启用存储库后，使用以下命令安装Webmin："></a>启用存储库后，使用以下命令安装Webmin：</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">sudo apt <span class="hljs-keyword">update</span><br>apt<span class="hljs-operator">-</span><span class="hljs-keyword">get</span> install webmin <span class="hljs-comment">--install-recommends</span><br></code></pre></td></tr></tbody></table></figure><h2 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h2><p>默认情况下，Webmin侦听所有网络接口上端口10000上的连接。如果系统开启了防火墙，则需要打开Webmin端口：</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> ufw <span class="hljs-literal">allow</span> <span class="hljs-number">10000</span>/tcp<br></code></pre></td></tr></tbody></table></figure><h2 id="访问Webmin界面"><a href="#访问Webmin界面" class="headerlink" title="访问Webmin界面"></a>访问Webmin界面</h2><p>Webmin安装完成后，启动浏览器，然后域名或P地址，然后带上Webmin端口10000：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">10000</span><br></code></pre></td></tr></tbody></table></figure><p>即可访问 Webmin</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux安装Webmin</title>
    <link href="/2023/08/31/docs/cao-zuo-xi-tong/linux/linux-xiu-gai-java-ban-ben/"/>
    <url>/2023/08/31/docs/cao-zuo-xi-tong/linux/linux-xiu-gai-java-ban-ben/</url>
    
    <content type="html"><![CDATA[<p>#添加镜像源<br>sudo gedit /etc/apt/sources.list<br>deb [by-hash=force] <a href="https://mirrors.aliyun.com/deepin">https://mirrors.aliyun.com/deepin</a> apricot main contrib non-free</p><p>#更新软件包列表<br>sudo apt update</p><p>#查看软件库中的jdk版本<br>apt search openjdk</p><p>#安装所需JDK版本<br>sudo apt install -y openjdk-8-jdk<br>sudo apt install -y openjdk-11-jdk</p><p>#查询或修改JDK版本<br>sudo update-alternatives –config java</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux,JDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
